
FishHunter.elf:     file format elf32-littlenios2
FishHunter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00019f34 memsz 0x00019f34 flags r-x
    LOAD off    0x0001af54 vaddr 0x10019f54 paddr 0x1001bd50 align 2**12
         filesz 0x00001dfc memsz 0x00001dfc flags rw-
    LOAD off    0x0001db4c vaddr 0x1001db4c paddr 0x1001db4c align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000190a8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c7c  100192d8  100192d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dfc  10019f54  1001bd50  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  1001db4c  1001db4c  0001db4c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001cd50  2**0
                  CONTENTS
  7 .sdram        00000000  1001dcd4  1001dcd4  0001cd50  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001cd50  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000012e0  00000000  00000000  0001cd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a6dc  00000000  00000000  0001e058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b538  00000000  00000000  00048734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ec37  00000000  00000000  00053c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000306c  00000000  00000000  000628a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004840  00000000  00000000  00065910  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c073  00000000  00000000  0006a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000861c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ed8  00000000  00000000  00086208  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008c1c6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008c1c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008c1d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008c1d6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008c1d7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008c1db  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008c1df  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008c1e3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008c1ee  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008c1f9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0008c204  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000023  00000000  00000000  0008c20c  2**0
                  CONTENTS, READONLY
 30 .jdi          000052b8  00000000  00000000  0008c22f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083e58  00000000  00000000  000914e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
100192d8 l    d  .rodata	00000000 .rodata
10019f54 l    d  .rwdata	00000000 .rwdata
1001db4c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001dcd4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FishHunter_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Draw.c
1001bcf8 l     O .rwdata	00000004 DRAW_PTR
1001bcfc l     O .rwdata	00000004 POWER_PTR
1000026c l     F .text	00000040 delay_loop
00000000 l    df *ABS*	00000000 GameLogic.c
1001bd00 l     O .rwdata	00000004 DRAW_PTR
1001bd04 l     O .rwdata	00000004 POWER_PTR
10001144 l     F .text	00000040 delay_loop
10019f54 l     O .rwdata	00000034 BW_FISH
10019f88 l     O .rwdata	00000034 P_FISH
10019fbc l     O .rwdata	00000034 Y_FISH
10019ff0 l     O .rwdata	00000034 FLAT_FISH
1001a024 l     O .rwdata	00000034 R_FISH
1001a058 l     O .rwdata	00000034 BLU_FISH
1001a08c l     O .rwdata	00000030 CANNON_BALL_PRO
1001a0bc l     O .rwdata	00000014 FISH_NET_PRO
00000000 l    df *ABS*	00000000 MainLogic.c
1001bd08 l     O .rwdata	00000004 DRAW_PTR
1001bd0c l     O .rwdata	00000004 POWER_PTR
10003454 l     F .text	00000040 delay_loop
1001a0d0 l     O .rwdata	00000034 BW_FISH
1001a104 l     O .rwdata	00000034 P_FISH
1001a138 l     O .rwdata	00000034 Y_FISH
1001a16c l     O .rwdata	00000034 FLAT_FISH
1001a1a0 l     O .rwdata	00000034 R_FISH
1001a1d4 l     O .rwdata	00000034 BLU_FISH
1001a208 l     O .rwdata	00000030 CANNON_BALL_PRO
1001a238 l     O .rwdata	00000014 FISH_NET_PRO
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
1001db54 l     O .bss	00000002 ctl_reg
1001db56 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
10019afc l     O .rodata	00000108 two_over_pi
10019a7c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
10019c44 l     O .rodata	00000010 init_jk
10019c04 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
1001a24c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
10019d9e l     O .rodata	00000010 zeroes.4404
1000e520 l     F .text	000000bc __sbprintf
10019dae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000e730 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10010288 l     F .text	00000008 __fp_unlock
1001029c l     F .text	0000019c __sinit.part.1
10010438 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
1001a690 l     O .rwdata	00000020 lc_ctype_charset
1001a670 l     O .rwdata	00000020 lc_message_charset
1001a6b0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10019ddc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10013968 l     F .text	000000fc __sprint_r.part.0
10019f00 l     O .rodata	00000010 zeroes.4349
10014fa4 l     F .text	000000bc __sbprintf
10019f10 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10016708 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001681c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10016848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
10016b30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10016c18 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10016d04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10016ee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001bd40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
100172f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100173dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10017518 l     F .text	00000034 alt_dev_reg
1001ac98 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10017808 l     F .text	0000020c altera_avalon_jtag_uart_irq
10017a14 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1001804c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100183e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10018844 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100189a4 l     F .text	0000003c alt_get_errno
100189e0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001dba8 g     O .bss	00000004 alt_instruction_exception_handler
10012fac g     F .text	00000074 _mprec_log10
10013098 g     F .text	0000008c __any_on
10015558 g     F .text	00000054 _isatty_r
10019de8 g     O .rodata	00000028 __mprec_tinytens
10016e1c g     F .text	0000007c alt_main
1000bfe8 g     F .text	000000c0 _puts_r
1001dbd4 g     O .bss	00000100 alt_irq
10007f08 g     F .text	00000014 fabs
100155ac g     F .text	00000060 _lseek_r
1001bd50 g       *ABS*	00000000 __flash_rwdata_start
1000a7ec g     F .text	00000088 .hidden __eqdf2
100110bc g     F .text	0000005c _gettimeofday_r
1001dcd4 g       *ABS*	00000000 __alt_heap_start
1000bfac g     F .text	0000003c printf
100157c4 g     F .text	0000009c _wcrtomb_r
1001db58 g     O .bss	00000002 usb_ctl_val
10013828 g     F .text	0000005c __sseek
100105e8 g     F .text	00000010 __sinit
1001db50 g     O .bss	00000004 keycode
1001566c g     F .text	00000140 __swbuf_r
10011118 g     F .text	0000007c _setlocale_r
10010440 g     F .text	00000078 __sfmoreglue
10016ebc g     F .text	00000024 __malloc_unlock
10005fb8 g     F .text	00000080 UsbGetRetryCnt
10011de8 g     F .text	0000015c memmove
10001de4 g     F .text	000002a0 isCaught
10003ee8 g     F .text	00000088 IO_init
100105d0 g     F .text	00000018 _cleanup
1001206c g     F .text	000000a8 _Balloc
10000e4c g     F .text	000000ac draw_SC
1000a874 g     F .text	000000dc .hidden __gtdf2
10018c28 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10017334 g     F .text	00000078 times
10000020 g       *ABS*	00000000 __flash_exceptions_start
100154fc g     F .text	0000005c _fstat_r
1001db64 g     O .bss	00000004 errno
10007f1c g     F .text	000001ec floor
100137a4 g     F .text	00000008 __seofread
1001db94 g     O .bss	00000004 alt_argv
10023cf8 g       *ABS*	00000000 _gp
100173ac g     F .text	00000030 usleep
10008f68 g     F .text	000004e4 .hidden __subsf3
10001304 g     F .text	000009e4 generateFish
1001ab18 g     O .rwdata	00000180 alt_fd_list
10006294 g     F .text	0000076c __ieee754_rem_pio2
10018c4c g     F .text	00000090 alt_find_dev
10011ca0 g     F .text	00000148 memcpy
1000c220 g     F .text	00000008 _times_r
10010290 g     F .text	0000000c _cleanup_r
1000bb38 g     F .text	000000dc .hidden __floatsidf
10018928 g     F .text	0000007c alt_io_redirect
1001db5a g     O .bss	00000001 data_size
1001656c g     F .text	000000f4 .hidden __ltdf2
100192d8 g       *ABS*	00000000 __DTOR_END__
1000c0a8 g     F .text	00000014 puts
10018ea8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10013688 g     F .text	00000074 __fpclassifyd
10012f08 g     F .text	000000a4 __ratio
10014f88 g     F .text	0000001c __vfiprintf_internal
10017c0c g     F .text	0000021c altera_avalon_jtag_uart_read
100033c0 g     F .text	00000094 setTimeout
1000bf7c g     F .text	00000030 _printf_r
10000928 g     F .text	000000c8 draw_CannonBall
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004048 g     F .text	00000b80 keyboard_init
100084c4 g     F .text	00000064 .hidden __udivsi3
10016b6c g     F .text	000000ac isatty
10003b48 g     F .text	0000011c updateScores
10019e38 g     O .rodata	000000c8 __mprec_tens
10011194 g     F .text	0000000c __locale_charset
10006a00 g     F .text	000004a4 __kernel_cos
10008a70 g     F .text	000000c8 .hidden __lesf2
100002ac g     F .text	00000090 init_background
1001db80 g     O .bss	00000008 alt_timezone
1001db7c g     O .bss	00000004 __malloc_top_pad
10005644 g     F .text	00000268 UsbGetConfigDesc2
1001bd18 g     O .rwdata	00000004 __mb_cur_max
100111c4 g     F .text	0000000c _localeconv_r
100124a0 g     F .text	0000003c __i2b
10010a6c g     F .text	000004c8 __sfvwrite_r
1001db5c g     O .bss	00000002 intStat
100136fc g     F .text	00000054 _sbrk_r
1001560c g     F .text	00000060 _read_r
1001bd38 g     O .rwdata	00000004 alt_max_fd
100151f0 g     F .text	000000f0 _fclose_r
10010258 g     F .text	00000030 fflush
1001db78 g     O .bss	00000004 __malloc_max_sbrked_mem
10007c3c g     F .text	000002cc __kernel_sin
1000bc14 g     F .text	00000110 .hidden __extendsfdf2
10009570 g     F .text	000008ac .hidden __adddf3
10012cb0 g     F .text	0000010c __b2d
10015fa8 g     F .text	000005c4 .hidden __umoddi3
10016d40 g     F .text	000000dc lseek
1001bd10 g     O .rwdata	00000004 _global_impure_ptr
10013124 g     F .text	00000564 _realloc_r
1001dcd4 g       *ABS*	00000000 __bss_end
10018754 g     F .text	000000f0 alt_iic_isr_register
10003494 g     F .text	000005dc playGame
1000033c g     F .text	000000a8 draw_background
10002924 g     F .text	000001b4 maxLength
100171f0 g     F .text	00000108 alt_tick
100159ac g     F .text	000005fc .hidden __udivdi3
10015458 g     F .text	00000024 _fputwc_r
10019e10 g     O .rodata	00000028 __mprec_bigtens
10012284 g     F .text	00000104 __s2b
10016660 g     F .text	000000a8 .hidden __floatunsidf
100129f0 g     F .text	00000060 __mcmp
10005094 g     F .text	00000100 UsbSetAddress
10010608 g     F .text	00000018 __fp_lock_all
10018708 g     F .text	0000004c alt_ic_irq_enabled
10017154 g     F .text	0000009c alt_alarm_stop
1001dba4 g     O .bss	00000004 alt_irq_active
100032c8 g     F .text	000000f8 showpower
100000fc g     F .exceptions	000000d4 alt_irq_handler
1001aaf0 g     O .rwdata	00000028 alt_dev_null
10006ea4 g     F .text	00000d98 __kernel_rem_pio2
100183c4 g     F .text	00000020 alt_dcache_flush_all
10012388 g     F .text	00000068 __hi0bits
10003fe0 g     F .text	00000068 IO_read
1000bab8 g     F .text	00000080 .hidden __fixdfsi
1001bd50 g       *ABS*	00000000 __ram_rwdata_end
10000aac g     F .text	000000b4 draw_Logo
1001bd30 g     O .rwdata	00000008 alt_dev_list
10017418 g     F .text	00000100 write
10019f54 g       *ABS*	00000000 __ram_rodata_end
10016884 g     F .text	000000b8 fstat
1001656c g     F .text	000000f4 .hidden __ledf2
10006038 g     F .text	00000080 UsbPrintMem
10012768 g     F .text	00000140 __pow5mult
10003c64 g     F .text	00000284 displayScores
10013a7c g     F .text	0000150c ___vfiprintf_internal_r
1001db70 g     O .bss	00000004 __nlocale_changed
10008528 g     F .text	00000058 .hidden __umodsi3
1001dcd4 g       *ABS*	00000000 end
10017748 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100192d8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100180c4 g     F .text	0000007c alt_avalon_timer_sc_init
1000becc g     F .text	00000064 .hidden __clzsi2
10017e28 g     F .text	00000224 altera_avalon_jtag_uart_write
100060b8 g     F .text	000000ec cos
100105f8 g     F .text	00000004 __sfp_lock_acquire
10011bbc g     F .text	000000e4 memchr
1000310c g     F .text	00000100 func1
1000c228 g     F .text	000022dc ___vfprintf_internal_r
100059ac g     F .text	00000100 UsbClassRequest
1001075c g     F .text	00000310 _free_r
100111a0 g     F .text	00000010 __locale_mb_cur_max
10019124 g     F .text	00000180 __call_exitprocs
1001db6c g     O .bss	00000004 __mlocale_changed
1001bd1c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001db9c g     O .bss	00000004 _alt_tick_rate
100061a4 g     F .text	000000f0 sin
1000c0d4 g     F .text	00000064 rand
100128a8 g     F .text	00000148 __lshift
1001dba0 g     O .bss	00000004 _alt_nticks
10016f1c g     F .text	00000104 read
10017584 g     F .text	00000060 alt_sys_init
1000944c g     F .text	00000124 .hidden __floatsisf
1001900c g     F .text	00000118 __register_exitproc
10002ad8 g     F .text	0000053c updateCannonBall
100124dc g     F .text	0000028c __multiply
10017ab4 g     F .text	00000068 altera_avalon_jtag_uart_close
10008580 g     F .text	00000028 .hidden __mulsi3
10019f54 g       *ABS*	00000000 __ram_rwdata_start
100192d8 g       *ABS*	00000000 __ram_rodata_start
1001dbac g     O .bss	00000028 __malloc_current_mallinfo
10012dbc g     F .text	0000014c __d2b
10005194 g     F .text	00000148 UsbGetDeviceDesc1
100175e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10018de4 g     F .text	000000c4 alt_get_fd
1001826c g     F .text	00000158 alt_busy_sleep
100150c0 g     F .text	00000054 _close_r
10018f90 g     F .text	0000007c memcmp
100176a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001dcd4 g       *ABS*	00000000 __alt_stack_base
100176f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000e5dc g     F .text	00000154 __swsetup_r
10001ce8 g     F .text	000000fc copyAnimals
10009e1c g     F .text	000009d0 .hidden __divdf3
100104b8 g     F .text	00000118 __sfp
10003a70 g     F .text	000000d8 displayMenu
10013020 g     F .text	00000078 __copybits
1001a6e8 g     O .rwdata	00000408 __malloc_av_
10010604 g     F .text	00000004 __sinit_lock_release
1000a950 g     F .text	0000086c .hidden __muldf3
10013750 g     F .text	00000054 __sread
10005f34 g     F .text	00000084 UsbWaitTDListDone
10018cdc g     F .text	00000108 alt_find_file
100003e4 g     F .text	000000bc draw_animal
10018420 g     F .text	000000a4 alt_dev_llist_insert
10016e98 g     F .text	00000024 __malloc_lock
100170a4 g     F .text	000000b0 sbrk
100101fc g     F .text	0000005c _fflush_r
10003014 g     F .text	000000f8 updateFishNet
10015114 g     F .text	000000dc _calloc_r
1001db5e g     O .bss	00000001 hot_plug_count
1001693c g     F .text	000001f4 gettimeofday
10000ef8 g     F .text	0000014c draw_Score_Ingame
1001db4c g       *ABS*	00000000 __bss_start
10011f44 g     F .text	00000128 memset
10004e9c g     F .text	000000a8 main
10003264 g     F .text	00000064 keyPress
100004a0 g     F .text	00000160 draw_backgrounds
1001db98 g     O .bss	00000004 alt_envp
1001db74 g     O .bss	00000004 __malloc_max_total_mem
10017644 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100058ac g     F .text	00000100 UsbSetConfig
100157ac g     F .text	00000018 __swbuf
1000c0bc g     F .text	00000018 srand
10008a70 g     F .text	000000c8 .hidden __ltsf2
1000320c g     F .text	00000058 func2
10013884 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100152e0 g     F .text	00000014 fclose
1000bd24 g     F .text	000001a8 .hidden __truncdfsf2
1000e958 g     F .text	00001688 _dtoa_r
100113b0 g     F .text	0000080c _malloc_r
10015920 g     F .text	00000030 __ascii_wctomb
1000c1d0 g     F .text	00000050 time
1001bd3c g     O .rwdata	00000004 alt_errno
10010f34 g     F .text	000000c4 _fwalk
100083cc g     F .text	00000084 .hidden __divsi3
10010638 g     F .text	00000124 _malloc_trim_r
10005aac g     F .text	00000148 UsbGetHidDesc
100192d8 g       *ABS*	00000000 __CTOR_END__
10008b38 g     F .text	00000430 .hidden __mulsf3
1001388c g     F .text	000000dc strcmp
100192d8 g       *ABS*	00000000 __flash_rodata_start
100192d8 g       *ABS*	00000000 __DTOR_LIST__
100082a4 g     F .text	0000001c copysign
10000ca8 g     F .text	000000f0 draw_Arrow
1000a7ec g     F .text	00000088 .hidden __nedf2
10004f9c g     F .text	00000044 UsbRead
1001754c g     F .text	00000038 alt_irq_init
10017020 g     F .text	00000084 alt_release_fd
10019c54 g     O .rodata	00000100 .hidden __clz_tab
1001db68 g     O .bss	00000004 _PathLocale
10018f44 g     F .text	00000014 atexit
10015060 g     F .text	00000060 _write_r
100111d0 g     F .text	00000018 setlocale
1001bd14 g     O .rwdata	00000004 _impure_ptr
1001db90 g     O .bss	00000004 alt_argc
1000ffe0 g     F .text	0000021c __sflush_r
10008108 g     F .text	0000019c scalbn
10018524 g     F .text	00000060 _do_dtors
100111bc g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
100009f0 g     F .text	000000bc draw_FishNet
10012c4c g     F .text	00000064 __ulp
10010620 g     F .text	00000018 __fp_unlock_all
1001db4e g     O .bss	00000001 toggle
10002084 g     F .text	000007d0 updateFish
1001bd28 g     O .rwdata	00000008 alt_fs_list
10000b60 g     F .text	00000148 draw_Options
10000d98 g     F .text	000000b4 draw_Num
1001db88 g     O .bss	00000008 alt_resettime
10005bf4 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100111e8 g     F .text	0000000c localeconv
100185a4 g     F .text	00000050 alt_ic_isr_register
1001bd50 g       *ABS*	00000000 _edata
1001dcd4 g       *ABS*	00000000 _end
10001044 g     F .text	00000100 draw_Time_Ingame
10004f44 g     F .text	00000058 UsbWrite
100152f4 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10017b1c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1001db60 g     O .bss	00000002 code
1001867c g     F .text	0000008c alt_ic_irq_disable
100137ac g     F .text	0000007c __swrite
1001bd20 g     O .rwdata	00000004 __malloc_trim_threshold
100111b0 g     F .text	0000000c __locale_msgcharset
1001db4c g     O .bss	00000002 fs_device
10018f58 g     F .text	00000038 exit
10000804 g     F .text	00000124 draw_cannon
10010ff8 g     F .text	000000c4 _fwalk_reent
10012a50 g     F .text	000001fc __mdiff
10008450 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100105fc g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10003f70 g     F .text	00000070 IO_write
10001184 g     F .text	00000180 randomNumbers
100192a4 g     F .text	00000034 _exit
10018140 g     F .text	0000012c alt_alarm_start
100082c0 g     F .text	0000010c .hidden __muldi3
100111f4 g     F .text	000001bc __smakebuf_r
1000c138 g     F .text	00000098 strlen
10018acc g     F .text	0000015c open
1000a874 g     F .text	000000dc .hidden __gedf2
1000bf30 g     F .text	0000004c clock
1001bd24 g     O .rwdata	00000004 __wctomb
10013a64 g     F .text	00000018 __sprint_r
10018584 g     F .text	00000020 alt_icache_flush_all
10004bc8 g     F .text	000002d4 get_key
1001bd4c g     O .rwdata	00000004 alt_priority_mask
100185f4 g     F .text	00000088 alt_ic_irq_enable
1000e504 g     F .text	0000001c __vfprintf_internal
10015950 g     F .text	0000005c _wctomb_r
1000b1bc g     F .text	000008fc .hidden __subdf3
10000600 g     F .text	00000204 draw_frame
100123f0 g     F .text	000000b0 __lo0bits
100054b4 g     F .text	00000190 UsbGetConfigDesc1
1001bd44 g     O .rwdata	00000008 alt_alarm_list
100184c4 g     F .text	00000060 _do_ctors
10004fe0 g     F .text	000000b4 UsbSoftReset
10015860 g     F .text	000000c0 wcrtomb
10016744 g     F .text	000000d8 close
100085a8 g     F .text	000004c8 .hidden __addsf3
100052dc g     F .text	000001d8 UsbGetDeviceDesc2
10016c80 g     F .text	00000084 alt_load
1001547c g     F .text	00000080 fputwc
10010600 g     F .text	00000004 __sinit_lock_acquire
1001213c g     F .text	00000148 __multadd
10012114 g     F .text	00000028 _Bfree
10002854 g     F .text	000000d0 move_cannon



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10b6f504 	addi	r2,r2,-9260
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10b6f504 	addi	r2,r2,-9260
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a7ac17 	ldw	r2,-24912(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a7ac17 	ldw	r2,-24912(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d68f3e14 	ori	gp,gp,15608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10b6d314 	ori	r2,r2,56140

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18f73514 	ori	r3,r3,56532

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0016c800 	call	10016c80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0016e1c0 	call	10016e1c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <delay_loop>:
#define CURR_SCORE_Y 80
#define CURR_TIME_X 480
#define CURR_TIME_Y 30

//Functions
static void delay_loop(){
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
	for(int i = 0; i < DELAY_TIME; i++);
10000278:	e03fff15 	stw	zero,-4(fp)
1000027c:	00000306 	br	1000028c <delay_loop+0x20>
10000280:	e0bfff17 	ldw	r2,-4(fp)
10000284:	10800044 	addi	r2,r2,1
10000288:	e0bfff15 	stw	r2,-4(fp)
1000028c:	e0bfff17 	ldw	r2,-4(fp)
10000290:	1087d010 	cmplti	r2,r2,8000
10000294:	103ffa1e 	bne	r2,zero,10000280 <__alt_data_end+0xf8000280>
}
10000298:	0001883a 	nop
1000029c:	e037883a 	mov	sp,fp
100002a0:	df000017 	ldw	fp,0(sp)
100002a4:	dec00104 	addi	sp,sp,4
100002a8:	f800283a 	ret

100002ac <init_background>:
#include "Animal.h"
#include "Cannon.h"
#include "CannonBall.h"
#include "FishNet.h"

void init_background(){
100002ac:	deffff04 	addi	sp,sp,-4
100002b0:	df000015 	stw	fp,0(sp)
100002b4:	d839883a 	mov	fp,sp
	IDX = BACKGROUND;
100002b8:	d0a00017 	ldw	r2,-32768(gp)
100002bc:	10000015 	stw	zero,0(r2)
	X_START = 0;
100002c0:	d0a00017 	ldw	r2,-32768(gp)
100002c4:	10800104 	addi	r2,r2,4
100002c8:	10000015 	stw	zero,0(r2)
	Y_START = 0;
100002cc:	d0a00017 	ldw	r2,-32768(gp)
100002d0:	10800204 	addi	r2,r2,8
100002d4:	10000015 	stw	zero,0(r2)
	X_STOP = 640;
100002d8:	d0a00017 	ldw	r2,-32768(gp)
100002dc:	10800304 	addi	r2,r2,12
100002e0:	00c0a004 	movi	r3,640
100002e4:	10c00015 	stw	r3,0(r2)
	Y_STOP = 480;
100002e8:	d0a00017 	ldw	r2,-32768(gp)
100002ec:	10800404 	addi	r2,r2,16
100002f0:	00c07804 	movi	r3,480
100002f4:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
100002f8:	d0a00017 	ldw	r2,-32768(gp)
100002fc:	10800604 	addi	r2,r2,24
10000300:	00c00044 	movi	r3,1
10000304:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000308:	0001883a 	nop
1000030c:	d0a00017 	ldw	r2,-32768(gp)
10000310:	10800704 	addi	r2,r2,28
10000314:	10800017 	ldw	r2,0(r2)
10000318:	103ffc26 	beq	r2,zero,1000030c <__alt_data_end+0xf800030c>
	DRAW_START = 0;
1000031c:	d0a00017 	ldw	r2,-32768(gp)
10000320:	10800604 	addi	r2,r2,24
10000324:	10000015 	stw	zero,0(r2)
	//FRAME_DONE = 1;
}
10000328:	0001883a 	nop
1000032c:	e037883a 	mov	sp,fp
10000330:	df000017 	ldw	fp,0(sp)
10000334:	dec00104 	addi	sp,sp,4
10000338:	f800283a 	ret

1000033c <draw_background>:

void draw_background(int drawXStart, int drawYStart, int drawXEnd, int drawYEnd){
1000033c:	defffb04 	addi	sp,sp,-20
10000340:	df000415 	stw	fp,16(sp)
10000344:	df000404 	addi	fp,sp,16
10000348:	e13ffc15 	stw	r4,-16(fp)
1000034c:	e17ffd15 	stw	r5,-12(fp)
10000350:	e1bffe15 	stw	r6,-8(fp)
10000354:	e1ffff15 	stw	r7,-4(fp)
	IDX = BACKGROUND;
10000358:	d0a00017 	ldw	r2,-32768(gp)
1000035c:	10000015 	stw	zero,0(r2)
	X_START = drawXStart;
10000360:	d0a00017 	ldw	r2,-32768(gp)
10000364:	10800104 	addi	r2,r2,4
10000368:	e0fffc17 	ldw	r3,-16(fp)
1000036c:	10c00015 	stw	r3,0(r2)
	Y_START = drawYStart;
10000370:	d0a00017 	ldw	r2,-32768(gp)
10000374:	10800204 	addi	r2,r2,8
10000378:	e0fffd17 	ldw	r3,-12(fp)
1000037c:	10c00015 	stw	r3,0(r2)
	X_STOP = drawXEnd;
10000380:	d0a00017 	ldw	r2,-32768(gp)
10000384:	10800304 	addi	r2,r2,12
10000388:	e0fffe17 	ldw	r3,-8(fp)
1000038c:	10c00015 	stw	r3,0(r2)
	Y_STOP = drawYEnd;
10000390:	d0a00017 	ldw	r2,-32768(gp)
10000394:	10800404 	addi	r2,r2,16
10000398:	e0ffff17 	ldw	r3,-4(fp)
1000039c:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
100003a0:	d0a00017 	ldw	r2,-32768(gp)
100003a4:	10800604 	addi	r2,r2,24
100003a8:	00c00044 	movi	r3,1
100003ac:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
100003b0:	0001883a 	nop
100003b4:	d0a00017 	ldw	r2,-32768(gp)
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10800017 	ldw	r2,0(r2)
100003c0:	103ffc26 	beq	r2,zero,100003b4 <__alt_data_end+0xf80003b4>
	DRAW_START = 0;
100003c4:	d0a00017 	ldw	r2,-32768(gp)
100003c8:	10800604 	addi	r2,r2,24
100003cc:	10000015 	stw	zero,0(r2)
}
100003d0:	0001883a 	nop
100003d4:	e037883a 	mov	sp,fp
100003d8:	df000017 	ldw	fp,0(sp)
100003dc:	dec00104 	addi	sp,sp,4
100003e0:	f800283a 	ret

100003e4 <draw_animal>:


void draw_animal(Animal animal){
100003e4:	defffb04 	addi	sp,sp,-20
100003e8:	df000015 	stw	fp,0(sp)
100003ec:	d839883a 	mov	fp,sp
100003f0:	e1000115 	stw	r4,4(fp)
100003f4:	e1400215 	stw	r5,8(fp)
100003f8:	e1800315 	stw	r6,12(fp)
100003fc:	e1c00415 	stw	r7,16(fp)
	//draw_background(animal.x,animal.y,animal.x + animal.width,animal.y + animal.height);
	IDX = animal.curIdx;
10000400:	d0a00017 	ldw	r2,-32768(gp)
10000404:	e0c00217 	ldw	r3,8(fp)
10000408:	10c00015 	stw	r3,0(r2)
	X_START = animal.x;
1000040c:	d0a00017 	ldw	r2,-32768(gp)
10000410:	10800104 	addi	r2,r2,4
10000414:	e0c00617 	ldw	r3,24(fp)
10000418:	10c00015 	stw	r3,0(r2)
	Y_START = animal.y;
1000041c:	d0a00017 	ldw	r2,-32768(gp)
10000420:	10800204 	addi	r2,r2,8
10000424:	e0c00717 	ldw	r3,28(fp)
10000428:	10c00015 	stw	r3,0(r2)
	X_STOP = animal.x + animal.width;
1000042c:	d0a00017 	ldw	r2,-32768(gp)
10000430:	10800304 	addi	r2,r2,12
10000434:	e1000617 	ldw	r4,24(fp)
10000438:	e0c00817 	ldw	r3,32(fp)
1000043c:	20c7883a 	add	r3,r4,r3
10000440:	10c00015 	stw	r3,0(r2)
	Y_STOP = animal.y + animal.height;
10000444:	d0a00017 	ldw	r2,-32768(gp)
10000448:	10800404 	addi	r2,r2,16
1000044c:	e1000717 	ldw	r4,28(fp)
10000450:	e0c00917 	ldw	r3,36(fp)
10000454:	20c7883a 	add	r3,r4,r3
10000458:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
1000045c:	d0a00017 	ldw	r2,-32768(gp)
10000460:	10800604 	addi	r2,r2,24
10000464:	00c00044 	movi	r3,1
10000468:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
1000046c:	0001883a 	nop
10000470:	d0a00017 	ldw	r2,-32768(gp)
10000474:	10800704 	addi	r2,r2,28
10000478:	10800017 	ldw	r2,0(r2)
1000047c:	103ffc26 	beq	r2,zero,10000470 <__alt_data_end+0xf8000470>
	DRAW_START = 0;
10000480:	d0a00017 	ldw	r2,-32768(gp)
10000484:	10800604 	addi	r2,r2,24
10000488:	10000015 	stw	zero,0(r2)
	//delay_loop();
}
1000048c:	0001883a 	nop
10000490:	e037883a 	mov	sp,fp
10000494:	df000017 	ldw	fp,0(sp)
10000498:	dec00504 	addi	sp,sp,20
1000049c:	f800283a 	ret

100004a0 <draw_backgrounds>:

void draw_backgrounds(int num, Animal animals[]){
100004a0:	defff704 	addi	sp,sp,-36
100004a4:	dfc00815 	stw	ra,32(sp)
100004a8:	df000715 	stw	fp,28(sp)
100004ac:	dcc00615 	stw	r19,24(sp)
100004b0:	dc800515 	stw	r18,20(sp)
100004b4:	dc400415 	stw	r17,16(sp)
100004b8:	dc000315 	stw	r16,12(sp)
100004bc:	df000704 	addi	fp,sp,28
100004c0:	e13ffa15 	stw	r4,-24(fp)
100004c4:	e17ffb15 	stw	r5,-20(fp)
	draw_background(CANNON_X,CANNON_Y,CANNON_X + CANNON_WIDTH, CANNON_Y + CANNON_HEIGHT);
100004c8:	01c07804 	movi	r7,480
100004cc:	01806a84 	movi	r6,426
100004d0:	01405d04 	movi	r5,372
100004d4:	01003584 	movi	r4,214
100004d8:	000033c0 	call	1000033c <draw_background>
	for(int i = 0; i < num; i++){
100004dc:	e03ff915 	stw	zero,-28(fp)
100004e0:	00003a06 	br	100005cc <draw_backgrounds+0x12c>
		draw_background(animals[i].x,animals[i].y,animals[i].x + animals[i].width,animals[i].y + animals[i].height);
100004e4:	e0bff917 	ldw	r2,-28(fp)
100004e8:	01400d04 	movi	r5,52
100004ec:	1009883a 	mov	r4,r2
100004f0:	00085800 	call	10008580 <__mulsi3>
100004f4:	1007883a 	mov	r3,r2
100004f8:	e0bffb17 	ldw	r2,-20(fp)
100004fc:	10c5883a 	add	r2,r2,r3
10000500:	14400517 	ldw	r17,20(r2)
10000504:	e0bff917 	ldw	r2,-28(fp)
10000508:	01400d04 	movi	r5,52
1000050c:	1009883a 	mov	r4,r2
10000510:	00085800 	call	10008580 <__mulsi3>
10000514:	1007883a 	mov	r3,r2
10000518:	e0bffb17 	ldw	r2,-20(fp)
1000051c:	10c5883a 	add	r2,r2,r3
10000520:	14800617 	ldw	r18,24(r2)
10000524:	e0bff917 	ldw	r2,-28(fp)
10000528:	01400d04 	movi	r5,52
1000052c:	1009883a 	mov	r4,r2
10000530:	00085800 	call	10008580 <__mulsi3>
10000534:	1007883a 	mov	r3,r2
10000538:	e0bffb17 	ldw	r2,-20(fp)
1000053c:	10c5883a 	add	r2,r2,r3
10000540:	14000517 	ldw	r16,20(r2)
10000544:	e0bff917 	ldw	r2,-28(fp)
10000548:	01400d04 	movi	r5,52
1000054c:	1009883a 	mov	r4,r2
10000550:	00085800 	call	10008580 <__mulsi3>
10000554:	1007883a 	mov	r3,r2
10000558:	e0bffb17 	ldw	r2,-20(fp)
1000055c:	10c5883a 	add	r2,r2,r3
10000560:	10800717 	ldw	r2,28(r2)
10000564:	80a7883a 	add	r19,r16,r2
10000568:	e0bff917 	ldw	r2,-28(fp)
1000056c:	01400d04 	movi	r5,52
10000570:	1009883a 	mov	r4,r2
10000574:	00085800 	call	10008580 <__mulsi3>
10000578:	1007883a 	mov	r3,r2
1000057c:	e0bffb17 	ldw	r2,-20(fp)
10000580:	10c5883a 	add	r2,r2,r3
10000584:	14000617 	ldw	r16,24(r2)
10000588:	e0bff917 	ldw	r2,-28(fp)
1000058c:	01400d04 	movi	r5,52
10000590:	1009883a 	mov	r4,r2
10000594:	00085800 	call	10008580 <__mulsi3>
10000598:	1007883a 	mov	r3,r2
1000059c:	e0bffb17 	ldw	r2,-20(fp)
100005a0:	10c5883a 	add	r2,r2,r3
100005a4:	10800817 	ldw	r2,32(r2)
100005a8:	8085883a 	add	r2,r16,r2
100005ac:	100f883a 	mov	r7,r2
100005b0:	980d883a 	mov	r6,r19
100005b4:	900b883a 	mov	r5,r18
100005b8:	8809883a 	mov	r4,r17
100005bc:	000033c0 	call	1000033c <draw_background>
	//delay_loop();
}

void draw_backgrounds(int num, Animal animals[]){
	draw_background(CANNON_X,CANNON_Y,CANNON_X + CANNON_WIDTH, CANNON_Y + CANNON_HEIGHT);
	for(int i = 0; i < num; i++){
100005c0:	e0bff917 	ldw	r2,-28(fp)
100005c4:	10800044 	addi	r2,r2,1
100005c8:	e0bff915 	stw	r2,-28(fp)
100005cc:	e0fff917 	ldw	r3,-28(fp)
100005d0:	e0bffa17 	ldw	r2,-24(fp)
100005d4:	18bfc316 	blt	r3,r2,100004e4 <__alt_data_end+0xf80004e4>
		draw_background(animals[i].x,animals[i].y,animals[i].x + animals[i].width,animals[i].y + animals[i].height);
	}
}
100005d8:	0001883a 	nop
100005dc:	e6fffc04 	addi	sp,fp,-16
100005e0:	dfc00517 	ldw	ra,20(sp)
100005e4:	df000417 	ldw	fp,16(sp)
100005e8:	dcc00317 	ldw	r19,12(sp)
100005ec:	dc800217 	ldw	r18,8(sp)
100005f0:	dc400117 	ldw	r17,4(sp)
100005f4:	dc000017 	ldw	r16,0(sp)
100005f8:	dec00604 	addi	sp,sp,24
100005fc:	f800283a 	ret

10000600 <draw_frame>:

void draw_frame(int num, Animal animals[], Cannon cannon, CannonBall cannonball, FishNet fishnet, int score, int sec, int frame_count){
10000600:	defff004 	addi	sp,sp,-64
10000604:	dfc00d15 	stw	ra,52(sp)
10000608:	df000c15 	stw	fp,48(sp)
1000060c:	df000c04 	addi	fp,sp,48
10000610:	e13ffe15 	stw	r4,-8(fp)
10000614:	e17fff15 	stw	r5,-4(fp)
10000618:	e1800215 	stw	r6,8(fp)
1000061c:	e1c00315 	stw	r7,12(fp)
	//init_background();
	FRAME_DONE = 0;
10000620:	d0a00017 	ldw	r2,-32768(gp)
10000624:	10800504 	addi	r2,r2,20
10000628:	10000015 	stw	zero,0(r2)
	//draw_backgrounds(num,prev);
	init_background();
1000062c:	00002ac0 	call	100002ac <init_background>
	if(sec >= 0 && sec <= 60){
10000630:	e0801717 	ldw	r2,92(fp)
10000634:	10001c16 	blt	r2,zero,100006a8 <draw_frame+0xa8>
10000638:	e0801717 	ldw	r2,92(fp)
1000063c:	10800f48 	cmpgei	r2,r2,61
10000640:	1000191e 	bne	r2,zero,100006a8 <draw_frame+0xa8>
		draw_CannonBall(cannonball);
10000644:	e0800917 	ldw	r2,36(fp)
10000648:	d8800015 	stw	r2,0(sp)
1000064c:	e0800a17 	ldw	r2,40(fp)
10000650:	d8800115 	stw	r2,4(sp)
10000654:	e0800b17 	ldw	r2,44(fp)
10000658:	d8800215 	stw	r2,8(sp)
1000065c:	e0800c17 	ldw	r2,48(fp)
10000660:	d8800315 	stw	r2,12(sp)
10000664:	e0800d17 	ldw	r2,52(fp)
10000668:	d8800415 	stw	r2,16(sp)
1000066c:	e0800e17 	ldw	r2,56(fp)
10000670:	d8800515 	stw	r2,20(sp)
10000674:	e0800f17 	ldw	r2,60(fp)
10000678:	d8800615 	stw	r2,24(sp)
1000067c:	e0801017 	ldw	r2,64(fp)
10000680:	d8800715 	stw	r2,28(sp)
10000684:	e1000517 	ldw	r4,20(fp)
10000688:	e1400617 	ldw	r5,24(fp)
1000068c:	e1800717 	ldw	r6,28(fp)
10000690:	e1c00817 	ldw	r7,32(fp)
10000694:	00009280 	call	10000928 <draw_CannonBall>
		draw_cannon(cannon);
10000698:	e1000217 	ldw	r4,8(fp)
1000069c:	e1400317 	ldw	r5,12(fp)
100006a0:	e1800417 	ldw	r6,16(fp)
100006a4:	00008040 	call	10000804 <draw_cannon>
	}
	for(int i = 0; i < num; i++){
100006a8:	e03ffd15 	stw	zero,-12(fp)
100006ac:	00002b06 	br	1000075c <draw_frame+0x15c>
		if(!(animals[i].caughtFrame%2))
100006b0:	e0bffd17 	ldw	r2,-12(fp)
100006b4:	01400d04 	movi	r5,52
100006b8:	1009883a 	mov	r4,r2
100006bc:	00085800 	call	10008580 <__mulsi3>
100006c0:	1007883a 	mov	r3,r2
100006c4:	e0bfff17 	ldw	r2,-4(fp)
100006c8:	10c5883a 	add	r2,r2,r3
100006cc:	10800c17 	ldw	r2,48(r2)
100006d0:	1080004c 	andi	r2,r2,1
100006d4:	10001e1e 	bne	r2,zero,10000750 <draw_frame+0x150>
			draw_animal(animals[i]);
100006d8:	e0bffd17 	ldw	r2,-12(fp)
100006dc:	01400d04 	movi	r5,52
100006e0:	1009883a 	mov	r4,r2
100006e4:	00085800 	call	10008580 <__mulsi3>
100006e8:	1007883a 	mov	r3,r2
100006ec:	e0bfff17 	ldw	r2,-4(fp)
100006f0:	10c5883a 	add	r2,r2,r3
100006f4:	10c00417 	ldw	r3,16(r2)
100006f8:	d8c00015 	stw	r3,0(sp)
100006fc:	10c00517 	ldw	r3,20(r2)
10000700:	d8c00115 	stw	r3,4(sp)
10000704:	10c00617 	ldw	r3,24(r2)
10000708:	d8c00215 	stw	r3,8(sp)
1000070c:	10c00717 	ldw	r3,28(r2)
10000710:	d8c00315 	stw	r3,12(sp)
10000714:	10c00817 	ldw	r3,32(r2)
10000718:	d8c00415 	stw	r3,16(sp)
1000071c:	10c00917 	ldw	r3,36(r2)
10000720:	d8c00515 	stw	r3,20(sp)
10000724:	10c00a17 	ldw	r3,40(r2)
10000728:	d8c00615 	stw	r3,24(sp)
1000072c:	10c00b17 	ldw	r3,44(r2)
10000730:	d8c00715 	stw	r3,28(sp)
10000734:	10c00c17 	ldw	r3,48(r2)
10000738:	d8c00815 	stw	r3,32(sp)
1000073c:	11000017 	ldw	r4,0(r2)
10000740:	11400117 	ldw	r5,4(r2)
10000744:	11800217 	ldw	r6,8(r2)
10000748:	11c00317 	ldw	r7,12(r2)
1000074c:	00003e40 	call	100003e4 <draw_animal>
	init_background();
	if(sec >= 0 && sec <= 60){
		draw_CannonBall(cannonball);
		draw_cannon(cannon);
	}
	for(int i = 0; i < num; i++){
10000750:	e0bffd17 	ldw	r2,-12(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	e0bffd15 	stw	r2,-12(fp)
1000075c:	e0fffd17 	ldw	r3,-12(fp)
10000760:	e0bffe17 	ldw	r2,-8(fp)
10000764:	18bfd216 	blt	r3,r2,100006b0 <__alt_data_end+0xf80006b0>
		if(!(animals[i].caughtFrame%2))
			draw_animal(animals[i]);
	}
	if(sec >= 0 && sec <= 60){
10000768:	e0801717 	ldw	r2,92(fp)
1000076c:	10000a16 	blt	r2,zero,10000798 <draw_frame+0x198>
10000770:	e0801717 	ldw	r2,92(fp)
10000774:	10800f48 	cmpgei	r2,r2,61
10000778:	1000071e 	bne	r2,zero,10000798 <draw_frame+0x198>
		draw_FishNet(fishnet);
1000077c:	e0801517 	ldw	r2,84(fp)
10000780:	d8800015 	stw	r2,0(sp)
10000784:	e1001117 	ldw	r4,68(fp)
10000788:	e1401217 	ldw	r5,72(fp)
1000078c:	e1801317 	ldw	r6,76(fp)
10000790:	e1c01417 	ldw	r7,80(fp)
10000794:	00009f00 	call	100009f0 <draw_FishNet>
	}
	if(sec >= -1 && sec <= 60 &&(!(frame_count%2))){
10000798:	e0801717 	ldw	r2,92(fp)
1000079c:	10bfffd0 	cmplti	r2,r2,-1
100007a0:	10000e1e 	bne	r2,zero,100007dc <draw_frame+0x1dc>
100007a4:	e0801717 	ldw	r2,92(fp)
100007a8:	10800f48 	cmpgei	r2,r2,61
100007ac:	10000b1e 	bne	r2,zero,100007dc <draw_frame+0x1dc>
100007b0:	e0801817 	ldw	r2,96(fp)
100007b4:	1080004c 	andi	r2,r2,1
100007b8:	1000081e 	bne	r2,zero,100007dc <draw_frame+0x1dc>
		draw_Score_Ingame(score);
100007bc:	e1001617 	ldw	r4,88(fp)
100007c0:	0000ef80 	call	10000ef8 <draw_Score_Ingame>
		sec = (sec < 0) ?0 :sec;
100007c4:	e0801717 	ldw	r2,92(fp)
100007c8:	1000010e 	bge	r2,zero,100007d0 <draw_frame+0x1d0>
100007cc:	0005883a 	mov	r2,zero
100007d0:	e0801715 	stw	r2,92(fp)
		draw_Time_Ingame(sec);
100007d4:	e1001717 	ldw	r4,92(fp)
100007d8:	00010440 	call	10001044 <draw_Time_Ingame>
	}
	FRAME_DONE = 1;
100007dc:	d0a00017 	ldw	r2,-32768(gp)
100007e0:	10800504 	addi	r2,r2,20
100007e4:	00c00044 	movi	r3,1
100007e8:	10c00015 	stw	r3,0(r2)
}
100007ec:	0001883a 	nop
100007f0:	e037883a 	mov	sp,fp
100007f4:	dfc00117 	ldw	ra,4(sp)
100007f8:	df000017 	ldw	fp,0(sp)
100007fc:	dec00404 	addi	sp,sp,16
10000800:	f800283a 	ret

10000804 <draw_cannon>:

void draw_cannon(Cannon cannon){
10000804:	defffc04 	addi	sp,sp,-16
10000808:	df000315 	stw	fp,12(sp)
1000080c:	df000304 	addi	fp,sp,12
10000810:	e13ffd15 	stw	r4,-12(fp)
10000814:	e17ffe15 	stw	r5,-8(fp)
10000818:	e1bfff15 	stw	r6,-4(fp)
	//draw_background(CANNON_X,CANNON_Y,CANNON_X + CANNON_WIDTH, CANNON_Y + CANNON_HEIGHT);
	IDX = SUPPORT_IDXSTART;
1000081c:	d0a00017 	ldw	r2,-32768(gp)
10000820:	00c00604 	movi	r3,24
10000824:	10c00015 	stw	r3,0(r2)
	X_START = SUPPORT_X;
10000828:	d0a00017 	ldw	r2,-32768(gp)
1000082c:	10800104 	addi	r2,r2,4
10000830:	00c04884 	movi	r3,290
10000834:	10c00015 	stw	r3,0(r2)
	Y_START = SUPPORT_Y;
10000838:	d0a00017 	ldw	r2,-32768(gp)
1000083c:	10800204 	addi	r2,r2,8
10000840:	00c06e04 	movi	r3,440
10000844:	10c00015 	stw	r3,0(r2)
	X_STOP = SUPPORT_X + SUPPORT_WIDTH;
10000848:	d0a00017 	ldw	r2,-32768(gp)
1000084c:	10800304 	addi	r2,r2,12
10000850:	00c05a04 	movi	r3,360
10000854:	10c00015 	stw	r3,0(r2)
	Y_STOP = SUPPORT_Y + SUPPORT_HEIGHT;
10000858:	d0a00017 	ldw	r2,-32768(gp)
1000085c:	10800404 	addi	r2,r2,16
10000860:	00c07804 	movi	r3,480
10000864:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000868:	d0a00017 	ldw	r2,-32768(gp)
1000086c:	10800604 	addi	r2,r2,24
10000870:	00c00044 	movi	r3,1
10000874:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000878:	0001883a 	nop
1000087c:	d0a00017 	ldw	r2,-32768(gp)
10000880:	10800704 	addi	r2,r2,28
10000884:	10800017 	ldw	r2,0(r2)
10000888:	103ffc26 	beq	r2,zero,1000087c <__alt_data_end+0xf800087c>
	DRAW_START = 0;
1000088c:	d0a00017 	ldw	r2,-32768(gp)
10000890:	10800604 	addi	r2,r2,24
10000894:	10000015 	stw	zero,0(r2)
	IDX = cannon.curIdx;
10000898:	d0a00017 	ldw	r2,-32768(gp)
1000089c:	e0ffff17 	ldw	r3,-4(fp)
100008a0:	10c00015 	stw	r3,0(r2)
	X_START = CANNON_X;
100008a4:	d0a00017 	ldw	r2,-32768(gp)
100008a8:	10800104 	addi	r2,r2,4
100008ac:	00c03584 	movi	r3,214
100008b0:	10c00015 	stw	r3,0(r2)
	Y_START = CANNON_Y;
100008b4:	d0a00017 	ldw	r2,-32768(gp)
100008b8:	10800204 	addi	r2,r2,8
100008bc:	00c05d04 	movi	r3,372
100008c0:	10c00015 	stw	r3,0(r2)
	X_STOP = CANNON_X + CANNON_WIDTH;
100008c4:	d0a00017 	ldw	r2,-32768(gp)
100008c8:	10800304 	addi	r2,r2,12
100008cc:	00c06a84 	movi	r3,426
100008d0:	10c00015 	stw	r3,0(r2)
	Y_STOP = CANNON_Y + CANNON_HEIGHT;
100008d4:	d0a00017 	ldw	r2,-32768(gp)
100008d8:	10800404 	addi	r2,r2,16
100008dc:	00c07804 	movi	r3,480
100008e0:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
100008e4:	d0a00017 	ldw	r2,-32768(gp)
100008e8:	10800604 	addi	r2,r2,24
100008ec:	00c00044 	movi	r3,1
100008f0:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
100008f4:	0001883a 	nop
100008f8:	d0a00017 	ldw	r2,-32768(gp)
100008fc:	10800704 	addi	r2,r2,28
10000900:	10800017 	ldw	r2,0(r2)
10000904:	103ffc26 	beq	r2,zero,100008f8 <__alt_data_end+0xf80008f8>
	DRAW_START = 0;
10000908:	d0a00017 	ldw	r2,-32768(gp)
1000090c:	10800604 	addi	r2,r2,24
10000910:	10000015 	stw	zero,0(r2)
}
10000914:	0001883a 	nop
10000918:	e037883a 	mov	sp,fp
1000091c:	df000017 	ldw	fp,0(sp)
10000920:	dec00104 	addi	sp,sp,4
10000924:	f800283a 	ret

10000928 <draw_CannonBall>:

void draw_CannonBall(CannonBall cannonball){
10000928:	defffb04 	addi	sp,sp,-20
1000092c:	df000015 	stw	fp,0(sp)
10000930:	d839883a 	mov	fp,sp
10000934:	e1000115 	stw	r4,4(fp)
10000938:	e1400215 	stw	r5,8(fp)
1000093c:	e1800315 	stw	r6,12(fp)
10000940:	e1c00415 	stw	r7,16(fp)
	if(!cannonball.hidden && cannonball.frame > 3){
10000944:	e0800417 	ldw	r2,16(fp)
10000948:	1000241e 	bne	r2,zero,100009dc <draw_CannonBall+0xb4>
1000094c:	e0800817 	ldw	r2,32(fp)
10000950:	10800110 	cmplti	r2,r2,4
10000954:	1000211e 	bne	r2,zero,100009dc <draw_CannonBall+0xb4>
		IDX = cannonball.curIdx;
10000958:	d0a00017 	ldw	r2,-32768(gp)
1000095c:	e0c00117 	ldw	r3,4(fp)
10000960:	10c00015 	stw	r3,0(r2)
		X_START = cannonball.x;
10000964:	d0a00017 	ldw	r2,-32768(gp)
10000968:	10800104 	addi	r2,r2,4
1000096c:	e0c00217 	ldw	r3,8(fp)
10000970:	10c00015 	stw	r3,0(r2)
		Y_START = cannonball.y;
10000974:	d0a00017 	ldw	r2,-32768(gp)
10000978:	10800204 	addi	r2,r2,8
1000097c:	e0c00317 	ldw	r3,12(fp)
10000980:	10c00015 	stw	r3,0(r2)
		X_STOP = cannonball.x + CANNON_BALL_WIDTH;
10000984:	d0a00017 	ldw	r2,-32768(gp)
10000988:	10800304 	addi	r2,r2,12
1000098c:	e0c00217 	ldw	r3,8(fp)
10000990:	18c00c84 	addi	r3,r3,50
10000994:	10c00015 	stw	r3,0(r2)
		Y_STOP = cannonball.y + CANNON_BALL_HEIGHT;
10000998:	d0a00017 	ldw	r2,-32768(gp)
1000099c:	10800404 	addi	r2,r2,16
100009a0:	e0c00317 	ldw	r3,12(fp)
100009a4:	18c00e84 	addi	r3,r3,58
100009a8:	10c00015 	stw	r3,0(r2)
		DRAW_START = 1;
100009ac:	d0a00017 	ldw	r2,-32768(gp)
100009b0:	10800604 	addi	r2,r2,24
100009b4:	00c00044 	movi	r3,1
100009b8:	10c00015 	stw	r3,0(r2)
		while(!DRAW_DONE);
100009bc:	0001883a 	nop
100009c0:	d0a00017 	ldw	r2,-32768(gp)
100009c4:	10800704 	addi	r2,r2,28
100009c8:	10800017 	ldw	r2,0(r2)
100009cc:	103ffc26 	beq	r2,zero,100009c0 <__alt_data_end+0xf80009c0>
		DRAW_START = 0;
100009d0:	d0a00017 	ldw	r2,-32768(gp)
100009d4:	10800604 	addi	r2,r2,24
100009d8:	10000015 	stw	zero,0(r2)
	}
}
100009dc:	0001883a 	nop
100009e0:	e037883a 	mov	sp,fp
100009e4:	df000017 	ldw	fp,0(sp)
100009e8:	dec00504 	addi	sp,sp,20
100009ec:	f800283a 	ret

100009f0 <draw_FishNet>:

void draw_FishNet(FishNet fishnet){
100009f0:	defffb04 	addi	sp,sp,-20
100009f4:	df000015 	stw	fp,0(sp)
100009f8:	d839883a 	mov	fp,sp
100009fc:	e1000115 	stw	r4,4(fp)
10000a00:	e1400215 	stw	r5,8(fp)
10000a04:	e1800315 	stw	r6,12(fp)
10000a08:	e1c00415 	stw	r7,16(fp)
	if(!fishnet.hidden){
10000a0c:	e0800417 	ldw	r2,16(fp)
10000a10:	1000211e 	bne	r2,zero,10000a98 <draw_FishNet+0xa8>
		IDX = fishnet.curIdx;
10000a14:	d0a00017 	ldw	r2,-32768(gp)
10000a18:	e0c00117 	ldw	r3,4(fp)
10000a1c:	10c00015 	stw	r3,0(r2)
		X_START = fishnet.x;
10000a20:	d0a00017 	ldw	r2,-32768(gp)
10000a24:	10800104 	addi	r2,r2,4
10000a28:	e0c00217 	ldw	r3,8(fp)
10000a2c:	10c00015 	stw	r3,0(r2)
		Y_START = fishnet.y;
10000a30:	d0a00017 	ldw	r2,-32768(gp)
10000a34:	10800204 	addi	r2,r2,8
10000a38:	e0c00317 	ldw	r3,12(fp)
10000a3c:	10c00015 	stw	r3,0(r2)
		X_STOP = fishnet.x + NET_WIDTH;
10000a40:	d0a00017 	ldw	r2,-32768(gp)
10000a44:	10800304 	addi	r2,r2,12
10000a48:	e0c00217 	ldw	r3,8(fp)
10000a4c:	18c01944 	addi	r3,r3,101
10000a50:	10c00015 	stw	r3,0(r2)
		Y_STOP = fishnet.y + NET_HEIGHT;
10000a54:	d0a00017 	ldw	r2,-32768(gp)
10000a58:	10800404 	addi	r2,r2,16
10000a5c:	e0c00317 	ldw	r3,12(fp)
10000a60:	18c01504 	addi	r3,r3,84
10000a64:	10c00015 	stw	r3,0(r2)
		DRAW_START = 1;
10000a68:	d0a00017 	ldw	r2,-32768(gp)
10000a6c:	10800604 	addi	r2,r2,24
10000a70:	00c00044 	movi	r3,1
10000a74:	10c00015 	stw	r3,0(r2)
		while(!DRAW_DONE);
10000a78:	0001883a 	nop
10000a7c:	d0a00017 	ldw	r2,-32768(gp)
10000a80:	10800704 	addi	r2,r2,28
10000a84:	10800017 	ldw	r2,0(r2)
10000a88:	103ffc26 	beq	r2,zero,10000a7c <__alt_data_end+0xf8000a7c>
		DRAW_START = 0;
10000a8c:	d0a00017 	ldw	r2,-32768(gp)
10000a90:	10800604 	addi	r2,r2,24
10000a94:	10000015 	stw	zero,0(r2)
	}
}
10000a98:	0001883a 	nop
10000a9c:	e037883a 	mov	sp,fp
10000aa0:	df000017 	ldw	fp,0(sp)
10000aa4:	dec00504 	addi	sp,sp,20
10000aa8:	f800283a 	ret

10000aac <draw_Logo>:

void draw_Logo(){
10000aac:	deffff04 	addi	sp,sp,-4
10000ab0:	df000015 	stw	fp,0(sp)
10000ab4:	d839883a 	mov	fp,sp
	IDX = LOGO_IDXSTART;
10000ab8:	d0a00017 	ldw	r2,-32768(gp)
10000abc:	00c018c4 	movi	r3,99
10000ac0:	10c00015 	stw	r3,0(r2)
	X_START = 320-LOGO_WIDTH/2;
10000ac4:	d0a00017 	ldw	r2,-32768(gp)
10000ac8:	10800104 	addi	r2,r2,4
10000acc:	00c03d44 	movi	r3,245
10000ad0:	10c00015 	stw	r3,0(r2)
	Y_START = 120-LOGO_HEIGHT/2;
10000ad4:	d0a00017 	ldw	r2,-32768(gp)
10000ad8:	10800204 	addi	r2,r2,8
10000adc:	00c00f04 	movi	r3,60
10000ae0:	10c00015 	stw	r3,0(r2)
	X_STOP = X_START + LOGO_WIDTH;
10000ae4:	d0a00017 	ldw	r2,-32768(gp)
10000ae8:	10800304 	addi	r2,r2,12
10000aec:	d0e00017 	ldw	r3,-32768(gp)
10000af0:	18c00104 	addi	r3,r3,4
10000af4:	18c00017 	ldw	r3,0(r3)
10000af8:	18c025c4 	addi	r3,r3,151
10000afc:	10c00015 	stw	r3,0(r2)
	Y_STOP = Y_START + LOGO_HEIGHT;
10000b00:	d0a00017 	ldw	r2,-32768(gp)
10000b04:	10800404 	addi	r2,r2,16
10000b08:	d0e00017 	ldw	r3,-32768(gp)
10000b0c:	18c00204 	addi	r3,r3,8
10000b10:	18c00017 	ldw	r3,0(r3)
10000b14:	18c01e44 	addi	r3,r3,121
10000b18:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000b1c:	d0a00017 	ldw	r2,-32768(gp)
10000b20:	10800604 	addi	r2,r2,24
10000b24:	00c00044 	movi	r3,1
10000b28:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000b2c:	0001883a 	nop
10000b30:	d0a00017 	ldw	r2,-32768(gp)
10000b34:	10800704 	addi	r2,r2,28
10000b38:	10800017 	ldw	r2,0(r2)
10000b3c:	103ffc26 	beq	r2,zero,10000b30 <__alt_data_end+0xf8000b30>
	DRAW_START = 0;
10000b40:	d0a00017 	ldw	r2,-32768(gp)
10000b44:	10800604 	addi	r2,r2,24
10000b48:	10000015 	stw	zero,0(r2)
}
10000b4c:	0001883a 	nop
10000b50:	e037883a 	mov	sp,fp
10000b54:	df000017 	ldw	fp,0(sp)
10000b58:	dec00104 	addi	sp,sp,4
10000b5c:	f800283a 	ret

10000b60 <draw_Options>:

void draw_Options(){
10000b60:	deffff04 	addi	sp,sp,-4
10000b64:	df000015 	stw	fp,0(sp)
10000b68:	d839883a 	mov	fp,sp
	IDX = START_IDXSTART;
10000b6c:	d0a00017 	ldw	r2,-32768(gp)
10000b70:	00c017c4 	movi	r3,95
10000b74:	10c00015 	stw	r3,0(r2)
	X_START = 320-START_WIDTH/2;
10000b78:	d0a00017 	ldw	r2,-32768(gp)
10000b7c:	10800104 	addi	r2,r2,4
10000b80:	00c04404 	movi	r3,272
10000b84:	10c00015 	stw	r3,0(r2)
	Y_START = 300-START_HEIGHT/2;
10000b88:	d0a00017 	ldw	r2,-32768(gp)
10000b8c:	10800204 	addi	r2,r2,8
10000b90:	00c04784 	movi	r3,286
10000b94:	10c00015 	stw	r3,0(r2)
	X_STOP = X_START + START_WIDTH;
10000b98:	d0a00017 	ldw	r2,-32768(gp)
10000b9c:	10800304 	addi	r2,r2,12
10000ba0:	d0e00017 	ldw	r3,-32768(gp)
10000ba4:	18c00104 	addi	r3,r3,4
10000ba8:	18c00017 	ldw	r3,0(r3)
10000bac:	18c01804 	addi	r3,r3,96
10000bb0:	10c00015 	stw	r3,0(r2)
	Y_STOP = Y_START + START_HEIGHT;
10000bb4:	d0a00017 	ldw	r2,-32768(gp)
10000bb8:	10800404 	addi	r2,r2,16
10000bbc:	d0e00017 	ldw	r3,-32768(gp)
10000bc0:	18c00204 	addi	r3,r3,8
10000bc4:	18c00017 	ldw	r3,0(r3)
10000bc8:	18c00744 	addi	r3,r3,29
10000bcc:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000bd0:	d0a00017 	ldw	r2,-32768(gp)
10000bd4:	10800604 	addi	r2,r2,24
10000bd8:	00c00044 	movi	r3,1
10000bdc:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000be0:	0001883a 	nop
10000be4:	d0a00017 	ldw	r2,-32768(gp)
10000be8:	10800704 	addi	r2,r2,28
10000bec:	10800017 	ldw	r2,0(r2)
10000bf0:	103ffc26 	beq	r2,zero,10000be4 <__alt_data_end+0xf8000be4>
	DRAW_START = 0;
10000bf4:	d0a00017 	ldw	r2,-32768(gp)
10000bf8:	10800604 	addi	r2,r2,24
10000bfc:	10000015 	stw	zero,0(r2)
	IDX = HIGHSCORE_IDXSTART;
10000c00:	d0a00017 	ldw	r2,-32768(gp)
10000c04:	00c01804 	movi	r3,96
10000c08:	10c00015 	stw	r3,0(r2)
	X_START = 320-HIGHSCORE_WIDTH/2;
10000c0c:	d0a00017 	ldw	r2,-32768(gp)
10000c10:	10800104 	addi	r2,r2,4
10000c14:	00c03784 	movi	r3,222
10000c18:	10c00015 	stw	r3,0(r2)
	Y_START = 370-HIGHSCORE_HEIGHT/2;
10000c1c:	d0a00017 	ldw	r2,-32768(gp)
10000c20:	10800204 	addi	r2,r2,8
10000c24:	00c057c4 	movi	r3,351
10000c28:	10c00015 	stw	r3,0(r2)
	X_STOP = X_START + HIGHSCORE_WIDTH;
10000c2c:	d0a00017 	ldw	r2,-32768(gp)
10000c30:	10800304 	addi	r2,r2,12
10000c34:	d0e00017 	ldw	r3,-32768(gp)
10000c38:	18c00104 	addi	r3,r3,4
10000c3c:	18c00017 	ldw	r3,0(r3)
10000c40:	18c03144 	addi	r3,r3,197
10000c44:	10c00015 	stw	r3,0(r2)
	Y_STOP = Y_START + HIGHSCORE_HEIGHT;
10000c48:	d0a00017 	ldw	r2,-32768(gp)
10000c4c:	10800404 	addi	r2,r2,16
10000c50:	d0e00017 	ldw	r3,-32768(gp)
10000c54:	18c00204 	addi	r3,r3,8
10000c58:	18c00017 	ldw	r3,0(r3)
10000c5c:	18c009c4 	addi	r3,r3,39
10000c60:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000c64:	d0a00017 	ldw	r2,-32768(gp)
10000c68:	10800604 	addi	r2,r2,24
10000c6c:	00c00044 	movi	r3,1
10000c70:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000c74:	0001883a 	nop
10000c78:	d0a00017 	ldw	r2,-32768(gp)
10000c7c:	10800704 	addi	r2,r2,28
10000c80:	10800017 	ldw	r2,0(r2)
10000c84:	103ffc26 	beq	r2,zero,10000c78 <__alt_data_end+0xf8000c78>
	DRAW_START = 0;
10000c88:	d0a00017 	ldw	r2,-32768(gp)
10000c8c:	10800604 	addi	r2,r2,24
10000c90:	10000015 	stw	zero,0(r2)
}
10000c94:	0001883a 	nop
10000c98:	e037883a 	mov	sp,fp
10000c9c:	df000017 	ldw	fp,0(sp)
10000ca0:	dec00104 	addi	sp,sp,4
10000ca4:	f800283a 	ret

10000ca8 <draw_Arrow>:

void draw_Arrow(int pos){
10000ca8:	defffe04 	addi	sp,sp,-8
10000cac:	df000115 	stw	fp,4(sp)
10000cb0:	df000104 	addi	fp,sp,4
10000cb4:	e13fff15 	stw	r4,-4(fp)
	//If pos = 0, draw Start
	//If pos = 1, draw HS
	IDX = ARROW_IDXSTART;
10000cb8:	d0a00017 	ldw	r2,-32768(gp)
10000cbc:	00c01904 	movi	r3,100
10000cc0:	10c00015 	stw	r3,0(r2)
	X_START = 185-ARROW_WIDTH/2;
10000cc4:	d0a00017 	ldw	r2,-32768(gp)
10000cc8:	10800104 	addi	r2,r2,4
10000ccc:	00c02ac4 	movi	r3,171
10000cd0:	10c00015 	stw	r3,0(r2)
	X_STOP = X_START + ARROW_WIDTH;
10000cd4:	d0a00017 	ldw	r2,-32768(gp)
10000cd8:	10800304 	addi	r2,r2,12
10000cdc:	d0e00017 	ldw	r3,-32768(gp)
10000ce0:	18c00104 	addi	r3,r3,4
10000ce4:	18c00017 	ldw	r3,0(r3)
10000ce8:	18c00704 	addi	r3,r3,28
10000cec:	10c00015 	stw	r3,0(r2)
	if(pos){
10000cf0:	e0bfff17 	ldw	r2,-4(fp)
10000cf4:	10000c26 	beq	r2,zero,10000d28 <draw_Arrow+0x80>
		Y_START = 370-ARROW_HEIGHT/2;
10000cf8:	d0a00017 	ldw	r2,-32768(gp)
10000cfc:	10800204 	addi	r2,r2,8
10000d00:	00c05b44 	movi	r3,365
10000d04:	10c00015 	stw	r3,0(r2)
		Y_STOP = Y_START + ARROW_HEIGHT;
10000d08:	d0a00017 	ldw	r2,-32768(gp)
10000d0c:	10800404 	addi	r2,r2,16
10000d10:	d0e00017 	ldw	r3,-32768(gp)
10000d14:	18c00204 	addi	r3,r3,8
10000d18:	18c00017 	ldw	r3,0(r3)
10000d1c:	18c002c4 	addi	r3,r3,11
10000d20:	10c00015 	stw	r3,0(r2)
10000d24:	00000b06 	br	10000d54 <draw_Arrow+0xac>
	}else{
		Y_START = 300-ARROW_HEIGHT/2;
10000d28:	d0a00017 	ldw	r2,-32768(gp)
10000d2c:	10800204 	addi	r2,r2,8
10000d30:	00c049c4 	movi	r3,295
10000d34:	10c00015 	stw	r3,0(r2)
		Y_STOP = Y_START + ARROW_HEIGHT;
10000d38:	d0a00017 	ldw	r2,-32768(gp)
10000d3c:	10800404 	addi	r2,r2,16
10000d40:	d0e00017 	ldw	r3,-32768(gp)
10000d44:	18c00204 	addi	r3,r3,8
10000d48:	18c00017 	ldw	r3,0(r3)
10000d4c:	18c002c4 	addi	r3,r3,11
10000d50:	10c00015 	stw	r3,0(r2)
	}
	DRAW_START = 1;
10000d54:	d0a00017 	ldw	r2,-32768(gp)
10000d58:	10800604 	addi	r2,r2,24
10000d5c:	00c00044 	movi	r3,1
10000d60:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000d64:	0001883a 	nop
10000d68:	d0a00017 	ldw	r2,-32768(gp)
10000d6c:	10800704 	addi	r2,r2,28
10000d70:	10800017 	ldw	r2,0(r2)
10000d74:	103ffc26 	beq	r2,zero,10000d68 <__alt_data_end+0xf8000d68>
	DRAW_START = 0;
10000d78:	d0a00017 	ldw	r2,-32768(gp)
10000d7c:	10800604 	addi	r2,r2,24
10000d80:	10000015 	stw	zero,0(r2)
}
10000d84:	0001883a 	nop
10000d88:	e037883a 	mov	sp,fp
10000d8c:	df000017 	ldw	fp,0(sp)
10000d90:	dec00104 	addi	sp,sp,4
10000d94:	f800283a 	ret

10000d98 <draw_Num>:

void draw_Num(int num, int x, int y){
10000d98:	defffc04 	addi	sp,sp,-16
10000d9c:	df000315 	stw	fp,12(sp)
10000da0:	df000304 	addi	fp,sp,12
10000da4:	e13ffd15 	stw	r4,-12(fp)
10000da8:	e17ffe15 	stw	r5,-8(fp)
10000dac:	e1bfff15 	stw	r6,-4(fp)
	//If pos = 0, draw Start
	//If pos = 1, draw HS
	IDX = NUMBER_IDXSTART+num;
10000db0:	d0a00017 	ldw	r2,-32768(gp)
10000db4:	e0fffd17 	ldw	r3,-12(fp)
10000db8:	18c01944 	addi	r3,r3,101
10000dbc:	10c00015 	stw	r3,0(r2)
	X_START = x;
10000dc0:	d0a00017 	ldw	r2,-32768(gp)
10000dc4:	10800104 	addi	r2,r2,4
10000dc8:	e0fffe17 	ldw	r3,-8(fp)
10000dcc:	10c00015 	stw	r3,0(r2)
	X_STOP = x + NUMBER_WIDTH;
10000dd0:	d0a00017 	ldw	r2,-32768(gp)
10000dd4:	10800304 	addi	r2,r2,12
10000dd8:	e0fffe17 	ldw	r3,-8(fp)
10000ddc:	18c00404 	addi	r3,r3,16
10000de0:	10c00015 	stw	r3,0(r2)
	Y_START = y;
10000de4:	d0a00017 	ldw	r2,-32768(gp)
10000de8:	10800204 	addi	r2,r2,8
10000dec:	e0ffff17 	ldw	r3,-4(fp)
10000df0:	10c00015 	stw	r3,0(r2)
	Y_STOP = y + NUMBER_HEIGHT;
10000df4:	d0a00017 	ldw	r2,-32768(gp)
10000df8:	10800404 	addi	r2,r2,16
10000dfc:	e0ffff17 	ldw	r3,-4(fp)
10000e00:	18c00544 	addi	r3,r3,21
10000e04:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000e08:	d0a00017 	ldw	r2,-32768(gp)
10000e0c:	10800604 	addi	r2,r2,24
10000e10:	00c00044 	movi	r3,1
10000e14:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000e18:	0001883a 	nop
10000e1c:	d0a00017 	ldw	r2,-32768(gp)
10000e20:	10800704 	addi	r2,r2,28
10000e24:	10800017 	ldw	r2,0(r2)
10000e28:	103ffc26 	beq	r2,zero,10000e1c <__alt_data_end+0xf8000e1c>
	DRAW_START = 0;
10000e2c:	d0a00017 	ldw	r2,-32768(gp)
10000e30:	10800604 	addi	r2,r2,24
10000e34:	10000015 	stw	zero,0(r2)
}
10000e38:	0001883a 	nop
10000e3c:	e037883a 	mov	sp,fp
10000e40:	df000017 	ldw	fp,0(sp)
10000e44:	dec00104 	addi	sp,sp,4
10000e48:	f800283a 	ret

10000e4c <draw_SC>:

void draw_SC(int x, int y){
10000e4c:	defffd04 	addi	sp,sp,-12
10000e50:	df000215 	stw	fp,8(sp)
10000e54:	df000204 	addi	fp,sp,8
10000e58:	e13ffe15 	stw	r4,-8(fp)
10000e5c:	e17fff15 	stw	r5,-4(fp)
	IDX = SC_IDXSTART;
10000e60:	d0a00017 	ldw	r2,-32768(gp)
10000e64:	00c01c04 	movi	r3,112
10000e68:	10c00015 	stw	r3,0(r2)
	X_START = x;
10000e6c:	d0a00017 	ldw	r2,-32768(gp)
10000e70:	10800104 	addi	r2,r2,4
10000e74:	e0fffe17 	ldw	r3,-8(fp)
10000e78:	10c00015 	stw	r3,0(r2)
	X_STOP = x + SC_WIDTH;
10000e7c:	d0a00017 	ldw	r2,-32768(gp)
10000e80:	10800304 	addi	r2,r2,12
10000e84:	e0fffe17 	ldw	r3,-8(fp)
10000e88:	18c00184 	addi	r3,r3,6
10000e8c:	10c00015 	stw	r3,0(r2)
	Y_START = y;
10000e90:	d0a00017 	ldw	r2,-32768(gp)
10000e94:	10800204 	addi	r2,r2,8
10000e98:	e0ffff17 	ldw	r3,-4(fp)
10000e9c:	10c00015 	stw	r3,0(r2)
	Y_STOP = y + SC_HEIGHT;
10000ea0:	d0a00017 	ldw	r2,-32768(gp)
10000ea4:	10800404 	addi	r2,r2,16
10000ea8:	e0ffff17 	ldw	r3,-4(fp)
10000eac:	18c00544 	addi	r3,r3,21
10000eb0:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000eb4:	d0a00017 	ldw	r2,-32768(gp)
10000eb8:	10800604 	addi	r2,r2,24
10000ebc:	00c00044 	movi	r3,1
10000ec0:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000ec4:	0001883a 	nop
10000ec8:	d0a00017 	ldw	r2,-32768(gp)
10000ecc:	10800704 	addi	r2,r2,28
10000ed0:	10800017 	ldw	r2,0(r2)
10000ed4:	103ffc26 	beq	r2,zero,10000ec8 <__alt_data_end+0xf8000ec8>
	DRAW_START = 0;
10000ed8:	d0a00017 	ldw	r2,-32768(gp)
10000edc:	10800604 	addi	r2,r2,24
10000ee0:	10000015 	stw	zero,0(r2)
}
10000ee4:	0001883a 	nop
10000ee8:	e037883a 	mov	sp,fp
10000eec:	df000017 	ldw	fp,0(sp)
10000ef0:	dec00104 	addi	sp,sp,4
10000ef4:	f800283a 	ret

10000ef8 <draw_Score_Ingame>:

void draw_Score_Ingame(int score){
10000ef8:	defffa04 	addi	sp,sp,-24
10000efc:	dfc00515 	stw	ra,20(sp)
10000f00:	df000415 	stw	fp,16(sp)
10000f04:	df000404 	addi	fp,sp,16
10000f08:	e13fff15 	stw	r4,-4(fp)
	IDX = SCORE_IDXSTART;
10000f0c:	d0a00017 	ldw	r2,-32768(gp)
10000f10:	00c01844 	movi	r3,97
10000f14:	10c00015 	stw	r3,0(r2)
	X_START = CURR_SCORE_X;
10000f18:	d0a00017 	ldw	r2,-32768(gp)
10000f1c:	10800104 	addi	r2,r2,4
10000f20:	00c07804 	movi	r3,480
10000f24:	10c00015 	stw	r3,0(r2)
	X_STOP =  CURR_SCORE_X+ SCORE_WIDTH;
10000f28:	d0a00017 	ldw	r2,-32768(gp)
10000f2c:	10800304 	addi	r2,r2,12
10000f30:	00c08ac4 	movi	r3,555
10000f34:	10c00015 	stw	r3,0(r2)
	Y_START = CURR_SCORE_Y;
10000f38:	d0a00017 	ldw	r2,-32768(gp)
10000f3c:	10800204 	addi	r2,r2,8
10000f40:	00c01404 	movi	r3,80
10000f44:	10c00015 	stw	r3,0(r2)
	Y_STOP = CURR_SCORE_Y + SCORE_HEIGHT;
10000f48:	d0a00017 	ldw	r2,-32768(gp)
10000f4c:	10800404 	addi	r2,r2,16
10000f50:	00c01904 	movi	r3,100
10000f54:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10000f58:	d0a00017 	ldw	r2,-32768(gp)
10000f5c:	10800604 	addi	r2,r2,24
10000f60:	00c00044 	movi	r3,1
10000f64:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10000f68:	0001883a 	nop
10000f6c:	d0a00017 	ldw	r2,-32768(gp)
10000f70:	10800704 	addi	r2,r2,28
10000f74:	10800017 	ldw	r2,0(r2)
10000f78:	103ffc26 	beq	r2,zero,10000f6c <__alt_data_end+0xf8000f6c>
	DRAW_START = 0;
10000f7c:	d0a00017 	ldw	r2,-32768(gp)
10000f80:	10800604 	addi	r2,r2,24
10000f84:	10000015 	stw	zero,0(r2)
	int digit3 = score/100;
10000f88:	e0bfff17 	ldw	r2,-4(fp)
10000f8c:	01401904 	movi	r5,100
10000f90:	1009883a 	mov	r4,r2
10000f94:	00083cc0 	call	100083cc <__divsi3>
10000f98:	e0bffc15 	stw	r2,-16(fp)
	if(digit3 == 0)
10000f9c:	e0bffc17 	ldw	r2,-16(fp)
10000fa0:	1000021e 	bne	r2,zero,10000fac <draw_Score_Ingame+0xb4>
		digit3 = 10;
10000fa4:	00800284 	movi	r2,10
10000fa8:	e0bffc15 	stw	r2,-16(fp)
	int digit2 = score/10%10;
10000fac:	e0bfff17 	ldw	r2,-4(fp)
10000fb0:	01400284 	movi	r5,10
10000fb4:	1009883a 	mov	r4,r2
10000fb8:	00083cc0 	call	100083cc <__divsi3>
10000fbc:	01400284 	movi	r5,10
10000fc0:	1009883a 	mov	r4,r2
10000fc4:	00084500 	call	10008450 <__modsi3>
10000fc8:	e0bffd15 	stw	r2,-12(fp)
	if(digit3 == 10 && digit2 == 0)
10000fcc:	e0bffc17 	ldw	r2,-16(fp)
10000fd0:	10800298 	cmpnei	r2,r2,10
10000fd4:	1000041e 	bne	r2,zero,10000fe8 <draw_Score_Ingame+0xf0>
10000fd8:	e0bffd17 	ldw	r2,-12(fp)
10000fdc:	1000021e 	bne	r2,zero,10000fe8 <draw_Score_Ingame+0xf0>
		digit2 = 10;
10000fe0:	00800284 	movi	r2,10
10000fe4:	e0bffd15 	stw	r2,-12(fp)
	int digit1 = score%10;
10000fe8:	e0bfff17 	ldw	r2,-4(fp)
10000fec:	01400284 	movi	r5,10
10000ff0:	1009883a 	mov	r4,r2
10000ff4:	00084500 	call	10008450 <__modsi3>
10000ff8:	e0bffe15 	stw	r2,-8(fp)
	draw_Num(digit3,CURR_SCORE_X+ SCORE_WIDTH+10 ,CURR_SCORE_Y);
10000ffc:	01801404 	movi	r6,80
10001000:	01408d44 	movi	r5,565
10001004:	e13ffc17 	ldw	r4,-16(fp)
10001008:	0000d980 	call	10000d98 <draw_Num>
	draw_Num(digit2,CURR_SCORE_X+ SCORE_WIDTH+12+NUMBER_WIDTH ,CURR_SCORE_Y);
1000100c:	01801404 	movi	r6,80
10001010:	014091c4 	movi	r5,583
10001014:	e13ffd17 	ldw	r4,-12(fp)
10001018:	0000d980 	call	10000d98 <draw_Num>
	draw_Num(digit1,CURR_SCORE_X+ SCORE_WIDTH+14+NUMBER_WIDTH*2 ,CURR_SCORE_Y);
1000101c:	01801404 	movi	r6,80
10001020:	01409644 	movi	r5,601
10001024:	e13ffe17 	ldw	r4,-8(fp)
10001028:	0000d980 	call	10000d98 <draw_Num>
}
1000102c:	0001883a 	nop
10001030:	e037883a 	mov	sp,fp
10001034:	dfc00117 	ldw	ra,4(sp)
10001038:	df000017 	ldw	fp,0(sp)
1000103c:	dec00204 	addi	sp,sp,8
10001040:	f800283a 	ret

10001044 <draw_Time_Ingame>:


void draw_Time_Ingame(int sec){
10001044:	defffb04 	addi	sp,sp,-20
10001048:	dfc00415 	stw	ra,16(sp)
1000104c:	df000315 	stw	fp,12(sp)
10001050:	df000304 	addi	fp,sp,12
10001054:	e13fff15 	stw	r4,-4(fp)
	IDX = TIME_IDXSTART;
10001058:	d0a00017 	ldw	r2,-32768(gp)
1000105c:	00c01884 	movi	r3,98
10001060:	10c00015 	stw	r3,0(r2)
	X_START = CURR_TIME_X;
10001064:	d0a00017 	ldw	r2,-32768(gp)
10001068:	10800104 	addi	r2,r2,4
1000106c:	00c07804 	movi	r3,480
10001070:	10c00015 	stw	r3,0(r2)
	X_STOP =  CURR_TIME_X+ TIME_WIDTH;
10001074:	d0a00017 	ldw	r2,-32768(gp)
10001078:	10800304 	addi	r2,r2,12
1000107c:	00c08a84 	movi	r3,554
10001080:	10c00015 	stw	r3,0(r2)
	Y_START = CURR_TIME_Y;
10001084:	d0a00017 	ldw	r2,-32768(gp)
10001088:	10800204 	addi	r2,r2,8
1000108c:	00c00784 	movi	r3,30
10001090:	10c00015 	stw	r3,0(r2)
	Y_STOP = CURR_TIME_Y + TIME_HEIGHT;
10001094:	d0a00017 	ldw	r2,-32768(gp)
10001098:	10800404 	addi	r2,r2,16
1000109c:	00c00d04 	movi	r3,52
100010a0:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
100010a4:	d0a00017 	ldw	r2,-32768(gp)
100010a8:	10800604 	addi	r2,r2,24
100010ac:	00c00044 	movi	r3,1
100010b0:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
100010b4:	0001883a 	nop
100010b8:	d0a00017 	ldw	r2,-32768(gp)
100010bc:	10800704 	addi	r2,r2,28
100010c0:	10800017 	ldw	r2,0(r2)
100010c4:	103ffc26 	beq	r2,zero,100010b8 <__alt_data_end+0xf80010b8>
	DRAW_START = 0;
100010c8:	d0a00017 	ldw	r2,-32768(gp)
100010cc:	10800604 	addi	r2,r2,24
100010d0:	10000015 	stw	zero,0(r2)
	int digit2 = sec/10;
100010d4:	e0bfff17 	ldw	r2,-4(fp)
100010d8:	01400284 	movi	r5,10
100010dc:	1009883a 	mov	r4,r2
100010e0:	00083cc0 	call	100083cc <__divsi3>
100010e4:	e0bffd15 	stw	r2,-12(fp)
	if(digit2 == 0)
100010e8:	e0bffd17 	ldw	r2,-12(fp)
100010ec:	1000021e 	bne	r2,zero,100010f8 <draw_Time_Ingame+0xb4>
		digit2 = 10;
100010f0:	00800284 	movi	r2,10
100010f4:	e0bffd15 	stw	r2,-12(fp)
	int digit1 = sec%10;
100010f8:	e0bfff17 	ldw	r2,-4(fp)
100010fc:	01400284 	movi	r5,10
10001100:	1009883a 	mov	r4,r2
10001104:	00084500 	call	10008450 <__modsi3>
10001108:	e0bffe15 	stw	r2,-8(fp)
	draw_Num(digit2,CURR_TIME_X+ SCORE_WIDTH+12+NUMBER_WIDTH ,CURR_TIME_Y);
1000110c:	01800784 	movi	r6,30
10001110:	014091c4 	movi	r5,583
10001114:	e13ffd17 	ldw	r4,-12(fp)
10001118:	0000d980 	call	10000d98 <draw_Num>
	draw_Num(digit1,CURR_TIME_X+ SCORE_WIDTH+14+NUMBER_WIDTH*2 ,CURR_TIME_Y);
1000111c:	01800784 	movi	r6,30
10001120:	01409644 	movi	r5,601
10001124:	e13ffe17 	ldw	r4,-8(fp)
10001128:	0000d980 	call	10000d98 <draw_Num>
}
1000112c:	0001883a 	nop
10001130:	e037883a 	mov	sp,fp
10001134:	dfc00117 	ldw	ra,4(sp)
10001138:	df000017 	ldw	fp,0(sp)
1000113c:	dec00204 	addi	sp,sp,8
10001140:	f800283a 	ret

10001144 <delay_loop>:
#define CURR_SCORE_Y 80
#define CURR_TIME_X 480
#define CURR_TIME_Y 30

//Functions
static void delay_loop(){
10001144:	defffe04 	addi	sp,sp,-8
10001148:	df000115 	stw	fp,4(sp)
1000114c:	df000104 	addi	fp,sp,4
	for(int i = 0; i < DELAY_TIME; i++);
10001150:	e03fff15 	stw	zero,-4(fp)
10001154:	00000306 	br	10001164 <delay_loop+0x20>
10001158:	e0bfff17 	ldw	r2,-4(fp)
1000115c:	10800044 	addi	r2,r2,1
10001160:	e0bfff15 	stw	r2,-4(fp)
10001164:	e0bfff17 	ldw	r2,-4(fp)
10001168:	1087d010 	cmplti	r2,r2,8000
1000116c:	103ffa1e 	bne	r2,zero,10001158 <__alt_data_end+0xf8001158>
}
10001170:	0001883a 	nop
10001174:	e037883a 	mov	sp,fp
10001178:	df000017 	ldw	fp,0(sp)
1000117c:	dec00104 	addi	sp,sp,4
10001180:	f800283a 	ret

10001184 <randomNumbers>:
#include "FishNet.h"
#include "FishNetPrototype.h"
//BWFISH 4 - 7
//PFISH 2 - 4

void randomNumbers(int* nums, int* total){
10001184:	defff604 	addi	sp,sp,-40
10001188:	dfc00915 	stw	ra,36(sp)
1000118c:	df000815 	stw	fp,32(sp)
10001190:	df000804 	addi	fp,sp,32
10001194:	e13ffe15 	stw	r4,-8(fp)
10001198:	e17fff15 	stw	r5,-4(fp)
	int BWNUM = rand() % (BW_FISH_NUM_MAX - BW_FISH_NUM_MIN + 1) + BW_FISH_NUM_MIN;
1000119c:	000c0d40 	call	1000c0d4 <rand>
100011a0:	1007883a 	mov	r3,r2
100011a4:	00a00034 	movhi	r2,32768
100011a8:	108000c4 	addi	r2,r2,3
100011ac:	1884703a 	and	r2,r3,r2
100011b0:	1000040e 	bge	r2,zero,100011c4 <randomNumbers+0x40>
100011b4:	10bfffc4 	addi	r2,r2,-1
100011b8:	00ffff04 	movi	r3,-4
100011bc:	10c4b03a 	or	r2,r2,r3
100011c0:	10800044 	addi	r2,r2,1
100011c4:	10800104 	addi	r2,r2,4
100011c8:	e0bff815 	stw	r2,-32(fp)
	int PNUM = rand() % (P_FISH_NUM_MAX - P_FISH_NUM_MIN + 1) + P_FISH_NUM_MIN;
100011cc:	000c0d40 	call	1000c0d4 <rand>
100011d0:	014000c4 	movi	r5,3
100011d4:	1009883a 	mov	r4,r2
100011d8:	00084500 	call	10008450 <__modsi3>
100011dc:	108000c4 	addi	r2,r2,3
100011e0:	e0bff915 	stw	r2,-28(fp)
	int YNUM = rand() % (Y_FISH_NUM_MAX - Y_FISH_NUM_MIN + 1) + Y_FISH_NUM_MIN;
100011e4:	000c0d40 	call	1000c0d4 <rand>
100011e8:	1007883a 	mov	r3,r2
100011ec:	00a00034 	movhi	r2,32768
100011f0:	108001c4 	addi	r2,r2,7
100011f4:	1884703a 	and	r2,r3,r2
100011f8:	1000040e 	bge	r2,zero,1000120c <randomNumbers+0x88>
100011fc:	10bfffc4 	addi	r2,r2,-1
10001200:	00fffe04 	movi	r3,-8
10001204:	10c4b03a 	or	r2,r2,r3
10001208:	10800044 	addi	r2,r2,1
1000120c:	10800204 	addi	r2,r2,8
10001210:	e0bffa15 	stw	r2,-24(fp)
	int RNUM = rand() % (R_FISH_NUM_MAX - R_FISH_NUM_MIN + 1) + R_FISH_NUM_MIN;
10001214:	000c0d40 	call	1000c0d4 <rand>
10001218:	014000c4 	movi	r5,3
1000121c:	1009883a 	mov	r4,r2
10001220:	00084500 	call	10008450 <__modsi3>
10001224:	108000c4 	addi	r2,r2,3
10001228:	e0bffb15 	stw	r2,-20(fp)
	int FLATNUM = rand() % (FLAT_FISH_NUM_MAX - FLAT_FISH_NUM_MIN + 1) + FLAT_FISH_NUM_MIN;
1000122c:	000c0d40 	call	1000c0d4 <rand>
10001230:	014000c4 	movi	r5,3
10001234:	1009883a 	mov	r4,r2
10001238:	00084500 	call	10008450 <__modsi3>
1000123c:	10800044 	addi	r2,r2,1
10001240:	e0bffc15 	stw	r2,-16(fp)
	int BLUNUM = rand() % (BLU_FISH_NUM_MAX - BLU_FISH_NUM_MIN + 1) + BLU_FISH_NUM_MIN;
10001244:	000c0d40 	call	1000c0d4 <rand>
10001248:	01400144 	movi	r5,5
1000124c:	1009883a 	mov	r4,r2
10001250:	00084500 	call	10008450 <__modsi3>
10001254:	10800104 	addi	r2,r2,4
10001258:	e0bffd15 	stw	r2,-12(fp)
	nums[0] = BWNUM;
1000125c:	e0bffe17 	ldw	r2,-8(fp)
10001260:	e0fff817 	ldw	r3,-32(fp)
10001264:	10c00015 	stw	r3,0(r2)
	nums[1] = PNUM;
10001268:	e0bffe17 	ldw	r2,-8(fp)
1000126c:	10800104 	addi	r2,r2,4
10001270:	e0fff917 	ldw	r3,-28(fp)
10001274:	10c00015 	stw	r3,0(r2)
	nums[2] = YNUM;
10001278:	e0bffe17 	ldw	r2,-8(fp)
1000127c:	10800204 	addi	r2,r2,8
10001280:	e0fffa17 	ldw	r3,-24(fp)
10001284:	10c00015 	stw	r3,0(r2)
	nums[3] = RNUM;
10001288:	e0bffe17 	ldw	r2,-8(fp)
1000128c:	10800304 	addi	r2,r2,12
10001290:	e0fffb17 	ldw	r3,-20(fp)
10001294:	10c00015 	stw	r3,0(r2)
	nums[4] = FLATNUM;
10001298:	e0bffe17 	ldw	r2,-8(fp)
1000129c:	10800404 	addi	r2,r2,16
100012a0:	e0fffc17 	ldw	r3,-16(fp)
100012a4:	10c00015 	stw	r3,0(r2)
	nums[5] = BLUNUM;
100012a8:	e0bffe17 	ldw	r2,-8(fp)
100012ac:	10800504 	addi	r2,r2,20
100012b0:	e0fffd17 	ldw	r3,-12(fp)
100012b4:	10c00015 	stw	r3,0(r2)

	*total = BWNUM + PNUM + YNUM + RNUM + FLATNUM + BLUNUM ;
100012b8:	e0fff817 	ldw	r3,-32(fp)
100012bc:	e0bff917 	ldw	r2,-28(fp)
100012c0:	1887883a 	add	r3,r3,r2
100012c4:	e0bffa17 	ldw	r2,-24(fp)
100012c8:	1887883a 	add	r3,r3,r2
100012cc:	e0bffb17 	ldw	r2,-20(fp)
100012d0:	1887883a 	add	r3,r3,r2
100012d4:	e0bffc17 	ldw	r2,-16(fp)
100012d8:	1887883a 	add	r3,r3,r2
100012dc:	e0bffd17 	ldw	r2,-12(fp)
100012e0:	1887883a 	add	r3,r3,r2
100012e4:	e0bfff17 	ldw	r2,-4(fp)
100012e8:	10c00015 	stw	r3,0(r2)
}
100012ec:	0001883a 	nop
100012f0:	e037883a 	mov	sp,fp
100012f4:	dfc00117 	ldw	ra,4(sp)
100012f8:	df000017 	ldw	fp,0(sp)
100012fc:	dec00204 	addi	sp,sp,8
10001300:	f800283a 	ret

10001304 <generateFish>:

void generateFish(int* nums, Animal * animals){
10001304:	deffe604 	addi	sp,sp,-104
10001308:	dfc01915 	stw	ra,100(sp)
1000130c:	df001815 	stw	fp,96(sp)
10001310:	df001804 	addi	fp,sp,96
10001314:	e13ffe15 	stw	r4,-8(fp)
10001318:	e17fff15 	stw	r5,-4(fp)
	//First part corresponds to BW_FISH
	//Second part corresponds to P_FISH
	int idx = 0;
1000131c:	e03fe815 	stw	zero,-96(fp)
	for(int i = 0; i < NUM_TYPE_FISH; i++){
10001320:	e03fe915 	stw	zero,-92(fp)
10001324:	00026706 	br	10001cc4 <generateFish+0x9c0>
		int curNum = nums[i];
10001328:	e0bfe917 	ldw	r2,-92(fp)
1000132c:	1085883a 	add	r2,r2,r2
10001330:	1085883a 	add	r2,r2,r2
10001334:	1007883a 	mov	r3,r2
10001338:	e0bffe17 	ldw	r2,-8(fp)
1000133c:	10c5883a 	add	r2,r2,r3
10001340:	10800017 	ldw	r2,0(r2)
10001344:	e0bff015 	stw	r2,-64(fp)
		switch(i){
10001348:	e0bfe917 	ldw	r2,-92(fp)
1000134c:	108001a8 	cmpgeui	r2,r2,6
10001350:	1002551e 	bne	r2,zero,10001ca8 <generateFish+0x9a4>
10001354:	e0bfe917 	ldw	r2,-92(fp)
10001358:	100690ba 	slli	r3,r2,2
1000135c:	00840034 	movhi	r2,4096
10001360:	1084dc04 	addi	r2,r2,4976
10001364:	1885883a 	add	r2,r3,r2
10001368:	10800017 	ldw	r2,0(r2)
1000136c:	1000683a 	jmp	r2
10001370:	10001388 	cmpgei	zero,r2,78
10001374:	1000151c 	xori	zero,r2,84
10001378:	100016a8 	cmpgeui	zero,r2,90
1000137c:	1000183c 	xorhi	zero,r2,96
10001380:	100019a4 	muli	zero,r2,102
10001384:	10001b14 	ori	zero,r2,108
		case 0 : //BW_FISH
			for(int j = 0; j < curNum; j++){
10001388:	e03fea15 	stw	zero,-88(fp)
1000138c:	00005f06 	br	1000150c <generateFish+0x208>
				Animal bwfish = BW_FISH;
10001390:	008400b4 	movhi	r2,4098
10001394:	10a7d504 	addi	r2,r2,-24748
10001398:	10c00017 	ldw	r3,0(r2)
1000139c:	e0fff115 	stw	r3,-60(fp)
100013a0:	10c00117 	ldw	r3,4(r2)
100013a4:	e0fff215 	stw	r3,-56(fp)
100013a8:	10c00217 	ldw	r3,8(r2)
100013ac:	e0fff315 	stw	r3,-52(fp)
100013b0:	10c00317 	ldw	r3,12(r2)
100013b4:	e0fff415 	stw	r3,-48(fp)
100013b8:	10c00417 	ldw	r3,16(r2)
100013bc:	e0fff515 	stw	r3,-44(fp)
100013c0:	10c00517 	ldw	r3,20(r2)
100013c4:	e0fff615 	stw	r3,-40(fp)
100013c8:	10c00617 	ldw	r3,24(r2)
100013cc:	e0fff715 	stw	r3,-36(fp)
100013d0:	10c00717 	ldw	r3,28(r2)
100013d4:	e0fff815 	stw	r3,-32(fp)
100013d8:	10c00817 	ldw	r3,32(r2)
100013dc:	e0fff915 	stw	r3,-28(fp)
100013e0:	10c00917 	ldw	r3,36(r2)
100013e4:	e0fffa15 	stw	r3,-24(fp)
100013e8:	10c00a17 	ldw	r3,40(r2)
100013ec:	e0fffb15 	stw	r3,-20(fp)
100013f0:	10c00b17 	ldw	r3,44(r2)
100013f4:	e0fffc15 	stw	r3,-16(fp)
100013f8:	10800c17 	ldw	r2,48(r2)
100013fc:	e0bffd15 	stw	r2,-12(fp)
				bwfish.y = rand() % (480 - BWFISH_HEIGHT);
10001400:	000c0d40 	call	1000c0d4 <rand>
10001404:	01406cc4 	movi	r5,435
10001408:	1009883a 	mov	r4,r2
1000140c:	00084500 	call	10008450 <__modsi3>
10001410:	e0bff715 	stw	r2,-36(fp)
				bwfish.x = rand() % (640 - BWFISH_WIDTH);
10001414:	000c0d40 	call	1000c0d4 <rand>
10001418:	01409844 	movi	r5,609
1000141c:	1009883a 	mov	r4,r2
10001420:	00084500 	call	10008450 <__modsi3>
10001424:	e0bff615 	stw	r2,-40(fp)
				bwfish.velocity = -1 * (rand() % (BW_FISH_VELO_MAX - BW_FISH_VELO_MIN + 1) + BW_FISH_VELO_MIN);
10001428:	000c0d40 	call	1000c0d4 <rand>
1000142c:	014000c4 	movi	r5,3
10001430:	1009883a 	mov	r4,r2
10001434:	00084500 	call	10008450 <__modsi3>
10001438:	1007883a 	mov	r3,r2
1000143c:	00bfff84 	movi	r2,-2
10001440:	10c5c83a 	sub	r2,r2,r3
10001444:	e0bffa15 	stw	r2,-24(fp)
				bwfish.func = rand() % 2;
10001448:	000c0d40 	call	1000c0d4 <rand>
1000144c:	1007883a 	mov	r3,r2
10001450:	00a00034 	movhi	r2,32768
10001454:	10800044 	addi	r2,r2,1
10001458:	1884703a 	and	r2,r3,r2
1000145c:	1000040e 	bge	r2,zero,10001470 <generateFish+0x16c>
10001460:	10bfffc4 	addi	r2,r2,-1
10001464:	00ffff84 	movi	r3,-2
10001468:	10c4b03a 	or	r2,r2,r3
1000146c:	10800044 	addi	r2,r2,1
10001470:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = bwfish;
10001474:	e0ffe817 	ldw	r3,-96(fp)
10001478:	e0bfea17 	ldw	r2,-88(fp)
1000147c:	1885883a 	add	r2,r3,r2
10001480:	01400d04 	movi	r5,52
10001484:	1009883a 	mov	r4,r2
10001488:	00085800 	call	10008580 <__mulsi3>
1000148c:	1007883a 	mov	r3,r2
10001490:	e0bfff17 	ldw	r2,-4(fp)
10001494:	10c5883a 	add	r2,r2,r3
10001498:	e0fff117 	ldw	r3,-60(fp)
1000149c:	10c00015 	stw	r3,0(r2)
100014a0:	e0fff217 	ldw	r3,-56(fp)
100014a4:	10c00115 	stw	r3,4(r2)
100014a8:	e0fff317 	ldw	r3,-52(fp)
100014ac:	10c00215 	stw	r3,8(r2)
100014b0:	e0fff417 	ldw	r3,-48(fp)
100014b4:	10c00315 	stw	r3,12(r2)
100014b8:	e0fff517 	ldw	r3,-44(fp)
100014bc:	10c00415 	stw	r3,16(r2)
100014c0:	e0fff617 	ldw	r3,-40(fp)
100014c4:	10c00515 	stw	r3,20(r2)
100014c8:	e0fff717 	ldw	r3,-36(fp)
100014cc:	10c00615 	stw	r3,24(r2)
100014d0:	e0fff817 	ldw	r3,-32(fp)
100014d4:	10c00715 	stw	r3,28(r2)
100014d8:	e0fff917 	ldw	r3,-28(fp)
100014dc:	10c00815 	stw	r3,32(r2)
100014e0:	e0fffa17 	ldw	r3,-24(fp)
100014e4:	10c00915 	stw	r3,36(r2)
100014e8:	e0fffb17 	ldw	r3,-20(fp)
100014ec:	10c00a15 	stw	r3,40(r2)
100014f0:	e0fffc17 	ldw	r3,-16(fp)
100014f4:	10c00b15 	stw	r3,44(r2)
100014f8:	e0fffd17 	ldw	r3,-12(fp)
100014fc:	10c00c15 	stw	r3,48(r2)
	int idx = 0;
	for(int i = 0; i < NUM_TYPE_FISH; i++){
		int curNum = nums[i];
		switch(i){
		case 0 : //BW_FISH
			for(int j = 0; j < curNum; j++){
10001500:	e0bfea17 	ldw	r2,-88(fp)
10001504:	10800044 	addi	r2,r2,1
10001508:	e0bfea15 	stw	r2,-88(fp)
1000150c:	e0ffea17 	ldw	r3,-88(fp)
10001510:	e0bff017 	ldw	r2,-64(fp)
10001514:	18bf9e16 	blt	r3,r2,10001390 <__alt_data_end+0xf8001390>
				bwfish.x = rand() % (640 - BWFISH_WIDTH);
				bwfish.velocity = -1 * (rand() % (BW_FISH_VELO_MAX - BW_FISH_VELO_MIN + 1) + BW_FISH_VELO_MIN);
				bwfish.func = rand() % 2;
				animals[idx + j] = bwfish;
			}
			break;
10001518:	0001e306 	br	10001ca8 <generateFish+0x9a4>
		case 1: //P_FISH
			for(int j = 0; j < curNum; j++){
1000151c:	e03feb15 	stw	zero,-84(fp)
10001520:	00005d06 	br	10001698 <generateFish+0x394>
				Animal pfish = P_FISH;
10001524:	008400b4 	movhi	r2,4098
10001528:	10a7e204 	addi	r2,r2,-24696
1000152c:	10c00017 	ldw	r3,0(r2)
10001530:	e0fff115 	stw	r3,-60(fp)
10001534:	10c00117 	ldw	r3,4(r2)
10001538:	e0fff215 	stw	r3,-56(fp)
1000153c:	10c00217 	ldw	r3,8(r2)
10001540:	e0fff315 	stw	r3,-52(fp)
10001544:	10c00317 	ldw	r3,12(r2)
10001548:	e0fff415 	stw	r3,-48(fp)
1000154c:	10c00417 	ldw	r3,16(r2)
10001550:	e0fff515 	stw	r3,-44(fp)
10001554:	10c00517 	ldw	r3,20(r2)
10001558:	e0fff615 	stw	r3,-40(fp)
1000155c:	10c00617 	ldw	r3,24(r2)
10001560:	e0fff715 	stw	r3,-36(fp)
10001564:	10c00717 	ldw	r3,28(r2)
10001568:	e0fff815 	stw	r3,-32(fp)
1000156c:	10c00817 	ldw	r3,32(r2)
10001570:	e0fff915 	stw	r3,-28(fp)
10001574:	10c00917 	ldw	r3,36(r2)
10001578:	e0fffa15 	stw	r3,-24(fp)
1000157c:	10c00a17 	ldw	r3,40(r2)
10001580:	e0fffb15 	stw	r3,-20(fp)
10001584:	10c00b17 	ldw	r3,44(r2)
10001588:	e0fffc15 	stw	r3,-16(fp)
1000158c:	10800c17 	ldw	r2,48(r2)
10001590:	e0bffd15 	stw	r2,-12(fp)
				pfish.y = rand() % (480 - PFISH_HEIGHT);
10001594:	000c0d40 	call	1000c0d4 <rand>
10001598:	01406944 	movi	r5,421
1000159c:	1009883a 	mov	r4,r2
100015a0:	00084500 	call	10008450 <__modsi3>
100015a4:	e0bff715 	stw	r2,-36(fp)
				pfish.x = rand() % (640 - PFISH_WIDTH);
100015a8:	000c0d40 	call	1000c0d4 <rand>
100015ac:	01409344 	movi	r5,589
100015b0:	1009883a 	mov	r4,r2
100015b4:	00084500 	call	10008450 <__modsi3>
100015b8:	e0bff615 	stw	r2,-40(fp)
				pfish.velocity = (rand() % (P_FISH_VELO_MAX - P_FISH_VELO_MIN + 1) + P_FISH_VELO_MIN);
100015bc:	000c0d40 	call	1000c0d4 <rand>
100015c0:	014000c4 	movi	r5,3
100015c4:	1009883a 	mov	r4,r2
100015c8:	00084500 	call	10008450 <__modsi3>
100015cc:	108000c4 	addi	r2,r2,3
100015d0:	e0bffa15 	stw	r2,-24(fp)
				pfish.func = rand() % 2;
100015d4:	000c0d40 	call	1000c0d4 <rand>
100015d8:	1007883a 	mov	r3,r2
100015dc:	00a00034 	movhi	r2,32768
100015e0:	10800044 	addi	r2,r2,1
100015e4:	1884703a 	and	r2,r3,r2
100015e8:	1000040e 	bge	r2,zero,100015fc <generateFish+0x2f8>
100015ec:	10bfffc4 	addi	r2,r2,-1
100015f0:	00ffff84 	movi	r3,-2
100015f4:	10c4b03a 	or	r2,r2,r3
100015f8:	10800044 	addi	r2,r2,1
100015fc:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = pfish;
10001600:	e0ffe817 	ldw	r3,-96(fp)
10001604:	e0bfeb17 	ldw	r2,-84(fp)
10001608:	1885883a 	add	r2,r3,r2
1000160c:	01400d04 	movi	r5,52
10001610:	1009883a 	mov	r4,r2
10001614:	00085800 	call	10008580 <__mulsi3>
10001618:	1007883a 	mov	r3,r2
1000161c:	e0bfff17 	ldw	r2,-4(fp)
10001620:	10c5883a 	add	r2,r2,r3
10001624:	e0fff117 	ldw	r3,-60(fp)
10001628:	10c00015 	stw	r3,0(r2)
1000162c:	e0fff217 	ldw	r3,-56(fp)
10001630:	10c00115 	stw	r3,4(r2)
10001634:	e0fff317 	ldw	r3,-52(fp)
10001638:	10c00215 	stw	r3,8(r2)
1000163c:	e0fff417 	ldw	r3,-48(fp)
10001640:	10c00315 	stw	r3,12(r2)
10001644:	e0fff517 	ldw	r3,-44(fp)
10001648:	10c00415 	stw	r3,16(r2)
1000164c:	e0fff617 	ldw	r3,-40(fp)
10001650:	10c00515 	stw	r3,20(r2)
10001654:	e0fff717 	ldw	r3,-36(fp)
10001658:	10c00615 	stw	r3,24(r2)
1000165c:	e0fff817 	ldw	r3,-32(fp)
10001660:	10c00715 	stw	r3,28(r2)
10001664:	e0fff917 	ldw	r3,-28(fp)
10001668:	10c00815 	stw	r3,32(r2)
1000166c:	e0fffa17 	ldw	r3,-24(fp)
10001670:	10c00915 	stw	r3,36(r2)
10001674:	e0fffb17 	ldw	r3,-20(fp)
10001678:	10c00a15 	stw	r3,40(r2)
1000167c:	e0fffc17 	ldw	r3,-16(fp)
10001680:	10c00b15 	stw	r3,44(r2)
10001684:	e0fffd17 	ldw	r3,-12(fp)
10001688:	10c00c15 	stw	r3,48(r2)
				bwfish.func = rand() % 2;
				animals[idx + j] = bwfish;
			}
			break;
		case 1: //P_FISH
			for(int j = 0; j < curNum; j++){
1000168c:	e0bfeb17 	ldw	r2,-84(fp)
10001690:	10800044 	addi	r2,r2,1
10001694:	e0bfeb15 	stw	r2,-84(fp)
10001698:	e0ffeb17 	ldw	r3,-84(fp)
1000169c:	e0bff017 	ldw	r2,-64(fp)
100016a0:	18bfa016 	blt	r3,r2,10001524 <__alt_data_end+0xf8001524>
				pfish.x = rand() % (640 - PFISH_WIDTH);
				pfish.velocity = (rand() % (P_FISH_VELO_MAX - P_FISH_VELO_MIN + 1) + P_FISH_VELO_MIN);
				pfish.func = rand() % 2;
				animals[idx + j] = pfish;
			}
			break;
100016a4:	00018006 	br	10001ca8 <generateFish+0x9a4>
		case 2: //Y_FISH
			for(int j = 0; j < curNum; j++){
100016a8:	e03fec15 	stw	zero,-80(fp)
100016ac:	00005f06 	br	1000182c <generateFish+0x528>
				Animal yfish = Y_FISH;
100016b0:	008400b4 	movhi	r2,4098
100016b4:	10a7ef04 	addi	r2,r2,-24644
100016b8:	10c00017 	ldw	r3,0(r2)
100016bc:	e0fff115 	stw	r3,-60(fp)
100016c0:	10c00117 	ldw	r3,4(r2)
100016c4:	e0fff215 	stw	r3,-56(fp)
100016c8:	10c00217 	ldw	r3,8(r2)
100016cc:	e0fff315 	stw	r3,-52(fp)
100016d0:	10c00317 	ldw	r3,12(r2)
100016d4:	e0fff415 	stw	r3,-48(fp)
100016d8:	10c00417 	ldw	r3,16(r2)
100016dc:	e0fff515 	stw	r3,-44(fp)
100016e0:	10c00517 	ldw	r3,20(r2)
100016e4:	e0fff615 	stw	r3,-40(fp)
100016e8:	10c00617 	ldw	r3,24(r2)
100016ec:	e0fff715 	stw	r3,-36(fp)
100016f0:	10c00717 	ldw	r3,28(r2)
100016f4:	e0fff815 	stw	r3,-32(fp)
100016f8:	10c00817 	ldw	r3,32(r2)
100016fc:	e0fff915 	stw	r3,-28(fp)
10001700:	10c00917 	ldw	r3,36(r2)
10001704:	e0fffa15 	stw	r3,-24(fp)
10001708:	10c00a17 	ldw	r3,40(r2)
1000170c:	e0fffb15 	stw	r3,-20(fp)
10001710:	10c00b17 	ldw	r3,44(r2)
10001714:	e0fffc15 	stw	r3,-16(fp)
10001718:	10800c17 	ldw	r2,48(r2)
1000171c:	e0bffd15 	stw	r2,-12(fp)
				yfish.y = rand() % (480 - YFISH_HEIGHT);
10001720:	000c0d40 	call	1000c0d4 <rand>
10001724:	01407144 	movi	r5,453
10001728:	1009883a 	mov	r4,r2
1000172c:	00084500 	call	10008450 <__modsi3>
10001730:	e0bff715 	stw	r2,-36(fp)
				yfish.x = rand() % (640 - YFISH_WIDTH);
10001734:	000c0d40 	call	1000c0d4 <rand>
10001738:	01409784 	movi	r5,606
1000173c:	1009883a 	mov	r4,r2
10001740:	00084500 	call	10008450 <__modsi3>
10001744:	e0bff615 	stw	r2,-40(fp)
				yfish.velocity = -1 * ((rand() % (Y_FISH_VELO_MAX - Y_FISH_VELO_MIN + 1) + Y_FISH_VELO_MIN));
10001748:	000c0d40 	call	1000c0d4 <rand>
1000174c:	01400184 	movi	r5,6
10001750:	1009883a 	mov	r4,r2
10001754:	00084500 	call	10008450 <__modsi3>
10001758:	1007883a 	mov	r3,r2
1000175c:	00bffec4 	movi	r2,-5
10001760:	10c5c83a 	sub	r2,r2,r3
10001764:	e0bffa15 	stw	r2,-24(fp)
				yfish.func = rand() % 2;
10001768:	000c0d40 	call	1000c0d4 <rand>
1000176c:	1007883a 	mov	r3,r2
10001770:	00a00034 	movhi	r2,32768
10001774:	10800044 	addi	r2,r2,1
10001778:	1884703a 	and	r2,r3,r2
1000177c:	1000040e 	bge	r2,zero,10001790 <generateFish+0x48c>
10001780:	10bfffc4 	addi	r2,r2,-1
10001784:	00ffff84 	movi	r3,-2
10001788:	10c4b03a 	or	r2,r2,r3
1000178c:	10800044 	addi	r2,r2,1
10001790:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = yfish;
10001794:	e0ffe817 	ldw	r3,-96(fp)
10001798:	e0bfec17 	ldw	r2,-80(fp)
1000179c:	1885883a 	add	r2,r3,r2
100017a0:	01400d04 	movi	r5,52
100017a4:	1009883a 	mov	r4,r2
100017a8:	00085800 	call	10008580 <__mulsi3>
100017ac:	1007883a 	mov	r3,r2
100017b0:	e0bfff17 	ldw	r2,-4(fp)
100017b4:	10c5883a 	add	r2,r2,r3
100017b8:	e0fff117 	ldw	r3,-60(fp)
100017bc:	10c00015 	stw	r3,0(r2)
100017c0:	e0fff217 	ldw	r3,-56(fp)
100017c4:	10c00115 	stw	r3,4(r2)
100017c8:	e0fff317 	ldw	r3,-52(fp)
100017cc:	10c00215 	stw	r3,8(r2)
100017d0:	e0fff417 	ldw	r3,-48(fp)
100017d4:	10c00315 	stw	r3,12(r2)
100017d8:	e0fff517 	ldw	r3,-44(fp)
100017dc:	10c00415 	stw	r3,16(r2)
100017e0:	e0fff617 	ldw	r3,-40(fp)
100017e4:	10c00515 	stw	r3,20(r2)
100017e8:	e0fff717 	ldw	r3,-36(fp)
100017ec:	10c00615 	stw	r3,24(r2)
100017f0:	e0fff817 	ldw	r3,-32(fp)
100017f4:	10c00715 	stw	r3,28(r2)
100017f8:	e0fff917 	ldw	r3,-28(fp)
100017fc:	10c00815 	stw	r3,32(r2)
10001800:	e0fffa17 	ldw	r3,-24(fp)
10001804:	10c00915 	stw	r3,36(r2)
10001808:	e0fffb17 	ldw	r3,-20(fp)
1000180c:	10c00a15 	stw	r3,40(r2)
10001810:	e0fffc17 	ldw	r3,-16(fp)
10001814:	10c00b15 	stw	r3,44(r2)
10001818:	e0fffd17 	ldw	r3,-12(fp)
1000181c:	10c00c15 	stw	r3,48(r2)
				pfish.func = rand() % 2;
				animals[idx + j] = pfish;
			}
			break;
		case 2: //Y_FISH
			for(int j = 0; j < curNum; j++){
10001820:	e0bfec17 	ldw	r2,-80(fp)
10001824:	10800044 	addi	r2,r2,1
10001828:	e0bfec15 	stw	r2,-80(fp)
1000182c:	e0ffec17 	ldw	r3,-80(fp)
10001830:	e0bff017 	ldw	r2,-64(fp)
10001834:	18bf9e16 	blt	r3,r2,100016b0 <__alt_data_end+0xf80016b0>
				yfish.x = rand() % (640 - YFISH_WIDTH);
				yfish.velocity = -1 * ((rand() % (Y_FISH_VELO_MAX - Y_FISH_VELO_MIN + 1) + Y_FISH_VELO_MIN));
				yfish.func = rand() % 2;
				animals[idx + j] = yfish;
			}
			break;
10001838:	00011b06 	br	10001ca8 <generateFish+0x9a4>

		case 3: //R_FISH
			for(int j = 0; j < curNum; j++){
1000183c:	e03fed15 	stw	zero,-76(fp)
10001840:	00005406 	br	10001994 <generateFish+0x690>
				Animal rfish = R_FISH;
10001844:	008400b4 	movhi	r2,4098
10001848:	10a80904 	addi	r2,r2,-24540
1000184c:	10c00017 	ldw	r3,0(r2)
10001850:	e0fff115 	stw	r3,-60(fp)
10001854:	10c00117 	ldw	r3,4(r2)
10001858:	e0fff215 	stw	r3,-56(fp)
1000185c:	10c00217 	ldw	r3,8(r2)
10001860:	e0fff315 	stw	r3,-52(fp)
10001864:	10c00317 	ldw	r3,12(r2)
10001868:	e0fff415 	stw	r3,-48(fp)
1000186c:	10c00417 	ldw	r3,16(r2)
10001870:	e0fff515 	stw	r3,-44(fp)
10001874:	10c00517 	ldw	r3,20(r2)
10001878:	e0fff615 	stw	r3,-40(fp)
1000187c:	10c00617 	ldw	r3,24(r2)
10001880:	e0fff715 	stw	r3,-36(fp)
10001884:	10c00717 	ldw	r3,28(r2)
10001888:	e0fff815 	stw	r3,-32(fp)
1000188c:	10c00817 	ldw	r3,32(r2)
10001890:	e0fff915 	stw	r3,-28(fp)
10001894:	10c00917 	ldw	r3,36(r2)
10001898:	e0fffa15 	stw	r3,-24(fp)
1000189c:	10c00a17 	ldw	r3,40(r2)
100018a0:	e0fffb15 	stw	r3,-20(fp)
100018a4:	10c00b17 	ldw	r3,44(r2)
100018a8:	e0fffc15 	stw	r3,-16(fp)
100018ac:	10800c17 	ldw	r2,48(r2)
100018b0:	e0bffd15 	stw	r2,-12(fp)
				rfish.y = rand() % (480 - RFISH_HEIGHT);
100018b4:	000c0d40 	call	1000c0d4 <rand>
100018b8:	01406d44 	movi	r5,437
100018bc:	1009883a 	mov	r4,r2
100018c0:	00084500 	call	10008450 <__modsi3>
100018c4:	e0bff715 	stw	r2,-36(fp)
				rfish.x = rand() % (640 - RFISH_WIDTH);
100018c8:	000c0d40 	call	1000c0d4 <rand>
100018cc:	01409604 	movi	r5,600
100018d0:	1009883a 	mov	r4,r2
100018d4:	00084500 	call	10008450 <__modsi3>
100018d8:	e0bff615 	stw	r2,-40(fp)
				rfish.velocity = ((rand() % (R_FISH_VELO_MAX - R_FISH_VELO_MIN + 1) + R_FISH_VELO_MIN));
100018dc:	000c0d40 	call	1000c0d4 <rand>
100018e0:	014000c4 	movi	r5,3
100018e4:	1009883a 	mov	r4,r2
100018e8:	00084500 	call	10008450 <__modsi3>
100018ec:	108000c4 	addi	r2,r2,3
100018f0:	e0bffa15 	stw	r2,-24(fp)
				rfish.func = 2;
100018f4:	00800084 	movi	r2,2
100018f8:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = rfish;
100018fc:	e0ffe817 	ldw	r3,-96(fp)
10001900:	e0bfed17 	ldw	r2,-76(fp)
10001904:	1885883a 	add	r2,r3,r2
10001908:	01400d04 	movi	r5,52
1000190c:	1009883a 	mov	r4,r2
10001910:	00085800 	call	10008580 <__mulsi3>
10001914:	1007883a 	mov	r3,r2
10001918:	e0bfff17 	ldw	r2,-4(fp)
1000191c:	10c5883a 	add	r2,r2,r3
10001920:	e0fff117 	ldw	r3,-60(fp)
10001924:	10c00015 	stw	r3,0(r2)
10001928:	e0fff217 	ldw	r3,-56(fp)
1000192c:	10c00115 	stw	r3,4(r2)
10001930:	e0fff317 	ldw	r3,-52(fp)
10001934:	10c00215 	stw	r3,8(r2)
10001938:	e0fff417 	ldw	r3,-48(fp)
1000193c:	10c00315 	stw	r3,12(r2)
10001940:	e0fff517 	ldw	r3,-44(fp)
10001944:	10c00415 	stw	r3,16(r2)
10001948:	e0fff617 	ldw	r3,-40(fp)
1000194c:	10c00515 	stw	r3,20(r2)
10001950:	e0fff717 	ldw	r3,-36(fp)
10001954:	10c00615 	stw	r3,24(r2)
10001958:	e0fff817 	ldw	r3,-32(fp)
1000195c:	10c00715 	stw	r3,28(r2)
10001960:	e0fff917 	ldw	r3,-28(fp)
10001964:	10c00815 	stw	r3,32(r2)
10001968:	e0fffa17 	ldw	r3,-24(fp)
1000196c:	10c00915 	stw	r3,36(r2)
10001970:	e0fffb17 	ldw	r3,-20(fp)
10001974:	10c00a15 	stw	r3,40(r2)
10001978:	e0fffc17 	ldw	r3,-16(fp)
1000197c:	10c00b15 	stw	r3,44(r2)
10001980:	e0fffd17 	ldw	r3,-12(fp)
10001984:	10c00c15 	stw	r3,48(r2)
				animals[idx + j] = yfish;
			}
			break;

		case 3: //R_FISH
			for(int j = 0; j < curNum; j++){
10001988:	e0bfed17 	ldw	r2,-76(fp)
1000198c:	10800044 	addi	r2,r2,1
10001990:	e0bfed15 	stw	r2,-76(fp)
10001994:	e0ffed17 	ldw	r3,-76(fp)
10001998:	e0bff017 	ldw	r2,-64(fp)
1000199c:	18bfa916 	blt	r3,r2,10001844 <__alt_data_end+0xf8001844>
				rfish.x = rand() % (640 - RFISH_WIDTH);
				rfish.velocity = ((rand() % (R_FISH_VELO_MAX - R_FISH_VELO_MIN + 1) + R_FISH_VELO_MIN));
				rfish.func = 2;
				animals[idx + j] = rfish;
			}
			break;
100019a0:	0000c106 	br	10001ca8 <generateFish+0x9a4>

		case 4: //FLAT_FISH
			for(int j = 0; j < curNum; j++){
100019a4:	e03fee15 	stw	zero,-72(fp)
100019a8:	00005606 	br	10001b04 <generateFish+0x800>
				Animal flatfish = FLAT_FISH;
100019ac:	008400b4 	movhi	r2,4098
100019b0:	10a7fc04 	addi	r2,r2,-24592
100019b4:	10c00017 	ldw	r3,0(r2)
100019b8:	e0fff115 	stw	r3,-60(fp)
100019bc:	10c00117 	ldw	r3,4(r2)
100019c0:	e0fff215 	stw	r3,-56(fp)
100019c4:	10c00217 	ldw	r3,8(r2)
100019c8:	e0fff315 	stw	r3,-52(fp)
100019cc:	10c00317 	ldw	r3,12(r2)
100019d0:	e0fff415 	stw	r3,-48(fp)
100019d4:	10c00417 	ldw	r3,16(r2)
100019d8:	e0fff515 	stw	r3,-44(fp)
100019dc:	10c00517 	ldw	r3,20(r2)
100019e0:	e0fff615 	stw	r3,-40(fp)
100019e4:	10c00617 	ldw	r3,24(r2)
100019e8:	e0fff715 	stw	r3,-36(fp)
100019ec:	10c00717 	ldw	r3,28(r2)
100019f0:	e0fff815 	stw	r3,-32(fp)
100019f4:	10c00817 	ldw	r3,32(r2)
100019f8:	e0fff915 	stw	r3,-28(fp)
100019fc:	10c00917 	ldw	r3,36(r2)
10001a00:	e0fffa15 	stw	r3,-24(fp)
10001a04:	10c00a17 	ldw	r3,40(r2)
10001a08:	e0fffb15 	stw	r3,-20(fp)
10001a0c:	10c00b17 	ldw	r3,44(r2)
10001a10:	e0fffc15 	stw	r3,-16(fp)
10001a14:	10800c17 	ldw	r2,48(r2)
10001a18:	e0bffd15 	stw	r2,-12(fp)
				flatfish.y = rand() % (480 - FLATFISH_HEIGHT);
10001a1c:	000c0d40 	call	1000c0d4 <rand>
10001a20:	01406d84 	movi	r5,438
10001a24:	1009883a 	mov	r4,r2
10001a28:	00084500 	call	10008450 <__modsi3>
10001a2c:	e0bff715 	stw	r2,-36(fp)
				flatfish.x = rand() % (640 - FLATFISH_WIDTH);
10001a30:	000c0d40 	call	1000c0d4 <rand>
10001a34:	01408444 	movi	r5,529
10001a38:	1009883a 	mov	r4,r2
10001a3c:	00084500 	call	10008450 <__modsi3>
10001a40:	e0bff615 	stw	r2,-40(fp)
				flatfish.velocity = -1 * ((rand() % (FLAT_FISH_VELO_MAX - FLAT_FISH_VELO_MIN + 1) + FLAT_FISH_VELO_MIN));
10001a44:	000c0d40 	call	1000c0d4 <rand>
10001a48:	014001c4 	movi	r5,7
10001a4c:	1009883a 	mov	r4,r2
10001a50:	00084500 	call	10008450 <__modsi3>
10001a54:	1007883a 	mov	r3,r2
10001a58:	00bffe44 	movi	r2,-7
10001a5c:	10c5c83a 	sub	r2,r2,r3
10001a60:	e0bffa15 	stw	r2,-24(fp)
				flatfish.func = 2;
10001a64:	00800084 	movi	r2,2
10001a68:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = flatfish;
10001a6c:	e0ffe817 	ldw	r3,-96(fp)
10001a70:	e0bfee17 	ldw	r2,-72(fp)
10001a74:	1885883a 	add	r2,r3,r2
10001a78:	01400d04 	movi	r5,52
10001a7c:	1009883a 	mov	r4,r2
10001a80:	00085800 	call	10008580 <__mulsi3>
10001a84:	1007883a 	mov	r3,r2
10001a88:	e0bfff17 	ldw	r2,-4(fp)
10001a8c:	10c5883a 	add	r2,r2,r3
10001a90:	e0fff117 	ldw	r3,-60(fp)
10001a94:	10c00015 	stw	r3,0(r2)
10001a98:	e0fff217 	ldw	r3,-56(fp)
10001a9c:	10c00115 	stw	r3,4(r2)
10001aa0:	e0fff317 	ldw	r3,-52(fp)
10001aa4:	10c00215 	stw	r3,8(r2)
10001aa8:	e0fff417 	ldw	r3,-48(fp)
10001aac:	10c00315 	stw	r3,12(r2)
10001ab0:	e0fff517 	ldw	r3,-44(fp)
10001ab4:	10c00415 	stw	r3,16(r2)
10001ab8:	e0fff617 	ldw	r3,-40(fp)
10001abc:	10c00515 	stw	r3,20(r2)
10001ac0:	e0fff717 	ldw	r3,-36(fp)
10001ac4:	10c00615 	stw	r3,24(r2)
10001ac8:	e0fff817 	ldw	r3,-32(fp)
10001acc:	10c00715 	stw	r3,28(r2)
10001ad0:	e0fff917 	ldw	r3,-28(fp)
10001ad4:	10c00815 	stw	r3,32(r2)
10001ad8:	e0fffa17 	ldw	r3,-24(fp)
10001adc:	10c00915 	stw	r3,36(r2)
10001ae0:	e0fffb17 	ldw	r3,-20(fp)
10001ae4:	10c00a15 	stw	r3,40(r2)
10001ae8:	e0fffc17 	ldw	r3,-16(fp)
10001aec:	10c00b15 	stw	r3,44(r2)
10001af0:	e0fffd17 	ldw	r3,-12(fp)
10001af4:	10c00c15 	stw	r3,48(r2)
				animals[idx + j] = rfish;
			}
			break;

		case 4: //FLAT_FISH
			for(int j = 0; j < curNum; j++){
10001af8:	e0bfee17 	ldw	r2,-72(fp)
10001afc:	10800044 	addi	r2,r2,1
10001b00:	e0bfee15 	stw	r2,-72(fp)
10001b04:	e0ffee17 	ldw	r3,-72(fp)
10001b08:	e0bff017 	ldw	r2,-64(fp)
10001b0c:	18bfa716 	blt	r3,r2,100019ac <__alt_data_end+0xf80019ac>
				flatfish.x = rand() % (640 - FLATFISH_WIDTH);
				flatfish.velocity = -1 * ((rand() % (FLAT_FISH_VELO_MAX - FLAT_FISH_VELO_MIN + 1) + FLAT_FISH_VELO_MIN));
				flatfish.func = 2;
				animals[idx + j] = flatfish;
			}
			break;
10001b10:	00006506 	br	10001ca8 <generateFish+0x9a4>

		case 5: //BLU_FISH
			for(int j = 0; j < curNum; j++){
10001b14:	e03fef15 	stw	zero,-68(fp)
10001b18:	00005f06 	br	10001c98 <generateFish+0x994>
				Animal blufish = BLU_FISH;
10001b1c:	008400b4 	movhi	r2,4098
10001b20:	10a81604 	addi	r2,r2,-24488
10001b24:	10c00017 	ldw	r3,0(r2)
10001b28:	e0fff115 	stw	r3,-60(fp)
10001b2c:	10c00117 	ldw	r3,4(r2)
10001b30:	e0fff215 	stw	r3,-56(fp)
10001b34:	10c00217 	ldw	r3,8(r2)
10001b38:	e0fff315 	stw	r3,-52(fp)
10001b3c:	10c00317 	ldw	r3,12(r2)
10001b40:	e0fff415 	stw	r3,-48(fp)
10001b44:	10c00417 	ldw	r3,16(r2)
10001b48:	e0fff515 	stw	r3,-44(fp)
10001b4c:	10c00517 	ldw	r3,20(r2)
10001b50:	e0fff615 	stw	r3,-40(fp)
10001b54:	10c00617 	ldw	r3,24(r2)
10001b58:	e0fff715 	stw	r3,-36(fp)
10001b5c:	10c00717 	ldw	r3,28(r2)
10001b60:	e0fff815 	stw	r3,-32(fp)
10001b64:	10c00817 	ldw	r3,32(r2)
10001b68:	e0fff915 	stw	r3,-28(fp)
10001b6c:	10c00917 	ldw	r3,36(r2)
10001b70:	e0fffa15 	stw	r3,-24(fp)
10001b74:	10c00a17 	ldw	r3,40(r2)
10001b78:	e0fffb15 	stw	r3,-20(fp)
10001b7c:	10c00b17 	ldw	r3,44(r2)
10001b80:	e0fffc15 	stw	r3,-16(fp)
10001b84:	10800c17 	ldw	r2,48(r2)
10001b88:	e0bffd15 	stw	r2,-12(fp)
				blufish.y = rand() % (480 - BLUFISH_HEIGHT);
10001b8c:	000c0d40 	call	1000c0d4 <rand>
10001b90:	014071c4 	movi	r5,455
10001b94:	1009883a 	mov	r4,r2
10001b98:	00084500 	call	10008450 <__modsi3>
10001b9c:	e0bff715 	stw	r2,-36(fp)
				blufish.x = rand() % (640 - BLUFISH_WIDTH);
10001ba0:	000c0d40 	call	1000c0d4 <rand>
10001ba4:	01409784 	movi	r5,606
10001ba8:	1009883a 	mov	r4,r2
10001bac:	00084500 	call	10008450 <__modsi3>
10001bb0:	e0bff615 	stw	r2,-40(fp)
				blufish.velocity = -1 * ((rand() % (BLU_FISH_VELO_MAX - BLU_FISH_VELO_MIN + 1) + BLU_FISH_VELO_MIN));
10001bb4:	000c0d40 	call	1000c0d4 <rand>
10001bb8:	01400184 	movi	r5,6
10001bbc:	1009883a 	mov	r4,r2
10001bc0:	00084500 	call	10008450 <__modsi3>
10001bc4:	1007883a 	mov	r3,r2
10001bc8:	00bfff44 	movi	r2,-3
10001bcc:	10c5c83a 	sub	r2,r2,r3
10001bd0:	e0bffa15 	stw	r2,-24(fp)
				blufish.func = rand() % 2;
10001bd4:	000c0d40 	call	1000c0d4 <rand>
10001bd8:	1007883a 	mov	r3,r2
10001bdc:	00a00034 	movhi	r2,32768
10001be0:	10800044 	addi	r2,r2,1
10001be4:	1884703a 	and	r2,r3,r2
10001be8:	1000040e 	bge	r2,zero,10001bfc <generateFish+0x8f8>
10001bec:	10bfffc4 	addi	r2,r2,-1
10001bf0:	00ffff84 	movi	r3,-2
10001bf4:	10c4b03a 	or	r2,r2,r3
10001bf8:	10800044 	addi	r2,r2,1
10001bfc:	e0bffb15 	stw	r2,-20(fp)
				animals[idx + j] = blufish;
10001c00:	e0ffe817 	ldw	r3,-96(fp)
10001c04:	e0bfef17 	ldw	r2,-68(fp)
10001c08:	1885883a 	add	r2,r3,r2
10001c0c:	01400d04 	movi	r5,52
10001c10:	1009883a 	mov	r4,r2
10001c14:	00085800 	call	10008580 <__mulsi3>
10001c18:	1007883a 	mov	r3,r2
10001c1c:	e0bfff17 	ldw	r2,-4(fp)
10001c20:	10c5883a 	add	r2,r2,r3
10001c24:	e0fff117 	ldw	r3,-60(fp)
10001c28:	10c00015 	stw	r3,0(r2)
10001c2c:	e0fff217 	ldw	r3,-56(fp)
10001c30:	10c00115 	stw	r3,4(r2)
10001c34:	e0fff317 	ldw	r3,-52(fp)
10001c38:	10c00215 	stw	r3,8(r2)
10001c3c:	e0fff417 	ldw	r3,-48(fp)
10001c40:	10c00315 	stw	r3,12(r2)
10001c44:	e0fff517 	ldw	r3,-44(fp)
10001c48:	10c00415 	stw	r3,16(r2)
10001c4c:	e0fff617 	ldw	r3,-40(fp)
10001c50:	10c00515 	stw	r3,20(r2)
10001c54:	e0fff717 	ldw	r3,-36(fp)
10001c58:	10c00615 	stw	r3,24(r2)
10001c5c:	e0fff817 	ldw	r3,-32(fp)
10001c60:	10c00715 	stw	r3,28(r2)
10001c64:	e0fff917 	ldw	r3,-28(fp)
10001c68:	10c00815 	stw	r3,32(r2)
10001c6c:	e0fffa17 	ldw	r3,-24(fp)
10001c70:	10c00915 	stw	r3,36(r2)
10001c74:	e0fffb17 	ldw	r3,-20(fp)
10001c78:	10c00a15 	stw	r3,40(r2)
10001c7c:	e0fffc17 	ldw	r3,-16(fp)
10001c80:	10c00b15 	stw	r3,44(r2)
10001c84:	e0fffd17 	ldw	r3,-12(fp)
10001c88:	10c00c15 	stw	r3,48(r2)
				animals[idx + j] = flatfish;
			}
			break;

		case 5: //BLU_FISH
			for(int j = 0; j < curNum; j++){
10001c8c:	e0bfef17 	ldw	r2,-68(fp)
10001c90:	10800044 	addi	r2,r2,1
10001c94:	e0bfef15 	stw	r2,-68(fp)
10001c98:	e0ffef17 	ldw	r3,-68(fp)
10001c9c:	e0bff017 	ldw	r2,-64(fp)
10001ca0:	18bf9e16 	blt	r3,r2,10001b1c <__alt_data_end+0xf8001b1c>
				blufish.x = rand() % (640 - BLUFISH_WIDTH);
				blufish.velocity = -1 * ((rand() % (BLU_FISH_VELO_MAX - BLU_FISH_VELO_MIN + 1) + BLU_FISH_VELO_MIN));
				blufish.func = rand() % 2;
				animals[idx + j] = blufish;
			}
			break;
10001ca4:	0001883a 	nop
		}
		idx += curNum;
10001ca8:	e0ffe817 	ldw	r3,-96(fp)
10001cac:	e0bff017 	ldw	r2,-64(fp)
10001cb0:	1885883a 	add	r2,r3,r2
10001cb4:	e0bfe815 	stw	r2,-96(fp)

void generateFish(int* nums, Animal * animals){
	//First part corresponds to BW_FISH
	//Second part corresponds to P_FISH
	int idx = 0;
	for(int i = 0; i < NUM_TYPE_FISH; i++){
10001cb8:	e0bfe917 	ldw	r2,-92(fp)
10001cbc:	10800044 	addi	r2,r2,1
10001cc0:	e0bfe915 	stw	r2,-92(fp)
10001cc4:	e0bfe917 	ldw	r2,-92(fp)
10001cc8:	10800190 	cmplti	r2,r2,6
10001ccc:	103d961e 	bne	r2,zero,10001328 <__alt_data_end+0xf8001328>
			}
			break;
		}
		idx += curNum;
	}
}
10001cd0:	0001883a 	nop
10001cd4:	e037883a 	mov	sp,fp
10001cd8:	dfc00117 	ldw	ra,4(sp)
10001cdc:	df000017 	ldw	fp,0(sp)
10001ce0:	dec00204 	addi	sp,sp,8
10001ce4:	f800283a 	ret

10001ce8 <copyAnimals>:

void copyAnimals(int total, Animal* animals, Animal* prevs){
10001ce8:	defff904 	addi	sp,sp,-28
10001cec:	dfc00615 	stw	ra,24(sp)
10001cf0:	df000515 	stw	fp,20(sp)
10001cf4:	dc000415 	stw	r16,16(sp)
10001cf8:	df000504 	addi	fp,sp,20
10001cfc:	e13ffc15 	stw	r4,-16(fp)
10001d00:	e17ffd15 	stw	r5,-12(fp)
10001d04:	e1bffe15 	stw	r6,-8(fp)
	for(int i = 0; i < total; i++)
10001d08:	e03ffb15 	stw	zero,-20(fp)
10001d0c:	00002b06 	br	10001dbc <copyAnimals+0xd4>
		prevs[i] = animals[i];
10001d10:	e0bffb17 	ldw	r2,-20(fp)
10001d14:	01400d04 	movi	r5,52
10001d18:	1009883a 	mov	r4,r2
10001d1c:	00085800 	call	10008580 <__mulsi3>
10001d20:	1007883a 	mov	r3,r2
10001d24:	e0bffe17 	ldw	r2,-8(fp)
10001d28:	10e1883a 	add	r16,r2,r3
10001d2c:	e0bffb17 	ldw	r2,-20(fp)
10001d30:	01400d04 	movi	r5,52
10001d34:	1009883a 	mov	r4,r2
10001d38:	00085800 	call	10008580 <__mulsi3>
10001d3c:	1007883a 	mov	r3,r2
10001d40:	e0bffd17 	ldw	r2,-12(fp)
10001d44:	10c5883a 	add	r2,r2,r3
10001d48:	10c00017 	ldw	r3,0(r2)
10001d4c:	80c00015 	stw	r3,0(r16)
10001d50:	10c00117 	ldw	r3,4(r2)
10001d54:	80c00115 	stw	r3,4(r16)
10001d58:	10c00217 	ldw	r3,8(r2)
10001d5c:	80c00215 	stw	r3,8(r16)
10001d60:	10c00317 	ldw	r3,12(r2)
10001d64:	80c00315 	stw	r3,12(r16)
10001d68:	10c00417 	ldw	r3,16(r2)
10001d6c:	80c00415 	stw	r3,16(r16)
10001d70:	10c00517 	ldw	r3,20(r2)
10001d74:	80c00515 	stw	r3,20(r16)
10001d78:	10c00617 	ldw	r3,24(r2)
10001d7c:	80c00615 	stw	r3,24(r16)
10001d80:	10c00717 	ldw	r3,28(r2)
10001d84:	80c00715 	stw	r3,28(r16)
10001d88:	10c00817 	ldw	r3,32(r2)
10001d8c:	80c00815 	stw	r3,32(r16)
10001d90:	10c00917 	ldw	r3,36(r2)
10001d94:	80c00915 	stw	r3,36(r16)
10001d98:	10c00a17 	ldw	r3,40(r2)
10001d9c:	80c00a15 	stw	r3,40(r16)
10001da0:	10c00b17 	ldw	r3,44(r2)
10001da4:	80c00b15 	stw	r3,44(r16)
10001da8:	10800c17 	ldw	r2,48(r2)
10001dac:	80800c15 	stw	r2,48(r16)
		idx += curNum;
	}
}

void copyAnimals(int total, Animal* animals, Animal* prevs){
	for(int i = 0; i < total; i++)
10001db0:	e0bffb17 	ldw	r2,-20(fp)
10001db4:	10800044 	addi	r2,r2,1
10001db8:	e0bffb15 	stw	r2,-20(fp)
10001dbc:	e0fffb17 	ldw	r3,-20(fp)
10001dc0:	e0bffc17 	ldw	r2,-16(fp)
10001dc4:	18bfd216 	blt	r3,r2,10001d10 <__alt_data_end+0xf8001d10>
		prevs[i] = animals[i];
}
10001dc8:	0001883a 	nop
10001dcc:	e6ffff04 	addi	sp,fp,-4
10001dd0:	dfc00217 	ldw	ra,8(sp)
10001dd4:	df000117 	ldw	fp,4(sp)
10001dd8:	dc000017 	ldw	r16,0(sp)
10001ddc:	dec00304 	addi	sp,sp,12
10001de0:	f800283a 	ret

10001de4 <isCaught>:

int isCaught(FishNet fishnet, Animal animal){
10001de4:	defff304 	addi	sp,sp,-52
10001de8:	dfc00815 	stw	ra,32(sp)
10001dec:	df000715 	stw	fp,28(sp)
10001df0:	dc400615 	stw	r17,24(sp)
10001df4:	dc000515 	stw	r16,20(sp)
10001df8:	df000704 	addi	fp,sp,28
10001dfc:	e1000215 	stw	r4,8(fp)
10001e00:	e1400315 	stw	r5,12(fp)
10001e04:	e1800415 	stw	r6,16(fp)
10001e08:	e1c00515 	stw	r7,20(fp)
	float cent_X_FishNet = fishnet.x + NET_WIDTH/2.0;
10001e0c:	e0800317 	ldw	r2,12(fp)
10001e10:	1009883a 	mov	r4,r2
10001e14:	000bb380 	call	1000bb38 <__floatsidf>
10001e18:	1011883a 	mov	r8,r2
10001e1c:	1813883a 	mov	r9,r3
10001e20:	000d883a 	mov	r6,zero
10001e24:	01d01274 	movhi	r7,16457
10001e28:	39d00004 	addi	r7,r7,16384
10001e2c:	4009883a 	mov	r4,r8
10001e30:	480b883a 	mov	r5,r9
10001e34:	00095700 	call	10009570 <__adddf3>
10001e38:	1009883a 	mov	r4,r2
10001e3c:	180b883a 	mov	r5,r3
10001e40:	2005883a 	mov	r2,r4
10001e44:	2807883a 	mov	r3,r5
10001e48:	1009883a 	mov	r4,r2
10001e4c:	180b883a 	mov	r5,r3
10001e50:	000bd240 	call	1000bd24 <__truncdfsf2>
10001e54:	1007883a 	mov	r3,r2
10001e58:	e0fff915 	stw	r3,-28(fp)
	float cent_Y_FishNet = fishnet.y + NET_HEIGHT/2.0;
10001e5c:	e0800417 	ldw	r2,16(fp)
10001e60:	1009883a 	mov	r4,r2
10001e64:	000bb380 	call	1000bb38 <__floatsidf>
10001e68:	1011883a 	mov	r8,r2
10001e6c:	1813883a 	mov	r9,r3
10001e70:	000d883a 	mov	r6,zero
10001e74:	01d01174 	movhi	r7,16453
10001e78:	4009883a 	mov	r4,r8
10001e7c:	480b883a 	mov	r5,r9
10001e80:	00095700 	call	10009570 <__adddf3>
10001e84:	1009883a 	mov	r4,r2
10001e88:	180b883a 	mov	r5,r3
10001e8c:	2005883a 	mov	r2,r4
10001e90:	2807883a 	mov	r3,r5
10001e94:	1009883a 	mov	r4,r2
10001e98:	180b883a 	mov	r5,r3
10001e9c:	000bd240 	call	1000bd24 <__truncdfsf2>
10001ea0:	1007883a 	mov	r3,r2
10001ea4:	e0fffa15 	stw	r3,-24(fp)
	float cent_X_animal = animal.x + animal.width/2.0;
10001ea8:	e0800c17 	ldw	r2,48(fp)
10001eac:	1009883a 	mov	r4,r2
10001eb0:	000bb380 	call	1000bb38 <__floatsidf>
10001eb4:	1021883a 	mov	r16,r2
10001eb8:	1823883a 	mov	r17,r3
10001ebc:	e0800e17 	ldw	r2,56(fp)
10001ec0:	1009883a 	mov	r4,r2
10001ec4:	000bb380 	call	1000bb38 <__floatsidf>
10001ec8:	1011883a 	mov	r8,r2
10001ecc:	1813883a 	mov	r9,r3
10001ed0:	000d883a 	mov	r6,zero
10001ed4:	01d00034 	movhi	r7,16384
10001ed8:	4009883a 	mov	r4,r8
10001edc:	480b883a 	mov	r5,r9
10001ee0:	0009e1c0 	call	10009e1c <__divdf3>
10001ee4:	1009883a 	mov	r4,r2
10001ee8:	180b883a 	mov	r5,r3
10001eec:	2005883a 	mov	r2,r4
10001ef0:	2807883a 	mov	r3,r5
10001ef4:	100d883a 	mov	r6,r2
10001ef8:	180f883a 	mov	r7,r3
10001efc:	8009883a 	mov	r4,r16
10001f00:	880b883a 	mov	r5,r17
10001f04:	00095700 	call	10009570 <__adddf3>
10001f08:	1009883a 	mov	r4,r2
10001f0c:	180b883a 	mov	r5,r3
10001f10:	2005883a 	mov	r2,r4
10001f14:	2807883a 	mov	r3,r5
10001f18:	1009883a 	mov	r4,r2
10001f1c:	180b883a 	mov	r5,r3
10001f20:	000bd240 	call	1000bd24 <__truncdfsf2>
10001f24:	1007883a 	mov	r3,r2
10001f28:	e0fffb15 	stw	r3,-20(fp)
	float cent_Y_animal = animal.y + animal.height/2.0;
10001f2c:	e0800d17 	ldw	r2,52(fp)
10001f30:	1009883a 	mov	r4,r2
10001f34:	000bb380 	call	1000bb38 <__floatsidf>
10001f38:	1021883a 	mov	r16,r2
10001f3c:	1823883a 	mov	r17,r3
10001f40:	e0800f17 	ldw	r2,60(fp)
10001f44:	1009883a 	mov	r4,r2
10001f48:	000bb380 	call	1000bb38 <__floatsidf>
10001f4c:	1011883a 	mov	r8,r2
10001f50:	1813883a 	mov	r9,r3
10001f54:	000d883a 	mov	r6,zero
10001f58:	01d00034 	movhi	r7,16384
10001f5c:	4009883a 	mov	r4,r8
10001f60:	480b883a 	mov	r5,r9
10001f64:	0009e1c0 	call	10009e1c <__divdf3>
10001f68:	1009883a 	mov	r4,r2
10001f6c:	180b883a 	mov	r5,r3
10001f70:	2005883a 	mov	r2,r4
10001f74:	2807883a 	mov	r3,r5
10001f78:	100d883a 	mov	r6,r2
10001f7c:	180f883a 	mov	r7,r3
10001f80:	8009883a 	mov	r4,r16
10001f84:	880b883a 	mov	r5,r17
10001f88:	00095700 	call	10009570 <__adddf3>
10001f8c:	1009883a 	mov	r4,r2
10001f90:	180b883a 	mov	r5,r3
10001f94:	2005883a 	mov	r2,r4
10001f98:	2807883a 	mov	r3,r5
10001f9c:	1009883a 	mov	r4,r2
10001fa0:	180b883a 	mov	r5,r3
10001fa4:	000bd240 	call	1000bd24 <__truncdfsf2>
10001fa8:	1007883a 	mov	r3,r2
10001fac:	e0fffc15 	stw	r3,-16(fp)

	float distance_sqr = (cent_X_animal - cent_X_FishNet) * (cent_X_animal - cent_X_FishNet)\
10001fb0:	e17ff917 	ldw	r5,-28(fp)
10001fb4:	e13ffb17 	ldw	r4,-20(fp)
10001fb8:	0008f680 	call	10008f68 <__subsf3>
10001fbc:	1007883a 	mov	r3,r2
10001fc0:	1821883a 	mov	r16,r3
10001fc4:	e17ff917 	ldw	r5,-28(fp)
10001fc8:	e13ffb17 	ldw	r4,-20(fp)
10001fcc:	0008f680 	call	10008f68 <__subsf3>
10001fd0:	1007883a 	mov	r3,r2
10001fd4:	1805883a 	mov	r2,r3
10001fd8:	100b883a 	mov	r5,r2
10001fdc:	8009883a 	mov	r4,r16
10001fe0:	0008b380 	call	10008b38 <__mulsf3>
10001fe4:	1007883a 	mov	r3,r2
10001fe8:	1821883a 	mov	r16,r3
			+ (cent_Y_animal - cent_Y_FishNet) * (cent_Y_animal - cent_Y_FishNet);
10001fec:	e17ffa17 	ldw	r5,-24(fp)
10001ff0:	e13ffc17 	ldw	r4,-16(fp)
10001ff4:	0008f680 	call	10008f68 <__subsf3>
10001ff8:	1007883a 	mov	r3,r2
10001ffc:	1823883a 	mov	r17,r3
10002000:	e17ffa17 	ldw	r5,-24(fp)
10002004:	e13ffc17 	ldw	r4,-16(fp)
10002008:	0008f680 	call	10008f68 <__subsf3>
1000200c:	1007883a 	mov	r3,r2
10002010:	1805883a 	mov	r2,r3
10002014:	100b883a 	mov	r5,r2
10002018:	8809883a 	mov	r4,r17
1000201c:	0008b380 	call	10008b38 <__mulsf3>
10002020:	1007883a 	mov	r3,r2
10002024:	1805883a 	mov	r2,r3
	float cent_X_FishNet = fishnet.x + NET_WIDTH/2.0;
	float cent_Y_FishNet = fishnet.y + NET_HEIGHT/2.0;
	float cent_X_animal = animal.x + animal.width/2.0;
	float cent_Y_animal = animal.y + animal.height/2.0;

	float distance_sqr = (cent_X_animal - cent_X_FishNet) * (cent_X_animal - cent_X_FishNet)\
10002028:	100b883a 	mov	r5,r2
1000202c:	8009883a 	mov	r4,r16
10002030:	00085a80 	call	100085a8 <__addsf3>
10002034:	1007883a 	mov	r3,r2
10002038:	e0fffd15 	stw	r3,-12(fp)
			+ (cent_Y_animal - cent_Y_FishNet) * (cent_Y_animal - cent_Y_FishNet);
	return ((fishnet.frame == 4) && (distance_sqr < NET_RADIUS_SQR));
1000203c:	e0800617 	ldw	r2,24(fp)
10002040:	10800118 	cmpnei	r2,r2,4
10002044:	1000071e 	bne	r2,zero,10002064 <isCaught+0x280>
10002048:	015141b4 	movhi	r5,17670
1000204c:	296c0004 	addi	r5,r5,-20480
10002050:	e13ffd17 	ldw	r4,-12(fp)
10002054:	0008a700 	call	10008a70 <__lesf2>
10002058:	1000020e 	bge	r2,zero,10002064 <isCaught+0x280>
1000205c:	00800044 	movi	r2,1
10002060:	00000106 	br	10002068 <isCaught+0x284>
10002064:	0005883a 	mov	r2,zero
}
10002068:	e6fffe04 	addi	sp,fp,-8
1000206c:	dfc00317 	ldw	ra,12(sp)
10002070:	df000217 	ldw	fp,8(sp)
10002074:	dc400117 	ldw	r17,4(sp)
10002078:	dc000017 	ldw	r16,0(sp)
1000207c:	dec00804 	addi	sp,sp,32
10002080:	f800283a 	ret

10002084 <updateFish>:

void updateFish(int total, Animal* animals, FishNet fishnet, int* total_score){
10002084:	deffe904 	addi	sp,sp,-92
10002088:	dfc01415 	stw	ra,80(sp)
1000208c:	df001315 	stw	fp,76(sp)
10002090:	dc401215 	stw	r17,72(sp)
10002094:	dc001115 	stw	r16,68(sp)
10002098:	df001304 	addi	fp,sp,76
1000209c:	e13ffc15 	stw	r4,-16(fp)
100020a0:	e17ffd15 	stw	r5,-12(fp)
100020a4:	e1800215 	stw	r6,8(fp)
100020a8:	e1c00315 	stw	r7,12(fp)
	for(int i = 0; i < total; i++){
100020ac:	e03ffb15 	stw	zero,-20(fp)
100020b0:	0001dd06 	br	10002828 <updateFish+0x7a4>
		if(animals[i].caught){
100020b4:	e0bffb17 	ldw	r2,-20(fp)
100020b8:	01400d04 	movi	r5,52
100020bc:	1009883a 	mov	r4,r2
100020c0:	00085800 	call	10008580 <__mulsi3>
100020c4:	1007883a 	mov	r3,r2
100020c8:	e0bffd17 	ldw	r2,-12(fp)
100020cc:	10c5883a 	add	r2,r2,r3
100020d0:	10800b17 	ldw	r2,44(r2)
100020d4:	10004526 	beq	r2,zero,100021ec <updateFish+0x168>
			animals[i].caughtFrame++;
100020d8:	e0bffb17 	ldw	r2,-20(fp)
100020dc:	01400d04 	movi	r5,52
100020e0:	1009883a 	mov	r4,r2
100020e4:	00085800 	call	10008580 <__mulsi3>
100020e8:	1007883a 	mov	r3,r2
100020ec:	e0bffd17 	ldw	r2,-12(fp)
100020f0:	10c5883a 	add	r2,r2,r3
100020f4:	10c00c17 	ldw	r3,48(r2)
100020f8:	18c00044 	addi	r3,r3,1
100020fc:	10c00c15 	stw	r3,48(r2)
			if(animals[i].caughtFrame > 8){
10002100:	e0bffb17 	ldw	r2,-20(fp)
10002104:	01400d04 	movi	r5,52
10002108:	1009883a 	mov	r4,r2
1000210c:	00085800 	call	10008580 <__mulsi3>
10002110:	1007883a 	mov	r3,r2
10002114:	e0bffd17 	ldw	r2,-12(fp)
10002118:	10c5883a 	add	r2,r2,r3
1000211c:	10800c17 	ldw	r2,48(r2)
10002120:	10800250 	cmplti	r2,r2,9
10002124:	1001bc1e 	bne	r2,zero,10002818 <updateFish+0x794>
				animals[i].x = 640;
10002128:	e0bffb17 	ldw	r2,-20(fp)
1000212c:	01400d04 	movi	r5,52
10002130:	1009883a 	mov	r4,r2
10002134:	00085800 	call	10008580 <__mulsi3>
10002138:	1007883a 	mov	r3,r2
1000213c:	e0bffd17 	ldw	r2,-12(fp)
10002140:	10c5883a 	add	r2,r2,r3
10002144:	00c0a004 	movi	r3,640
10002148:	10c00515 	stw	r3,20(r2)
				animals[i].y = rand() % (480 - animals[i].height);
1000214c:	e0bffb17 	ldw	r2,-20(fp)
10002150:	01400d04 	movi	r5,52
10002154:	1009883a 	mov	r4,r2
10002158:	00085800 	call	10008580 <__mulsi3>
1000215c:	1007883a 	mov	r3,r2
10002160:	e0bffd17 	ldw	r2,-12(fp)
10002164:	10e1883a 	add	r16,r2,r3
10002168:	000c0d40 	call	1000c0d4 <rand>
1000216c:	1023883a 	mov	r17,r2
10002170:	e0bffb17 	ldw	r2,-20(fp)
10002174:	01400d04 	movi	r5,52
10002178:	1009883a 	mov	r4,r2
1000217c:	00085800 	call	10008580 <__mulsi3>
10002180:	1007883a 	mov	r3,r2
10002184:	e0bffd17 	ldw	r2,-12(fp)
10002188:	10c5883a 	add	r2,r2,r3
1000218c:	10800817 	ldw	r2,32(r2)
10002190:	00c07804 	movi	r3,480
10002194:	1885c83a 	sub	r2,r3,r2
10002198:	100b883a 	mov	r5,r2
1000219c:	8809883a 	mov	r4,r17
100021a0:	00084500 	call	10008450 <__modsi3>
100021a4:	80800615 	stw	r2,24(r16)
				animals[i].caught = 0;
100021a8:	e0bffb17 	ldw	r2,-20(fp)
100021ac:	01400d04 	movi	r5,52
100021b0:	1009883a 	mov	r4,r2
100021b4:	00085800 	call	10008580 <__mulsi3>
100021b8:	1007883a 	mov	r3,r2
100021bc:	e0bffd17 	ldw	r2,-12(fp)
100021c0:	10c5883a 	add	r2,r2,r3
100021c4:	10000b15 	stw	zero,44(r2)
				animals[i].caughtFrame = 0;
100021c8:	e0bffb17 	ldw	r2,-20(fp)
100021cc:	01400d04 	movi	r5,52
100021d0:	1009883a 	mov	r4,r2
100021d4:	00085800 	call	10008580 <__mulsi3>
100021d8:	1007883a 	mov	r3,r2
100021dc:	e0bffd17 	ldw	r2,-12(fp)
100021e0:	10c5883a 	add	r2,r2,r3
100021e4:	10000c15 	stw	zero,48(r2)
			}
			continue;
100021e8:	00018b06 	br	10002818 <updateFish+0x794>
		}
		if(!fishnet.hidden){
100021ec:	e0800517 	ldw	r2,20(fp)
100021f0:	1000401e 	bne	r2,zero,100022f4 <updateFish+0x270>
			if(isCaught(fishnet, animals[i])){
100021f4:	e0bffb17 	ldw	r2,-20(fp)
100021f8:	01400d04 	movi	r5,52
100021fc:	1009883a 	mov	r4,r2
10002200:	00085800 	call	10008580 <__mulsi3>
10002204:	1007883a 	mov	r3,r2
10002208:	e0bffd17 	ldw	r2,-12(fp)
1000220c:	10c5883a 	add	r2,r2,r3
10002210:	10c00017 	ldw	r3,0(r2)
10002214:	d8c00115 	stw	r3,4(sp)
10002218:	10c00117 	ldw	r3,4(r2)
1000221c:	d8c00215 	stw	r3,8(sp)
10002220:	10c00217 	ldw	r3,8(r2)
10002224:	d8c00315 	stw	r3,12(sp)
10002228:	10c00317 	ldw	r3,12(r2)
1000222c:	d8c00415 	stw	r3,16(sp)
10002230:	10c00417 	ldw	r3,16(r2)
10002234:	d8c00515 	stw	r3,20(sp)
10002238:	10c00517 	ldw	r3,20(r2)
1000223c:	d8c00615 	stw	r3,24(sp)
10002240:	10c00617 	ldw	r3,24(r2)
10002244:	d8c00715 	stw	r3,28(sp)
10002248:	10c00717 	ldw	r3,28(r2)
1000224c:	d8c00815 	stw	r3,32(sp)
10002250:	10c00817 	ldw	r3,32(r2)
10002254:	d8c00915 	stw	r3,36(sp)
10002258:	10c00917 	ldw	r3,36(r2)
1000225c:	d8c00a15 	stw	r3,40(sp)
10002260:	10c00a17 	ldw	r3,40(r2)
10002264:	d8c00b15 	stw	r3,44(sp)
10002268:	10c00b17 	ldw	r3,44(r2)
1000226c:	d8c00c15 	stw	r3,48(sp)
10002270:	10800c17 	ldw	r2,48(r2)
10002274:	d8800d15 	stw	r2,52(sp)
10002278:	e0800617 	ldw	r2,24(fp)
1000227c:	d8800015 	stw	r2,0(sp)
10002280:	e1000217 	ldw	r4,8(fp)
10002284:	e1400317 	ldw	r5,12(fp)
10002288:	e1800417 	ldw	r6,16(fp)
1000228c:	e1c00517 	ldw	r7,20(fp)
10002290:	0001de40 	call	10001de4 <isCaught>
10002294:	10001726 	beq	r2,zero,100022f4 <updateFish+0x270>
				animals[i].caught = 1;
10002298:	e0bffb17 	ldw	r2,-20(fp)
1000229c:	01400d04 	movi	r5,52
100022a0:	1009883a 	mov	r4,r2
100022a4:	00085800 	call	10008580 <__mulsi3>
100022a8:	1007883a 	mov	r3,r2
100022ac:	e0bffd17 	ldw	r2,-12(fp)
100022b0:	10c5883a 	add	r2,r2,r3
100022b4:	00c00044 	movi	r3,1
100022b8:	10c00b15 	stw	r3,44(r2)
				*total_score += animals[i].point;
100022bc:	e0800717 	ldw	r2,28(fp)
100022c0:	14000017 	ldw	r16,0(r2)
100022c4:	e0bffb17 	ldw	r2,-20(fp)
100022c8:	01400d04 	movi	r5,52
100022cc:	1009883a 	mov	r4,r2
100022d0:	00085800 	call	10008580 <__mulsi3>
100022d4:	1007883a 	mov	r3,r2
100022d8:	e0bffd17 	ldw	r2,-12(fp)
100022dc:	10c5883a 	add	r2,r2,r3
100022e0:	10800017 	ldw	r2,0(r2)
100022e4:	8087883a 	add	r3,r16,r2
100022e8:	e0800717 	ldw	r2,28(fp)
100022ec:	10c00015 	stw	r3,0(r2)
				continue;
100022f0:	00014a06 	br	1000281c <updateFish+0x798>
			}
		}
		animals[i].x += animals[i].velocity;
100022f4:	e0bffb17 	ldw	r2,-20(fp)
100022f8:	01400d04 	movi	r5,52
100022fc:	1009883a 	mov	r4,r2
10002300:	00085800 	call	10008580 <__mulsi3>
10002304:	1007883a 	mov	r3,r2
10002308:	e0bffd17 	ldw	r2,-12(fp)
1000230c:	10e1883a 	add	r16,r2,r3
10002310:	e0bffb17 	ldw	r2,-20(fp)
10002314:	01400d04 	movi	r5,52
10002318:	1009883a 	mov	r4,r2
1000231c:	00085800 	call	10008580 <__mulsi3>
10002320:	1007883a 	mov	r3,r2
10002324:	e0bffd17 	ldw	r2,-12(fp)
10002328:	10c5883a 	add	r2,r2,r3
1000232c:	14400517 	ldw	r17,20(r2)
10002330:	e0bffb17 	ldw	r2,-20(fp)
10002334:	01400d04 	movi	r5,52
10002338:	1009883a 	mov	r4,r2
1000233c:	00085800 	call	10008580 <__mulsi3>
10002340:	1007883a 	mov	r3,r2
10002344:	e0bffd17 	ldw	r2,-12(fp)
10002348:	10c5883a 	add	r2,r2,r3
1000234c:	10800917 	ldw	r2,36(r2)
10002350:	8885883a 	add	r2,r17,r2
10002354:	80800515 	stw	r2,20(r16)
		switch(animals[i].func){
10002358:	e0bffb17 	ldw	r2,-20(fp)
1000235c:	01400d04 	movi	r5,52
10002360:	1009883a 	mov	r4,r2
10002364:	00085800 	call	10008580 <__mulsi3>
10002368:	1007883a 	mov	r3,r2
1000236c:	e0bffd17 	ldw	r2,-12(fp)
10002370:	10c5883a 	add	r2,r2,r3
10002374:	10800a17 	ldw	r2,40(r2)
10002378:	10c00060 	cmpeqi	r3,r2,1
1000237c:	1800291e 	bne	r3,zero,10002424 <updateFish+0x3a0>
10002380:	108000a0 	cmpeqi	r2,r2,2
10002384:	10002926 	beq	r2,zero,1000242c <updateFish+0x3a8>
			break;
		case 1:
			//animals[i].y = func1(animals[i].x, animals[i].y);
			break;
		case 2:
			animals[i].y = func2(animals[i]);
10002388:	e0bffb17 	ldw	r2,-20(fp)
1000238c:	01400d04 	movi	r5,52
10002390:	1009883a 	mov	r4,r2
10002394:	00085800 	call	10008580 <__mulsi3>
10002398:	1007883a 	mov	r3,r2
1000239c:	e0bffd17 	ldw	r2,-12(fp)
100023a0:	10e1883a 	add	r16,r2,r3
100023a4:	e0bffb17 	ldw	r2,-20(fp)
100023a8:	01400d04 	movi	r5,52
100023ac:	1009883a 	mov	r4,r2
100023b0:	00085800 	call	10008580 <__mulsi3>
100023b4:	1007883a 	mov	r3,r2
100023b8:	e0bffd17 	ldw	r2,-12(fp)
100023bc:	10c5883a 	add	r2,r2,r3
100023c0:	10c00417 	ldw	r3,16(r2)
100023c4:	d8c00015 	stw	r3,0(sp)
100023c8:	10c00517 	ldw	r3,20(r2)
100023cc:	d8c00115 	stw	r3,4(sp)
100023d0:	10c00617 	ldw	r3,24(r2)
100023d4:	d8c00215 	stw	r3,8(sp)
100023d8:	10c00717 	ldw	r3,28(r2)
100023dc:	d8c00315 	stw	r3,12(sp)
100023e0:	10c00817 	ldw	r3,32(r2)
100023e4:	d8c00415 	stw	r3,16(sp)
100023e8:	10c00917 	ldw	r3,36(r2)
100023ec:	d8c00515 	stw	r3,20(sp)
100023f0:	10c00a17 	ldw	r3,40(r2)
100023f4:	d8c00615 	stw	r3,24(sp)
100023f8:	10c00b17 	ldw	r3,44(r2)
100023fc:	d8c00715 	stw	r3,28(sp)
10002400:	10c00c17 	ldw	r3,48(r2)
10002404:	d8c00815 	stw	r3,32(sp)
10002408:	11000017 	ldw	r4,0(r2)
1000240c:	11400117 	ldw	r5,4(r2)
10002410:	11800217 	ldw	r6,8(r2)
10002414:	11c00317 	ldw	r7,12(r2)
10002418:	000320c0 	call	1000320c <func2>
1000241c:	80800615 	stw	r2,24(r16)
			break;
10002420:	00000306 	br	10002430 <updateFish+0x3ac>
		switch(animals[i].func){
		case 0 : //y unchanged
			break;
		case 1:
			//animals[i].y = func1(animals[i].x, animals[i].y);
			break;
10002424:	0001883a 	nop
10002428:	00000106 	br	10002430 <updateFish+0x3ac>
			}
		}
		animals[i].x += animals[i].velocity;
		switch(animals[i].func){
		case 0 : //y unchanged
			break;
1000242c:	0001883a 	nop
			break;
		case 2:
			animals[i].y = func2(animals[i]);
			break;
		}
		animals[i].curIdx = ((animals[i].curIdx - animals[i].idxStart+1) % animals[i].len) + animals[i].idxStart;
10002430:	e0bffb17 	ldw	r2,-20(fp)
10002434:	01400d04 	movi	r5,52
10002438:	1009883a 	mov	r4,r2
1000243c:	00085800 	call	10008580 <__mulsi3>
10002440:	1007883a 	mov	r3,r2
10002444:	e0bffd17 	ldw	r2,-12(fp)
10002448:	10e1883a 	add	r16,r2,r3
1000244c:	e0bffb17 	ldw	r2,-20(fp)
10002450:	01400d04 	movi	r5,52
10002454:	1009883a 	mov	r4,r2
10002458:	00085800 	call	10008580 <__mulsi3>
1000245c:	1007883a 	mov	r3,r2
10002460:	e0bffd17 	ldw	r2,-12(fp)
10002464:	10c5883a 	add	r2,r2,r3
10002468:	14400117 	ldw	r17,4(r2)
1000246c:	e0bffb17 	ldw	r2,-20(fp)
10002470:	01400d04 	movi	r5,52
10002474:	1009883a 	mov	r4,r2
10002478:	00085800 	call	10008580 <__mulsi3>
1000247c:	1007883a 	mov	r3,r2
10002480:	e0bffd17 	ldw	r2,-12(fp)
10002484:	10c5883a 	add	r2,r2,r3
10002488:	10800217 	ldw	r2,8(r2)
1000248c:	8885c83a 	sub	r2,r17,r2
10002490:	14400044 	addi	r17,r2,1
10002494:	e0bffb17 	ldw	r2,-20(fp)
10002498:	01400d04 	movi	r5,52
1000249c:	1009883a 	mov	r4,r2
100024a0:	00085800 	call	10008580 <__mulsi3>
100024a4:	1007883a 	mov	r3,r2
100024a8:	e0bffd17 	ldw	r2,-12(fp)
100024ac:	10c5883a 	add	r2,r2,r3
100024b0:	10800417 	ldw	r2,16(r2)
100024b4:	100b883a 	mov	r5,r2
100024b8:	8809883a 	mov	r4,r17
100024bc:	00084500 	call	10008450 <__modsi3>
100024c0:	1023883a 	mov	r17,r2
100024c4:	e0bffb17 	ldw	r2,-20(fp)
100024c8:	01400d04 	movi	r5,52
100024cc:	1009883a 	mov	r4,r2
100024d0:	00085800 	call	10008580 <__mulsi3>
100024d4:	1007883a 	mov	r3,r2
100024d8:	e0bffd17 	ldw	r2,-12(fp)
100024dc:	10c5883a 	add	r2,r2,r3
100024e0:	10800217 	ldw	r2,8(r2)
100024e4:	8885883a 	add	r2,r17,r2
100024e8:	80800115 	stw	r2,4(r16)
		if(animals[i].x <= -1*(animals[i].width)){
100024ec:	e0bffb17 	ldw	r2,-20(fp)
100024f0:	01400d04 	movi	r5,52
100024f4:	1009883a 	mov	r4,r2
100024f8:	00085800 	call	10008580 <__mulsi3>
100024fc:	1007883a 	mov	r3,r2
10002500:	e0bffd17 	ldw	r2,-12(fp)
10002504:	10c5883a 	add	r2,r2,r3
10002508:	14000517 	ldw	r16,20(r2)
1000250c:	e0bffb17 	ldw	r2,-20(fp)
10002510:	01400d04 	movi	r5,52
10002514:	1009883a 	mov	r4,r2
10002518:	00085800 	call	10008580 <__mulsi3>
1000251c:	1007883a 	mov	r3,r2
10002520:	e0bffd17 	ldw	r2,-12(fp)
10002524:	10c5883a 	add	r2,r2,r3
10002528:	10800717 	ldw	r2,28(r2)
1000252c:	0085c83a 	sub	r2,zero,r2
10002530:	14002016 	blt	r2,r16,100025b4 <updateFish+0x530>
			animals[i].x = 640;
10002534:	e0bffb17 	ldw	r2,-20(fp)
10002538:	01400d04 	movi	r5,52
1000253c:	1009883a 	mov	r4,r2
10002540:	00085800 	call	10008580 <__mulsi3>
10002544:	1007883a 	mov	r3,r2
10002548:	e0bffd17 	ldw	r2,-12(fp)
1000254c:	10c5883a 	add	r2,r2,r3
10002550:	00c0a004 	movi	r3,640
10002554:	10c00515 	stw	r3,20(r2)
			animals[i].y = rand() % (480 - animals[i].height);
10002558:	e0bffb17 	ldw	r2,-20(fp)
1000255c:	01400d04 	movi	r5,52
10002560:	1009883a 	mov	r4,r2
10002564:	00085800 	call	10008580 <__mulsi3>
10002568:	1007883a 	mov	r3,r2
1000256c:	e0bffd17 	ldw	r2,-12(fp)
10002570:	10e1883a 	add	r16,r2,r3
10002574:	000c0d40 	call	1000c0d4 <rand>
10002578:	1023883a 	mov	r17,r2
1000257c:	e0bffb17 	ldw	r2,-20(fp)
10002580:	01400d04 	movi	r5,52
10002584:	1009883a 	mov	r4,r2
10002588:	00085800 	call	10008580 <__mulsi3>
1000258c:	1007883a 	mov	r3,r2
10002590:	e0bffd17 	ldw	r2,-12(fp)
10002594:	10c5883a 	add	r2,r2,r3
10002598:	10800817 	ldw	r2,32(r2)
1000259c:	00c07804 	movi	r3,480
100025a0:	1885c83a 	sub	r2,r3,r2
100025a4:	100b883a 	mov	r5,r2
100025a8:	8809883a 	mov	r4,r17
100025ac:	00084500 	call	10008450 <__modsi3>
100025b0:	80800615 	stw	r2,24(r16)
		}
		if(animals[i].x > 640){
100025b4:	e0bffb17 	ldw	r2,-20(fp)
100025b8:	01400d04 	movi	r5,52
100025bc:	1009883a 	mov	r4,r2
100025c0:	00085800 	call	10008580 <__mulsi3>
100025c4:	1007883a 	mov	r3,r2
100025c8:	e0bffd17 	ldw	r2,-12(fp)
100025cc:	10c5883a 	add	r2,r2,r3
100025d0:	10800517 	ldw	r2,20(r2)
100025d4:	1080a050 	cmplti	r2,r2,641
100025d8:	1000291e 	bne	r2,zero,10002680 <updateFish+0x5fc>
			animals[i].x = -1*(animals[i].width)+3;
100025dc:	e0bffb17 	ldw	r2,-20(fp)
100025e0:	01400d04 	movi	r5,52
100025e4:	1009883a 	mov	r4,r2
100025e8:	00085800 	call	10008580 <__mulsi3>
100025ec:	1007883a 	mov	r3,r2
100025f0:	e0bffd17 	ldw	r2,-12(fp)
100025f4:	10e1883a 	add	r16,r2,r3
100025f8:	e0bffb17 	ldw	r2,-20(fp)
100025fc:	01400d04 	movi	r5,52
10002600:	1009883a 	mov	r4,r2
10002604:	00085800 	call	10008580 <__mulsi3>
10002608:	1007883a 	mov	r3,r2
1000260c:	e0bffd17 	ldw	r2,-12(fp)
10002610:	10c5883a 	add	r2,r2,r3
10002614:	10800717 	ldw	r2,28(r2)
10002618:	00c000c4 	movi	r3,3
1000261c:	1885c83a 	sub	r2,r3,r2
10002620:	80800515 	stw	r2,20(r16)
			animals[i].y = rand() % (480 - animals[i].height);
10002624:	e0bffb17 	ldw	r2,-20(fp)
10002628:	01400d04 	movi	r5,52
1000262c:	1009883a 	mov	r4,r2
10002630:	00085800 	call	10008580 <__mulsi3>
10002634:	1007883a 	mov	r3,r2
10002638:	e0bffd17 	ldw	r2,-12(fp)
1000263c:	10e1883a 	add	r16,r2,r3
10002640:	000c0d40 	call	1000c0d4 <rand>
10002644:	1023883a 	mov	r17,r2
10002648:	e0bffb17 	ldw	r2,-20(fp)
1000264c:	01400d04 	movi	r5,52
10002650:	1009883a 	mov	r4,r2
10002654:	00085800 	call	10008580 <__mulsi3>
10002658:	1007883a 	mov	r3,r2
1000265c:	e0bffd17 	ldw	r2,-12(fp)
10002660:	10c5883a 	add	r2,r2,r3
10002664:	10800817 	ldw	r2,32(r2)
10002668:	00c07804 	movi	r3,480
1000266c:	1885c83a 	sub	r2,r3,r2
10002670:	100b883a 	mov	r5,r2
10002674:	8809883a 	mov	r4,r17
10002678:	00084500 	call	10008450 <__modsi3>
1000267c:	80800615 	stw	r2,24(r16)
		}
		if(animals[i].y > 480){
10002680:	e0bffb17 	ldw	r2,-20(fp)
10002684:	01400d04 	movi	r5,52
10002688:	1009883a 	mov	r4,r2
1000268c:	00085800 	call	10008580 <__mulsi3>
10002690:	1007883a 	mov	r3,r2
10002694:	e0bffd17 	ldw	r2,-12(fp)
10002698:	10c5883a 	add	r2,r2,r3
1000269c:	10800617 	ldw	r2,24(r2)
100026a0:	10807850 	cmplti	r2,r2,481
100026a4:	1000291e 	bne	r2,zero,1000274c <updateFish+0x6c8>
			animals[i].y = -1*(animals[i].height) + 3;
100026a8:	e0bffb17 	ldw	r2,-20(fp)
100026ac:	01400d04 	movi	r5,52
100026b0:	1009883a 	mov	r4,r2
100026b4:	00085800 	call	10008580 <__mulsi3>
100026b8:	1007883a 	mov	r3,r2
100026bc:	e0bffd17 	ldw	r2,-12(fp)
100026c0:	10e1883a 	add	r16,r2,r3
100026c4:	e0bffb17 	ldw	r2,-20(fp)
100026c8:	01400d04 	movi	r5,52
100026cc:	1009883a 	mov	r4,r2
100026d0:	00085800 	call	10008580 <__mulsi3>
100026d4:	1007883a 	mov	r3,r2
100026d8:	e0bffd17 	ldw	r2,-12(fp)
100026dc:	10c5883a 	add	r2,r2,r3
100026e0:	10800817 	ldw	r2,32(r2)
100026e4:	00c000c4 	movi	r3,3
100026e8:	1885c83a 	sub	r2,r3,r2
100026ec:	80800615 	stw	r2,24(r16)
			animals[i].x = rand() % (640 - animals[i].width);
100026f0:	e0bffb17 	ldw	r2,-20(fp)
100026f4:	01400d04 	movi	r5,52
100026f8:	1009883a 	mov	r4,r2
100026fc:	00085800 	call	10008580 <__mulsi3>
10002700:	1007883a 	mov	r3,r2
10002704:	e0bffd17 	ldw	r2,-12(fp)
10002708:	10e1883a 	add	r16,r2,r3
1000270c:	000c0d40 	call	1000c0d4 <rand>
10002710:	1023883a 	mov	r17,r2
10002714:	e0bffb17 	ldw	r2,-20(fp)
10002718:	01400d04 	movi	r5,52
1000271c:	1009883a 	mov	r4,r2
10002720:	00085800 	call	10008580 <__mulsi3>
10002724:	1007883a 	mov	r3,r2
10002728:	e0bffd17 	ldw	r2,-12(fp)
1000272c:	10c5883a 	add	r2,r2,r3
10002730:	10800717 	ldw	r2,28(r2)
10002734:	00c0a004 	movi	r3,640
10002738:	1885c83a 	sub	r2,r3,r2
1000273c:	100b883a 	mov	r5,r2
10002740:	8809883a 	mov	r4,r17
10002744:	00084500 	call	10008450 <__modsi3>
10002748:	80800515 	stw	r2,20(r16)
		}
		if(animals[i].y <= -1*(animals[i].height)){
1000274c:	e0bffb17 	ldw	r2,-20(fp)
10002750:	01400d04 	movi	r5,52
10002754:	1009883a 	mov	r4,r2
10002758:	00085800 	call	10008580 <__mulsi3>
1000275c:	1007883a 	mov	r3,r2
10002760:	e0bffd17 	ldw	r2,-12(fp)
10002764:	10c5883a 	add	r2,r2,r3
10002768:	14000617 	ldw	r16,24(r2)
1000276c:	e0bffb17 	ldw	r2,-20(fp)
10002770:	01400d04 	movi	r5,52
10002774:	1009883a 	mov	r4,r2
10002778:	00085800 	call	10008580 <__mulsi3>
1000277c:	1007883a 	mov	r3,r2
10002780:	e0bffd17 	ldw	r2,-12(fp)
10002784:	10c5883a 	add	r2,r2,r3
10002788:	10800817 	ldw	r2,32(r2)
1000278c:	0085c83a 	sub	r2,zero,r2
10002790:	14002216 	blt	r2,r16,1000281c <updateFish+0x798>
			animals[i].y = 480;
10002794:	e0bffb17 	ldw	r2,-20(fp)
10002798:	01400d04 	movi	r5,52
1000279c:	1009883a 	mov	r4,r2
100027a0:	00085800 	call	10008580 <__mulsi3>
100027a4:	1007883a 	mov	r3,r2
100027a8:	e0bffd17 	ldw	r2,-12(fp)
100027ac:	10c5883a 	add	r2,r2,r3
100027b0:	00c07804 	movi	r3,480
100027b4:	10c00615 	stw	r3,24(r2)
			animals[i].x = rand() % (640 - animals[i].width);
100027b8:	e0bffb17 	ldw	r2,-20(fp)
100027bc:	01400d04 	movi	r5,52
100027c0:	1009883a 	mov	r4,r2
100027c4:	00085800 	call	10008580 <__mulsi3>
100027c8:	1007883a 	mov	r3,r2
100027cc:	e0bffd17 	ldw	r2,-12(fp)
100027d0:	10e1883a 	add	r16,r2,r3
100027d4:	000c0d40 	call	1000c0d4 <rand>
100027d8:	1023883a 	mov	r17,r2
100027dc:	e0bffb17 	ldw	r2,-20(fp)
100027e0:	01400d04 	movi	r5,52
100027e4:	1009883a 	mov	r4,r2
100027e8:	00085800 	call	10008580 <__mulsi3>
100027ec:	1007883a 	mov	r3,r2
100027f0:	e0bffd17 	ldw	r2,-12(fp)
100027f4:	10c5883a 	add	r2,r2,r3
100027f8:	10800717 	ldw	r2,28(r2)
100027fc:	00c0a004 	movi	r3,640
10002800:	1885c83a 	sub	r2,r3,r2
10002804:	100b883a 	mov	r5,r2
10002808:	8809883a 	mov	r4,r17
1000280c:	00084500 	call	10008450 <__modsi3>
10002810:	80800515 	stw	r2,20(r16)
10002814:	00000106 	br	1000281c <updateFish+0x798>
				animals[i].x = 640;
				animals[i].y = rand() % (480 - animals[i].height);
				animals[i].caught = 0;
				animals[i].caughtFrame = 0;
			}
			continue;
10002818:	0001883a 	nop
			+ (cent_Y_animal - cent_Y_FishNet) * (cent_Y_animal - cent_Y_FishNet);
	return ((fishnet.frame == 4) && (distance_sqr < NET_RADIUS_SQR));
}

void updateFish(int total, Animal* animals, FishNet fishnet, int* total_score){
	for(int i = 0; i < total; i++){
1000281c:	e0bffb17 	ldw	r2,-20(fp)
10002820:	10800044 	addi	r2,r2,1
10002824:	e0bffb15 	stw	r2,-20(fp)
10002828:	e0fffb17 	ldw	r3,-20(fp)
1000282c:	e0bffc17 	ldw	r2,-16(fp)
10002830:	18be2016 	blt	r3,r2,100020b4 <__alt_data_end+0xf80020b4>
		if(animals[i].y <= -1*(animals[i].height)){
			animals[i].y = 480;
			animals[i].x = rand() % (640 - animals[i].width);
		}
	}
}
10002834:	0001883a 	nop
10002838:	e6fffe04 	addi	sp,fp,-8
1000283c:	dfc00317 	ldw	ra,12(sp)
10002840:	df000217 	ldw	fp,8(sp)
10002844:	dc400117 	ldw	r17,4(sp)
10002848:	dc000017 	ldw	r16,0(sp)
1000284c:	dec00604 	addi	sp,sp,24
10002850:	f800283a 	ret

10002854 <move_cannon>:

void move_cannon(Cannon* cannon, int key){
10002854:	defffd04 	addi	sp,sp,-12
10002858:	df000215 	stw	fp,8(sp)
1000285c:	df000204 	addi	fp,sp,8
10002860:	e13ffe15 	stw	r4,-8(fp)
10002864:	e17fff15 	stw	r5,-4(fp)
	if(key == 7 || key == 79){
10002868:	e0bfff17 	ldw	r2,-4(fp)
1000286c:	108001e0 	cmpeqi	r2,r2,7
10002870:	1000031e 	bne	r2,zero,10002880 <move_cannon+0x2c>
10002874:	e0bfff17 	ldw	r2,-4(fp)
10002878:	108013d8 	cmpnei	r2,r2,79
1000287c:	10000f1e 	bne	r2,zero,100028bc <move_cannon+0x68>
		if(cannon -> curIdx != 1){
10002880:	e0bffe17 	ldw	r2,-8(fp)
10002884:	10800217 	ldw	r2,8(r2)
10002888:	10800060 	cmpeqi	r2,r2,1
1000288c:	1000201e 	bne	r2,zero,10002910 <move_cannon+0xbc>
			cannon -> curIdx --;
10002890:	e0bffe17 	ldw	r2,-8(fp)
10002894:	10800217 	ldw	r2,8(r2)
10002898:	10ffffc4 	addi	r3,r2,-1
1000289c:	e0bffe17 	ldw	r2,-8(fp)
100028a0:	10c00215 	stw	r3,8(r2)
			cannon -> degree -= 8;
100028a4:	e0bffe17 	ldw	r2,-8(fp)
100028a8:	10800017 	ldw	r2,0(r2)
100028ac:	10fffe04 	addi	r3,r2,-8
100028b0:	e0bffe17 	ldw	r2,-8(fp)
100028b4:	10c00015 	stw	r3,0(r2)
	}
}

void move_cannon(Cannon* cannon, int key){
	if(key == 7 || key == 79){
		if(cannon -> curIdx != 1){
100028b8:	00001506 	br	10002910 <move_cannon+0xbc>
			cannon -> curIdx --;
			cannon -> degree -= 8;
		}
	}
	else if(key == 4 || key == 80){
100028bc:	e0bfff17 	ldw	r2,-4(fp)
100028c0:	10800120 	cmpeqi	r2,r2,4
100028c4:	1000031e 	bne	r2,zero,100028d4 <move_cannon+0x80>
100028c8:	e0bfff17 	ldw	r2,-4(fp)
100028cc:	10801418 	cmpnei	r2,r2,80
100028d0:	10000f1e 	bne	r2,zero,10002910 <move_cannon+0xbc>
		if(cannon -> curIdx != 23){
100028d4:	e0bffe17 	ldw	r2,-8(fp)
100028d8:	10800217 	ldw	r2,8(r2)
100028dc:	108005e0 	cmpeqi	r2,r2,23
100028e0:	10000b1e 	bne	r2,zero,10002910 <move_cannon+0xbc>
			cannon -> curIdx ++;
100028e4:	e0bffe17 	ldw	r2,-8(fp)
100028e8:	10800217 	ldw	r2,8(r2)
100028ec:	10c00044 	addi	r3,r2,1
100028f0:	e0bffe17 	ldw	r2,-8(fp)
100028f4:	10c00215 	stw	r3,8(r2)
			cannon -> degree += 8;
100028f8:	e0bffe17 	ldw	r2,-8(fp)
100028fc:	10800017 	ldw	r2,0(r2)
10002900:	10c00204 	addi	r3,r2,8
10002904:	e0bffe17 	ldw	r2,-8(fp)
10002908:	10c00015 	stw	r3,0(r2)
		}
	}
}
1000290c:	00000006 	br	10002910 <move_cannon+0xbc>
10002910:	0001883a 	nop
10002914:	e037883a 	mov	sp,fp
10002918:	df000017 	ldw	fp,0(sp)
1000291c:	dec00104 	addi	sp,sp,4
10002920:	f800283a 	ret

10002924 <maxLength>:

float maxLength(int degree){
10002924:	defffd04 	addi	sp,sp,-12
10002928:	dfc00215 	stw	ra,8(sp)
1000292c:	df000115 	stw	fp,4(sp)
10002930:	df000104 	addi	fp,sp,4
10002934:	e13fff15 	stw	r4,-4(fp)
	if(degree > 56 && degree < 124)
10002938:	e0bfff17 	ldw	r2,-4(fp)
1000293c:	10800e50 	cmplti	r2,r2,57
10002940:	1000301e 	bne	r2,zero,10002a04 <maxLength+0xe0>
10002944:	e0bfff17 	ldw	r2,-4(fp)
10002948:	10801f08 	cmpgei	r2,r2,124
1000294c:	10002d1e 	bne	r2,zero,10002a04 <maxLength+0xe0>
		return 430.0 / sin(degree / 180.0 * PI);
10002950:	e13fff17 	ldw	r4,-4(fp)
10002954:	000bb380 	call	1000bb38 <__floatsidf>
10002958:	1011883a 	mov	r8,r2
1000295c:	1813883a 	mov	r9,r3
10002960:	000d883a 	mov	r6,zero
10002964:	01d019f4 	movhi	r7,16487
10002968:	39e00004 	addi	r7,r7,-32768
1000296c:	4009883a 	mov	r4,r8
10002970:	480b883a 	mov	r5,r9
10002974:	0009e1c0 	call	10009e1c <__divdf3>
10002978:	1009883a 	mov	r4,r2
1000297c:	180b883a 	mov	r5,r3
10002980:	2005883a 	mov	r2,r4
10002984:	2807883a 	mov	r3,r5
10002988:	019344f4 	movhi	r6,19731
1000298c:	31b61284 	addi	r6,r6,-10166
10002990:	01d00274 	movhi	r7,16393
10002994:	39c87ec4 	addi	r7,r7,8699
10002998:	1009883a 	mov	r4,r2
1000299c:	180b883a 	mov	r5,r3
100029a0:	000a9500 	call	1000a950 <__muldf3>
100029a4:	1009883a 	mov	r4,r2
100029a8:	180b883a 	mov	r5,r3
100029ac:	2005883a 	mov	r2,r4
100029b0:	2807883a 	mov	r3,r5
100029b4:	1009883a 	mov	r4,r2
100029b8:	180b883a 	mov	r5,r3
100029bc:	00061a40 	call	100061a4 <sin>
100029c0:	1009883a 	mov	r4,r2
100029c4:	180b883a 	mov	r5,r3
100029c8:	200d883a 	mov	r6,r4
100029cc:	280f883a 	mov	r7,r5
100029d0:	0009883a 	mov	r4,zero
100029d4:	01501ef4 	movhi	r5,16507
100029d8:	29780004 	addi	r5,r5,-8192
100029dc:	0009e1c0 	call	10009e1c <__divdf3>
100029e0:	1009883a 	mov	r4,r2
100029e4:	180b883a 	mov	r5,r3
100029e8:	2005883a 	mov	r2,r4
100029ec:	2807883a 	mov	r3,r5
100029f0:	1009883a 	mov	r4,r2
100029f4:	180b883a 	mov	r5,r3
100029f8:	000bd240 	call	1000bd24 <__truncdfsf2>
100029fc:	1007883a 	mov	r3,r2
10002a00:	00002f06 	br	10002ac0 <maxLength+0x19c>
	else
		return abs(320.0 / cos(degree / 180.0 * PI));
10002a04:	e13fff17 	ldw	r4,-4(fp)
10002a08:	000bb380 	call	1000bb38 <__floatsidf>
10002a0c:	1011883a 	mov	r8,r2
10002a10:	1813883a 	mov	r9,r3
10002a14:	000d883a 	mov	r6,zero
10002a18:	01d019f4 	movhi	r7,16487
10002a1c:	39e00004 	addi	r7,r7,-32768
10002a20:	4009883a 	mov	r4,r8
10002a24:	480b883a 	mov	r5,r9
10002a28:	0009e1c0 	call	10009e1c <__divdf3>
10002a2c:	1009883a 	mov	r4,r2
10002a30:	180b883a 	mov	r5,r3
10002a34:	2005883a 	mov	r2,r4
10002a38:	2807883a 	mov	r3,r5
10002a3c:	019344f4 	movhi	r6,19731
10002a40:	31b61284 	addi	r6,r6,-10166
10002a44:	01d00274 	movhi	r7,16393
10002a48:	39c87ec4 	addi	r7,r7,8699
10002a4c:	1009883a 	mov	r4,r2
10002a50:	180b883a 	mov	r5,r3
10002a54:	000a9500 	call	1000a950 <__muldf3>
10002a58:	1009883a 	mov	r4,r2
10002a5c:	180b883a 	mov	r5,r3
10002a60:	2005883a 	mov	r2,r4
10002a64:	2807883a 	mov	r3,r5
10002a68:	1009883a 	mov	r4,r2
10002a6c:	180b883a 	mov	r5,r3
10002a70:	00060b80 	call	100060b8 <cos>
10002a74:	1009883a 	mov	r4,r2
10002a78:	180b883a 	mov	r5,r3
10002a7c:	200d883a 	mov	r6,r4
10002a80:	280f883a 	mov	r7,r5
10002a84:	0009883a 	mov	r4,zero
10002a88:	01501d34 	movhi	r5,16500
10002a8c:	0009e1c0 	call	10009e1c <__divdf3>
10002a90:	1009883a 	mov	r4,r2
10002a94:	180b883a 	mov	r5,r3
10002a98:	2005883a 	mov	r2,r4
10002a9c:	2807883a 	mov	r3,r5
10002aa0:	1009883a 	mov	r4,r2
10002aa4:	180b883a 	mov	r5,r3
10002aa8:	000bab80 	call	1000bab8 <__fixdfsi>
10002aac:	1000010e 	bge	r2,zero,10002ab4 <maxLength+0x190>
10002ab0:	0085c83a 	sub	r2,zero,r2
10002ab4:	1009883a 	mov	r4,r2
10002ab8:	000944c0 	call	1000944c <__floatsisf>
10002abc:	1007883a 	mov	r3,r2
10002ac0:	1805883a 	mov	r2,r3
}
10002ac4:	e037883a 	mov	sp,fp
10002ac8:	dfc00117 	ldw	ra,4(sp)
10002acc:	df000017 	ldw	fp,0(sp)
10002ad0:	dec00204 	addi	sp,sp,8
10002ad4:	f800283a 	ret

10002ad8 <updateCannonBall>:

void updateCannonBall(int deg, int prevkey, int key, int power, CannonBall* cannonball){
10002ad8:	defff604 	addi	sp,sp,-40
10002adc:	dfc00915 	stw	ra,36(sp)
10002ae0:	df000815 	stw	fp,32(sp)
10002ae4:	dcc00715 	stw	r19,28(sp)
10002ae8:	dc800615 	stw	r18,24(sp)
10002aec:	dc400515 	stw	r17,20(sp)
10002af0:	dc000415 	stw	r16,16(sp)
10002af4:	df000804 	addi	fp,sp,32
10002af8:	e13ff815 	stw	r4,-32(fp)
10002afc:	e17ff915 	stw	r5,-28(fp)
10002b00:	e1bffa15 	stw	r6,-24(fp)
10002b04:	e1fffb15 	stw	r7,-20(fp)
	if(prevkey == 44 && key != 44 && cannonball -> fix == 0){
10002b08:	e0bff917 	ldw	r2,-28(fp)
10002b0c:	10800b18 	cmpnei	r2,r2,44
10002b10:	1000c71e 	bne	r2,zero,10002e30 <updateCannonBall+0x358>
10002b14:	e0bffa17 	ldw	r2,-24(fp)
10002b18:	10800b20 	cmpeqi	r2,r2,44
10002b1c:	1000c41e 	bne	r2,zero,10002e30 <updateCannonBall+0x358>
10002b20:	e0800217 	ldw	r2,8(fp)
10002b24:	10800617 	ldw	r2,24(r2)
10002b28:	1000c11e 	bne	r2,zero,10002e30 <updateCannonBall+0x358>
		cannonball -> hidden = 0;
10002b2c:	e0800217 	ldw	r2,8(fp)
10002b30:	10000315 	stw	zero,12(r2)
		//cannonball -> deg = deg;
		cannonball -> fix = 1;
10002b34:	e0800217 	ldw	r2,8(fp)
10002b38:	00c00044 	movi	r3,1
10002b3c:	10c00615 	stw	r3,24(r2)
		cannonball -> distance = maxLength(deg)/8.0 * power;
10002b40:	e13ff817 	ldw	r4,-32(fp)
10002b44:	00029240 	call	10002924 <maxLength>
10002b48:	1007883a 	mov	r3,r2
10002b4c:	1809883a 	mov	r4,r3
10002b50:	000bc140 	call	1000bc14 <__extendsfdf2>
10002b54:	1011883a 	mov	r8,r2
10002b58:	1813883a 	mov	r9,r3
10002b5c:	000d883a 	mov	r6,zero
10002b60:	01d00834 	movhi	r7,16416
10002b64:	4009883a 	mov	r4,r8
10002b68:	480b883a 	mov	r5,r9
10002b6c:	0009e1c0 	call	10009e1c <__divdf3>
10002b70:	1009883a 	mov	r4,r2
10002b74:	180b883a 	mov	r5,r3
10002b78:	2025883a 	mov	r18,r4
10002b7c:	2827883a 	mov	r19,r5
10002b80:	e13ffb17 	ldw	r4,-20(fp)
10002b84:	000bb380 	call	1000bb38 <__floatsidf>
10002b88:	1009883a 	mov	r4,r2
10002b8c:	180b883a 	mov	r5,r3
10002b90:	200d883a 	mov	r6,r4
10002b94:	280f883a 	mov	r7,r5
10002b98:	9009883a 	mov	r4,r18
10002b9c:	980b883a 	mov	r5,r19
10002ba0:	000a9500 	call	1000a950 <__muldf3>
10002ba4:	1009883a 	mov	r4,r2
10002ba8:	180b883a 	mov	r5,r3
10002bac:	2005883a 	mov	r2,r4
10002bb0:	2807883a 	mov	r3,r5
10002bb4:	1009883a 	mov	r4,r2
10002bb8:	180b883a 	mov	r5,r3
10002bbc:	000bd240 	call	1000bd24 <__truncdfsf2>
10002bc0:	1007883a 	mov	r3,r2
10002bc4:	e0800217 	ldw	r2,8(fp)
10002bc8:	10c00815 	stw	r3,32(r2)
		cannonball -> stopY = 430 - ((cannonball -> distance) * sin(deg / 180.0 * PI));
10002bcc:	e0800217 	ldw	r2,8(fp)
10002bd0:	10c00817 	ldw	r3,32(r2)
10002bd4:	1809883a 	mov	r4,r3
10002bd8:	000bc140 	call	1000bc14 <__extendsfdf2>
10002bdc:	1025883a 	mov	r18,r2
10002be0:	1827883a 	mov	r19,r3
10002be4:	e13ff817 	ldw	r4,-32(fp)
10002be8:	000bb380 	call	1000bb38 <__floatsidf>
10002bec:	1011883a 	mov	r8,r2
10002bf0:	1813883a 	mov	r9,r3
10002bf4:	000d883a 	mov	r6,zero
10002bf8:	01d019f4 	movhi	r7,16487
10002bfc:	39e00004 	addi	r7,r7,-32768
10002c00:	4009883a 	mov	r4,r8
10002c04:	480b883a 	mov	r5,r9
10002c08:	0009e1c0 	call	10009e1c <__divdf3>
10002c0c:	1009883a 	mov	r4,r2
10002c10:	180b883a 	mov	r5,r3
10002c14:	2005883a 	mov	r2,r4
10002c18:	2807883a 	mov	r3,r5
10002c1c:	019344f4 	movhi	r6,19731
10002c20:	31b61284 	addi	r6,r6,-10166
10002c24:	01d00274 	movhi	r7,16393
10002c28:	39c87ec4 	addi	r7,r7,8699
10002c2c:	1009883a 	mov	r4,r2
10002c30:	180b883a 	mov	r5,r3
10002c34:	000a9500 	call	1000a950 <__muldf3>
10002c38:	1009883a 	mov	r4,r2
10002c3c:	180b883a 	mov	r5,r3
10002c40:	2005883a 	mov	r2,r4
10002c44:	2807883a 	mov	r3,r5
10002c48:	1009883a 	mov	r4,r2
10002c4c:	180b883a 	mov	r5,r3
10002c50:	00061a40 	call	100061a4 <sin>
10002c54:	1009883a 	mov	r4,r2
10002c58:	180b883a 	mov	r5,r3
10002c5c:	200d883a 	mov	r6,r4
10002c60:	280f883a 	mov	r7,r5
10002c64:	9009883a 	mov	r4,r18
10002c68:	980b883a 	mov	r5,r19
10002c6c:	000a9500 	call	1000a950 <__muldf3>
10002c70:	1009883a 	mov	r4,r2
10002c74:	180b883a 	mov	r5,r3
10002c78:	2005883a 	mov	r2,r4
10002c7c:	2807883a 	mov	r3,r5
10002c80:	100d883a 	mov	r6,r2
10002c84:	180f883a 	mov	r7,r3
10002c88:	0009883a 	mov	r4,zero
10002c8c:	01501ef4 	movhi	r5,16507
10002c90:	29780004 	addi	r5,r5,-8192
10002c94:	000b1bc0 	call	1000b1bc <__subdf3>
10002c98:	1009883a 	mov	r4,r2
10002c9c:	180b883a 	mov	r5,r3
10002ca0:	2005883a 	mov	r2,r4
10002ca4:	2807883a 	mov	r3,r5
10002ca8:	1009883a 	mov	r4,r2
10002cac:	180b883a 	mov	r5,r3
10002cb0:	000bab80 	call	1000bab8 <__fixdfsi>
10002cb4:	1007883a 	mov	r3,r2
10002cb8:	e0800217 	ldw	r2,8(fp)
10002cbc:	10c00915 	stw	r3,36(r2)
		cannonball -> x_velo = CANNON_BALL_VELO * cos(deg / 180.0 * PI);
10002cc0:	e13ff817 	ldw	r4,-32(fp)
10002cc4:	000bb380 	call	1000bb38 <__floatsidf>
10002cc8:	1011883a 	mov	r8,r2
10002ccc:	1813883a 	mov	r9,r3
10002cd0:	000d883a 	mov	r6,zero
10002cd4:	01d019f4 	movhi	r7,16487
10002cd8:	39e00004 	addi	r7,r7,-32768
10002cdc:	4009883a 	mov	r4,r8
10002ce0:	480b883a 	mov	r5,r9
10002ce4:	0009e1c0 	call	10009e1c <__divdf3>
10002ce8:	1009883a 	mov	r4,r2
10002cec:	180b883a 	mov	r5,r3
10002cf0:	2005883a 	mov	r2,r4
10002cf4:	2807883a 	mov	r3,r5
10002cf8:	019344f4 	movhi	r6,19731
10002cfc:	31b61284 	addi	r6,r6,-10166
10002d00:	01d00274 	movhi	r7,16393
10002d04:	39c87ec4 	addi	r7,r7,8699
10002d08:	1009883a 	mov	r4,r2
10002d0c:	180b883a 	mov	r5,r3
10002d10:	000a9500 	call	1000a950 <__muldf3>
10002d14:	1009883a 	mov	r4,r2
10002d18:	180b883a 	mov	r5,r3
10002d1c:	2005883a 	mov	r2,r4
10002d20:	2807883a 	mov	r3,r5
10002d24:	1009883a 	mov	r4,r2
10002d28:	180b883a 	mov	r5,r3
10002d2c:	00060b80 	call	100060b8 <cos>
10002d30:	1011883a 	mov	r8,r2
10002d34:	1813883a 	mov	r9,r3
10002d38:	000d883a 	mov	r6,zero
10002d3c:	01d00fb4 	movhi	r7,16446
10002d40:	4009883a 	mov	r4,r8
10002d44:	480b883a 	mov	r5,r9
10002d48:	000a9500 	call	1000a950 <__muldf3>
10002d4c:	1009883a 	mov	r4,r2
10002d50:	180b883a 	mov	r5,r3
10002d54:	2005883a 	mov	r2,r4
10002d58:	2807883a 	mov	r3,r5
10002d5c:	1009883a 	mov	r4,r2
10002d60:	180b883a 	mov	r5,r3
10002d64:	000bab80 	call	1000bab8 <__fixdfsi>
10002d68:	1007883a 	mov	r3,r2
10002d6c:	e0800217 	ldw	r2,8(fp)
10002d70:	10c00a15 	stw	r3,40(r2)
		cannonball -> y_velo = -1 * sin( deg / 180.0 * PI) * CANNON_BALL_VELO;
10002d74:	e13ff817 	ldw	r4,-32(fp)
10002d78:	000bb380 	call	1000bb38 <__floatsidf>
10002d7c:	1011883a 	mov	r8,r2
10002d80:	1813883a 	mov	r9,r3
10002d84:	000d883a 	mov	r6,zero
10002d88:	01d019f4 	movhi	r7,16487
10002d8c:	39e00004 	addi	r7,r7,-32768
10002d90:	4009883a 	mov	r4,r8
10002d94:	480b883a 	mov	r5,r9
10002d98:	0009e1c0 	call	10009e1c <__divdf3>
10002d9c:	1009883a 	mov	r4,r2
10002da0:	180b883a 	mov	r5,r3
10002da4:	2005883a 	mov	r2,r4
10002da8:	2807883a 	mov	r3,r5
10002dac:	019344f4 	movhi	r6,19731
10002db0:	31b61284 	addi	r6,r6,-10166
10002db4:	01d00274 	movhi	r7,16393
10002db8:	39c87ec4 	addi	r7,r7,8699
10002dbc:	1009883a 	mov	r4,r2
10002dc0:	180b883a 	mov	r5,r3
10002dc4:	000a9500 	call	1000a950 <__muldf3>
10002dc8:	1009883a 	mov	r4,r2
10002dcc:	180b883a 	mov	r5,r3
10002dd0:	2005883a 	mov	r2,r4
10002dd4:	2807883a 	mov	r3,r5
10002dd8:	1009883a 	mov	r4,r2
10002ddc:	180b883a 	mov	r5,r3
10002de0:	00061a40 	call	100061a4 <sin>
10002de4:	1009883a 	mov	r4,r2
10002de8:	180b883a 	mov	r5,r3
10002dec:	2021883a 	mov	r16,r4
10002df0:	2c60003c 	xorhi	r17,r5,32768
10002df4:	000d883a 	mov	r6,zero
10002df8:	01d00fb4 	movhi	r7,16446
10002dfc:	8009883a 	mov	r4,r16
10002e00:	880b883a 	mov	r5,r17
10002e04:	000a9500 	call	1000a950 <__muldf3>
10002e08:	1009883a 	mov	r4,r2
10002e0c:	180b883a 	mov	r5,r3
10002e10:	2005883a 	mov	r2,r4
10002e14:	2807883a 	mov	r3,r5
10002e18:	1009883a 	mov	r4,r2
10002e1c:	180b883a 	mov	r5,r3
10002e20:	000bab80 	call	1000bab8 <__fixdfsi>
10002e24:	1007883a 	mov	r3,r2
10002e28:	e0800217 	ldw	r2,8(fp)
10002e2c:	10c00b15 	stw	r3,44(r2)
		//printf("stopY: %d\n",cannonball -> stopY );
	}

	if(!(cannonball -> hidden)){
10002e30:	e0800217 	ldw	r2,8(fp)
10002e34:	10800317 	ldw	r2,12(r2)
10002e38:	10006c1e 	bne	r2,zero,10002fec <updateCannonBall+0x514>
		//x_velo = CANNON_BALL_VELO * cos(degree / 180.0 * PI);
		//y_velo = -1 * sin( degree / 180.0 * PI) * CANNON_BALL_VELO;

		if(cannonball->y <= cannonball->stopY)
10002e3c:	e0800217 	ldw	r2,8(fp)
10002e40:	10800217 	ldw	r2,8(r2)
10002e44:	e0c00217 	ldw	r3,8(fp)
10002e48:	18c00917 	ldw	r3,36(r3)
10002e4c:	18801b16 	blt	r3,r2,10002ebc <updateCannonBall+0x3e4>
			*cannonball = CANNON_BALL_PRO;
10002e50:	e0c00217 	ldw	r3,8(fp)
10002e54:	008400b4 	movhi	r2,4098
10002e58:	10a82304 	addi	r2,r2,-24436
10002e5c:	11000017 	ldw	r4,0(r2)
10002e60:	19000015 	stw	r4,0(r3)
10002e64:	11000117 	ldw	r4,4(r2)
10002e68:	19000115 	stw	r4,4(r3)
10002e6c:	11000217 	ldw	r4,8(r2)
10002e70:	19000215 	stw	r4,8(r3)
10002e74:	11000317 	ldw	r4,12(r2)
10002e78:	19000315 	stw	r4,12(r3)
10002e7c:	11000417 	ldw	r4,16(r2)
10002e80:	19000415 	stw	r4,16(r3)
10002e84:	11000517 	ldw	r4,20(r2)
10002e88:	19000515 	stw	r4,20(r3)
10002e8c:	11000617 	ldw	r4,24(r2)
10002e90:	19000615 	stw	r4,24(r3)
10002e94:	11000717 	ldw	r4,28(r2)
10002e98:	19000715 	stw	r4,28(r3)
10002e9c:	11000817 	ldw	r4,32(r2)
10002ea0:	19000815 	stw	r4,32(r3)
10002ea4:	11000917 	ldw	r4,36(r2)
10002ea8:	19000915 	stw	r4,36(r3)
10002eac:	11000a17 	ldw	r4,40(r2)
10002eb0:	19000a15 	stw	r4,40(r3)
10002eb4:	10800b17 	ldw	r2,44(r2)
10002eb8:	18800b15 	stw	r2,44(r3)

		cannonball -> x += cannonball -> x_velo;
10002ebc:	e0800217 	ldw	r2,8(fp)
10002ec0:	10c00117 	ldw	r3,4(r2)
10002ec4:	e0800217 	ldw	r2,8(fp)
10002ec8:	10800a17 	ldw	r2,40(r2)
10002ecc:	1887883a 	add	r3,r3,r2
10002ed0:	e0800217 	ldw	r2,8(fp)
10002ed4:	10c00115 	stw	r3,4(r2)
		cannonball -> y += cannonball -> y_velo;
10002ed8:	e0800217 	ldw	r2,8(fp)
10002edc:	10c00217 	ldw	r3,8(r2)
10002ee0:	e0800217 	ldw	r2,8(fp)
10002ee4:	10800b17 	ldw	r2,44(r2)
10002ee8:	1887883a 	add	r3,r3,r2
10002eec:	e0800217 	ldw	r2,8(fp)
10002ef0:	10c00215 	stw	r3,8(r2)
		cannonball -> curIdx = ((cannonball -> curIdx - CANNON_BALL_IDXSTART+1) % CANNON_BALL_LEN) + CANNON_BALL_IDXSTART;
10002ef4:	e0800217 	ldw	r2,8(fp)
10002ef8:	10800017 	ldw	r2,0(r2)
10002efc:	10fff904 	addi	r3,r2,-28
10002f00:	00a00034 	movhi	r2,32768
10002f04:	108000c4 	addi	r2,r2,3
10002f08:	1884703a 	and	r2,r3,r2
10002f0c:	1000040e 	bge	r2,zero,10002f20 <updateCannonBall+0x448>
10002f10:	10bfffc4 	addi	r2,r2,-1
10002f14:	00ffff04 	movi	r3,-4
10002f18:	10c4b03a 	or	r2,r2,r3
10002f1c:	10800044 	addi	r2,r2,1
10002f20:	10c00744 	addi	r3,r2,29
10002f24:	e0800217 	ldw	r2,8(fp)
10002f28:	10c00015 	stw	r3,0(r2)
		cannonball -> frame ++;
10002f2c:	e0800217 	ldw	r2,8(fp)
10002f30:	10800717 	ldw	r2,28(r2)
10002f34:	10c00044 	addi	r3,r2,1
10002f38:	e0800217 	ldw	r2,8(fp)
10002f3c:	10c00715 	stw	r3,28(r2)

		if(cannonball -> x > 640 || cannonball -> x <= -1*CANNON_BALL_WIDTH || cannonball -> y > 480 || cannonball -> y <= -1*CANNON_BALL_HEIGHT){
10002f40:	e0800217 	ldw	r2,8(fp)
10002f44:	10800117 	ldw	r2,4(r2)
10002f48:	1080a048 	cmpgei	r2,r2,641
10002f4c:	10000c1e 	bne	r2,zero,10002f80 <updateCannonBall+0x4a8>
10002f50:	e0800217 	ldw	r2,8(fp)
10002f54:	10800117 	ldw	r2,4(r2)
10002f58:	10bff3d0 	cmplti	r2,r2,-49
10002f5c:	1000081e 	bne	r2,zero,10002f80 <updateCannonBall+0x4a8>
10002f60:	e0800217 	ldw	r2,8(fp)
10002f64:	10800217 	ldw	r2,8(r2)
10002f68:	10807848 	cmpgei	r2,r2,481
10002f6c:	1000041e 	bne	r2,zero,10002f80 <updateCannonBall+0x4a8>
10002f70:	e0800217 	ldw	r2,8(fp)
10002f74:	10800217 	ldw	r2,8(r2)
10002f78:	10bff1c8 	cmpgei	r2,r2,-57
10002f7c:	10001b1e 	bne	r2,zero,10002fec <updateCannonBall+0x514>
			*cannonball = CANNON_BALL_PRO;
10002f80:	e0c00217 	ldw	r3,8(fp)
10002f84:	008400b4 	movhi	r2,4098
10002f88:	10a82304 	addi	r2,r2,-24436
10002f8c:	11000017 	ldw	r4,0(r2)
10002f90:	19000015 	stw	r4,0(r3)
10002f94:	11000117 	ldw	r4,4(r2)
10002f98:	19000115 	stw	r4,4(r3)
10002f9c:	11000217 	ldw	r4,8(r2)
10002fa0:	19000215 	stw	r4,8(r3)
10002fa4:	11000317 	ldw	r4,12(r2)
10002fa8:	19000315 	stw	r4,12(r3)
10002fac:	11000417 	ldw	r4,16(r2)
10002fb0:	19000415 	stw	r4,16(r3)
10002fb4:	11000517 	ldw	r4,20(r2)
10002fb8:	19000515 	stw	r4,20(r3)
10002fbc:	11000617 	ldw	r4,24(r2)
10002fc0:	19000615 	stw	r4,24(r3)
10002fc4:	11000717 	ldw	r4,28(r2)
10002fc8:	19000715 	stw	r4,28(r3)
10002fcc:	11000817 	ldw	r4,32(r2)
10002fd0:	19000815 	stw	r4,32(r3)
10002fd4:	11000917 	ldw	r4,36(r2)
10002fd8:	19000915 	stw	r4,36(r3)
10002fdc:	11000a17 	ldw	r4,40(r2)
10002fe0:	19000a15 	stw	r4,40(r3)
10002fe4:	10800b17 	ldw	r2,44(r2)
10002fe8:	18800b15 	stw	r2,44(r3)
		}
	}
}
10002fec:	0001883a 	nop
10002ff0:	e6fffc04 	addi	sp,fp,-16
10002ff4:	dfc00517 	ldw	ra,20(sp)
10002ff8:	df000417 	ldw	fp,16(sp)
10002ffc:	dcc00317 	ldw	r19,12(sp)
10003000:	dc800217 	ldw	r18,8(sp)
10003004:	dc400117 	ldw	r17,4(sp)
10003008:	dc000017 	ldw	r16,0(sp)
1000300c:	dec00604 	addi	sp,sp,24
10003010:	f800283a 	ret

10003014 <updateFishNet>:


void updateFishNet(FishNet* fishnet, CannonBall cannonball){
10003014:	defffb04 	addi	sp,sp,-20
10003018:	df000115 	stw	fp,4(sp)
1000301c:	df000104 	addi	fp,sp,4
10003020:	e13fff15 	stw	r4,-4(fp)
10003024:	e1400115 	stw	r5,4(fp)
10003028:	e1800215 	stw	r6,8(fp)
1000302c:	e1c00315 	stw	r7,12(fp)
	if(cannonball.y <= cannonball.stopY){
10003030:	e0800317 	ldw	r2,12(fp)
10003034:	e0c00a17 	ldw	r3,40(fp)
10003038:	18800a16 	blt	r3,r2,10003064 <updateFishNet+0x50>
		fishnet -> hidden = 0;
1000303c:	e0bfff17 	ldw	r2,-4(fp)
10003040:	10000315 	stw	zero,12(r2)
		fishnet -> x = cannonball.x + CANNON_BALL_WIDTH/2 - NET_WIDTH/2;
10003044:	e0800217 	ldw	r2,8(fp)
10003048:	10fff9c4 	addi	r3,r2,-25
1000304c:	e0bfff17 	ldw	r2,-4(fp)
10003050:	10c00115 	stw	r3,4(r2)
		fishnet -> y = cannonball.y + CANNON_BALL_HEIGHT/2 - NET_HEIGHT/2;
10003054:	e0800317 	ldw	r2,12(fp)
10003058:	10fffcc4 	addi	r3,r2,-13
1000305c:	e0bfff17 	ldw	r2,-4(fp)
10003060:	10c00215 	stw	r3,8(r2)
	}
	if(!fishnet -> hidden){
10003064:	e0bfff17 	ldw	r2,-4(fp)
10003068:	10800317 	ldw	r2,12(r2)
1000306c:	1000221e 	bne	r2,zero,100030f8 <updateFishNet+0xe4>
		fishnet -> curIdx += 1;
10003070:	e0bfff17 	ldw	r2,-4(fp)
10003074:	10800017 	ldw	r2,0(r2)
10003078:	10c00044 	addi	r3,r2,1
1000307c:	e0bfff17 	ldw	r2,-4(fp)
10003080:	10c00015 	stw	r3,0(r2)
		if(fishnet -> curIdx > 28)
10003084:	e0bfff17 	ldw	r2,-4(fp)
10003088:	10800017 	ldw	r2,0(r2)
1000308c:	10800750 	cmplti	r2,r2,29
10003090:	1000031e 	bne	r2,zero,100030a0 <updateFishNet+0x8c>
			fishnet -> curIdx = 28;
10003094:	e0bfff17 	ldw	r2,-4(fp)
10003098:	00c00704 	movi	r3,28
1000309c:	10c00015 	stw	r3,0(r2)
		fishnet -> frame ++;
100030a0:	e0bfff17 	ldw	r2,-4(fp)
100030a4:	10800417 	ldw	r2,16(r2)
100030a8:	10c00044 	addi	r3,r2,1
100030ac:	e0bfff17 	ldw	r2,-4(fp)
100030b0:	10c00415 	stw	r3,16(r2)
		if(fishnet -> frame > 10)
100030b4:	e0bfff17 	ldw	r2,-4(fp)
100030b8:	10800417 	ldw	r2,16(r2)
100030bc:	108002d0 	cmplti	r2,r2,11
100030c0:	10000d1e 	bne	r2,zero,100030f8 <updateFishNet+0xe4>
			*fishnet = FISH_NET_PRO;
100030c4:	e0ffff17 	ldw	r3,-4(fp)
100030c8:	008400b4 	movhi	r2,4098
100030cc:	10a82f04 	addi	r2,r2,-24388
100030d0:	11000017 	ldw	r4,0(r2)
100030d4:	19000015 	stw	r4,0(r3)
100030d8:	11000117 	ldw	r4,4(r2)
100030dc:	19000115 	stw	r4,4(r3)
100030e0:	11000217 	ldw	r4,8(r2)
100030e4:	19000215 	stw	r4,8(r3)
100030e8:	11000317 	ldw	r4,12(r2)
100030ec:	19000315 	stw	r4,12(r3)
100030f0:	10800417 	ldw	r2,16(r2)
100030f4:	18800415 	stw	r2,16(r3)
	}
}
100030f8:	0001883a 	nop
100030fc:	e037883a 	mov	sp,fp
10003100:	df000017 	ldw	fp,0(sp)
10003104:	dec00404 	addi	sp,sp,16
10003108:	f800283a 	ret

1000310c <func1>:
//Trajectory functions of fish

//Function 0 is y unchanged -- going a straight line

//Function 1 is cos/sin with random parameters
int func1(Animal animal){
1000310c:	defff804 	addi	sp,sp,-32
10003110:	dfc00315 	stw	ra,12(sp)
10003114:	df000215 	stw	fp,8(sp)
10003118:	dc400115 	stw	r17,4(sp)
1000311c:	dc000015 	stw	r16,0(sp)
10003120:	df000204 	addi	fp,sp,8
10003124:	e1000215 	stw	r4,8(fp)
10003128:	e1400315 	stw	r5,12(fp)
1000312c:	e1800415 	stw	r6,16(fp)
10003130:	e1c00515 	stw	r7,20(fp)
	//double freq =  0.01 * (rand() % (FREQ_MAX - FREQ_MIN + 1) + FREQ_MIN);
	//int amp = rand() % (AMP_MAX - AMP_MIN + 1) + AMP_MIN;
	return 10*sin(0.08*animal.x) + animal.y;
10003134:	e0800717 	ldw	r2,28(fp)
10003138:	1009883a 	mov	r4,r2
1000313c:	000bb380 	call	1000bb38 <__floatsidf>
10003140:	1011883a 	mov	r8,r2
10003144:	1813883a 	mov	r9,r3
10003148:	0191ebb4 	movhi	r6,18350
1000314c:	31851ec4 	addi	r6,r6,5243
10003150:	01cfed34 	movhi	r7,16308
10003154:	39deb844 	addi	r7,r7,31457
10003158:	4009883a 	mov	r4,r8
1000315c:	480b883a 	mov	r5,r9
10003160:	000a9500 	call	1000a950 <__muldf3>
10003164:	1009883a 	mov	r4,r2
10003168:	180b883a 	mov	r5,r3
1000316c:	2005883a 	mov	r2,r4
10003170:	2807883a 	mov	r3,r5
10003174:	1009883a 	mov	r4,r2
10003178:	180b883a 	mov	r5,r3
1000317c:	00061a40 	call	100061a4 <sin>
10003180:	1011883a 	mov	r8,r2
10003184:	1813883a 	mov	r9,r3
10003188:	000d883a 	mov	r6,zero
1000318c:	01d00934 	movhi	r7,16420
10003190:	4009883a 	mov	r4,r8
10003194:	480b883a 	mov	r5,r9
10003198:	000a9500 	call	1000a950 <__muldf3>
1000319c:	1009883a 	mov	r4,r2
100031a0:	180b883a 	mov	r5,r3
100031a4:	2021883a 	mov	r16,r4
100031a8:	2823883a 	mov	r17,r5
100031ac:	e0800817 	ldw	r2,32(fp)
100031b0:	1009883a 	mov	r4,r2
100031b4:	000bb380 	call	1000bb38 <__floatsidf>
100031b8:	1009883a 	mov	r4,r2
100031bc:	180b883a 	mov	r5,r3
100031c0:	200d883a 	mov	r6,r4
100031c4:	280f883a 	mov	r7,r5
100031c8:	8009883a 	mov	r4,r16
100031cc:	880b883a 	mov	r5,r17
100031d0:	00095700 	call	10009570 <__adddf3>
100031d4:	1009883a 	mov	r4,r2
100031d8:	180b883a 	mov	r5,r3
100031dc:	2005883a 	mov	r2,r4
100031e0:	2807883a 	mov	r3,r5
100031e4:	1009883a 	mov	r4,r2
100031e8:	180b883a 	mov	r5,r3
100031ec:	000bab80 	call	1000bab8 <__fixdfsi>
}
100031f0:	e6fffe04 	addi	sp,fp,-8
100031f4:	dfc00317 	ldw	ra,12(sp)
100031f8:	df000217 	ldw	fp,8(sp)
100031fc:	dc400117 	ldw	r17,4(sp)
10003200:	dc000017 	ldw	r16,0(sp)
10003204:	dec00804 	addi	sp,sp,32
10003208:	f800283a 	ret

1000320c <func2>:

int func2(Animal animal){
1000320c:	defff904 	addi	sp,sp,-28
10003210:	dfc00215 	stw	ra,8(sp)
10003214:	df000115 	stw	fp,4(sp)
10003218:	dc000015 	stw	r16,0(sp)
1000321c:	df000104 	addi	fp,sp,4
10003220:	e1000215 	stw	r4,8(fp)
10003224:	e1400315 	stw	r5,12(fp)
10003228:	e1800415 	stw	r6,16(fp)
1000322c:	e1c00515 	stw	r7,20(fp)
	return animal.y + animal.velocity / 3 * 2;
10003230:	e4000817 	ldw	r16,32(fp)
10003234:	e0800b17 	ldw	r2,44(fp)
10003238:	014000c4 	movi	r5,3
1000323c:	1009883a 	mov	r4,r2
10003240:	00083cc0 	call	100083cc <__divsi3>
10003244:	1085883a 	add	r2,r2,r2
10003248:	8085883a 	add	r2,r16,r2
}
1000324c:	e6ffff04 	addi	sp,fp,-4
10003250:	dfc00217 	ldw	ra,8(sp)
10003254:	df000117 	ldw	fp,4(sp)
10003258:	dc000017 	ldw	r16,0(sp)
1000325c:	dec00704 	addi	sp,sp,28
10003260:	f800283a 	ret

10003264 <keyPress>:
//

/********Key Press Detector******/
int keyPress(int key, int power){
10003264:	defffc04 	addi	sp,sp,-16
10003268:	df000315 	stw	fp,12(sp)
1000326c:	df000304 	addi	fp,sp,12
10003270:	e13ffe15 	stw	r4,-8(fp)
10003274:	e17fff15 	stw	r5,-4(fp)
	//Power: 8 levels
	int new_power = power;
10003278:	e0bfff17 	ldw	r2,-4(fp)
1000327c:	e0bffd15 	stw	r2,-12(fp)
	if(key == 44){
10003280:	e0bffe17 	ldw	r2,-8(fp)
10003284:	10800b18 	cmpnei	r2,r2,44
10003288:	1000091e 	bne	r2,zero,100032b0 <keyPress+0x4c>
		new_power += 1;
1000328c:	e0bffd17 	ldw	r2,-12(fp)
10003290:	10800044 	addi	r2,r2,1
10003294:	e0bffd15 	stw	r2,-12(fp)
		if(new_power >= 8)
10003298:	e0bffd17 	ldw	r2,-12(fp)
1000329c:	10800210 	cmplti	r2,r2,8
100032a0:	1000041e 	bne	r2,zero,100032b4 <keyPress+0x50>
			new_power = 8;
100032a4:	00800204 	movi	r2,8
100032a8:	e0bffd15 	stw	r2,-12(fp)
100032ac:	00000106 	br	100032b4 <keyPress+0x50>
	}
	else
		new_power = 0;
100032b0:	e03ffd15 	stw	zero,-12(fp)
	return new_power;
100032b4:	e0bffd17 	ldw	r2,-12(fp)
}
100032b8:	e037883a 	mov	sp,fp
100032bc:	df000017 	ldw	fp,0(sp)
100032c0:	dec00104 	addi	sp,sp,4
100032c4:	f800283a 	ret

100032c8 <showpower>:

void showpower(int power){
100032c8:	defffe04 	addi	sp,sp,-8
100032cc:	df000115 	stw	fp,4(sp)
100032d0:	df000104 	addi	fp,sp,4
100032d4:	e13fff15 	stw	r4,-4(fp)
	switch(power){
100032d8:	e0bfff17 	ldw	r2,-4(fp)
100032dc:	10800268 	cmpgeui	r2,r2,9
100032e0:	1000301e 	bne	r2,zero,100033a4 <showpower+0xdc>
100032e4:	e0bfff17 	ldw	r2,-4(fp)
100032e8:	100690ba 	slli	r3,r2,2
100032ec:	00840034 	movhi	r2,4096
100032f0:	108cc004 	addi	r2,r2,13056
100032f4:	1885883a 	add	r2,r3,r2
100032f8:	10800017 	ldw	r2,0(r2)
100032fc:	1000683a 	jmp	r2
10003300:	100033a4 	muli	zero,r2,206
10003304:	10003324 	muli	zero,r2,204
10003308:	10003334 	orhi	zero,r2,204
1000330c:	10003344 	addi	zero,r2,205
10003310:	10003354 	ori	zero,r2,205
10003314:	10003364 	muli	zero,r2,205
10003318:	10003374 	orhi	zero,r2,205
1000331c:	10003384 	addi	zero,r2,206
10003320:	10003394 	ori	zero,r2,206
	case 1:
		* POWER_PTR = 1;
10003324:	d0a00317 	ldw	r2,-32756(gp)
10003328:	00c00044 	movi	r3,1
1000332c:	10c00015 	stw	r3,0(r2)
		break;
10003330:	00001e06 	br	100033ac <showpower+0xe4>
	case 2:
		* POWER_PTR = 3;
10003334:	d0a00317 	ldw	r2,-32756(gp)
10003338:	00c000c4 	movi	r3,3
1000333c:	10c00015 	stw	r3,0(r2)
		break;
10003340:	00001a06 	br	100033ac <showpower+0xe4>
	case 3:
		* POWER_PTR = 7;
10003344:	d0a00317 	ldw	r2,-32756(gp)
10003348:	00c001c4 	movi	r3,7
1000334c:	10c00015 	stw	r3,0(r2)
		break;
10003350:	00001606 	br	100033ac <showpower+0xe4>
	case 4:
		* POWER_PTR = 15;
10003354:	d0a00317 	ldw	r2,-32756(gp)
10003358:	00c003c4 	movi	r3,15
1000335c:	10c00015 	stw	r3,0(r2)
		break;
10003360:	00001206 	br	100033ac <showpower+0xe4>
	case 5:
		* POWER_PTR = 31;
10003364:	d0a00317 	ldw	r2,-32756(gp)
10003368:	00c007c4 	movi	r3,31
1000336c:	10c00015 	stw	r3,0(r2)
		break;
10003370:	00000e06 	br	100033ac <showpower+0xe4>
	case 6:
		* POWER_PTR = 63;
10003374:	d0a00317 	ldw	r2,-32756(gp)
10003378:	00c00fc4 	movi	r3,63
1000337c:	10c00015 	stw	r3,0(r2)
		break;
10003380:	00000a06 	br	100033ac <showpower+0xe4>
	case 7:
		* POWER_PTR = 127;
10003384:	d0a00317 	ldw	r2,-32756(gp)
10003388:	00c01fc4 	movi	r3,127
1000338c:	10c00015 	stw	r3,0(r2)
		break;
10003390:	00000606 	br	100033ac <showpower+0xe4>
	case 8:
		* POWER_PTR = 255;
10003394:	d0a00317 	ldw	r2,-32756(gp)
10003398:	00c03fc4 	movi	r3,255
1000339c:	10c00015 	stw	r3,0(r2)
		break;
100033a0:	00000206 	br	100033ac <showpower+0xe4>
	default:
		* POWER_PTR = 0;
100033a4:	d0a00317 	ldw	r2,-32756(gp)
100033a8:	10000015 	stw	zero,0(r2)
	}
}
100033ac:	0001883a 	nop
100033b0:	e037883a 	mov	sp,fp
100033b4:	df000017 	ldw	fp,0(sp)
100033b8:	dec00104 	addi	sp,sp,4
100033bc:	f800283a 	ret

100033c0 <setTimeout>:

void setTimeout(int milliseconds)
{
100033c0:	defffb04 	addi	sp,sp,-20
100033c4:	dfc00415 	stw	ra,16(sp)
100033c8:	df000315 	stw	fp,12(sp)
100033cc:	df000304 	addi	fp,sp,12
100033d0:	e13fff15 	stw	r4,-4(fp)
    // If milliseconds is less or equal to 0
    // will be simple return from function without throw error
    if (milliseconds <= 0) {
100033d4:	e0bfff17 	ldw	r2,-4(fp)
100033d8:	0080180e 	bge	zero,r2,1000343c <setTimeout+0x7c>
        return;
    }

    // a current time of milliseconds
    int milliseconds_since = clock() * 1000 / CLOCKS_PER_SEC;
100033dc:	000bf300 	call	1000bf30 <clock>
100033e0:	0140fa04 	movi	r5,1000
100033e4:	1009883a 	mov	r4,r2
100033e8:	00085800 	call	10008580 <__mulsi3>
100033ec:	0140fa04 	movi	r5,1000
100033f0:	1009883a 	mov	r4,r2
100033f4:	00084c40 	call	100084c4 <__udivsi3>
100033f8:	e0bffd15 	stw	r2,-12(fp)

    // needed count milliseconds of return from this timeout
    int end = milliseconds_since + milliseconds;
100033fc:	e0fffd17 	ldw	r3,-12(fp)
10003400:	e0bfff17 	ldw	r2,-4(fp)
10003404:	1885883a 	add	r2,r3,r2
10003408:	e0bffe15 	stw	r2,-8(fp)

    // wait while until needed time comes
    do {
        milliseconds_since = clock() * 1000 / CLOCKS_PER_SEC;
1000340c:	000bf300 	call	1000bf30 <clock>
10003410:	0140fa04 	movi	r5,1000
10003414:	1009883a 	mov	r4,r2
10003418:	00085800 	call	10008580 <__mulsi3>
1000341c:	0140fa04 	movi	r5,1000
10003420:	1009883a 	mov	r4,r2
10003424:	00084c40 	call	100084c4 <__udivsi3>
10003428:	e0bffd15 	stw	r2,-12(fp)
    } while (milliseconds_since <= end);
1000342c:	e0bffd17 	ldw	r2,-12(fp)
10003430:	e0fffe17 	ldw	r3,-8(fp)
10003434:	18bff50e 	bge	r3,r2,1000340c <__alt_data_end+0xf800340c>
10003438:	00000106 	br	10003440 <setTimeout+0x80>
void setTimeout(int milliseconds)
{
    // If milliseconds is less or equal to 0
    // will be simple return from function without throw error
    if (milliseconds <= 0) {
        return;
1000343c:	0001883a 	nop

    // wait while until needed time comes
    do {
        milliseconds_since = clock() * 1000 / CLOCKS_PER_SEC;
    } while (milliseconds_since <= end);
}
10003440:	e037883a 	mov	sp,fp
10003444:	dfc00117 	ldw	ra,4(sp)
10003448:	df000017 	ldw	fp,0(sp)
1000344c:	dec00204 	addi	sp,sp,8
10003450:	f800283a 	ret

10003454 <delay_loop>:
#define CURR_SCORE_Y 80
#define CURR_TIME_X 480
#define CURR_TIME_Y 30

//Functions
static void delay_loop(){
10003454:	defffe04 	addi	sp,sp,-8
10003458:	df000115 	stw	fp,4(sp)
1000345c:	df000104 	addi	fp,sp,4
	for(int i = 0; i < DELAY_TIME; i++);
10003460:	e03fff15 	stw	zero,-4(fp)
10003464:	00000306 	br	10003474 <delay_loop+0x20>
10003468:	e0bfff17 	ldw	r2,-4(fp)
1000346c:	10800044 	addi	r2,r2,1
10003470:	e0bfff15 	stw	r2,-4(fp)
10003474:	e0bfff17 	ldw	r2,-4(fp)
10003478:	1087d010 	cmplti	r2,r2,8000
1000347c:	103ffa1e 	bne	r2,zero,10003468 <__alt_data_end+0xf8003468>
}
10003480:	0001883a 	nop
10003484:	e037883a 	mov	sp,fp
10003488:	df000017 	ldw	fp,0(sp)
1000348c:	dec00104 	addi	sp,sp,4
10003490:	f800283a 	ret

10003494 <playGame>:
5 : Reserved
6 : Draw_Start
7 : Draw_Done
*/

GameState playGame(){
10003494:	deffb404 	addi	sp,sp,-304
10003498:	dfc04b15 	stw	ra,300(sp)
1000349c:	df004a15 	stw	fp,296(sp)
100034a0:	dd404915 	stw	r21,292(sp)
100034a4:	dd004815 	stw	r20,288(sp)
100034a8:	dcc04715 	stw	r19,284(sp)
100034ac:	dc804615 	stw	r18,280(sp)
100034b0:	dc404515 	stw	r17,276(sp)
100034b4:	dc004415 	stw	r16,272(sp)
100034b8:	df004a04 	addi	fp,sp,296
100034bc:	e13ff915 	stw	r4,-28(fp)
100034c0:	d805883a 	mov	r2,sp
100034c4:	102b883a 	mov	r21,r2
	int total;		//Total number of fish
	int nums[NUM_TYPE_FISH];	//Number of each type of fish
	//Space : 44
	int power_use = 0;
100034c8:	e03fcb15 	stw	zero,-212(fp)
	int power_calc = 0;
100034cc:	e03fcc15 	stw	zero,-208(fp)
	int key = 0;
100034d0:	e03fcd15 	stw	zero,-204(fp)
	int prevkey = 0;
100034d4:	e03fd215 	stw	zero,-184(fp)
	int total_score = 0;
100034d8:	e03fe115 	stw	zero,-124(fp)
	int prev_total = 0;
100034dc:	e03fd315 	stw	zero,-180(fp)
	//printf("START\n");
	//setTimeout(5000);
	//printf("Done\n");
	int msec = 0;
100034e0:	e03fd415 	stw	zero,-176(fp)
	int prevsec = 0;
100034e4:	e03fd515 	stw	zero,-172(fp)
	int sec = 0;
100034e8:	e03fce15 	stw	zero,-200(fp)

	randomNumbers(nums, &total);	//generate necessary random numbers
100034ec:	e0ffda04 	addi	r3,fp,-152
100034f0:	e0bfdb04 	addi	r2,fp,-148
100034f4:	180b883a 	mov	r5,r3
100034f8:	1009883a 	mov	r4,r2
100034fc:	00011840 	call	10001184 <randomNumbers>

	Animal animals[total];		//Array that store animals
10003500:	e43fda17 	ldw	r16,-152(fp)
10003504:	80bfffc4 	addi	r2,r16,-1
10003508:	e0bfd615 	stw	r2,-168(fp)
1000350c:	8005883a 	mov	r2,r16
10003510:	1027883a 	mov	r19,r2
10003514:	0029883a 	mov	r20,zero
10003518:	01806804 	movi	r6,416
1000351c:	000f883a 	mov	r7,zero
10003520:	9809883a 	mov	r4,r19
10003524:	a00b883a 	mov	r5,r20
10003528:	00082c00 	call	100082c0 <__muldi3>
1000352c:	1009883a 	mov	r4,r2
10003530:	180b883a 	mov	r5,r3
10003534:	2005883a 	mov	r2,r4
10003538:	2807883a 	mov	r3,r5
1000353c:	8005883a 	mov	r2,r16
10003540:	01400d04 	movi	r5,52
10003544:	1009883a 	mov	r4,r2
10003548:	00085800 	call	10008580 <__mulsi3>
1000354c:	8005883a 	mov	r2,r16
10003550:	1023883a 	mov	r17,r2
10003554:	0025883a 	mov	r18,zero
10003558:	01806804 	movi	r6,416
1000355c:	000f883a 	mov	r7,zero
10003560:	8809883a 	mov	r4,r17
10003564:	900b883a 	mov	r5,r18
10003568:	00082c00 	call	100082c0 <__muldi3>
1000356c:	1009883a 	mov	r4,r2
10003570:	180b883a 	mov	r5,r3
10003574:	2005883a 	mov	r2,r4
10003578:	2807883a 	mov	r3,r5
1000357c:	8005883a 	mov	r2,r16
10003580:	01400d04 	movi	r5,52
10003584:	1009883a 	mov	r4,r2
10003588:	00085800 	call	10008580 <__mulsi3>
1000358c:	108000c4 	addi	r2,r2,3
10003590:	108000c4 	addi	r2,r2,3
10003594:	1004d0ba 	srli	r2,r2,2
10003598:	1085883a 	add	r2,r2,r2
1000359c:	1085883a 	add	r2,r2,r2
100035a0:	d8b7c83a 	sub	sp,sp,r2
100035a4:	d8801504 	addi	r2,sp,84
100035a8:	108000c4 	addi	r2,r2,3
100035ac:	1004d0ba 	srli	r2,r2,2
100035b0:	1085883a 	add	r2,r2,r2
100035b4:	1085883a 	add	r2,r2,r2
100035b8:	e0bfd715 	stw	r2,-164(fp)

	generateFish(nums, animals);	//Generate fish randomly
100035bc:	e0ffd717 	ldw	r3,-164(fp)
100035c0:	e0bfdb04 	addi	r2,fp,-148
100035c4:	180b883a 	mov	r5,r3
100035c8:	1009883a 	mov	r4,r2
100035cc:	00013040 	call	10001304 <generateFish>

	//printf("Start enumerating\n");

	Cannon cannon = {.degree = 90, .curIdx = 12, .idxStart = CANNON_IDXSTART};
100035d0:	00801684 	movi	r2,90
100035d4:	e0bfe215 	stw	r2,-120(fp)
100035d8:	00800044 	movi	r2,1
100035dc:	e0bfe315 	stw	r2,-116(fp)
100035e0:	00800304 	movi	r2,12
100035e4:	e0bfe415 	stw	r2,-112(fp)
	CannonBall cannonball = CANNON_BALL_PRO;
100035e8:	008400b4 	movhi	r2,4098
100035ec:	10a88204 	addi	r2,r2,-24056
100035f0:	10c00017 	ldw	r3,0(r2)
100035f4:	e0ffe515 	stw	r3,-108(fp)
100035f8:	10c00117 	ldw	r3,4(r2)
100035fc:	e0ffe615 	stw	r3,-104(fp)
10003600:	10c00217 	ldw	r3,8(r2)
10003604:	e0ffe715 	stw	r3,-100(fp)
10003608:	10c00317 	ldw	r3,12(r2)
1000360c:	e0ffe815 	stw	r3,-96(fp)
10003610:	10c00417 	ldw	r3,16(r2)
10003614:	e0ffe915 	stw	r3,-92(fp)
10003618:	10c00517 	ldw	r3,20(r2)
1000361c:	e0ffea15 	stw	r3,-88(fp)
10003620:	10c00617 	ldw	r3,24(r2)
10003624:	e0ffeb15 	stw	r3,-84(fp)
10003628:	10c00717 	ldw	r3,28(r2)
1000362c:	e0ffec15 	stw	r3,-80(fp)
10003630:	10c00817 	ldw	r3,32(r2)
10003634:	e0ffed15 	stw	r3,-76(fp)
10003638:	10c00917 	ldw	r3,36(r2)
1000363c:	e0ffee15 	stw	r3,-72(fp)
10003640:	10c00a17 	ldw	r3,40(r2)
10003644:	e0ffef15 	stw	r3,-68(fp)
10003648:	10800b17 	ldw	r2,44(r2)
1000364c:	e0bff015 	stw	r2,-64(fp)
	FishNet fishnet = FISH_NET_PRO;
10003650:	008400b4 	movhi	r2,4098
10003654:	10a88e04 	addi	r2,r2,-24008
10003658:	10c00017 	ldw	r3,0(r2)
1000365c:	e0fff115 	stw	r3,-60(fp)
10003660:	10c00117 	ldw	r3,4(r2)
10003664:	e0fff215 	stw	r3,-56(fp)
10003668:	10c00217 	ldw	r3,8(r2)
1000366c:	e0fff315 	stw	r3,-52(fp)
10003670:	10c00317 	ldw	r3,12(r2)
10003674:	e0fff415 	stw	r3,-48(fp)
10003678:	10800417 	ldw	r2,16(r2)
1000367c:	e0bff515 	stw	r2,-44(fp)
	init_background();	//Initialize background
10003680:	00002ac0 	call	100002ac <init_background>
	printf("Start Gaming\n");
10003684:	010400b4 	movhi	r4,4098
10003688:	2124b604 	addi	r4,r4,-27944
1000368c:	000c0a80 	call	1000c0a8 <puts>
	FRAME_DONE = 1;
10003690:	d0a00417 	ldw	r2,-32752(gp)
10003694:	10800504 	addi	r2,r2,20
10003698:	00c00044 	movi	r3,1
1000369c:	10c00015 	stw	r3,0(r2)

	int flag = 0;	//If flag is 0, naturally stop. If flag is 1, forced stop
100036a0:	e03fcf15 	stw	zero,-196(fp)
	clock_t before = clock();
100036a4:	000bf300 	call	1000bf30 <clock>
100036a8:	e0bfd815 	stw	r2,-160(fp)
	while(1){
		prevkey = key;
100036ac:	e0bfcd17 	ldw	r2,-204(fp)
100036b0:	e0bfd215 	stw	r2,-184(fp)
		key = get_key();
100036b4:	0004bc80 	call	10004bc8 <get_key>
100036b8:	e0bfcd15 	stw	r2,-204(fp)
		if(key == 41){
100036bc:	e0bfcd17 	ldw	r2,-204(fp)
100036c0:	10800a58 	cmpnei	r2,r2,41
100036c4:	1000031e 	bne	r2,zero,100036d4 <playGame+0x240>
			flag = 1;
100036c8:	00800044 	movi	r2,1
100036cc:	e0bfcf15 	stw	r2,-196(fp)
			break;
100036d0:	0000c806 	br	100039f4 <playGame+0x560>
		}
		power_calc = keyPress(key,power_calc);
100036d4:	e17fcc17 	ldw	r5,-208(fp)
100036d8:	e13fcd17 	ldw	r4,-204(fp)
100036dc:	00032640 	call	10003264 <keyPress>
100036e0:	e0bfcc15 	stw	r2,-208(fp)
		//printf("power: %d\n", power_calc/2);
		//printf("Key Code : %d\n",key);
		move_cannon(&cannon, key);
100036e4:	e0bfe204 	addi	r2,fp,-120
100036e8:	e17fcd17 	ldw	r5,-204(fp)
100036ec:	1009883a 	mov	r4,r2
100036f0:	00028540 	call	10002854 <move_cannon>
		//draw_cannon(cannon);
		updateFishNet(&fishnet, cannonball);
100036f4:	e0fff104 	addi	r3,fp,-60
100036f8:	e0bfe817 	ldw	r2,-96(fp)
100036fc:	d8800015 	stw	r2,0(sp)
10003700:	e0bfe917 	ldw	r2,-92(fp)
10003704:	d8800115 	stw	r2,4(sp)
10003708:	e0bfea17 	ldw	r2,-88(fp)
1000370c:	d8800215 	stw	r2,8(sp)
10003710:	e0bfeb17 	ldw	r2,-84(fp)
10003714:	d8800315 	stw	r2,12(sp)
10003718:	e0bfec17 	ldw	r2,-80(fp)
1000371c:	d8800415 	stw	r2,16(sp)
10003720:	e0bfed17 	ldw	r2,-76(fp)
10003724:	d8800515 	stw	r2,20(sp)
10003728:	e0bfee17 	ldw	r2,-72(fp)
1000372c:	d8800615 	stw	r2,24(sp)
10003730:	e0bfef17 	ldw	r2,-68(fp)
10003734:	d8800715 	stw	r2,28(sp)
10003738:	e0bff017 	ldw	r2,-64(fp)
1000373c:	d8800815 	stw	r2,32(sp)
10003740:	e17fe517 	ldw	r5,-108(fp)
10003744:	e1bfe617 	ldw	r6,-104(fp)
10003748:	e1ffe717 	ldw	r7,-100(fp)
1000374c:	1809883a 	mov	r4,r3
10003750:	00030140 	call	10003014 <updateFishNet>
		updateCannonBall(cannon.degree, prevkey, key, power_use, &cannonball);
10003754:	e0ffe217 	ldw	r3,-120(fp)
10003758:	e0bfe504 	addi	r2,fp,-108
1000375c:	d8800015 	stw	r2,0(sp)
10003760:	e1ffcb17 	ldw	r7,-212(fp)
10003764:	e1bfcd17 	ldw	r6,-204(fp)
10003768:	e17fd217 	ldw	r5,-184(fp)
1000376c:	1809883a 	mov	r4,r3
10003770:	0002ad80 	call	10002ad8 <updateCannonBall>
		showpower(power_use);
10003774:	e13fcb17 	ldw	r4,-212(fp)
10003778:	00032c80 	call	100032c8 <showpower>
		power_use = power_calc;
1000377c:	e0bfcc17 	ldw	r2,-208(fp)
10003780:	e0bfcb15 	stw	r2,-212(fp)

		draw_frame(total,animals,cannon,cannonball,fishnet,total_score, 60-sec,0);
10003784:	e23fda17 	ldw	r8,-152(fp)
10003788:	e17fd717 	ldw	r5,-164(fp)
1000378c:	e0bfe117 	ldw	r2,-124(fp)
10003790:	01000f04 	movi	r4,60
10003794:	e0ffce17 	ldw	r3,-200(fp)
10003798:	20c7c83a 	sub	r3,r4,r3
1000379c:	d8001415 	stw	zero,80(sp)
100037a0:	d8c01315 	stw	r3,76(sp)
100037a4:	d8801215 	stw	r2,72(sp)
100037a8:	e0bff117 	ldw	r2,-60(fp)
100037ac:	d8800d15 	stw	r2,52(sp)
100037b0:	e0bff217 	ldw	r2,-56(fp)
100037b4:	d8800e15 	stw	r2,56(sp)
100037b8:	e0bff317 	ldw	r2,-52(fp)
100037bc:	d8800f15 	stw	r2,60(sp)
100037c0:	e0bff417 	ldw	r2,-48(fp)
100037c4:	d8801015 	stw	r2,64(sp)
100037c8:	e0bff517 	ldw	r2,-44(fp)
100037cc:	d8801115 	stw	r2,68(sp)
100037d0:	e0bfe517 	ldw	r2,-108(fp)
100037d4:	d8800115 	stw	r2,4(sp)
100037d8:	e0bfe617 	ldw	r2,-104(fp)
100037dc:	d8800215 	stw	r2,8(sp)
100037e0:	e0bfe717 	ldw	r2,-100(fp)
100037e4:	d8800315 	stw	r2,12(sp)
100037e8:	e0bfe817 	ldw	r2,-96(fp)
100037ec:	d8800415 	stw	r2,16(sp)
100037f0:	e0bfe917 	ldw	r2,-92(fp)
100037f4:	d8800515 	stw	r2,20(sp)
100037f8:	e0bfea17 	ldw	r2,-88(fp)
100037fc:	d8800615 	stw	r2,24(sp)
10003800:	e0bfeb17 	ldw	r2,-84(fp)
10003804:	d8800715 	stw	r2,28(sp)
10003808:	e0bfec17 	ldw	r2,-80(fp)
1000380c:	d8800815 	stw	r2,32(sp)
10003810:	e0bfed17 	ldw	r2,-76(fp)
10003814:	d8800915 	stw	r2,36(sp)
10003818:	e0bfee17 	ldw	r2,-72(fp)
1000381c:	d8800a15 	stw	r2,40(sp)
10003820:	e0bfef17 	ldw	r2,-68(fp)
10003824:	d8800b15 	stw	r2,44(sp)
10003828:	e0bff017 	ldw	r2,-64(fp)
1000382c:	d8800c15 	stw	r2,48(sp)
10003830:	e0bfe417 	ldw	r2,-112(fp)
10003834:	d8800015 	stw	r2,0(sp)
10003838:	e1bfe217 	ldw	r6,-120(fp)
1000383c:	e1ffe317 	ldw	r7,-116(fp)
10003840:	4009883a 	mov	r4,r8
10003844:	00006000 	call	10000600 <draw_frame>
		delay_loop();
10003848:	00034540 	call	10003454 <delay_loop>
		//copyAnimals(total ,animals, prevs);
		updateFish(total, animals, fishnet, &total_score);
1000384c:	e0ffda17 	ldw	r3,-152(fp)
10003850:	e13fd717 	ldw	r4,-164(fp)
10003854:	e0bfe104 	addi	r2,fp,-124
10003858:	d8800315 	stw	r2,12(sp)
1000385c:	e0bff317 	ldw	r2,-52(fp)
10003860:	d8800015 	stw	r2,0(sp)
10003864:	e0bff417 	ldw	r2,-48(fp)
10003868:	d8800115 	stw	r2,4(sp)
1000386c:	e0bff517 	ldw	r2,-44(fp)
10003870:	d8800215 	stw	r2,8(sp)
10003874:	e1bff117 	ldw	r6,-60(fp)
10003878:	e1fff217 	ldw	r7,-56(fp)
1000387c:	200b883a 	mov	r5,r4
10003880:	1809883a 	mov	r4,r3
10003884:	00020840 	call	10002084 <updateFish>
		/*if(total_score != prev_total)
			printf("Total Score : %d\n",total_score);*/
		prev_total = total_score;
10003888:	e0bfe117 	ldw	r2,-124(fp)
1000388c:	e0bfd315 	stw	r2,-180(fp)

		clock_t difference = clock() - before;
10003890:	000bf300 	call	1000bf30 <clock>
10003894:	1007883a 	mov	r3,r2
10003898:	e0bfd817 	ldw	r2,-160(fp)
1000389c:	1885c83a 	sub	r2,r3,r2
100038a0:	e0bfd915 	stw	r2,-156(fp)
		msec = difference * 1000 / CLOCKS_PER_SEC;
100038a4:	0140fa04 	movi	r5,1000
100038a8:	e13fd917 	ldw	r4,-156(fp)
100038ac:	00085800 	call	10008580 <__mulsi3>
100038b0:	0140fa04 	movi	r5,1000
100038b4:	1009883a 	mov	r4,r2
100038b8:	00084c40 	call	100084c4 <__udivsi3>
100038bc:	e0bfd415 	stw	r2,-176(fp)
		//printf("Time taken %d seconds %d milliseconds\n",msec/1000, msec%1000);
		sec = msec/1000;
100038c0:	e0bfd417 	ldw	r2,-176(fp)
100038c4:	0140fa04 	movi	r5,1000
100038c8:	1009883a 	mov	r4,r2
100038cc:	00083cc0 	call	100083cc <__divsi3>
100038d0:	e0bfce15 	stw	r2,-200(fp)
		if(sec > 60){
100038d4:	e0bfce17 	ldw	r2,-200(fp)
100038d8:	10800f50 	cmplti	r2,r2,61
100038dc:	1000421e 	bne	r2,zero,100039e8 <playGame+0x554>
			int frame_count = 1;
100038e0:	00800044 	movi	r2,1
100038e4:	e0bfd015 	stw	r2,-192(fp)
			for(int i = 0; i < 7; i++){
100038e8:	e03fd115 	stw	zero,-188(fp)
100038ec:	00003a06 	br	100039d8 <playGame+0x544>
				draw_frame(total,animals,cannon,cannonball,fishnet,total_score, 60-sec,frame_count);
100038f0:	e23fda17 	ldw	r8,-152(fp)
100038f4:	e17fd717 	ldw	r5,-164(fp)
100038f8:	e0bfe117 	ldw	r2,-124(fp)
100038fc:	01000f04 	movi	r4,60
10003900:	e0ffce17 	ldw	r3,-200(fp)
10003904:	20c7c83a 	sub	r3,r4,r3
10003908:	e13fd017 	ldw	r4,-192(fp)
1000390c:	d9001415 	stw	r4,80(sp)
10003910:	d8c01315 	stw	r3,76(sp)
10003914:	d8801215 	stw	r2,72(sp)
10003918:	e0bff117 	ldw	r2,-60(fp)
1000391c:	d8800d15 	stw	r2,52(sp)
10003920:	e0bff217 	ldw	r2,-56(fp)
10003924:	d8800e15 	stw	r2,56(sp)
10003928:	e0bff317 	ldw	r2,-52(fp)
1000392c:	d8800f15 	stw	r2,60(sp)
10003930:	e0bff417 	ldw	r2,-48(fp)
10003934:	d8801015 	stw	r2,64(sp)
10003938:	e0bff517 	ldw	r2,-44(fp)
1000393c:	d8801115 	stw	r2,68(sp)
10003940:	e0bfe517 	ldw	r2,-108(fp)
10003944:	d8800115 	stw	r2,4(sp)
10003948:	e0bfe617 	ldw	r2,-104(fp)
1000394c:	d8800215 	stw	r2,8(sp)
10003950:	e0bfe717 	ldw	r2,-100(fp)
10003954:	d8800315 	stw	r2,12(sp)
10003958:	e0bfe817 	ldw	r2,-96(fp)
1000395c:	d8800415 	stw	r2,16(sp)
10003960:	e0bfe917 	ldw	r2,-92(fp)
10003964:	d8800515 	stw	r2,20(sp)
10003968:	e0bfea17 	ldw	r2,-88(fp)
1000396c:	d8800615 	stw	r2,24(sp)
10003970:	e0bfeb17 	ldw	r2,-84(fp)
10003974:	d8800715 	stw	r2,28(sp)
10003978:	e0bfec17 	ldw	r2,-80(fp)
1000397c:	d8800815 	stw	r2,32(sp)
10003980:	e0bfed17 	ldw	r2,-76(fp)
10003984:	d8800915 	stw	r2,36(sp)
10003988:	e0bfee17 	ldw	r2,-72(fp)
1000398c:	d8800a15 	stw	r2,40(sp)
10003990:	e0bfef17 	ldw	r2,-68(fp)
10003994:	d8800b15 	stw	r2,44(sp)
10003998:	e0bff017 	ldw	r2,-64(fp)
1000399c:	d8800c15 	stw	r2,48(sp)
100039a0:	e0bfe417 	ldw	r2,-112(fp)
100039a4:	d8800015 	stw	r2,0(sp)
100039a8:	e1bfe217 	ldw	r6,-120(fp)
100039ac:	e1ffe317 	ldw	r7,-116(fp)
100039b0:	4009883a 	mov	r4,r8
100039b4:	00006000 	call	10000600 <draw_frame>
				frame_count++;
100039b8:	e0bfd017 	ldw	r2,-192(fp)
100039bc:	10800044 	addi	r2,r2,1
100039c0:	e0bfd015 	stw	r2,-192(fp)
				setTimeout(500);
100039c4:	01007d04 	movi	r4,500
100039c8:	00033c00 	call	100033c0 <setTimeout>
		msec = difference * 1000 / CLOCKS_PER_SEC;
		//printf("Time taken %d seconds %d milliseconds\n",msec/1000, msec%1000);
		sec = msec/1000;
		if(sec > 60){
			int frame_count = 1;
			for(int i = 0; i < 7; i++){
100039cc:	e0bfd117 	ldw	r2,-188(fp)
100039d0:	10800044 	addi	r2,r2,1
100039d4:	e0bfd115 	stw	r2,-188(fp)
100039d8:	e0bfd117 	ldw	r2,-188(fp)
100039dc:	108001d0 	cmplti	r2,r2,7
100039e0:	103fc31e 	bne	r2,zero,100038f0 <__alt_data_end+0xf80038f0>
				draw_frame(total,animals,cannon,cannonball,fishnet,total_score, 60-sec,frame_count);
				frame_count++;
				setTimeout(500);
			}
			break;
100039e4:	00000306 	br	100039f4 <playGame+0x560>
		}
		/*if(sec != prevsec)
			printf("Time : %d\n",sec);*/
		prevsec = sec;
100039e8:	e0bfce17 	ldw	r2,-200(fp)
100039ec:	e0bfd515 	stw	r2,-172(fp)
	}
100039f0:	003f2e06 	br	100036ac <__alt_data_end+0xf80036ac>
	printf("Time UP! Your Score: %d\n",total_score);
100039f4:	e0bfe117 	ldw	r2,-124(fp)
100039f8:	100b883a 	mov	r5,r2
100039fc:	010400b4 	movhi	r4,4098
10003a00:	2124ba04 	addi	r4,r4,-27928
10003a04:	000bfac0 	call	1000bfac <printf>
	GameState gamestate = {.time = sec, .score = total_score, .state = flag};
10003a08:	e0bfce17 	ldw	r2,-200(fp)
10003a0c:	e0bff615 	stw	r2,-40(fp)
10003a10:	e0bfe117 	ldw	r2,-124(fp)
10003a14:	e0bff715 	stw	r2,-36(fp)
10003a18:	e0bfcf17 	ldw	r2,-196(fp)
10003a1c:	e0bff815 	stw	r2,-32(fp)
	return gamestate;
10003a20:	e0bff917 	ldw	r2,-28(fp)
10003a24:	e0fff617 	ldw	r3,-40(fp)
10003a28:	10c00015 	stw	r3,0(r2)
10003a2c:	e0fff717 	ldw	r3,-36(fp)
10003a30:	10c00115 	stw	r3,4(r2)
10003a34:	e0fff817 	ldw	r3,-32(fp)
10003a38:	10c00215 	stw	r3,8(r2)
10003a3c:	a837883a 	mov	sp,r21
}
10003a40:	e0bff917 	ldw	r2,-28(fp)
10003a44:	e6fffa04 	addi	sp,fp,-24
10003a48:	dfc00717 	ldw	ra,28(sp)
10003a4c:	df000617 	ldw	fp,24(sp)
10003a50:	dd400517 	ldw	r21,20(sp)
10003a54:	dd000417 	ldw	r20,16(sp)
10003a58:	dcc00317 	ldw	r19,12(sp)
10003a5c:	dc800217 	ldw	r18,8(sp)
10003a60:	dc400117 	ldw	r17,4(sp)
10003a64:	dc000017 	ldw	r16,0(sp)
10003a68:	dec00804 	addi	sp,sp,32
10003a6c:	f800283a 	ret

10003a70 <displayMenu>:

char displayMenu(){
10003a70:	defffb04 	addi	sp,sp,-20
10003a74:	dfc00415 	stw	ra,16(sp)
10003a78:	df000315 	stw	fp,12(sp)
10003a7c:	df000304 	addi	fp,sp,12
	init_background();
10003a80:	00002ac0 	call	100002ac <init_background>
	draw_Logo();
10003a84:	0000aac0 	call	10000aac <draw_Logo>
	draw_Options();
10003a88:	0000b600 	call	10000b60 <draw_Options>
	int key;
	int pos = 0;
10003a8c:	e03ffd15 	stw	zero,-12(fp)
	//Enter : 40
	char option;
	while(1){
		FRAME_DONE = 0;
10003a90:	d0a00417 	ldw	r2,-32752(gp)
10003a94:	10800504 	addi	r2,r2,20
10003a98:	10000015 	stw	zero,0(r2)
		init_background();
10003a9c:	00002ac0 	call	100002ac <init_background>
		draw_Logo();
10003aa0:	0000aac0 	call	10000aac <draw_Logo>
		draw_Options();
10003aa4:	0000b600 	call	10000b60 <draw_Options>
		key = get_key();
10003aa8:	0004bc80 	call	10004bc8 <get_key>
10003aac:	e0bffe15 	stw	r2,-8(fp)
		if(pos == 0 && key == 81)
10003ab0:	e0bffd17 	ldw	r2,-12(fp)
10003ab4:	1000061e 	bne	r2,zero,10003ad0 <displayMenu+0x60>
10003ab8:	e0bffe17 	ldw	r2,-8(fp)
10003abc:	10801458 	cmpnei	r2,r2,81
10003ac0:	1000031e 	bne	r2,zero,10003ad0 <displayMenu+0x60>
			pos = 1;
10003ac4:	00800044 	movi	r2,1
10003ac8:	e0bffd15 	stw	r2,-12(fp)
10003acc:	00000706 	br	10003aec <displayMenu+0x7c>
		else if(pos == 1 && key == 82)
10003ad0:	e0bffd17 	ldw	r2,-12(fp)
10003ad4:	10800058 	cmpnei	r2,r2,1
10003ad8:	1000041e 	bne	r2,zero,10003aec <displayMenu+0x7c>
10003adc:	e0bffe17 	ldw	r2,-8(fp)
10003ae0:	10801498 	cmpnei	r2,r2,82
10003ae4:	1000011e 	bne	r2,zero,10003aec <displayMenu+0x7c>
			pos = 0;
10003ae8:	e03ffd15 	stw	zero,-12(fp)
		draw_Arrow(pos);
10003aec:	e13ffd17 	ldw	r4,-12(fp)
10003af0:	0000ca80 	call	10000ca8 <draw_Arrow>
		FRAME_DONE = 1;
10003af4:	d0a00417 	ldw	r2,-32752(gp)
10003af8:	10800504 	addi	r2,r2,20
10003afc:	00c00044 	movi	r3,1
10003b00:	10c00015 	stw	r3,0(r2)
		delay_loop();
10003b04:	00034540 	call	10003454 <delay_loop>
		//printf("Key Code : %d\n",key);
		if(key == 40){
10003b08:	e0bffe17 	ldw	r2,-8(fp)
10003b0c:	10800a18 	cmpnei	r2,r2,40
10003b10:	103fdf1e 	bne	r2,zero,10003a90 <__alt_data_end+0xf8003a90>
			option = pos ?'s':'p';
10003b14:	e0bffd17 	ldw	r2,-12(fp)
10003b18:	10000226 	beq	r2,zero,10003b24 <displayMenu+0xb4>
10003b1c:	00801cc4 	movi	r2,115
10003b20:	00000106 	br	10003b28 <displayMenu+0xb8>
10003b24:	00801c04 	movi	r2,112
10003b28:	e0bfff05 	stb	r2,-4(fp)
			break;
10003b2c:	0001883a 	nop
		}
	}
	return option;
10003b30:	e0bfff03 	ldbu	r2,-4(fp)
}
10003b34:	e037883a 	mov	sp,fp
10003b38:	dfc00117 	ldw	ra,4(sp)
10003b3c:	df000017 	ldw	fp,0(sp)
10003b40:	dec00204 	addi	sp,sp,8
10003b44:	f800283a 	ret

10003b48 <updateScores>:

//scores[0] : Highest score
//scores[1] : Second high
void updateScores(int* scores, int cur_score){
10003b48:	defff904 	addi	sp,sp,-28
10003b4c:	df000615 	stw	fp,24(sp)
10003b50:	df000604 	addi	fp,sp,24
10003b54:	e13ffe15 	stw	r4,-8(fp)
10003b58:	e17fff15 	stw	r5,-4(fp)
	for(int i = 0; i < 5; i++){
10003b5c:	e03ffa15 	stw	zero,-24(fp)
10003b60:	00003906 	br	10003c48 <updateScores+0x100>
		if(cur_score > scores[i]){
10003b64:	e0bffa17 	ldw	r2,-24(fp)
10003b68:	1085883a 	add	r2,r2,r2
10003b6c:	1085883a 	add	r2,r2,r2
10003b70:	1007883a 	mov	r3,r2
10003b74:	e0bffe17 	ldw	r2,-8(fp)
10003b78:	10c5883a 	add	r2,r2,r3
10003b7c:	10c00017 	ldw	r3,0(r2)
10003b80:	e0bfff17 	ldw	r2,-4(fp)
10003b84:	18802d0e 	bge	r3,r2,10003c3c <updateScores+0xf4>
			int temp = scores[i];
10003b88:	e0bffa17 	ldw	r2,-24(fp)
10003b8c:	1085883a 	add	r2,r2,r2
10003b90:	1085883a 	add	r2,r2,r2
10003b94:	1007883a 	mov	r3,r2
10003b98:	e0bffe17 	ldw	r2,-8(fp)
10003b9c:	10c5883a 	add	r2,r2,r3
10003ba0:	10800017 	ldw	r2,0(r2)
10003ba4:	e0bffb15 	stw	r2,-20(fp)
			int temp2;
			scores[i] = cur_score;
10003ba8:	e0bffa17 	ldw	r2,-24(fp)
10003bac:	1085883a 	add	r2,r2,r2
10003bb0:	1085883a 	add	r2,r2,r2
10003bb4:	1007883a 	mov	r3,r2
10003bb8:	e0bffe17 	ldw	r2,-8(fp)
10003bbc:	10c5883a 	add	r2,r2,r3
10003bc0:	e0ffff17 	ldw	r3,-4(fp)
10003bc4:	10c00015 	stw	r3,0(r2)
			for(int j = i+1; j < 5; j++){
10003bc8:	e0bffa17 	ldw	r2,-24(fp)
10003bcc:	10800044 	addi	r2,r2,1
10003bd0:	e0bffc15 	stw	r2,-16(fp)
10003bd4:	00001506 	br	10003c2c <updateScores+0xe4>
				temp2 = scores[j];
10003bd8:	e0bffc17 	ldw	r2,-16(fp)
10003bdc:	1085883a 	add	r2,r2,r2
10003be0:	1085883a 	add	r2,r2,r2
10003be4:	1007883a 	mov	r3,r2
10003be8:	e0bffe17 	ldw	r2,-8(fp)
10003bec:	10c5883a 	add	r2,r2,r3
10003bf0:	10800017 	ldw	r2,0(r2)
10003bf4:	e0bffd15 	stw	r2,-12(fp)
				scores[j] = temp;
10003bf8:	e0bffc17 	ldw	r2,-16(fp)
10003bfc:	1085883a 	add	r2,r2,r2
10003c00:	1085883a 	add	r2,r2,r2
10003c04:	1007883a 	mov	r3,r2
10003c08:	e0bffe17 	ldw	r2,-8(fp)
10003c0c:	10c5883a 	add	r2,r2,r3
10003c10:	e0fffb17 	ldw	r3,-20(fp)
10003c14:	10c00015 	stw	r3,0(r2)
				temp = temp2;
10003c18:	e0bffd17 	ldw	r2,-12(fp)
10003c1c:	e0bffb15 	stw	r2,-20(fp)
	for(int i = 0; i < 5; i++){
		if(cur_score > scores[i]){
			int temp = scores[i];
			int temp2;
			scores[i] = cur_score;
			for(int j = i+1; j < 5; j++){
10003c20:	e0bffc17 	ldw	r2,-16(fp)
10003c24:	10800044 	addi	r2,r2,1
10003c28:	e0bffc15 	stw	r2,-16(fp)
10003c2c:	e0bffc17 	ldw	r2,-16(fp)
10003c30:	10800150 	cmplti	r2,r2,5
10003c34:	103fe81e 	bne	r2,zero,10003bd8 <__alt_data_end+0xf8003bd8>
				temp2 = scores[j];
				scores[j] = temp;
				temp = temp2;
			}
			return;
10003c38:	00000606 	br	10003c54 <updateScores+0x10c>
}

//scores[0] : Highest score
//scores[1] : Second high
void updateScores(int* scores, int cur_score){
	for(int i = 0; i < 5; i++){
10003c3c:	e0bffa17 	ldw	r2,-24(fp)
10003c40:	10800044 	addi	r2,r2,1
10003c44:	e0bffa15 	stw	r2,-24(fp)
10003c48:	e0bffa17 	ldw	r2,-24(fp)
10003c4c:	10800150 	cmplti	r2,r2,5
10003c50:	103fc41e 	bne	r2,zero,10003b64 <__alt_data_end+0xf8003b64>
				temp = temp2;
			}
			return;
		}
	}
}
10003c54:	e037883a 	mov	sp,fp
10003c58:	df000017 	ldw	fp,0(sp)
10003c5c:	dec00104 	addi	sp,sp,4
10003c60:	f800283a 	ret

10003c64 <displayScores>:

void displayScores(int* scores){
10003c64:	defff804 	addi	sp,sp,-32
10003c68:	dfc00715 	stw	ra,28(sp)
10003c6c:	df000615 	stw	fp,24(sp)
10003c70:	df000604 	addi	fp,sp,24
10003c74:	e13fff15 	stw	r4,-4(fp)
	init_background();
10003c78:	00002ac0 	call	100002ac <init_background>
	int key = 0;
10003c7c:	e03ffd15 	stw	zero,-12(fp)
	IDX = HIGHSCORE_IDXSTART;
10003c80:	d0a00417 	ldw	r2,-32752(gp)
10003c84:	00c01804 	movi	r3,96
10003c88:	10c00015 	stw	r3,0(r2)
	X_START = 320-HIGHSCORE_WIDTH/2;
10003c8c:	d0a00417 	ldw	r2,-32752(gp)
10003c90:	10800104 	addi	r2,r2,4
10003c94:	00c03784 	movi	r3,222
10003c98:	10c00015 	stw	r3,0(r2)
	Y_START = 120-HIGHSCORE_HEIGHT/2;
10003c9c:	d0a00417 	ldw	r2,-32752(gp)
10003ca0:	10800204 	addi	r2,r2,8
10003ca4:	00c01944 	movi	r3,101
10003ca8:	10c00015 	stw	r3,0(r2)
	X_STOP = X_START + HIGHSCORE_WIDTH;
10003cac:	d0a00417 	ldw	r2,-32752(gp)
10003cb0:	10800304 	addi	r2,r2,12
10003cb4:	d0e00417 	ldw	r3,-32752(gp)
10003cb8:	18c00104 	addi	r3,r3,4
10003cbc:	18c00017 	ldw	r3,0(r3)
10003cc0:	18c03144 	addi	r3,r3,197
10003cc4:	10c00015 	stw	r3,0(r2)
	Y_STOP = Y_START + HIGHSCORE_HEIGHT;
10003cc8:	d0a00417 	ldw	r2,-32752(gp)
10003ccc:	10800404 	addi	r2,r2,16
10003cd0:	d0e00417 	ldw	r3,-32752(gp)
10003cd4:	18c00204 	addi	r3,r3,8
10003cd8:	18c00017 	ldw	r3,0(r3)
10003cdc:	18c009c4 	addi	r3,r3,39
10003ce0:	10c00015 	stw	r3,0(r2)
	DRAW_START = 1;
10003ce4:	d0a00417 	ldw	r2,-32752(gp)
10003ce8:	10800604 	addi	r2,r2,24
10003cec:	00c00044 	movi	r3,1
10003cf0:	10c00015 	stw	r3,0(r2)
	while(!DRAW_DONE);
10003cf4:	0001883a 	nop
10003cf8:	d0a00417 	ldw	r2,-32752(gp)
10003cfc:	10800704 	addi	r2,r2,28
10003d00:	10800017 	ldw	r2,0(r2)
10003d04:	103ffc26 	beq	r2,zero,10003cf8 <__alt_data_end+0xf8003cf8>
	DRAW_START = 0;
10003d08:	d0a00417 	ldw	r2,-32752(gp)
10003d0c:	10800604 	addi	r2,r2,24
10003d10:	10000015 	stw	zero,0(r2)
	for(int i = 1; i<=5; i++){
10003d14:	00800044 	movi	r2,1
10003d18:	e0bffa15 	stw	r2,-24(fp)
10003d1c:	00006206 	br	10003ea8 <displayScores+0x244>
		draw_Num(i,280, 160 + i * 35);
10003d20:	014008c4 	movi	r5,35
10003d24:	e13ffa17 	ldw	r4,-24(fp)
10003d28:	00085800 	call	10008580 <__mulsi3>
10003d2c:	10802804 	addi	r2,r2,160
10003d30:	100d883a 	mov	r6,r2
10003d34:	01404604 	movi	r5,280
10003d38:	e13ffa17 	ldw	r4,-24(fp)
10003d3c:	0000d980 	call	10000d98 <draw_Num>
		draw_SC(282+NUMBER_WIDTH, 160+i*35);
10003d40:	014008c4 	movi	r5,35
10003d44:	e13ffa17 	ldw	r4,-24(fp)
10003d48:	00085800 	call	10008580 <__mulsi3>
10003d4c:	10802804 	addi	r2,r2,160
10003d50:	100b883a 	mov	r5,r2
10003d54:	01004a84 	movi	r4,298
10003d58:	0000e4c0 	call	10000e4c <draw_SC>
		int digit3 = scores[i-1]/100;
10003d5c:	e0fffa17 	ldw	r3,-24(fp)
10003d60:	00900034 	movhi	r2,16384
10003d64:	10bfffc4 	addi	r2,r2,-1
10003d68:	1885883a 	add	r2,r3,r2
10003d6c:	1085883a 	add	r2,r2,r2
10003d70:	1085883a 	add	r2,r2,r2
10003d74:	1007883a 	mov	r3,r2
10003d78:	e0bfff17 	ldw	r2,-4(fp)
10003d7c:	10c5883a 	add	r2,r2,r3
10003d80:	10800017 	ldw	r2,0(r2)
10003d84:	01401904 	movi	r5,100
10003d88:	1009883a 	mov	r4,r2
10003d8c:	00083cc0 	call	100083cc <__divsi3>
10003d90:	e0bffb15 	stw	r2,-20(fp)
		if(digit3 == 0)
10003d94:	e0bffb17 	ldw	r2,-20(fp)
10003d98:	1000021e 	bne	r2,zero,10003da4 <displayScores+0x140>
			digit3 = 10;
10003d9c:	00800284 	movi	r2,10
10003da0:	e0bffb15 	stw	r2,-20(fp)
		int digit2 = scores[i-1]/10%10;
10003da4:	e0fffa17 	ldw	r3,-24(fp)
10003da8:	00900034 	movhi	r2,16384
10003dac:	10bfffc4 	addi	r2,r2,-1
10003db0:	1885883a 	add	r2,r3,r2
10003db4:	1085883a 	add	r2,r2,r2
10003db8:	1085883a 	add	r2,r2,r2
10003dbc:	1007883a 	mov	r3,r2
10003dc0:	e0bfff17 	ldw	r2,-4(fp)
10003dc4:	10c5883a 	add	r2,r2,r3
10003dc8:	10800017 	ldw	r2,0(r2)
10003dcc:	01400284 	movi	r5,10
10003dd0:	1009883a 	mov	r4,r2
10003dd4:	00083cc0 	call	100083cc <__divsi3>
10003dd8:	01400284 	movi	r5,10
10003ddc:	1009883a 	mov	r4,r2
10003de0:	00084500 	call	10008450 <__modsi3>
10003de4:	e0bffc15 	stw	r2,-16(fp)
		if(digit3 == 10 && digit2 == 0)
10003de8:	e0bffb17 	ldw	r2,-20(fp)
10003dec:	10800298 	cmpnei	r2,r2,10
10003df0:	1000041e 	bne	r2,zero,10003e04 <displayScores+0x1a0>
10003df4:	e0bffc17 	ldw	r2,-16(fp)
10003df8:	1000021e 	bne	r2,zero,10003e04 <displayScores+0x1a0>
			digit2 = 10;
10003dfc:	00800284 	movi	r2,10
10003e00:	e0bffc15 	stw	r2,-16(fp)
		int digit1 = scores[i-1]%10;
10003e04:	e0fffa17 	ldw	r3,-24(fp)
10003e08:	00900034 	movhi	r2,16384
10003e0c:	10bfffc4 	addi	r2,r2,-1
10003e10:	1885883a 	add	r2,r3,r2
10003e14:	1085883a 	add	r2,r2,r2
10003e18:	1085883a 	add	r2,r2,r2
10003e1c:	1007883a 	mov	r3,r2
10003e20:	e0bfff17 	ldw	r2,-4(fp)
10003e24:	10c5883a 	add	r2,r2,r3
10003e28:	10800017 	ldw	r2,0(r2)
10003e2c:	01400284 	movi	r5,10
10003e30:	1009883a 	mov	r4,r2
10003e34:	00084500 	call	10008450 <__modsi3>
10003e38:	e0bffe15 	stw	r2,-8(fp)
		draw_Num(digit3,318+NUMBER_WIDTH,160+i*35);
10003e3c:	014008c4 	movi	r5,35
10003e40:	e13ffa17 	ldw	r4,-24(fp)
10003e44:	00085800 	call	10008580 <__mulsi3>
10003e48:	10802804 	addi	r2,r2,160
10003e4c:	100d883a 	mov	r6,r2
10003e50:	01405384 	movi	r5,334
10003e54:	e13ffb17 	ldw	r4,-20(fp)
10003e58:	0000d980 	call	10000d98 <draw_Num>
		draw_Num(digit2,320+NUMBER_WIDTH*2,160+i*35);
10003e5c:	014008c4 	movi	r5,35
10003e60:	e13ffa17 	ldw	r4,-24(fp)
10003e64:	00085800 	call	10008580 <__mulsi3>
10003e68:	10802804 	addi	r2,r2,160
10003e6c:	100d883a 	mov	r6,r2
10003e70:	01405804 	movi	r5,352
10003e74:	e13ffc17 	ldw	r4,-16(fp)
10003e78:	0000d980 	call	10000d98 <draw_Num>
		draw_Num(digit1,322+NUMBER_WIDTH*3,160+i*35);
10003e7c:	014008c4 	movi	r5,35
10003e80:	e13ffa17 	ldw	r4,-24(fp)
10003e84:	00085800 	call	10008580 <__mulsi3>
10003e88:	10802804 	addi	r2,r2,160
10003e8c:	100d883a 	mov	r6,r2
10003e90:	01405c84 	movi	r5,370
10003e94:	e13ffe17 	ldw	r4,-8(fp)
10003e98:	0000d980 	call	10000d98 <draw_Num>
	X_STOP = X_START + HIGHSCORE_WIDTH;
	Y_STOP = Y_START + HIGHSCORE_HEIGHT;
	DRAW_START = 1;
	while(!DRAW_DONE);
	DRAW_START = 0;
	for(int i = 1; i<=5; i++){
10003e9c:	e0bffa17 	ldw	r2,-24(fp)
10003ea0:	10800044 	addi	r2,r2,1
10003ea4:	e0bffa15 	stw	r2,-24(fp)
10003ea8:	e0bffa17 	ldw	r2,-24(fp)
10003eac:	10800190 	cmplti	r2,r2,6
10003eb0:	103f9b1e 	bne	r2,zero,10003d20 <__alt_data_end+0xf8003d20>
		draw_Num(digit3,318+NUMBER_WIDTH,160+i*35);
		draw_Num(digit2,320+NUMBER_WIDTH*2,160+i*35);
		draw_Num(digit1,322+NUMBER_WIDTH*3,160+i*35);
	}
	while(1){
		key = get_key();
10003eb4:	0004bc80 	call	10004bc8 <get_key>
10003eb8:	e0bffd15 	stw	r2,-12(fp)
		if(key == 41){
10003ebc:	e0bffd17 	ldw	r2,-12(fp)
10003ec0:	10800a58 	cmpnei	r2,r2,41
10003ec4:	10000126 	beq	r2,zero,10003ecc <displayScores+0x268>
			break;
		}
	}
10003ec8:	003ffa06 	br	10003eb4 <__alt_data_end+0xf8003eb4>
		draw_Num(digit1,322+NUMBER_WIDTH*3,160+i*35);
	}
	while(1){
		key = get_key();
		if(key == 41){
			break;
10003ecc:	0001883a 	nop
		}
	}
}
10003ed0:	0001883a 	nop
10003ed4:	e037883a 	mov	sp,fp
10003ed8:	dfc00117 	ldw	ra,4(sp)
10003edc:	df000017 	ldw	fp,0(sp)
10003ee0:	dec00204 	addi	sp,sp,8
10003ee4:	f800283a 	ret

10003ee8 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10003ee8:	deffff04 	addi	sp,sp,-4
10003eec:	df000015 	stw	fp,0(sp)
10003ef0:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10003ef4:	00801404 	movi	r2,80
10003ef8:	00c00044 	movi	r3,1
10003efc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10003f00:	00802004 	movi	r2,128
10003f04:	00c00044 	movi	r3,1
10003f08:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10003f0c:	00802804 	movi	r2,160
10003f10:	00c00044 	movi	r3,1
10003f14:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10003f18:	00802404 	movi	r2,144
10003f1c:	00c00044 	movi	r3,1
10003f20:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10003f24:	00803004 	movi	r2,192
10003f28:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10003f2c:	00802c04 	movi	r2,176
10003f30:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10003f34:	00802004 	movi	r2,128
10003f38:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10003f3c:	00801404 	movi	r2,80
10003f40:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10003f44:	00801404 	movi	r2,80
10003f48:	00c00044 	movi	r3,1
10003f4c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10003f50:	00802004 	movi	r2,128
10003f54:	00c00044 	movi	r3,1
10003f58:	10c00005 	stb	r3,0(r2)
}
10003f5c:	0001883a 	nop
10003f60:	e037883a 	mov	sp,fp
10003f64:	df000017 	ldw	fp,0(sp)
10003f68:	dec00104 	addi	sp,sp,4
10003f6c:	f800283a 	ret

10003f70 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10003f70:	defffd04 	addi	sp,sp,-12
10003f74:	df000215 	stw	fp,8(sp)
10003f78:	df000204 	addi	fp,sp,8
10003f7c:	2007883a 	mov	r3,r4
10003f80:	2805883a 	mov	r2,r5
10003f84:	e0fffe05 	stb	r3,-8(fp)
10003f88:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10003f8c:	00803004 	movi	r2,192
10003f90:	e0fffe03 	ldbu	r3,-8(fp)
10003f94:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10003f98:	00802c04 	movi	r2,176
10003f9c:	e0ffff0b 	ldhu	r3,-4(fp)
10003fa0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10003fa4:	00802004 	movi	r2,128
10003fa8:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10003fac:	00802404 	movi	r2,144
10003fb0:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10003fb4:	00802404 	movi	r2,144
10003fb8:	00c00044 	movi	r3,1
10003fbc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10003fc0:	00802004 	movi	r2,128
10003fc4:	00c00044 	movi	r3,1
10003fc8:	10c00005 	stb	r3,0(r2)
	//*otg_hpi_address = 0;
	//*otg_hpi_data = 0;
}
10003fcc:	0001883a 	nop
10003fd0:	e037883a 	mov	sp,fp
10003fd4:	df000017 	ldw	fp,0(sp)
10003fd8:	dec00104 	addi	sp,sp,4
10003fdc:	f800283a 	ret

10003fe0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10003fe0:	defffd04 	addi	sp,sp,-12
10003fe4:	df000215 	stw	fp,8(sp)
10003fe8:	df000204 	addi	fp,sp,8
10003fec:	2005883a 	mov	r2,r4
10003ff0:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10003ff4:	00803004 	movi	r2,192
10003ff8:	e0ffff03 	ldbu	r3,-4(fp)
10003ffc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10004000:	00802004 	movi	r2,128
10004004:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10004008:	00802804 	movi	r2,160
1000400c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10004010:	00802c04 	movi	r2,176
10004014:	10800017 	ldw	r2,0(r2)
10004018:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
1000401c:	00802804 	movi	r2,160
10004020:	00c00044 	movi	r3,1
10004024:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10004028:	00802004 	movi	r2,128
1000402c:	00c00044 	movi	r3,1
10004030:	10c00005 	stb	r3,0(r2)
	return temp;
10004034:	e0bffe0b 	ldhu	r2,-8(fp)
}
10004038:	e037883a 	mov	sp,fp
1000403c:	df000017 	ldw	fp,0(sp)
10004040:	dec00104 	addi	sp,sp,4
10004044:	f800283a 	ret

10004048 <keyboard_init>:
int keycode = 0;
static alt_u16 ctl_reg = 0;
static alt_u16 no_device = 0;


void keyboard_init(){
10004048:	defffe04 	addi	sp,sp,-8
1000404c:	dfc00115 	stw	ra,4(sp)
10004050:	df000015 	stw	fp,0(sp)
10004054:	d839883a 	mov	fp,sp
	//Keyboard Enumeration

	IO_init();
10004058:	0003ee80 	call	10003ee8 <IO_init>
		alt_u8 data_size;
		alt_u16 usb_ctl_val;
		int keycode = 0;
		static alt_u16 ctl_reg = 0;
		static alt_u16 no_device = 0;*/
		printf("USB keyboard setup...\n\n");
1000405c:	010400b4 	movhi	r4,4098
10004060:	2124c104 	addi	r4,r4,-27900
10004064:	000c0a80 	call	1000c0a8 <puts>

		//----------------------------------------SIE1 initial---------------------------------------------------//
		USB_HOT_PLUG:
		UsbSoftReset();
10004068:	0004fe00 	call	10004fe0 <UsbSoftReset>

		// STEP 1a:
		UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000406c:	000b883a 	mov	r5,zero
10004070:	01005104 	movi	r4,324
10004074:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite (HOST1_STAT_REG, 0xFFFF);
10004078:	017fffd4 	movui	r5,65535
1000407c:	01302414 	movui	r4,49296
10004080:	0004f440 	call	10004f44 <UsbWrite>

		/* Set HUSB_pEOT time */
		UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10004084:	01409604 	movi	r5,600
10004088:	01006d04 	movi	r4,436
1000408c:	0004f440 	call	10004f44 <UsbWrite>

		usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10004090:	00811004 	movi	r2,1088
10004094:	d0a7980d 	sth	r2,-24992(gp)
		UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10004098:	d0a7980b 	ldhu	r2,-24992(gp)
1000409c:	10bfffcc 	andi	r2,r2,65535
100040a0:	100b883a 	mov	r5,r2
100040a4:	01005084 	movi	r4,322
100040a8:	0004f440 	call	10004f44 <UsbWrite>

		intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100040ac:	00808404 	movi	r2,528
100040b0:	d0a7990d 	sth	r2,-24988(gp)
		UsbWrite(HOST1_IRQ_EN_REG, intStat);
100040b4:	d0a7990b 	ldhu	r2,-24988(gp)
100040b8:	10bfffcc 	andi	r2,r2,65535
100040bc:	100b883a 	mov	r5,r2
100040c0:	01302314 	movui	r4,49292
100040c4:	0004f440 	call	10004f44 <UsbWrite>
		// STEP 1a end

		// STEP 1b begin
		UsbWrite(COMM_R0,0x0000);//reset time
100040c8:	000b883a 	mov	r5,zero
100040cc:	01007104 	movi	r4,452
100040d0:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R1,0x0000);  //port number
100040d4:	000b883a 	mov	r5,zero
100040d8:	01007184 	movi	r4,454
100040dc:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R2,0x0000);  //r1
100040e0:	000b883a 	mov	r5,zero
100040e4:	01007204 	movi	r4,456
100040e8:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R3,0x0000);  //r1
100040ec:	000b883a 	mov	r5,zero
100040f0:	01007284 	movi	r4,458
100040f4:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R4,0x0000);  //r1
100040f8:	000b883a 	mov	r5,zero
100040fc:	01007304 	movi	r4,460
10004100:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R5,0x0000);  //r1
10004104:	000b883a 	mov	r5,zero
10004108:	01007384 	movi	r4,462
1000410c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R6,0x0000);  //r1
10004110:	000b883a 	mov	r5,zero
10004114:	01007404 	movi	r4,464
10004118:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R7,0x0000);  //r1
1000411c:	000b883a 	mov	r5,zero
10004120:	01007484 	movi	r4,466
10004124:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R8,0x0000);  //r1
10004128:	000b883a 	mov	r5,zero
1000412c:	01007504 	movi	r4,468
10004130:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R9,0x0000);  //r1
10004134:	000b883a 	mov	r5,zero
10004138:	01007584 	movi	r4,470
1000413c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R10,0x0000);  //r1
10004140:	000b883a 	mov	r5,zero
10004144:	01007604 	movi	r4,472
10004148:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R11,0x0000);  //r1
1000414c:	000b883a 	mov	r5,zero
10004150:	01007684 	movi	r4,474
10004154:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R12,0x0000);  //r1
10004158:	000b883a 	mov	r5,zero
1000415c:	01007704 	movi	r4,476
10004160:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R13,0x0000);  //r1
10004164:	000b883a 	mov	r5,zero
10004168:	01007784 	movi	r4,478
1000416c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10004170:	01401c84 	movi	r5,114
10004174:	01007084 	movi	r4,450
10004178:	0004f440 	call	10004f44 <UsbWrite>
		IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000417c:	01738054 	movui	r5,52737
10004180:	01000044 	movi	r4,1
10004184:	0003f700 	call	10003f70 <IO_write>

		while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10004188:	0001883a 	nop
1000418c:	010000c4 	movi	r4,3
10004190:	0003fe00 	call	10003fe0 <IO_read>
10004194:	10bfffcc 	andi	r2,r2,65535
10004198:	103ffc26 	beq	r2,zero,1000418c <__alt_data_end+0xf800418c>
		{
		}
		while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000419c:	00000806 	br	100041c0 <keyboard_init+0x178>
		{
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100041a0:	01000044 	movi	r4,1
100041a4:	0003fe00 	call	10003fe0 <IO_read>
100041a8:	10bfffcc 	andi	r2,r2,65535
100041ac:	100b883a 	mov	r5,r2
100041b0:	010400b4 	movhi	r4,4098
100041b4:	2124c704 	addi	r4,r4,-27876
100041b8:	000bfac0 	call	1000bfac <printf>
			goto USB_HOT_PLUG;
100041bc:	003faa06 	br	10004068 <__alt_data_end+0xf8004068>
		IO_write(HPI_MAILBOX,COMM_EXEC_INT);

		while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
		{
		}
		while (IO_read(HPI_MAILBOX) != COMM_ACK)
100041c0:	01000044 	movi	r4,1
100041c4:	0003fe00 	call	10003fe0 <IO_read>
100041c8:	10bfffcc 	andi	r2,r2,65535
100041cc:	1083fb58 	cmpnei	r2,r2,4077
100041d0:	103ff31e 	bne	r2,zero,100041a0 <__alt_data_end+0xf80041a0>
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
			goto USB_HOT_PLUG;
		}
		// STEP 1b end

		printf("STEP 1 Complete");
100041d4:	010400b4 	movhi	r4,4098
100041d8:	2124d004 	addi	r4,r4,-27840
100041dc:	000bfac0 	call	1000bfac <printf>
		// STEP 2 begin
		UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100041e0:	01401d04 	movi	r5,116
100041e4:	01007084 	movi	r4,450
100041e8:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R0,0x003c);//reset time
100041ec:	01400f04 	movi	r5,60
100041f0:	01007104 	movi	r4,452
100041f4:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R1,0x0000);  //port number
100041f8:	000b883a 	mov	r5,zero
100041fc:	01007184 	movi	r4,454
10004200:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R2,0x0000);  //r1
10004204:	000b883a 	mov	r5,zero
10004208:	01007204 	movi	r4,456
1000420c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R3,0x0000);  //r1
10004210:	000b883a 	mov	r5,zero
10004214:	01007284 	movi	r4,458
10004218:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R4,0x0000);  //r1
1000421c:	000b883a 	mov	r5,zero
10004220:	01007304 	movi	r4,460
10004224:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R5,0x0000);  //r1
10004228:	000b883a 	mov	r5,zero
1000422c:	01007384 	movi	r4,462
10004230:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R6,0x0000);  //r1
10004234:	000b883a 	mov	r5,zero
10004238:	01007404 	movi	r4,464
1000423c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R7,0x0000);  //r1
10004240:	000b883a 	mov	r5,zero
10004244:	01007484 	movi	r4,466
10004248:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R8,0x0000);  //r1
1000424c:	000b883a 	mov	r5,zero
10004250:	01007504 	movi	r4,468
10004254:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R9,0x0000);  //r1
10004258:	000b883a 	mov	r5,zero
1000425c:	01007584 	movi	r4,470
10004260:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R10,0x0000);  //r1
10004264:	000b883a 	mov	r5,zero
10004268:	01007604 	movi	r4,472
1000426c:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R11,0x0000);  //r1
10004270:	000b883a 	mov	r5,zero
10004274:	01007684 	movi	r4,474
10004278:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R12,0x0000);  //r1
1000427c:	000b883a 	mov	r5,zero
10004280:	01007704 	movi	r4,476
10004284:	0004f440 	call	10004f44 <UsbWrite>
		UsbWrite(COMM_R13,0x0000);  //r1
10004288:	000b883a 	mov	r5,zero
1000428c:	01007784 	movi	r4,478
10004290:	0004f440 	call	10004f44 <UsbWrite>

		IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10004294:	01738054 	movui	r5,52737
10004298:	01000044 	movi	r4,1
1000429c:	0003f700 	call	10003f70 <IO_write>

		while (IO_read(HPI_MAILBOX) != COMM_ACK)
100042a0:	0001883a 	nop
100042a4:	01000044 	movi	r4,1
100042a8:	0003fe00 	call	10003fe0 <IO_read>
100042ac:	10bfffcc 	andi	r2,r2,65535
100042b0:	1083fb58 	cmpnei	r2,r2,4077
100042b4:	10000826 	beq	r2,zero,100042d8 <keyboard_init+0x290>
		{
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100042b8:	01000044 	movi	r4,1
100042bc:	0003fe00 	call	10003fe0 <IO_read>
100042c0:	10bfffcc 	andi	r2,r2,65535
100042c4:	100b883a 	mov	r5,r2
100042c8:	010400b4 	movhi	r4,4098
100042cc:	2124c704 	addi	r4,r4,-27876
100042d0:	000bfac0 	call	1000bfac <printf>
			goto USB_HOT_PLUG;
100042d4:	003f6406 	br	10004068 <__alt_data_end+0xf8004068>
		}
		// STEP 2 end

		ctl_reg = USB1_CTL_REG;
100042d8:	00b02284 	movi	r2,-16246
100042dc:	d0a7970d 	sth	r2,-24996(gp)
		no_device = (A_DP_STAT | A_DM_STAT);
100042e0:	008c0004 	movi	r2,12288
100042e4:	d0a7978d 	sth	r2,-24994(gp)
		fs_device = A_DP_STAT;
100042e8:	00880004 	movi	r2,8192
100042ec:	d0a7950d 	sth	r2,-25004(gp)
		usb_ctl_val = UsbRead(ctl_reg);
100042f0:	d0a7970b 	ldhu	r2,-24996(gp)
100042f4:	10bfffcc 	andi	r2,r2,65535
100042f8:	1009883a 	mov	r4,r2
100042fc:	0004f9c0 	call	10004f9c <UsbRead>
10004300:	d0a7980d 	sth	r2,-24992(gp)

		if (!(usb_ctl_val & no_device))
10004304:	d0e7980b 	ldhu	r3,-24992(gp)
10004308:	d0a7978b 	ldhu	r2,-24994(gp)
1000430c:	1884703a 	and	r2,r3,r2
10004310:	10bfffcc 	andi	r2,r2,65535
10004314:	1000361e 	bne	r2,zero,100043f0 <keyboard_init+0x3a8>
		{
			for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10004318:	d0279985 	stb	zero,-24986(gp)
1000431c:	00000f06 	br	1000435c <keyboard_init+0x314>
			{
				usleep(5*1000);
10004320:	0104e204 	movi	r4,5000
10004324:	00173ac0 	call	100173ac <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10004328:	d0a7970b 	ldhu	r2,-24996(gp)
1000432c:	10bfffcc 	andi	r2,r2,65535
10004330:	1009883a 	mov	r4,r2
10004334:	0004f9c0 	call	10004f9c <UsbRead>
10004338:	d0a7980d 	sth	r2,-24992(gp)
				if(usb_ctl_val & no_device) break;
1000433c:	d0e7980b 	ldhu	r3,-24992(gp)
10004340:	d0a7978b 	ldhu	r2,-24994(gp)
10004344:	1884703a 	and	r2,r3,r2
10004348:	10bfffcc 	andi	r2,r2,65535
1000434c:	1000081e 	bne	r2,zero,10004370 <keyboard_init+0x328>
		fs_device = A_DP_STAT;
		usb_ctl_val = UsbRead(ctl_reg);

		if (!(usb_ctl_val & no_device))
		{
			for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10004350:	d0a79983 	ldbu	r2,-24986(gp)
10004354:	10800044 	addi	r2,r2,1
10004358:	d0a79985 	stb	r2,-24986(gp)
1000435c:	d0a79983 	ldbu	r2,-24986(gp)
10004360:	10803fcc 	andi	r2,r2,255
10004364:	10800170 	cmpltui	r2,r2,5
10004368:	103fed1e 	bne	r2,zero,10004320 <__alt_data_end+0xf8004320>
1000436c:	00000106 	br	10004374 <keyboard_init+0x32c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10004370:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10004374:	d0e7980b 	ldhu	r3,-24992(gp)
10004378:	d0a7978b 	ldhu	r2,-24994(gp)
1000437c:	1884703a 	and	r2,r3,r2
10004380:	10bfffcc 	andi	r2,r2,65535
10004384:	1000261e 	bne	r2,zero,10004420 <keyboard_init+0x3d8>
			{
				printf("\n[INFO]: no device is present in SIE1!\n");
10004388:	010400b4 	movhi	r4,4098
1000438c:	2124d404 	addi	r4,r4,-27824
10004390:	000c0a80 	call	1000c0a8 <puts>
				printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10004394:	010400b4 	movhi	r4,4098
10004398:	2124de04 	addi	r4,r4,-27784
1000439c:	000c0a80 	call	1000c0a8 <puts>
				while (!(usb_ctl_val & no_device))
100043a0:	00000d06 	br	100043d8 <keyboard_init+0x390>
				{
					usb_ctl_val = UsbRead(ctl_reg);
100043a4:	d0a7970b 	ldhu	r2,-24996(gp)
100043a8:	10bfffcc 	andi	r2,r2,65535
100043ac:	1009883a 	mov	r4,r2
100043b0:	0004f9c0 	call	10004f9c <UsbRead>
100043b4:	d0a7980d 	sth	r2,-24992(gp)
					if(usb_ctl_val & no_device)
100043b8:	d0e7980b 	ldhu	r3,-24992(gp)
100043bc:	d0a7978b 	ldhu	r2,-24994(gp)
100043c0:	1884703a 	and	r2,r3,r2
100043c4:	10bfffcc 	andi	r2,r2,65535
100043c8:	10000126 	beq	r2,zero,100043d0 <keyboard_init+0x388>
						goto USB_HOT_PLUG;
100043cc:	003f2606 	br	10004068 <__alt_data_end+0xf8004068>

					usleep(2000);
100043d0:	0101f404 	movi	r4,2000
100043d4:	00173ac0 	call	100173ac <usleep>
			}
			if(!(usb_ctl_val & no_device))
			{
				printf("\n[INFO]: no device is present in SIE1!\n");
				printf("[INFO]: please insert a USB keyboard in SIE1!\n");
				while (!(usb_ctl_val & no_device))
100043d8:	d0e7980b 	ldhu	r3,-24992(gp)
100043dc:	d0a7978b 	ldhu	r2,-24994(gp)
100043e0:	1884703a 	and	r2,r3,r2
100043e4:	10bfffcc 	andi	r2,r2,65535
100043e8:	103fee26 	beq	r2,zero,100043a4 <__alt_data_end+0xf80043a4>
100043ec:	00000c06 	br	10004420 <keyboard_init+0x3d8>
			}
		}
		else
		{
			/* check for low speed or full speed by reading D+ and D- lines */
			if (usb_ctl_val & fs_device)
100043f0:	d0e7980b 	ldhu	r3,-24992(gp)
100043f4:	d0a7950b 	ldhu	r2,-25004(gp)
100043f8:	1884703a 	and	r2,r3,r2
100043fc:	10bfffcc 	andi	r2,r2,65535
10004400:	10000426 	beq	r2,zero,10004414 <keyboard_init+0x3cc>
			{
				printf("[INFO]: full speed device\n");
10004404:	010400b4 	movhi	r4,4098
10004408:	2124ea04 	addi	r4,r4,-27736
1000440c:	000c0a80 	call	1000c0a8 <puts>
10004410:	00000306 	br	10004420 <keyboard_init+0x3d8>
			}
			else
			{
				printf("[INFO]: low speed device\n");
10004414:	010400b4 	movhi	r4,4098
10004418:	2124f104 	addi	r4,r4,-27708
1000441c:	000c0a80 	call	1000c0a8 <puts>



		// STEP 3 begin
		//------------------------------------------------------set address -----------------------------------------------------------------
		UsbSetAddress();
10004420:	00050940 	call	10005094 <UsbSetAddress>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004424:	00000306 	br	10004434 <keyboard_init+0x3ec>
		{
			UsbSetAddress();
10004428:	00050940 	call	10005094 <UsbSetAddress>
			usleep(10*1000);
1000442c:	0109c404 	movi	r4,10000
10004430:	00173ac0 	call	100173ac <usleep>

		// STEP 3 begin
		//------------------------------------------------------set address -----------------------------------------------------------------
		UsbSetAddress();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004434:	010000c4 	movi	r4,3
10004438:	0003fe00 	call	10003fe0 <IO_read>
1000443c:	10bfffcc 	andi	r2,r2,65535
10004440:	1080040c 	andi	r2,r2,16
10004444:	103ff826 	beq	r2,zero,10004428 <__alt_data_end+0xf8004428>
		{
			UsbSetAddress();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
10004448:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506); // i
1000444c:	01414184 	movi	r5,1286
10004450:	01000084 	movi	r4,2
10004454:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004458:	0009883a 	mov	r4,zero
1000445c:	0003fe00 	call	10003fe0 <IO_read>
10004460:	10bfffcc 	andi	r2,r2,65535
10004464:	100b883a 	mov	r5,r2
10004468:	010400b4 	movhi	r4,4098
1000446c:	2124f804 	addi	r4,r4,-27680
10004470:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508); // n
10004474:	01414204 	movi	r5,1288
10004478:	01000084 	movi	r4,2
1000447c:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004480:	0009883a 	mov	r4,zero
10004484:	0003fe00 	call	10003fe0 <IO_read>
10004488:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000448c:	d0a7980b 	ldhu	r2,-24992(gp)
10004490:	10bfffcc 	andi	r2,r2,65535
10004494:	100b883a 	mov	r5,r2
10004498:	010400b4 	movhi	r4,4098
1000449c:	21250304 	addi	r4,r4,-27636
100044a0:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03) // retries occurred
100044a4:	0001883a 	nop
100044a8:	d0a7980b 	ldhu	r2,-24992(gp)
100044ac:	10bfffcc 	andi	r2,r2,65535
100044b0:	108000d8 	cmpnei	r2,r2,3
100044b4:	10000326 	beq	r2,zero,100044c4 <keyboard_init+0x47c>
		{
			usb_ctl_val = UsbGetRetryCnt();
100044b8:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
100044bc:	d0a7980d 	sth	r2,-24992(gp)

			goto USB_HOT_PLUG;
100044c0:	003ee906 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("------------[ENUM PROCESS]:set address done!---------------\n");
100044c4:	010400b4 	movhi	r4,4098
100044c8:	21250f04 	addi	r4,r4,-27588
100044cc:	000c0a80 	call	1000c0a8 <puts>

		// STEP 4 begin
		//-------------------------------get device descriptor-1 -----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100044d0:	00051940 	call	10005194 <UsbGetDeviceDesc1>

		//usleep(10*1000);
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100044d4:	00000306 	br	100044e4 <keyboard_init+0x49c>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc1();
100044d8:	00051940 	call	10005194 <UsbGetDeviceDesc1>
			usleep(10*1000);
100044dc:	0109c404 	movi	r4,10000
100044e0:	00173ac0 	call	100173ac <usleep>
		//-------------------------------get device descriptor-1 -----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

		//usleep(10*1000);
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100044e4:	010000c4 	movi	r4,3
100044e8:	0003fe00 	call	10003fe0 <IO_read>
100044ec:	10bfffcc 	andi	r2,r2,65535
100044f0:	1080040c 	andi	r2,r2,16
100044f4:	103ff826 	beq	r2,zero,100044d8 <__alt_data_end+0xf80044d8>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc1();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
100044f8:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
100044fc:	01414184 	movi	r5,1286
10004500:	01000084 	movi	r4,2
10004504:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004508:	0009883a 	mov	r4,zero
1000450c:	0003fe00 	call	10003fe0 <IO_read>
10004510:	10bfffcc 	andi	r2,r2,65535
10004514:	100b883a 	mov	r5,r2
10004518:	010400b4 	movhi	r4,4098
1000451c:	21251e04 	addi	r4,r4,-27528
10004520:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
10004524:	01414204 	movi	r5,1288
10004528:	01000084 	movi	r4,2
1000452c:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004530:	0009883a 	mov	r4,zero
10004534:	0003fe00 	call	10003fe0 <IO_read>
10004538:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000453c:	d0a7980b 	ldhu	r2,-24992(gp)
10004540:	10bfffcc 	andi	r2,r2,65535
10004544:	100b883a 	mov	r5,r2
10004548:	010400b4 	movhi	r4,4098
1000454c:	21252904 	addi	r4,r4,-27484
10004550:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
10004554:	0001883a 	nop
10004558:	d0a7980b 	ldhu	r2,-24992(gp)
1000455c:	10bfffcc 	andi	r2,r2,65535
10004560:	108000d8 	cmpnei	r2,r2,3
10004564:	10000626 	beq	r2,zero,10004580 <keyboard_init+0x538>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004568:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
1000456c:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
10004570:	010400b4 	movhi	r4,4098
10004574:	21253504 	addi	r4,r4,-27436
10004578:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
1000457c:	003eba06 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10004580:	010400b4 	movhi	r4,4098
10004584:	21253e04 	addi	r4,r4,-27400
10004588:	000c0a80 	call	1000c0a8 <puts>


		//--------------------------------get device descriptor-2---------------------------------------------//
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000458c:	00052dc0 	call	100052dc <UsbGetDeviceDesc2>

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004590:	00000306 	br	100045a0 <keyboard_init+0x558>
		{
			//resend the get device descriptor
			//get device descriptor
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc2();
10004594:	00052dc0 	call	100052dc <UsbGetDeviceDesc2>
			usleep(10*1000);
10004598:	0109c404 	movi	r4,10000
1000459c:	00173ac0 	call	100173ac <usleep>
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100045a0:	010000c4 	movi	r4,3
100045a4:	0003fe00 	call	10003fe0 <IO_read>
100045a8:	10bfffcc 	andi	r2,r2,65535
100045ac:	1080040c 	andi	r2,r2,16
100045b0:	103ff826 	beq	r2,zero,10004594 <__alt_data_end+0xf8004594>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc2();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
100045b4:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
100045b8:	01414184 	movi	r5,1286
100045bc:	01000084 	movi	r4,2
100045c0:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100045c4:	0009883a 	mov	r4,zero
100045c8:	0003fe00 	call	10003fe0 <IO_read>
100045cc:	10bfffcc 	andi	r2,r2,65535
100045d0:	100b883a 	mov	r5,r2
100045d4:	010400b4 	movhi	r4,4098
100045d8:	21251e04 	addi	r4,r4,-27528
100045dc:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
100045e0:	01414204 	movi	r5,1288
100045e4:	01000084 	movi	r4,2
100045e8:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
100045ec:	0009883a 	mov	r4,zero
100045f0:	0003fe00 	call	10003fe0 <IO_read>
100045f4:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100045f8:	d0a7980b 	ldhu	r2,-24992(gp)
100045fc:	10bfffcc 	andi	r2,r2,65535
10004600:	100b883a 	mov	r5,r2
10004604:	010400b4 	movhi	r4,4098
10004608:	21252904 	addi	r4,r4,-27484
1000460c:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
10004610:	0001883a 	nop
10004614:	d0a7980b 	ldhu	r2,-24992(gp)
10004618:	10bfffcc 	andi	r2,r2,65535
1000461c:	108000d8 	cmpnei	r2,r2,3
10004620:	10000626 	beq	r2,zero,1000463c <keyboard_init+0x5f4>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004624:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
10004628:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
1000462c:	010400b4 	movhi	r4,4098
10004630:	21253504 	addi	r4,r4,-27436
10004634:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
10004638:	003e8b06 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
1000463c:	010400b4 	movhi	r4,4098
10004640:	21255204 	addi	r4,r4,-27320
10004644:	000c0a80 	call	1000c0a8 <puts>


		// STEP 5 begin
		//-----------------------------------get configuration descriptor -1 ----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10004648:	00054b40 	call	100054b4 <UsbGetConfigDesc1>

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000464c:	00000306 	br	1000465c <keyboard_init+0x614>
		{
			//resend the get device descriptor
			//get device descriptor

			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc1();
10004650:	00054b40 	call	100054b4 <UsbGetConfigDesc1>
			usleep(10*1000);
10004654:	0109c404 	movi	r4,10000
10004658:	00173ac0 	call	100173ac <usleep>
		//-----------------------------------get configuration descriptor -1 ----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000465c:	010000c4 	movi	r4,3
10004660:	0003fe00 	call	10003fe0 <IO_read>
10004664:	10bfffcc 	andi	r2,r2,65535
10004668:	1080040c 	andi	r2,r2,16
1000466c:	103ff826 	beq	r2,zero,10004650 <__alt_data_end+0xf8004650>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc1();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
10004670:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
10004674:	01414184 	movi	r5,1286
10004678:	01000084 	movi	r4,2
1000467c:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004680:	0009883a 	mov	r4,zero
10004684:	0003fe00 	call	10003fe0 <IO_read>
10004688:	10bfffcc 	andi	r2,r2,65535
1000468c:	100b883a 	mov	r5,r2
10004690:	010400b4 	movhi	r4,4098
10004694:	21256404 	addi	r4,r4,-27248
10004698:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
1000469c:	01414204 	movi	r5,1288
100046a0:	01000084 	movi	r4,2
100046a4:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
100046a8:	0009883a 	mov	r4,zero
100046ac:	0003fe00 	call	10003fe0 <IO_read>
100046b0:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100046b4:	d0a7980b 	ldhu	r2,-24992(gp)
100046b8:	10bfffcc 	andi	r2,r2,65535
100046bc:	100b883a 	mov	r5,r2
100046c0:	010400b4 	movhi	r4,4098
100046c4:	21256f04 	addi	r4,r4,-27204
100046c8:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
100046cc:	0001883a 	nop
100046d0:	d0a7980b 	ldhu	r2,-24992(gp)
100046d4:	10bfffcc 	andi	r2,r2,65535
100046d8:	108000d8 	cmpnei	r2,r2,3
100046dc:	10000626 	beq	r2,zero,100046f8 <keyboard_init+0x6b0>
		{
			usb_ctl_val = UsbGetRetryCnt();
100046e0:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
100046e4:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
100046e8:	010400b4 	movhi	r4,4098
100046ec:	21253504 	addi	r4,r4,-27436
100046f0:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
100046f4:	003e5c06 	br	10004068 <__alt_data_end+0xf8004068>
		}
		printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100046f8:	010400b4 	movhi	r4,4098
100046fc:	21257b04 	addi	r4,r4,-27156
10004700:	000c0a80 	call	1000c0a8 <puts>

		// STEP 6 begin
		//-----------------------------------get configuration descriptor-2------------------------------------//
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10004704:	00056440 	call	10005644 <UsbGetConfigDesc2>

		usleep(100*1000);
10004708:	010000b4 	movhi	r4,2
1000470c:	2121a804 	addi	r4,r4,-31072
10004710:	00173ac0 	call	100173ac <usleep>
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004714:	00000306 	br	10004724 <keyboard_init+0x6dc>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc2();
10004718:	00056440 	call	10005644 <UsbGetConfigDesc2>
			usleep(10*1000);
1000471c:	0109c404 	movi	r4,10000
10004720:	00173ac0 	call	100173ac <usleep>
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

		usleep(100*1000);
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004724:	010000c4 	movi	r4,3
10004728:	0003fe00 	call	10003fe0 <IO_read>
1000472c:	10bfffcc 	andi	r2,r2,65535
10004730:	1080040c 	andi	r2,r2,16
10004734:	103ff826 	beq	r2,zero,10004718 <__alt_data_end+0xf8004718>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc2();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
10004738:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
1000473c:	01414184 	movi	r5,1286
10004740:	01000084 	movi	r4,2
10004744:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004748:	0009883a 	mov	r4,zero
1000474c:	0003fe00 	call	10003fe0 <IO_read>
10004750:	10bfffcc 	andi	r2,r2,65535
10004754:	100b883a 	mov	r5,r2
10004758:	010400b4 	movhi	r4,4098
1000475c:	21258e04 	addi	r4,r4,-27080
10004760:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
10004764:	01414204 	movi	r5,1288
10004768:	01000084 	movi	r4,2
1000476c:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004770:	0009883a 	mov	r4,zero
10004774:	0003fe00 	call	10003fe0 <IO_read>
10004778:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
1000477c:	d0a7980b 	ldhu	r2,-24992(gp)
10004780:	10bfffcc 	andi	r2,r2,65535
10004784:	100b883a 	mov	r5,r2
10004788:	010400b4 	movhi	r4,4098
1000478c:	21259904 	addi	r4,r4,-27036
10004790:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
10004794:	0001883a 	nop
10004798:	d0a7980b 	ldhu	r2,-24992(gp)
1000479c:	10bfffcc 	andi	r2,r2,65535
100047a0:	108000d8 	cmpnei	r2,r2,3
100047a4:	10000626 	beq	r2,zero,100047c0 <keyboard_init+0x778>
		{
			usb_ctl_val = UsbGetRetryCnt();
100047a8:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
100047ac:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
100047b0:	010400b4 	movhi	r4,4098
100047b4:	21253504 	addi	r4,r4,-27436
100047b8:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
100047bc:	003e2a06 	br	10004068 <__alt_data_end+0xf8004068>
		}


		printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
100047c0:	010400b4 	movhi	r4,4098
100047c4:	2125a504 	addi	r4,r4,-26988
100047c8:	000c0a80 	call	1000c0a8 <puts>


		// ---------------------------------get device info---------------------------------------------//

		// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x056c);
100047cc:	01415b04 	movi	r5,1388
100047d0:	01000084 	movi	r4,2
100047d4:	0003f700 	call	10003f70 <IO_write>
		code = IO_read(HPI_DATA);
100047d8:	0009883a 	mov	r4,zero
100047dc:	0003fe00 	call	10003fe0 <IO_read>
100047e0:	d0a79a0d 	sth	r2,-24984(gp)
		code = code & 0x003;
100047e4:	d0a79a0b 	ldhu	r2,-24984(gp)
100047e8:	108000cc 	andi	r2,r2,3
100047ec:	d0a79a0d 	sth	r2,-24984(gp)
		printf("\ncode = %x\n", code);
100047f0:	d0a79a0b 	ldhu	r2,-24984(gp)
100047f4:	10bfffcc 	andi	r2,r2,65535
100047f8:	100b883a 	mov	r5,r2
100047fc:	010400b4 	movhi	r4,4098
10004800:	2125b804 	addi	r4,r4,-26912
10004804:	000bfac0 	call	1000bfac <printf>

		if (code == 0x01)
10004808:	d0a79a0b 	ldhu	r2,-24984(gp)
1000480c:	10bfffcc 	andi	r2,r2,65535
10004810:	10800058 	cmpnei	r2,r2,1
10004814:	1000041e 	bne	r2,zero,10004828 <keyboard_init+0x7e0>
		{
			printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10004818:	010400b4 	movhi	r4,4098
1000481c:	2125bb04 	addi	r4,r4,-26900
10004820:	000c0a80 	call	1000c0a8 <puts>
10004824:	00000306 	br	10004834 <keyboard_init+0x7ec>
		}
		else
		{
			printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10004828:	010400b4 	movhi	r4,4098
1000482c:	2125ca04 	addi	r4,r4,-26840
10004830:	000c0a80 	call	1000c0a8 <puts>
		}

		// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

		IO_write(HPI_ADDR,0x0576);
10004834:	01415d84 	movi	r5,1398
10004838:	01000084 	movi	r4,2
1000483c:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0x073F);
10004840:	0141cfc4 	movi	r5,1855
10004844:	0009883a 	mov	r4,zero
10004848:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0x8105);
1000484c:	01604154 	movui	r5,33029
10004850:	0009883a 	mov	r4,zero
10004854:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0x0003);
10004858:	014000c4 	movi	r5,3
1000485c:	0009883a 	mov	r4,zero
10004860:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0x0008);
10004864:	01400204 	movi	r5,8
10004868:	0009883a 	mov	r4,zero
1000486c:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0xAC0A);
10004870:	016b0294 	movui	r5,44042
10004874:	0009883a 	mov	r4,zero
10004878:	0003f700 	call	10003f70 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
1000487c:	01415d84 	movi	r5,1398
10004880:	01006c04 	movi	r4,432
10004884:	0004f440 	call	10004f44 <UsbWrite>

		//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
		//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
		//UsbPrintMem();
		IO_write(HPI_ADDR,0x057c);
10004888:	01415f04 	movi	r5,1404
1000488c:	01000084 	movi	r4,2
10004890:	0003f700 	call	10003f70 <IO_write>
		data_size = (IO_read(HPI_DATA))&0x0ff;
10004894:	0009883a 	mov	r4,zero
10004898:	0003fe00 	call	10003fe0 <IO_read>
1000489c:	d0a79885 	stb	r2,-24990(gp)
		printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
100048a0:	d0a79883 	ldbu	r2,-24990(gp)
100048a4:	10803fcc 	andi	r2,r2,255
100048a8:	100b883a 	mov	r5,r2
100048ac:	010400b4 	movhi	r4,4098
100048b0:	2125d304 	addi	r4,r4,-26804
100048b4:	000bfac0 	call	1000bfac <printf>
		// STEP 7 begin
		//------------------------------------set configuration -----------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbSetConfig();		// Set Configuration
100048b8:	00058ac0 	call	100058ac <UsbSetConfig>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100048bc:	00000306 	br	100048cc <keyboard_init+0x884>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbSetConfig();		// Set Configuration
100048c0:	00058ac0 	call	100058ac <UsbSetConfig>
			usleep(10*1000);
100048c4:	0109c404 	movi	r4,10000
100048c8:	00173ac0 	call	100173ac <usleep>
		// STEP 7 begin
		//------------------------------------set configuration -----------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbSetConfig();		// Set Configuration

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100048cc:	010000c4 	movi	r4,3
100048d0:	0003fe00 	call	10003fe0 <IO_read>
100048d4:	10bfffcc 	andi	r2,r2,65535
100048d8:	1080040c 	andi	r2,r2,16
100048dc:	103ff826 	beq	r2,zero,100048c0 <__alt_data_end+0xf80048c0>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbSetConfig();		// Set Configuration
			usleep(10*1000);
		}

		UsbWaitTDListDone();
100048e0:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
100048e4:	01414184 	movi	r5,1286
100048e8:	01000084 	movi	r4,2
100048ec:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
100048f0:	0009883a 	mov	r4,zero
100048f4:	0003fe00 	call	10003fe0 <IO_read>
100048f8:	10bfffcc 	andi	r2,r2,65535
100048fc:	100b883a 	mov	r5,r2
10004900:	010400b4 	movhi	r4,4098
10004904:	2125dd04 	addi	r4,r4,-26764
10004908:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
1000490c:	01414204 	movi	r5,1288
10004910:	01000084 	movi	r4,2
10004914:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004918:	0009883a 	mov	r4,zero
1000491c:	0003fe00 	call	10003fe0 <IO_read>
10004920:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10004924:	d0a7980b 	ldhu	r2,-24992(gp)
10004928:	10bfffcc 	andi	r2,r2,65535
1000492c:	100b883a 	mov	r5,r2
10004930:	010400b4 	movhi	r4,4098
10004934:	2125e804 	addi	r4,r4,-26720
10004938:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
1000493c:	0001883a 	nop
10004940:	d0a7980b 	ldhu	r2,-24992(gp)
10004944:	10bfffcc 	andi	r2,r2,65535
10004948:	108000d8 	cmpnei	r2,r2,3
1000494c:	10000626 	beq	r2,zero,10004968 <keyboard_init+0x920>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004950:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
10004954:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
10004958:	010400b4 	movhi	r4,4098
1000495c:	21253504 	addi	r4,r4,-27436
10004960:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
10004964:	003dc006 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10004968:	010400b4 	movhi	r4,4098
1000496c:	2125f404 	addi	r4,r4,-26672
10004970:	000c0a80 	call	1000c0a8 <puts>

		//----------------------------------------------class request out ------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbClassRequest();
10004974:	00059ac0 	call	100059ac <UsbClassRequest>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004978:	00000306 	br	10004988 <keyboard_init+0x940>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbClassRequest();
1000497c:	00059ac0 	call	100059ac <UsbClassRequest>
			usleep(10*1000);
10004980:	0109c404 	movi	r4,10000
10004984:	00173ac0 	call	100173ac <usleep>

		//----------------------------------------------class request out ------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbClassRequest();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004988:	010000c4 	movi	r4,3
1000498c:	0003fe00 	call	10003fe0 <IO_read>
10004990:	10bfffcc 	andi	r2,r2,65535
10004994:	1080040c 	andi	r2,r2,16
10004998:	103ff826 	beq	r2,zero,1000497c <__alt_data_end+0xf800497c>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbClassRequest();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
1000499c:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
100049a0:	01414184 	movi	r5,1286
100049a4:	01000084 	movi	r4,2
100049a8:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100049ac:	0009883a 	mov	r4,zero
100049b0:	0003fe00 	call	10003fe0 <IO_read>
100049b4:	10bfffcc 	andi	r2,r2,65535
100049b8:	100b883a 	mov	r5,r2
100049bc:	010400b4 	movhi	r4,4098
100049c0:	21260604 	addi	r4,r4,-26600
100049c4:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
100049c8:	01414204 	movi	r5,1288
100049cc:	01000084 	movi	r4,2
100049d0:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
100049d4:	0009883a 	mov	r4,zero
100049d8:	0003fe00 	call	10003fe0 <IO_read>
100049dc:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100049e0:	d0a7980b 	ldhu	r2,-24992(gp)
100049e4:	10bfffcc 	andi	r2,r2,65535
100049e8:	100b883a 	mov	r5,r2
100049ec:	010400b4 	movhi	r4,4098
100049f0:	21261104 	addi	r4,r4,-26556
100049f4:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
100049f8:	0001883a 	nop
100049fc:	d0a7980b 	ldhu	r2,-24992(gp)
10004a00:	10bfffcc 	andi	r2,r2,65535
10004a04:	108000d8 	cmpnei	r2,r2,3
10004a08:	10000626 	beq	r2,zero,10004a24 <keyboard_init+0x9dc>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004a0c:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
10004a10:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
10004a14:	010400b4 	movhi	r4,4098
10004a18:	21253504 	addi	r4,r4,-27436
10004a1c:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
10004a20:	003d9106 	br	10004068 <__alt_data_end+0xf8004068>
		}


		printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10004a24:	010400b4 	movhi	r4,4098
10004a28:	21261d04 	addi	r4,r4,-26508
10004a2c:	000c0a80 	call	1000c0a8 <puts>

		// STEP 8 begin
		//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetHidDesc();
10004a30:	0005aac0 	call	10005aac <UsbGetHidDesc>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004a34:	00000306 	br	10004a44 <keyboard_init+0x9fc>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetHidDesc();
10004a38:	0005aac0 	call	10005aac <UsbGetHidDesc>
			usleep(10*1000);
10004a3c:	0109c404 	movi	r4,10000
10004a40:	00173ac0 	call	100173ac <usleep>
		// STEP 8 begin
		//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetHidDesc();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004a44:	010000c4 	movi	r4,3
10004a48:	0003fe00 	call	10003fe0 <IO_read>
10004a4c:	10bfffcc 	andi	r2,r2,65535
10004a50:	1080040c 	andi	r2,r2,16
10004a54:	103ff826 	beq	r2,zero,10004a38 <__alt_data_end+0xf8004a38>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetHidDesc();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
10004a58:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
10004a5c:	01414184 	movi	r5,1286
10004a60:	01000084 	movi	r4,2
10004a64:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004a68:	0009883a 	mov	r4,zero
10004a6c:	0003fe00 	call	10003fe0 <IO_read>
10004a70:	10bfffcc 	andi	r2,r2,65535
10004a74:	100b883a 	mov	r5,r2
10004a78:	010400b4 	movhi	r4,4098
10004a7c:	21260604 	addi	r4,r4,-26600
10004a80:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
10004a84:	01414204 	movi	r5,1288
10004a88:	01000084 	movi	r4,2
10004a8c:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004a90:	0009883a 	mov	r4,zero
10004a94:	0003fe00 	call	10003fe0 <IO_read>
10004a98:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10004a9c:	d0a7980b 	ldhu	r2,-24992(gp)
10004aa0:	10bfffcc 	andi	r2,r2,65535
10004aa4:	100b883a 	mov	r5,r2
10004aa8:	010400b4 	movhi	r4,4098
10004aac:	21261104 	addi	r4,r4,-26556
10004ab0:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
10004ab4:	0001883a 	nop
10004ab8:	d0a7980b 	ldhu	r2,-24992(gp)
10004abc:	10bfffcc 	andi	r2,r2,65535
10004ac0:	108000d8 	cmpnei	r2,r2,3
10004ac4:	10000626 	beq	r2,zero,10004ae0 <keyboard_init+0xa98>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004ac8:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
10004acc:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
10004ad0:	010400b4 	movhi	r4,4098
10004ad4:	21253504 	addi	r4,r4,-27436
10004ad8:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
10004adc:	003d6206 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10004ae0:	010400b4 	movhi	r4,4098
10004ae4:	21262f04 	addi	r4,r4,-26436
10004ae8:	000c0a80 	call	1000c0a8 <puts>

		// STEP 9 begin
		//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetReportDesc();
10004aec:	0005bf40 	call	10005bf4 <UsbGetReportDesc>
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004af0:	00000306 	br	10004b00 <keyboard_init+0xab8>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetReportDesc();
10004af4:	0005bf40 	call	10005bf4 <UsbGetReportDesc>
			usleep(10*1000);
10004af8:	0109c404 	movi	r4,10000
10004afc:	00173ac0 	call	100173ac <usleep>
		// STEP 9 begin
		//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetReportDesc();
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004b00:	010000c4 	movi	r4,3
10004b04:	0003fe00 	call	10003fe0 <IO_read>
10004b08:	10bfffcc 	andi	r2,r2,65535
10004b0c:	1080040c 	andi	r2,r2,16
10004b10:	103ff826 	beq	r2,zero,10004af4 <__alt_data_end+0xf8004af4>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetReportDesc();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
10004b14:	0005f340 	call	10005f34 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
10004b18:	01414184 	movi	r5,1286
10004b1c:	01000084 	movi	r4,2
10004b20:	0003f700 	call	10003f70 <IO_write>
		printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004b24:	0009883a 	mov	r4,zero
10004b28:	0003fe00 	call	10003fe0 <IO_read>
10004b2c:	10bfffcc 	andi	r2,r2,65535
10004b30:	100b883a 	mov	r5,r2
10004b34:	010400b4 	movhi	r4,4098
10004b38:	21264304 	addi	r4,r4,-26356
10004b3c:	000bfac0 	call	1000bfac <printf>

		IO_write(HPI_ADDR,0x0508);
10004b40:	01414204 	movi	r5,1288
10004b44:	01000084 	movi	r4,2
10004b48:	0003f700 	call	10003f70 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
10004b4c:	0009883a 	mov	r4,zero
10004b50:	0003fe00 	call	10003fe0 <IO_read>
10004b54:	d0a7980d 	sth	r2,-24992(gp)
		printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10004b58:	d0a7980b 	ldhu	r2,-24992(gp)
10004b5c:	10bfffcc 	andi	r2,r2,65535
10004b60:	100b883a 	mov	r5,r2
10004b64:	010400b4 	movhi	r4,4098
10004b68:	21264f04 	addi	r4,r4,-26308
10004b6c:	000bfac0 	call	1000bfac <printf>
		while (usb_ctl_val != 0x03)
10004b70:	0001883a 	nop
10004b74:	d0a7980b 	ldhu	r2,-24992(gp)
10004b78:	10bfffcc 	andi	r2,r2,65535
10004b7c:	108000d8 	cmpnei	r2,r2,3
10004b80:	10000626 	beq	r2,zero,10004b9c <keyboard_init+0xb54>
		{
			usb_ctl_val = UsbGetRetryCnt();
10004b84:	0005fb80 	call	10005fb8 <UsbGetRetryCnt>
10004b88:	d0a7980d 	sth	r2,-24992(gp)

			// Fatal problem; try again
			printf ("Encountered Fatal Error, restarting\n");
10004b8c:	010400b4 	movhi	r4,4098
10004b90:	21253504 	addi	r4,r4,-27436
10004b94:	000c0a80 	call	1000c0a8 <puts>
			goto USB_HOT_PLUG;
10004b98:	003d3306 	br	10004068 <__alt_data_end+0xf8004068>
		}

		printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10004b9c:	010400b4 	movhi	r4,4098
10004ba0:	21265b04 	addi	r4,r4,-26260
10004ba4:	000c0a80 	call	1000c0a8 <puts>
		usleep(10000);
10004ba8:	0109c404 	movi	r4,10000
10004bac:	00173ac0 	call	100173ac <usleep>
}
10004bb0:	0001883a 	nop
10004bb4:	e037883a 	mov	sp,fp
10004bb8:	dfc00117 	ldw	ra,4(sp)
10004bbc:	df000017 	ldw	fp,0(sp)
10004bc0:	dec00204 	addi	sp,sp,8
10004bc4:	f800283a 	ret

10004bc8 <get_key>:

int get_key()
{
10004bc8:	defffe04 	addi	sp,sp,-8
10004bcc:	dfc00115 	stw	ra,4(sp)
10004bd0:	df000015 	stw	fp,0(sp)
10004bd4:	d839883a 	mov	fp,sp
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u8 hot_plug_count;*/
	//-----------------------------------get keycode value------------------------------------------------//
	//printf("Called");
	toggle++;
10004bd8:	d0a79583 	ldbu	r2,-25002(gp)
10004bdc:	10800044 	addi	r2,r2,1
10004be0:	d0a79585 	stb	r2,-25002(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10004be4:	01414004 	movi	r5,1280
10004be8:	01000084 	movi	r4,2
10004bec:	0003f700 	call	10003f70 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10004bf0:	01414704 	movi	r5,1308
10004bf4:	0009883a 	mov	r4,zero
10004bf8:	0003f700 	call	10003f70 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004bfc:	d0a79883 	ldbu	r2,-24990(gp)
10004c00:	10803fcc 	andi	r2,r2,255
10004c04:	108003cc 	andi	r2,r2,15
10004c08:	100b883a 	mov	r5,r2
10004c0c:	0009883a 	mov	r4,zero
10004c10:	0003f700 	call	10003f70 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004c14:	0140a444 	movi	r5,657
10004c18:	0009883a 	mov	r4,zero
10004c1c:	0003f700 	call	10003f70 <IO_write>
	if(toggle%2)
10004c20:	d0a79583 	ldbu	r2,-25002(gp)
10004c24:	1080004c 	andi	r2,r2,1
10004c28:	10803fcc 	andi	r2,r2,255
10004c2c:	10000426 	beq	r2,zero,10004c40 <get_key+0x78>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10004c30:	01400044 	movi	r5,1
10004c34:	0009883a 	mov	r4,zero
10004c38:	0003f700 	call	10003f70 <IO_write>
10004c3c:	00000306 	br	10004c4c <get_key+0x84>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10004c40:	01401044 	movi	r5,65
10004c44:	0009883a 	mov	r4,zero
10004c48:	0003f700 	call	10003f70 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10004c4c:	014004c4 	movi	r5,19
10004c50:	0009883a 	mov	r4,zero
10004c54:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004c58:	000b883a 	mov	r5,zero
10004c5c:	0009883a 	mov	r4,zero
10004c60:	0003f700 	call	10003f70 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004c64:	01414004 	movi	r5,1280
10004c68:	01006c04 	movi	r4,432
10004c6c:	0004f440 	call	10004f44 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004c70:	00002506 	br	10004d08 <get_key+0x140>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
10004c74:	01414004 	movi	r5,1280
10004c78:	01000084 	movi	r4,2
10004c7c:	0003f700 	call	10003f70 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10004c80:	01414704 	movi	r5,1308
10004c84:	0009883a 	mov	r4,zero
10004c88:	0003f700 	call	10003f70 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004c8c:	d0a79883 	ldbu	r2,-24990(gp)
10004c90:	10803fcc 	andi	r2,r2,255
10004c94:	108003cc 	andi	r2,r2,15
10004c98:	100b883a 	mov	r5,r2
10004c9c:	0009883a 	mov	r4,zero
10004ca0:	0003f700 	call	10003f70 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004ca4:	0140a444 	movi	r5,657
10004ca8:	0009883a 	mov	r4,zero
10004cac:	0003f700 	call	10003f70 <IO_write>
		if(toggle%2)
10004cb0:	d0a79583 	ldbu	r2,-25002(gp)
10004cb4:	1080004c 	andi	r2,r2,1
10004cb8:	10803fcc 	andi	r2,r2,255
10004cbc:	10000426 	beq	r2,zero,10004cd0 <get_key+0x108>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10004cc0:	01400044 	movi	r5,1
10004cc4:	0009883a 	mov	r4,zero
10004cc8:	0003f700 	call	10003f70 <IO_write>
10004ccc:	00000306 	br	10004cdc <get_key+0x114>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10004cd0:	01401044 	movi	r5,65
10004cd4:	0009883a 	mov	r4,zero
10004cd8:	0003f700 	call	10003f70 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10004cdc:	014004c4 	movi	r5,19
10004ce0:	0009883a 	mov	r4,zero
10004ce4:	0003f700 	call	10003f70 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10004ce8:	000b883a 	mov	r5,zero
10004cec:	0009883a 	mov	r4,zero
10004cf0:	0003f700 	call	10003f70 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004cf4:	01414004 	movi	r5,1280
10004cf8:	01006c04 	movi	r4,432
10004cfc:	0004f440 	call	10004f44 <UsbWrite>
		usleep(10*1000);
10004d00:	0109c404 	movi	r4,10000
10004d04:	00173ac0 	call	100173ac <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004d08:	010000c4 	movi	r4,3
10004d0c:	0003fe00 	call	10003fe0 <IO_read>
10004d10:	10bfffcc 	andi	r2,r2,65535
10004d14:	1080040c 	andi	r2,r2,16
10004d18:	103fd626 	beq	r2,zero,10004c74 <__alt_data_end+0xf8004c74>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10004d1c:	0005f340 	call	10005f34 <UsbWaitTDListDone>
10004d20:	d0a7980d 	sth	r2,-24992(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
10004d24:	01014784 	movi	r4,1310
10004d28:	0004f9c0 	call	10004f9c <UsbRead>
10004d2c:	10bfffcc 	andi	r2,r2,65535
10004d30:	d0a79615 	stw	r2,-25000(gp)
	//printf("\nfirst two keycode values are %04x\n",keycode);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
10004d34:	00803404 	movi	r2,208
10004d38:	d0e79617 	ldw	r3,-25000(gp)
10004d3c:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
10004d40:	01003204 	movi	r4,200
10004d44:	00173ac0 	call	100173ac <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
10004d48:	d0a7970b 	ldhu	r2,-24996(gp)
10004d4c:	10bfffcc 	andi	r2,r2,65535
10004d50:	1009883a 	mov	r4,r2
10004d54:	0004f9c0 	call	10004f9c <UsbRead>
10004d58:	d0a7980d 	sth	r2,-24992(gp)

	if(!(usb_ctl_val & no_device))
10004d5c:	d0e7980b 	ldhu	r3,-24992(gp)
10004d60:	d0a7978b 	ldhu	r2,-24994(gp)
10004d64:	1884703a 	and	r2,r3,r2
10004d68:	10bfffcc 	andi	r2,r2,65535
10004d6c:	1000401e 	bne	r2,zero,10004e70 <get_key+0x2a8>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10004d70:	d0279985 	stb	zero,-24986(gp)
10004d74:	00000f06 	br	10004db4 <get_key+0x1ec>
		{
			usleep(5*1000);
10004d78:	0104e204 	movi	r4,5000
10004d7c:	00173ac0 	call	100173ac <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10004d80:	d0a7970b 	ldhu	r2,-24996(gp)
10004d84:	10bfffcc 	andi	r2,r2,65535
10004d88:	1009883a 	mov	r4,r2
10004d8c:	0004f9c0 	call	10004f9c <UsbRead>
10004d90:	d0a7980d 	sth	r2,-24992(gp)
			if(usb_ctl_val & no_device) break;
10004d94:	d0e7980b 	ldhu	r3,-24992(gp)
10004d98:	d0a7978b 	ldhu	r2,-24994(gp)
10004d9c:	1884703a 	and	r2,r3,r2
10004da0:	10bfffcc 	andi	r2,r2,65535
10004da4:	1000081e 	bne	r2,zero,10004dc8 <get_key+0x200>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10004da8:	d0a79983 	ldbu	r2,-24986(gp)
10004dac:	10800044 	addi	r2,r2,1
10004db0:	d0a79985 	stb	r2,-24986(gp)
10004db4:	d0a79983 	ldbu	r2,-24986(gp)
10004db8:	10803fcc 	andi	r2,r2,255
10004dbc:	108001f0 	cmpltui	r2,r2,7
10004dc0:	103fed1e 	bne	r2,zero,10004d78 <__alt_data_end+0xf8004d78>
10004dc4:	00000106 	br	10004dcc <get_key+0x204>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10004dc8:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10004dcc:	d0e7980b 	ldhu	r3,-24992(gp)
10004dd0:	d0a7978b 	ldhu	r2,-24994(gp)
10004dd4:	1884703a 	and	r2,r3,r2
10004dd8:	10bfffcc 	andi	r2,r2,65535
10004ddc:	1000241e 	bne	r2,zero,10004e70 <get_key+0x2a8>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
10004de0:	010400b4 	movhi	r4,4098
10004de4:	21266f04 	addi	r4,r4,-26180
10004de8:	000c0a80 	call	1000c0a8 <puts>
			printf("[INFO]: please insert again!!! \n");
10004dec:	010400b4 	movhi	r4,4098
10004df0:	21267a04 	addi	r4,r4,-26136
10004df4:	000c0a80 	call	1000c0a8 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10004df8:	00001d06 	br	10004e70 <get_key+0x2a8>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10004dfc:	d0a7970b 	ldhu	r2,-24996(gp)
10004e00:	10bfffcc 	andi	r2,r2,65535
10004e04:	1009883a 	mov	r4,r2
10004e08:	0004f9c0 	call	10004f9c <UsbRead>
10004e0c:	d0a7980d 	sth	r2,-24992(gp)
		usleep(5*1000);
10004e10:	0104e204 	movi	r4,5000
10004e14:	00173ac0 	call	100173ac <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004e18:	d0a7970b 	ldhu	r2,-24996(gp)
10004e1c:	10bfffcc 	andi	r2,r2,65535
10004e20:	1009883a 	mov	r4,r2
10004e24:	0004f9c0 	call	10004f9c <UsbRead>
10004e28:	d0a7980d 	sth	r2,-24992(gp)
		usleep(5*1000);
10004e2c:	0104e204 	movi	r4,5000
10004e30:	00173ac0 	call	100173ac <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004e34:	d0a7970b 	ldhu	r2,-24996(gp)
10004e38:	10bfffcc 	andi	r2,r2,65535
10004e3c:	1009883a 	mov	r4,r2
10004e40:	0004f9c0 	call	10004f9c <UsbRead>
10004e44:	d0a7980d 	sth	r2,-24992(gp)
		usleep(5*1000);
10004e48:	0104e204 	movi	r4,5000
10004e4c:	00173ac0 	call	100173ac <usleep>

		if(usb_ctl_val & no_device)
10004e50:	d0e7980b 	ldhu	r3,-24992(gp)
10004e54:	d0a7978b 	ldhu	r2,-24994(gp)
10004e58:	1884703a 	and	r2,r3,r2
10004e5c:	10bfffcc 	andi	r2,r2,65535
10004e60:	10000126 	beq	r2,zero,10004e68 <get_key+0x2a0>
			keyboard_init();
10004e64:	00040480 	call	10004048 <keyboard_init>

		usleep(200);
10004e68:	01003204 	movi	r4,200
10004e6c:	00173ac0 	call	100173ac <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
10004e70:	d0e7980b 	ldhu	r3,-24992(gp)
10004e74:	d0a7978b 	ldhu	r2,-24994(gp)
10004e78:	1884703a 	and	r2,r3,r2
10004e7c:	10bfffcc 	andi	r2,r2,65535
10004e80:	103fde26 	beq	r2,zero,10004dfc <__alt_data_end+0xf8004dfc>
		if(usb_ctl_val & no_device)
			keyboard_init();

		usleep(200);
	}
	return keycode;
10004e84:	d0a79617 	ldw	r2,-25000(gp)
}
10004e88:	e037883a 	mov	sp,fp
10004e8c:	dfc00117 	ldw	ra,4(sp)
10004e90:	df000017 	ldw	fp,0(sp)
10004e94:	dec00204 	addi	sp,sp,8
10004e98:	f800283a 	ret

10004e9c <main>:
5 : Reserved
6 : Draw_Start
7 : Draw_Done
*/

int main(){
10004e9c:	defff504 	addi	sp,sp,-44
10004ea0:	dfc00a15 	stw	ra,40(sp)
10004ea4:	df000915 	stw	fp,36(sp)
10004ea8:	df000904 	addi	fp,sp,36
	keyboard_init();
10004eac:	00040480 	call	10004048 <keyboard_init>
	srand((unsigned)time(NULL));	//INIT SEED
10004eb0:	0009883a 	mov	r4,zero
10004eb4:	000c1d00 	call	1000c1d0 <time>
10004eb8:	1009883a 	mov	r4,r2
10004ebc:	000c0bc0 	call	1000c0bc <srand>
	char option;
	int scores[5] = {0,0,0,0,0};
10004ec0:	e03ff815 	stw	zero,-32(fp)
10004ec4:	e03ff915 	stw	zero,-28(fp)
10004ec8:	e03ffa15 	stw	zero,-24(fp)
10004ecc:	e03ffb15 	stw	zero,-20(fp)
10004ed0:	e03ffc15 	stw	zero,-16(fp)
	MENU:
	option = displayMenu();
10004ed4:	0003a700 	call	10003a70 <displayMenu>
10004ed8:	e0bff705 	stb	r2,-36(fp)
	//printf("Option : %c\n");
	if(option == 'p'){
10004edc:	e0bff707 	ldb	r2,-36(fp)
10004ee0:	10801c18 	cmpnei	r2,r2,112
10004ee4:	10000a1e 	bne	r2,zero,10004f10 <main+0x74>
		GameState gamestate = playGame();
10004ee8:	e0bffd04 	addi	r2,fp,-12
10004eec:	1009883a 	mov	r4,r2
10004ef0:	00034940 	call	10003494 <playGame>
		updateScores(scores, gamestate.score);
10004ef4:	e0fffe17 	ldw	r3,-8(fp)
10004ef8:	e0bff804 	addi	r2,fp,-32
10004efc:	180b883a 	mov	r5,r3
10004f00:	1009883a 	mov	r4,r2
10004f04:	0003b480 	call	10003b48 <updateScores>
		goto MENU;
10004f08:	0001883a 	nop
10004f0c:	003ff106 	br	10004ed4 <__alt_data_end+0xf8004ed4>
	}
	else if(option == 's'){
10004f10:	e0bff707 	ldb	r2,-36(fp)
10004f14:	10801cd8 	cmpnei	r2,r2,115
10004f18:	1000041e 	bne	r2,zero,10004f2c <main+0x90>
		displayScores(scores);
10004f1c:	e0bff804 	addi	r2,fp,-32
10004f20:	1009883a 	mov	r4,r2
10004f24:	0003c640 	call	10003c64 <displayScores>
		goto MENU;
10004f28:	003fea06 	br	10004ed4 <__alt_data_end+0xf8004ed4>
10004f2c:	0005883a 	mov	r2,zero
	}
}
10004f30:	e037883a 	mov	sp,fp
10004f34:	dfc00117 	ldw	ra,4(sp)
10004f38:	df000017 	ldw	fp,0(sp)
10004f3c:	dec00204 	addi	sp,sp,8
10004f40:	f800283a 	ret

10004f44 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10004f44:	defffc04 	addi	sp,sp,-16
10004f48:	dfc00315 	stw	ra,12(sp)
10004f4c:	df000215 	stw	fp,8(sp)
10004f50:	df000204 	addi	fp,sp,8
10004f54:	2007883a 	mov	r3,r4
10004f58:	2805883a 	mov	r2,r5
10004f5c:	e0fffe0d 	sth	r3,-8(fp)
10004f60:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10004f64:	e0bffe0b 	ldhu	r2,-8(fp)
10004f68:	100b883a 	mov	r5,r2
10004f6c:	01000084 	movi	r4,2
10004f70:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,Data);
10004f74:	e0bfff0b 	ldhu	r2,-4(fp)
10004f78:	100b883a 	mov	r5,r2
10004f7c:	0009883a 	mov	r4,zero
10004f80:	0003f700 	call	10003f70 <IO_write>
}
10004f84:	0001883a 	nop
10004f88:	e037883a 	mov	sp,fp
10004f8c:	dfc00117 	ldw	ra,4(sp)
10004f90:	df000017 	ldw	fp,0(sp)
10004f94:	dec00204 	addi	sp,sp,8
10004f98:	f800283a 	ret

10004f9c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10004f9c:	defffd04 	addi	sp,sp,-12
10004fa0:	dfc00215 	stw	ra,8(sp)
10004fa4:	df000115 	stw	fp,4(sp)
10004fa8:	df000104 	addi	fp,sp,4
10004fac:	2005883a 	mov	r2,r4
10004fb0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10004fb4:	e0bfff0b 	ldhu	r2,-4(fp)
10004fb8:	100b883a 	mov	r5,r2
10004fbc:	01000084 	movi	r4,2
10004fc0:	0003f700 	call	10003f70 <IO_write>
	return IO_read(HPI_DATA);
10004fc4:	0009883a 	mov	r4,zero
10004fc8:	0003fe00 	call	10003fe0 <IO_read>
}
10004fcc:	e037883a 	mov	sp,fp
10004fd0:	dfc00117 	ldw	ra,4(sp)
10004fd4:	df000017 	ldw	fp,0(sp)
10004fd8:	dec00204 	addi	sp,sp,8
10004fdc:	f800283a 	ret

10004fe0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10004fe0:	defffe04 	addi	sp,sp,-8
10004fe4:	dfc00115 	stw	ra,4(sp)
10004fe8:	df000015 	stw	fp,0(sp)
10004fec:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10004ff0:	017e9414 	movui	r5,64080
10004ff4:	01000044 	movi	r4,1
10004ff8:	0003f700 	call	10003f70 <IO_write>
	usleep(100000);
10004ffc:	010000b4 	movhi	r4,2
10005000:	2121a804 	addi	r4,r4,-31072
10005004:	00173ac0 	call	100173ac <usleep>
	printf("[USB INIT]:reset finished!\n");
10005008:	010400b4 	movhi	r4,4098
1000500c:	21268204 	addi	r4,r4,-26104
10005010:	000c0a80 	call	1000c0a8 <puts>

	usleep(500000);
10005014:	01000234 	movhi	r4,8
10005018:	21284804 	addi	r4,r4,-24288
1000501c:	00173ac0 	call	100173ac <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10005020:	010400b4 	movhi	r4,4098
10005024:	21268904 	addi	r4,r4,-26076
10005028:	000c0a80 	call	1000c0a8 <puts>
	IO_read(HPI_MAILBOX);
1000502c:	01000044 	movi	r4,1
10005030:	0003fe00 	call	10003fe0 <IO_read>
	IO_read(HPI_STATUS);
10005034:	010000c4 	movi	r4,3
10005038:	0003fe00 	call	10003fe0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000503c:	01005104 	movi	r4,324
10005040:	0004f9c0 	call	10004f9c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005044:	000b883a 	mov	r5,zero
10005048:	01005104 	movi	r4,324
1000504c:	0004f440 	call	10004f44 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10005050:	01005204 	movi	r4,328
10005054:	0004f9c0 	call	10004f9c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10005058:	000b883a 	mov	r5,zero
1000505c:	01005204 	movi	r4,328
10005060:	0004f440 	call	10004f44 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005064:	017fffd4 	movui	r5,65535
10005068:	01302414 	movui	r4,49296
1000506c:	0004f440 	call	10004f44 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10005070:	017fffd4 	movui	r5,65535
10005074:	01302c14 	movui	r4,49328
10005078:	0004f440 	call	10004f44 <UsbWrite>
}
1000507c:	0001883a 	nop
10005080:	e037883a 	mov	sp,fp
10005084:	dfc00117 	ldw	ra,4(sp)
10005088:	df000017 	ldw	fp,0(sp)
1000508c:	dec00204 	addi	sp,sp,8
10005090:	f800283a 	ret

10005094 <UsbSetAddress>:


void UsbSetAddress()
{
10005094:	defffe04 	addi	sp,sp,-8
10005098:	dfc00115 	stw	ra,4(sp)
1000509c:	df000015 	stw	fp,0(sp)
100050a0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100050a4:	01414004 	movi	r5,1280
100050a8:	01000084 	movi	r4,2
100050ac:	0003f700 	call	10003f70 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100050b0:	01414304 	movi	r5,1292
100050b4:	0009883a 	mov	r4,zero
100050b8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100050bc:	01400204 	movi	r5,8
100050c0:	0009883a 	mov	r4,zero
100050c4:	0003f700 	call	10003f70 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100050c8:	01403404 	movi	r5,208
100050cc:	0009883a 	mov	r4,zero
100050d0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
100050d4:	01400044 	movi	r5,1
100050d8:	0009883a 	mov	r4,zero
100050dc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
100050e0:	014004c4 	movi	r5,19
100050e4:	0009883a 	mov	r4,zero
100050e8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
100050ec:	01414504 	movi	r5,1300
100050f0:	0009883a 	mov	r4,zero
100050f4:	0003f700 	call	10003f70 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100050f8:	01414004 	movi	r5,1280
100050fc:	0009883a 	mov	r4,zero
10005100:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0002);
10005104:	01400084 	movi	r5,2
10005108:	0009883a 	mov	r4,zero
1000510c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005110:	000b883a 	mov	r5,zero
10005114:	0009883a 	mov	r4,zero
10005118:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000511c:	000b883a 	mov	r5,zero
10005120:	0009883a 	mov	r4,zero
10005124:	0003f700 	call	10003f70 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10005128:	000b883a 	mov	r5,zero
1000512c:	0009883a 	mov	r4,zero
10005130:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10005134:	000b883a 	mov	r5,zero
10005138:	0009883a 	mov	r4,zero
1000513c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10005140:	01402404 	movi	r5,144
10005144:	0009883a 	mov	r4,zero
10005148:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000514c:	01401044 	movi	r5,65
10005150:	0009883a 	mov	r4,zero
10005154:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005158:	014004c4 	movi	r5,19
1000515c:	0009883a 	mov	r4,zero
10005160:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005164:	000b883a 	mov	r5,zero
10005168:	0009883a 	mov	r4,zero
1000516c:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005170:	01414004 	movi	r5,1280
10005174:	01006c04 	movi	r4,432
10005178:	0004f440 	call	10004f44 <UsbWrite>
}
1000517c:	0001883a 	nop
10005180:	e037883a 	mov	sp,fp
10005184:	dfc00117 	ldw	ra,4(sp)
10005188:	df000017 	ldw	fp,0(sp)
1000518c:	dec00204 	addi	sp,sp,8
10005190:	f800283a 	ret

10005194 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10005194:	defffe04 	addi	sp,sp,-8
10005198:	dfc00115 	stw	ra,4(sp)
1000519c:	df000015 	stw	fp,0(sp)
100051a0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100051a4:	01414004 	movi	r5,1280
100051a8:	01000084 	movi	r4,2
100051ac:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
100051b0:	01414304 	movi	r5,1292
100051b4:	0009883a 	mov	r4,zero
100051b8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100051bc:	01400204 	movi	r5,8
100051c0:	0009883a 	mov	r4,zero
100051c4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100051c8:	0140b404 	movi	r5,720
100051cc:	0009883a 	mov	r4,zero
100051d0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
100051d4:	01400044 	movi	r5,1
100051d8:	0009883a 	mov	r4,zero
100051dc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
100051e0:	014004c4 	movi	r5,19
100051e4:	0009883a 	mov	r4,zero
100051e8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
100051ec:	01414504 	movi	r5,1300
100051f0:	0009883a 	mov	r4,zero
100051f4:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100051f8:	0141a004 	movi	r5,1664
100051fc:	0009883a 	mov	r4,zero
10005200:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10005204:	01404004 	movi	r5,256
10005208:	0009883a 	mov	r4,zero
1000520c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005210:	000b883a 	mov	r5,zero
10005214:	0009883a 	mov	r4,zero
10005218:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000521c:	01400204 	movi	r5,8
10005220:	0009883a 	mov	r4,zero
10005224:	0003f700 	call	10003f70 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10005228:	01414b04 	movi	r5,1324
1000522c:	0009883a 	mov	r4,zero
10005230:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10005234:	01400204 	movi	r5,8
10005238:	0009883a 	mov	r4,zero
1000523c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10005240:	0140a404 	movi	r5,656
10005244:	0009883a 	mov	r4,zero
10005248:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000524c:	01401044 	movi	r5,65
10005250:	0009883a 	mov	r4,zero
10005254:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005258:	014004c4 	movi	r5,19
1000525c:	0009883a 	mov	r4,zero
10005260:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);
10005264:	01414804 	movi	r5,1312
10005268:	0009883a 	mov	r4,zero
1000526c:	0003f700 	call	10003f70 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10005270:	000b883a 	mov	r5,zero
10005274:	0009883a 	mov	r4,zero
10005278:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000527c:	000b883a 	mov	r5,zero
10005280:	0009883a 	mov	r4,zero
10005284:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10005288:	01408404 	movi	r5,528
1000528c:	0009883a 	mov	r4,zero
10005290:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);
10005294:	01401044 	movi	r5,65
10005298:	0009883a 	mov	r4,zero
1000529c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
100052a0:	014004c4 	movi	r5,19
100052a4:	0009883a 	mov	r4,zero
100052a8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
100052ac:	000b883a 	mov	r5,zero
100052b0:	0009883a 	mov	r4,zero
100052b4:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100052b8:	01414004 	movi	r5,1280
100052bc:	01006c04 	movi	r4,432
100052c0:	0004f440 	call	10004f44 <UsbWrite>
}
100052c4:	0001883a 	nop
100052c8:	e037883a 	mov	sp,fp
100052cc:	dfc00117 	ldw	ra,4(sp)
100052d0:	df000017 	ldw	fp,0(sp)
100052d4:	dec00204 	addi	sp,sp,8
100052d8:	f800283a 	ret

100052dc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100052dc:	defffe04 	addi	sp,sp,-8
100052e0:	dfc00115 	stw	ra,4(sp)
100052e4:	df000015 	stw	fp,0(sp)
100052e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100052ec:	01414004 	movi	r5,1280
100052f0:	01000084 	movi	r4,2
100052f4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
100052f8:	01414304 	movi	r5,1292
100052fc:	0009883a 	mov	r4,zero
10005300:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005304:	01400204 	movi	r5,8
10005308:	0009883a 	mov	r4,zero
1000530c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005310:	0140b404 	movi	r5,720
10005314:	0009883a 	mov	r4,zero
10005318:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000531c:	01400044 	movi	r5,1
10005320:	0009883a 	mov	r4,zero
10005324:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005328:	014004c4 	movi	r5,19
1000532c:	0009883a 	mov	r4,zero
10005330:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005334:	01414504 	movi	r5,1300
10005338:	0009883a 	mov	r4,zero
1000533c:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005340:	0141a004 	movi	r5,1664
10005344:	0009883a 	mov	r4,zero
10005348:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000534c:	01404004 	movi	r5,256
10005350:	0009883a 	mov	r4,zero
10005354:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005358:	000b883a 	mov	r5,zero
1000535c:	0009883a 	mov	r4,zero
10005360:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10005364:	01400484 	movi	r5,18
10005368:	0009883a 	mov	r4,zero
1000536c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10005370:	01415104 	movi	r5,1348
10005374:	0009883a 	mov	r4,zero
10005378:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000537c:	01400204 	movi	r5,8
10005380:	0009883a 	mov	r4,zero
10005384:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005388:	0140a404 	movi	r5,656
1000538c:	0009883a 	mov	r4,zero
10005390:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005394:	01401044 	movi	r5,65
10005398:	0009883a 	mov	r4,zero
1000539c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100053a0:	014004c4 	movi	r5,19
100053a4:	0009883a 	mov	r4,zero
100053a8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100053ac:	01414804 	movi	r5,1312
100053b0:	0009883a 	mov	r4,zero
100053b4:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100053b8:	01415304 	movi	r5,1356
100053bc:	0009883a 	mov	r4,zero
100053c0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100053c4:	01400204 	movi	r5,8
100053c8:	0009883a 	mov	r4,zero
100053cc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100053d0:	0140a404 	movi	r5,656
100053d4:	0009883a 	mov	r4,zero
100053d8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100053dc:	01400044 	movi	r5,1
100053e0:	0009883a 	mov	r4,zero
100053e4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100053e8:	014004c4 	movi	r5,19
100053ec:	0009883a 	mov	r4,zero
100053f0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100053f4:	01414b04 	movi	r5,1324
100053f8:	0009883a 	mov	r4,zero
100053fc:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10005400:	01415504 	movi	r5,1364
10005404:	0009883a 	mov	r4,zero
10005408:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000540c:	01400084 	movi	r5,2
10005410:	0009883a 	mov	r4,zero
10005414:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10005418:	0140a404 	movi	r5,656
1000541c:	0009883a 	mov	r4,zero
10005420:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005424:	01401044 	movi	r5,65
10005428:	0009883a 	mov	r4,zero
1000542c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005430:	014004c4 	movi	r5,19
10005434:	0009883a 	mov	r4,zero
10005438:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000543c:	01414e04 	movi	r5,1336
10005440:	0009883a 	mov	r4,zero
10005444:	0003f700 	call	10003f70 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10005448:	000b883a 	mov	r5,zero
1000544c:	0009883a 	mov	r4,zero
10005450:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10005454:	000b883a 	mov	r5,zero
10005458:	0009883a 	mov	r4,zero
1000545c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10005460:	01408404 	movi	r5,528
10005464:	0009883a 	mov	r4,zero
10005468:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000546c:	01401044 	movi	r5,65
10005470:	0009883a 	mov	r4,zero
10005474:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10005478:	014004c4 	movi	r5,19
1000547c:	0009883a 	mov	r4,zero
10005480:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10005484:	000b883a 	mov	r5,zero
10005488:	0009883a 	mov	r4,zero
1000548c:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005490:	01414004 	movi	r5,1280
10005494:	01006c04 	movi	r4,432
10005498:	0004f440 	call	10004f44 <UsbWrite>
}
1000549c:	0001883a 	nop
100054a0:	e037883a 	mov	sp,fp
100054a4:	dfc00117 	ldw	ra,4(sp)
100054a8:	df000017 	ldw	fp,0(sp)
100054ac:	dec00204 	addi	sp,sp,8
100054b0:	f800283a 	ret

100054b4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100054b4:	defffe04 	addi	sp,sp,-8
100054b8:	dfc00115 	stw	ra,4(sp)
100054bc:	df000015 	stw	fp,0(sp)
100054c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100054c4:	01414004 	movi	r5,1280
100054c8:	01000084 	movi	r4,2
100054cc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
100054d0:	01414304 	movi	r5,1292
100054d4:	0009883a 	mov	r4,zero
100054d8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100054dc:	01400204 	movi	r5,8
100054e0:	0009883a 	mov	r4,zero
100054e4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100054e8:	0140b404 	movi	r5,720
100054ec:	0009883a 	mov	r4,zero
100054f0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
100054f4:	01400044 	movi	r5,1
100054f8:	0009883a 	mov	r4,zero
100054fc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005500:	014004c4 	movi	r5,19
10005504:	0009883a 	mov	r4,zero
10005508:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000550c:	01414504 	movi	r5,1300
10005510:	0009883a 	mov	r4,zero
10005514:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005518:	0141a004 	movi	r5,1664
1000551c:	0009883a 	mov	r4,zero
10005520:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10005524:	01408004 	movi	r5,512
10005528:	0009883a 	mov	r4,zero
1000552c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005530:	000b883a 	mov	r5,zero
10005534:	0009883a 	mov	r4,zero
10005538:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000553c:	01400244 	movi	r5,9
10005540:	0009883a 	mov	r4,zero
10005544:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10005548:	01415104 	movi	r5,1348
1000554c:	0009883a 	mov	r4,zero
10005550:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005554:	01400204 	movi	r5,8
10005558:	0009883a 	mov	r4,zero
1000555c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005560:	0140a404 	movi	r5,656
10005564:	0009883a 	mov	r4,zero
10005568:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000556c:	01401044 	movi	r5,65
10005570:	0009883a 	mov	r4,zero
10005574:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005578:	014004c4 	movi	r5,19
1000557c:	0009883a 	mov	r4,zero
10005580:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005584:	01414804 	movi	r5,1312
10005588:	0009883a 	mov	r4,zero
1000558c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10005590:	01415304 	movi	r5,1356
10005594:	0009883a 	mov	r4,zero
10005598:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
1000559c:	01400044 	movi	r5,1
100055a0:	0009883a 	mov	r4,zero
100055a4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100055a8:	0140a404 	movi	r5,656
100055ac:	0009883a 	mov	r4,zero
100055b0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100055b4:	01400044 	movi	r5,1
100055b8:	0009883a 	mov	r4,zero
100055bc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100055c0:	014004c4 	movi	r5,19
100055c4:	0009883a 	mov	r4,zero
100055c8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100055cc:	01414b04 	movi	r5,1324
100055d0:	0009883a 	mov	r4,zero
100055d4:	0003f700 	call	10003f70 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100055d8:	000b883a 	mov	r5,zero
100055dc:	0009883a 	mov	r4,zero
100055e0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100055e4:	000b883a 	mov	r5,zero
100055e8:	0009883a 	mov	r4,zero
100055ec:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100055f0:	01408404 	movi	r5,528
100055f4:	0009883a 	mov	r4,zero
100055f8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100055fc:	01401044 	movi	r5,65
10005600:	0009883a 	mov	r4,zero
10005604:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005608:	014004c4 	movi	r5,19
1000560c:	0009883a 	mov	r4,zero
10005610:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005614:	000b883a 	mov	r5,zero
10005618:	0009883a 	mov	r4,zero
1000561c:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005620:	01414004 	movi	r5,1280
10005624:	01006c04 	movi	r4,432
10005628:	0004f440 	call	10004f44 <UsbWrite>
}
1000562c:	0001883a 	nop
10005630:	e037883a 	mov	sp,fp
10005634:	dfc00117 	ldw	ra,4(sp)
10005638:	df000017 	ldw	fp,0(sp)
1000563c:	dec00204 	addi	sp,sp,8
10005640:	f800283a 	ret

10005644 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10005644:	defffe04 	addi	sp,sp,-8
10005648:	dfc00115 	stw	ra,4(sp)
1000564c:	df000015 	stw	fp,0(sp)
10005650:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005654:	01414004 	movi	r5,1280
10005658:	01000084 	movi	r4,2
1000565c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005660:	01414304 	movi	r5,1292
10005664:	0009883a 	mov	r4,zero
10005668:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000566c:	01400204 	movi	r5,8
10005670:	0009883a 	mov	r4,zero
10005674:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005678:	0140b404 	movi	r5,720
1000567c:	0009883a 	mov	r4,zero
10005680:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005684:	01400044 	movi	r5,1
10005688:	0009883a 	mov	r4,zero
1000568c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005690:	014004c4 	movi	r5,19
10005694:	0009883a 	mov	r4,zero
10005698:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000569c:	01414504 	movi	r5,1300
100056a0:	0009883a 	mov	r4,zero
100056a4:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100056a8:	0141a004 	movi	r5,1664
100056ac:	0009883a 	mov	r4,zero
100056b0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100056b4:	01408004 	movi	r5,512
100056b8:	0009883a 	mov	r4,zero
100056bc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100056c0:	000b883a 	mov	r5,zero
100056c4:	0009883a 	mov	r4,zero
100056c8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100056cc:	01403fc4 	movi	r5,255
100056d0:	0009883a 	mov	r4,zero
100056d4:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100056d8:	01415704 	movi	r5,1372
100056dc:	0009883a 	mov	r4,zero
100056e0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100056e4:	01400204 	movi	r5,8
100056e8:	0009883a 	mov	r4,zero
100056ec:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100056f0:	0140a404 	movi	r5,656
100056f4:	0009883a 	mov	r4,zero
100056f8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100056fc:	01401044 	movi	r5,65
10005700:	0009883a 	mov	r4,zero
10005704:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005708:	014004c4 	movi	r5,19
1000570c:	0009883a 	mov	r4,zero
10005710:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005714:	01414804 	movi	r5,1312
10005718:	0009883a 	mov	r4,zero
1000571c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10005720:	01415904 	movi	r5,1380
10005724:	0009883a 	mov	r4,zero
10005728:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000572c:	01400204 	movi	r5,8
10005730:	0009883a 	mov	r4,zero
10005734:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005738:	0140a404 	movi	r5,656
1000573c:	0009883a 	mov	r4,zero
10005740:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005744:	01400044 	movi	r5,1
10005748:	0009883a 	mov	r4,zero
1000574c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005750:	014004c4 	movi	r5,19
10005754:	0009883a 	mov	r4,zero
10005758:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000575c:	01414b04 	movi	r5,1324
10005760:	0009883a 	mov	r4,zero
10005764:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10005768:	01415b04 	movi	r5,1388
1000576c:	0009883a 	mov	r4,zero
10005770:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10005774:	01400204 	movi	r5,8
10005778:	0009883a 	mov	r4,zero
1000577c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10005780:	0140a404 	movi	r5,656
10005784:	0009883a 	mov	r4,zero
10005788:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000578c:	01401044 	movi	r5,65
10005790:	0009883a 	mov	r4,zero
10005794:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005798:	014004c4 	movi	r5,19
1000579c:	0009883a 	mov	r4,zero
100057a0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100057a4:	01414e04 	movi	r5,1336
100057a8:	0009883a 	mov	r4,zero
100057ac:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100057b0:	01415d04 	movi	r5,1396
100057b4:	0009883a 	mov	r4,zero
100057b8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100057bc:	01400204 	movi	r5,8
100057c0:	0009883a 	mov	r4,zero
100057c4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100057c8:	0140a404 	movi	r5,656
100057cc:	0009883a 	mov	r4,zero
100057d0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100057d4:	01400044 	movi	r5,1
100057d8:	0009883a 	mov	r4,zero
100057dc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100057e0:	014004c4 	movi	r5,19
100057e4:	0009883a 	mov	r4,zero
100057e8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100057ec:	01415104 	movi	r5,1348
100057f0:	0009883a 	mov	r4,zero
100057f4:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100057f8:	01415f04 	movi	r5,1404
100057fc:	0009883a 	mov	r4,zero
10005800:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10005804:	01400084 	movi	r5,2
10005808:	0009883a 	mov	r4,zero
1000580c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005810:	0140a404 	movi	r5,656
10005814:	0009883a 	mov	r4,zero
10005818:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000581c:	01401044 	movi	r5,65
10005820:	0009883a 	mov	r4,zero
10005824:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005828:	014004c4 	movi	r5,19
1000582c:	0009883a 	mov	r4,zero
10005830:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10005834:	01415404 	movi	r5,1360
10005838:	0009883a 	mov	r4,zero
1000583c:	0003f700 	call	10003f70 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10005840:	000b883a 	mov	r5,zero
10005844:	0009883a 	mov	r4,zero
10005848:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000584c:	000b883a 	mov	r5,zero
10005850:	0009883a 	mov	r4,zero
10005854:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10005858:	01408404 	movi	r5,528
1000585c:	0009883a 	mov	r4,zero
10005860:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10005864:	01401044 	movi	r5,65
10005868:	0009883a 	mov	r4,zero
1000586c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005870:	014004c4 	movi	r5,19
10005874:	0009883a 	mov	r4,zero
10005878:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000587c:	000b883a 	mov	r5,zero
10005880:	0009883a 	mov	r4,zero
10005884:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005888:	01414004 	movi	r5,1280
1000588c:	01006c04 	movi	r4,432
10005890:	0004f440 	call	10004f44 <UsbWrite>
}
10005894:	0001883a 	nop
10005898:	e037883a 	mov	sp,fp
1000589c:	dfc00117 	ldw	ra,4(sp)
100058a0:	df000017 	ldw	fp,0(sp)
100058a4:	dec00204 	addi	sp,sp,8
100058a8:	f800283a 	ret

100058ac <UsbSetConfig>:

void UsbSetConfig()
{
100058ac:	defffe04 	addi	sp,sp,-8
100058b0:	dfc00115 	stw	ra,4(sp)
100058b4:	df000015 	stw	fp,0(sp)
100058b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100058bc:	01414004 	movi	r5,1280
100058c0:	01000084 	movi	r4,2
100058c4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
100058c8:	01414304 	movi	r5,1292
100058cc:	0009883a 	mov	r4,zero
100058d0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100058d4:	01400204 	movi	r5,8
100058d8:	0009883a 	mov	r4,zero
100058dc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100058e0:	0140b404 	movi	r5,720
100058e4:	0009883a 	mov	r4,zero
100058e8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
100058ec:	01400044 	movi	r5,1
100058f0:	0009883a 	mov	r4,zero
100058f4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
100058f8:	014004c4 	movi	r5,19
100058fc:	0009883a 	mov	r4,zero
10005900:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005904:	01414504 	movi	r5,1300
10005908:	0009883a 	mov	r4,zero
1000590c:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10005910:	01424004 	movi	r5,2304
10005914:	0009883a 	mov	r4,zero
10005918:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
1000591c:	01400044 	movi	r5,1
10005920:	0009883a 	mov	r4,zero
10005924:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005928:	000b883a 	mov	r5,zero
1000592c:	0009883a 	mov	r4,zero
10005930:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005934:	000b883a 	mov	r5,zero
10005938:	0009883a 	mov	r4,zero
1000593c:	0003f700 	call	10003f70 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10005940:	000b883a 	mov	r5,zero
10005944:	0009883a 	mov	r4,zero
10005948:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000594c:	000b883a 	mov	r5,zero
10005950:	0009883a 	mov	r4,zero
10005954:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10005958:	0140a404 	movi	r5,656
1000595c:	0009883a 	mov	r4,zero
10005960:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10005964:	01401044 	movi	r5,65
10005968:	0009883a 	mov	r4,zero
1000596c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005970:	014004c4 	movi	r5,19
10005974:	0009883a 	mov	r4,zero
10005978:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000597c:	000b883a 	mov	r5,zero
10005980:	0009883a 	mov	r4,zero
10005984:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005988:	01414004 	movi	r5,1280
1000598c:	01006c04 	movi	r4,432
10005990:	0004f440 	call	10004f44 <UsbWrite>

}
10005994:	0001883a 	nop
10005998:	e037883a 	mov	sp,fp
1000599c:	dfc00117 	ldw	ra,4(sp)
100059a0:	df000017 	ldw	fp,0(sp)
100059a4:	dec00204 	addi	sp,sp,8
100059a8:	f800283a 	ret

100059ac <UsbClassRequest>:

void UsbClassRequest()
{
100059ac:	defffe04 	addi	sp,sp,-8
100059b0:	dfc00115 	stw	ra,4(sp)
100059b4:	df000015 	stw	fp,0(sp)
100059b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100059bc:	01414004 	movi	r5,1280
100059c0:	01000084 	movi	r4,2
100059c4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
100059c8:	01414304 	movi	r5,1292
100059cc:	0009883a 	mov	r4,zero
100059d0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100059d4:	01400204 	movi	r5,8
100059d8:	0009883a 	mov	r4,zero
100059dc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100059e0:	0140b404 	movi	r5,720
100059e4:	0009883a 	mov	r4,zero
100059e8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
100059ec:	01400044 	movi	r5,1
100059f0:	0009883a 	mov	r4,zero
100059f4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
100059f8:	014004c4 	movi	r5,19
100059fc:	0009883a 	mov	r4,zero
10005a00:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005a04:	01414504 	movi	r5,1300
10005a08:	0009883a 	mov	r4,zero
10005a0c:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10005a10:	01428844 	movi	r5,2593
10005a14:	0009883a 	mov	r4,zero
10005a18:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10005a1c:	000b883a 	mov	r5,zero
10005a20:	0009883a 	mov	r4,zero
10005a24:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005a28:	000b883a 	mov	r5,zero
10005a2c:	0009883a 	mov	r4,zero
10005a30:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005a34:	000b883a 	mov	r5,zero
10005a38:	0009883a 	mov	r4,zero
10005a3c:	0003f700 	call	10003f70 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10005a40:	000b883a 	mov	r5,zero
10005a44:	0009883a 	mov	r4,zero
10005a48:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10005a4c:	000b883a 	mov	r5,zero
10005a50:	0009883a 	mov	r4,zero
10005a54:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10005a58:	0140a404 	movi	r5,656
10005a5c:	0009883a 	mov	r4,zero
10005a60:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10005a64:	01401044 	movi	r5,65
10005a68:	0009883a 	mov	r4,zero
10005a6c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005a70:	014004c4 	movi	r5,19
10005a74:	0009883a 	mov	r4,zero
10005a78:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005a7c:	000b883a 	mov	r5,zero
10005a80:	0009883a 	mov	r4,zero
10005a84:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005a88:	01414004 	movi	r5,1280
10005a8c:	01006c04 	movi	r4,432
10005a90:	0004f440 	call	10004f44 <UsbWrite>
}
10005a94:	0001883a 	nop
10005a98:	e037883a 	mov	sp,fp
10005a9c:	dfc00117 	ldw	ra,4(sp)
10005aa0:	df000017 	ldw	fp,0(sp)
10005aa4:	dec00204 	addi	sp,sp,8
10005aa8:	f800283a 	ret

10005aac <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10005aac:	defffe04 	addi	sp,sp,-8
10005ab0:	dfc00115 	stw	ra,4(sp)
10005ab4:	df000015 	stw	fp,0(sp)
10005ab8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005abc:	01414004 	movi	r5,1280
10005ac0:	01000084 	movi	r4,2
10005ac4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005ac8:	01414304 	movi	r5,1292
10005acc:	0009883a 	mov	r4,zero
10005ad0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005ad4:	01400204 	movi	r5,8
10005ad8:	0009883a 	mov	r4,zero
10005adc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005ae0:	0140b404 	movi	r5,720
10005ae4:	0009883a 	mov	r4,zero
10005ae8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005aec:	01400044 	movi	r5,1
10005af0:	0009883a 	mov	r4,zero
10005af4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005af8:	014004c4 	movi	r5,19
10005afc:	0009883a 	mov	r4,zero
10005b00:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005b04:	01414504 	movi	r5,1300
10005b08:	0009883a 	mov	r4,zero
10005b0c:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10005b10:	0141a044 	movi	r5,1665
10005b14:	0009883a 	mov	r4,zero
10005b18:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10005b1c:	01484004 	movi	r5,8448
10005b20:	0009883a 	mov	r4,zero
10005b24:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005b28:	000b883a 	mov	r5,zero
10005b2c:	0009883a 	mov	r4,zero
10005b30:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10005b34:	01401ec4 	movi	r5,123
10005b38:	0009883a 	mov	r4,zero
10005b3c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10005b40:	01415104 	movi	r5,1348
10005b44:	0009883a 	mov	r4,zero
10005b48:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005b4c:	01400204 	movi	r5,8
10005b50:	0009883a 	mov	r4,zero
10005b54:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005b58:	0140a404 	movi	r5,656
10005b5c:	0009883a 	mov	r4,zero
10005b60:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005b64:	01401044 	movi	r5,65
10005b68:	0009883a 	mov	r4,zero
10005b6c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005b70:	014004c4 	movi	r5,19
10005b74:	0009883a 	mov	r4,zero
10005b78:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005b7c:	01414804 	movi	r5,1312
10005b80:	0009883a 	mov	r4,zero
10005b84:	0003f700 	call	10003f70 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10005b88:	000b883a 	mov	r5,zero
10005b8c:	0009883a 	mov	r4,zero
10005b90:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005b94:	000b883a 	mov	r5,zero
10005b98:	0009883a 	mov	r4,zero
10005b9c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10005ba0:	01408404 	movi	r5,528
10005ba4:	0009883a 	mov	r4,zero
10005ba8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005bac:	01401044 	movi	r5,65
10005bb0:	0009883a 	mov	r4,zero
10005bb4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005bb8:	014004c4 	movi	r5,19
10005bbc:	0009883a 	mov	r4,zero
10005bc0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005bc4:	000b883a 	mov	r5,zero
10005bc8:	0009883a 	mov	r4,zero
10005bcc:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005bd0:	01414004 	movi	r5,1280
10005bd4:	01006c04 	movi	r4,432
10005bd8:	0004f440 	call	10004f44 <UsbWrite>

}
10005bdc:	0001883a 	nop
10005be0:	e037883a 	mov	sp,fp
10005be4:	dfc00117 	ldw	ra,4(sp)
10005be8:	df000017 	ldw	fp,0(sp)
10005bec:	dec00204 	addi	sp,sp,8
10005bf0:	f800283a 	ret

10005bf4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10005bf4:	defffe04 	addi	sp,sp,-8
10005bf8:	dfc00115 	stw	ra,4(sp)
10005bfc:	df000015 	stw	fp,0(sp)
10005c00:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005c04:	01414004 	movi	r5,1280
10005c08:	01000084 	movi	r4,2
10005c0c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005c10:	01414304 	movi	r5,1292
10005c14:	0009883a 	mov	r4,zero
10005c18:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005c1c:	01400204 	movi	r5,8
10005c20:	0009883a 	mov	r4,zero
10005c24:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005c28:	0140b404 	movi	r5,720
10005c2c:	0009883a 	mov	r4,zero
10005c30:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005c34:	01400044 	movi	r5,1
10005c38:	0009883a 	mov	r4,zero
10005c3c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005c40:	014004c4 	movi	r5,19
10005c44:	0009883a 	mov	r4,zero
10005c48:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005c4c:	01414504 	movi	r5,1300
10005c50:	0009883a 	mov	r4,zero
10005c54:	0003f700 	call	10003f70 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10005c58:	0141a044 	movi	r5,1665
10005c5c:	0009883a 	mov	r4,zero
10005c60:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10005c64:	01488004 	movi	r5,8704
10005c68:	0009883a 	mov	r4,zero
10005c6c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005c70:	000b883a 	mov	r5,zero
10005c74:	0009883a 	mov	r4,zero
10005c78:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10005c7c:	01401ec4 	movi	r5,123
10005c80:	0009883a 	mov	r4,zero
10005c84:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10005c88:	01416004 	movi	r5,1408
10005c8c:	0009883a 	mov	r4,zero
10005c90:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005c94:	01400204 	movi	r5,8
10005c98:	0009883a 	mov	r4,zero
10005c9c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005ca0:	0140a404 	movi	r5,656
10005ca4:	0009883a 	mov	r4,zero
10005ca8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005cac:	01401044 	movi	r5,65
10005cb0:	0009883a 	mov	r4,zero
10005cb4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005cb8:	014004c4 	movi	r5,19
10005cbc:	0009883a 	mov	r4,zero
10005cc0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005cc4:	01414804 	movi	r5,1312
10005cc8:	0009883a 	mov	r4,zero
10005ccc:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10005cd0:	01416204 	movi	r5,1416
10005cd4:	0009883a 	mov	r4,zero
10005cd8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10005cdc:	01400204 	movi	r5,8
10005ce0:	0009883a 	mov	r4,zero
10005ce4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005ce8:	0140a404 	movi	r5,656
10005cec:	0009883a 	mov	r4,zero
10005cf0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005cf4:	01400044 	movi	r5,1
10005cf8:	0009883a 	mov	r4,zero
10005cfc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005d00:	014004c4 	movi	r5,19
10005d04:	0009883a 	mov	r4,zero
10005d08:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10005d0c:	01414b04 	movi	r5,1324
10005d10:	0009883a 	mov	r4,zero
10005d14:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10005d18:	01416404 	movi	r5,1424
10005d1c:	0009883a 	mov	r4,zero
10005d20:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10005d24:	01400204 	movi	r5,8
10005d28:	0009883a 	mov	r4,zero
10005d2c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10005d30:	0140a404 	movi	r5,656
10005d34:	0009883a 	mov	r4,zero
10005d38:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005d3c:	01401044 	movi	r5,65
10005d40:	0009883a 	mov	r4,zero
10005d44:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005d48:	014004c4 	movi	r5,19
10005d4c:	0009883a 	mov	r4,zero
10005d50:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10005d54:	01414e04 	movi	r5,1336
10005d58:	0009883a 	mov	r4,zero
10005d5c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10005d60:	01416604 	movi	r5,1432
10005d64:	0009883a 	mov	r4,zero
10005d68:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10005d6c:	01400204 	movi	r5,8
10005d70:	0009883a 	mov	r4,zero
10005d74:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005d78:	0140a404 	movi	r5,656
10005d7c:	0009883a 	mov	r4,zero
10005d80:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005d84:	01400044 	movi	r5,1
10005d88:	0009883a 	mov	r4,zero
10005d8c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10005d90:	014004c4 	movi	r5,19
10005d94:	0009883a 	mov	r4,zero
10005d98:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10005d9c:	01415104 	movi	r5,1348
10005da0:	0009883a 	mov	r4,zero
10005da4:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10005da8:	01416804 	movi	r5,1440
10005dac:	0009883a 	mov	r4,zero
10005db0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005db4:	01400204 	movi	r5,8
10005db8:	0009883a 	mov	r4,zero
10005dbc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005dc0:	0140a404 	movi	r5,656
10005dc4:	0009883a 	mov	r4,zero
10005dc8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10005dcc:	01401044 	movi	r5,65
10005dd0:	0009883a 	mov	r4,zero
10005dd4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005dd8:	014004c4 	movi	r5,19
10005ddc:	0009883a 	mov	r4,zero
10005de0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10005de4:	01415404 	movi	r5,1360
10005de8:	0009883a 	mov	r4,zero
10005dec:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10005df0:	01416a04 	movi	r5,1448
10005df4:	0009883a 	mov	r4,zero
10005df8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10005dfc:	01400204 	movi	r5,8
10005e00:	0009883a 	mov	r4,zero
10005e04:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005e08:	0140a404 	movi	r5,656
10005e0c:	0009883a 	mov	r4,zero
10005e10:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005e14:	01400044 	movi	r5,1
10005e18:	0009883a 	mov	r4,zero
10005e1c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005e20:	014004c4 	movi	r5,19
10005e24:	0009883a 	mov	r4,zero
10005e28:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10005e2c:	01415704 	movi	r5,1372
10005e30:	0009883a 	mov	r4,zero
10005e34:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10005e38:	01416c04 	movi	r5,1456
10005e3c:	0009883a 	mov	r4,zero
10005e40:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10005e44:	01400204 	movi	r5,8
10005e48:	0009883a 	mov	r4,zero
10005e4c:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10005e50:	0140a404 	movi	r5,656
10005e54:	0009883a 	mov	r4,zero
10005e58:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10005e5c:	01401044 	movi	r5,65
10005e60:	0009883a 	mov	r4,zero
10005e64:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10005e68:	014004c4 	movi	r5,19
10005e6c:	0009883a 	mov	r4,zero
10005e70:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10005e74:	01415a04 	movi	r5,1384
10005e78:	0009883a 	mov	r4,zero
10005e7c:	0003f700 	call	10003f70 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10005e80:	01416e04 	movi	r5,1464
10005e84:	0009883a 	mov	r4,zero
10005e88:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10005e8c:	014000c4 	movi	r5,3
10005e90:	0009883a 	mov	r4,zero
10005e94:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005e98:	0140a404 	movi	r5,656
10005e9c:	0009883a 	mov	r4,zero
10005ea0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005ea4:	01400044 	movi	r5,1
10005ea8:	0009883a 	mov	r4,zero
10005eac:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10005eb0:	014004c4 	movi	r5,19
10005eb4:	0009883a 	mov	r4,zero
10005eb8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10005ebc:	01415d04 	movi	r5,1396
10005ec0:	0009883a 	mov	r4,zero
10005ec4:	0003f700 	call	10003f70 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10005ec8:	000b883a 	mov	r5,zero
10005ecc:	0009883a 	mov	r4,zero
10005ed0:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005ed4:	000b883a 	mov	r5,zero
10005ed8:	0009883a 	mov	r4,zero
10005edc:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10005ee0:	01408404 	movi	r5,528
10005ee4:	0009883a 	mov	r4,zero
10005ee8:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005eec:	01401044 	movi	r5,65
10005ef0:	0009883a 	mov	r4,zero
10005ef4:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005ef8:	014004c4 	movi	r5,19
10005efc:	0009883a 	mov	r4,zero
10005f00:	0003f700 	call	10003f70 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005f04:	000b883a 	mov	r5,zero
10005f08:	0009883a 	mov	r4,zero
10005f0c:	0003f700 	call	10003f70 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005f10:	01414004 	movi	r5,1280
10005f14:	01006c04 	movi	r4,432
10005f18:	0004f440 	call	10004f44 <UsbWrite>

}
10005f1c:	0001883a 	nop
10005f20:	e037883a 	mov	sp,fp
10005f24:	dfc00117 	ldw	ra,4(sp)
10005f28:	df000017 	ldw	fp,0(sp)
10005f2c:	dec00204 	addi	sp,sp,8
10005f30:	f800283a 	ret

10005f34 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10005f34:	defffd04 	addi	sp,sp,-12
10005f38:	dfc00215 	stw	ra,8(sp)
10005f3c:	df000115 	stw	fp,4(sp)
10005f40:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10005f44:	01005104 	movi	r4,324
10005f48:	0004f9c0 	call	10004f9c <UsbRead>
10005f4c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005f50:	000b883a 	mov	r5,zero
10005f54:	01005104 	movi	r4,324
10005f58:	0004f440 	call	10004f44 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10005f5c:	00000d06 	br	10005f94 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10005f60:	e0bfff0b 	ldhu	r2,-4(fp)
10005f64:	10000526 	beq	r2,zero,10005f7c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10005f68:	e0bfff0b 	ldhu	r2,-4(fp)
10005f6c:	100b883a 	mov	r5,r2
10005f70:	010400b4 	movhi	r4,4098
10005f74:	21269204 	addi	r4,r4,-26040
10005f78:	000bfac0 	call	1000bfac <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10005f7c:	01005104 	movi	r4,324
10005f80:	0004f9c0 	call	10004f9c <UsbRead>
10005f84:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005f88:	000b883a 	mov	r5,zero
10005f8c:	01005104 	movi	r4,324
10005f90:	0004f440 	call	10004f44 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10005f94:	e0bfff0b 	ldhu	r2,-4(fp)
10005f98:	10840018 	cmpnei	r2,r2,4096
10005f9c:	103ff01e 	bne	r2,zero,10005f60 <__alt_data_end+0xf8005f60>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10005fa0:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005fa4:	e037883a 	mov	sp,fp
10005fa8:	dfc00117 	ldw	ra,4(sp)
10005fac:	df000017 	ldw	fp,0(sp)
10005fb0:	dec00204 	addi	sp,sp,8
10005fb4:	f800283a 	ret

10005fb8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10005fb8:	defffd04 	addi	sp,sp,-12
10005fbc:	dfc00215 	stw	ra,8(sp)
10005fc0:	df000115 	stw	fp,4(sp)
10005fc4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10005fc8:	010000c4 	movi	r4,3
10005fcc:	0003fe00 	call	10003fe0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10005fd0:	01005104 	movi	r4,324
10005fd4:	0004f9c0 	call	10004f9c <UsbRead>
10005fd8:	10bfffcc 	andi	r2,r2,65535
10005fdc:	10840018 	cmpnei	r2,r2,4096
10005fe0:	1000091e 	bne	r2,zero,10006008 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005fe4:	000b883a 	mov	r5,zero
10005fe8:	01005104 	movi	r4,324
10005fec:	0004f440 	call	10004f44 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005ff0:	0001883a 	nop
10005ff4:	010000c4 	movi	r4,3
10005ff8:	0003fe00 	call	10003fe0 <IO_read>
10005ffc:	10bfffcc 	andi	r2,r2,65535
10006000:	1080040c 	andi	r2,r2,16
10006004:	103ffb26 	beq	r2,zero,10005ff4 <__alt_data_end+0xf8005ff4>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10006008:	01414204 	movi	r5,1288
1000600c:	01000084 	movi	r4,2
10006010:	0003f700 	call	10003f70 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006014:	0009883a 	mov	r4,zero
10006018:	0003fe00 	call	10003fe0 <IO_read>
1000601c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10006020:	e0bfff0b 	ldhu	r2,-4(fp)
}
10006024:	e037883a 	mov	sp,fp
10006028:	dfc00117 	ldw	ra,4(sp)
1000602c:	df000017 	ldw	fp,0(sp)
10006030:	dec00204 	addi	sp,sp,8
10006034:	f800283a 	ret

10006038 <UsbPrintMem>:


void UsbPrintMem()
{
10006038:	defffc04 	addi	sp,sp,-16
1000603c:	dfc00315 	stw	ra,12(sp)
10006040:	df000215 	stw	fp,8(sp)
10006044:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10006048:	01414004 	movi	r5,1280
1000604c:	01000084 	movi	r4,2
10006050:	0003f700 	call	10003f70 <IO_write>
	for (i = 0; i <= 200; i += 2)
10006054:	e03ffe15 	stw	zero,-8(fp)
10006058:	00000e06 	br	10006094 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
1000605c:	0009883a 	mov	r4,zero
10006060:	0003fe00 	call	10003fe0 <IO_read>
10006064:	10bfffcc 	andi	r2,r2,65535
10006068:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
1000606c:	e0bffe17 	ldw	r2,-8(fp)
10006070:	10814004 	addi	r2,r2,1280
10006074:	e1bfff17 	ldw	r6,-4(fp)
10006078:	100b883a 	mov	r5,r2
1000607c:	010400b4 	movhi	r4,4098
10006080:	21269a04 	addi	r4,r4,-26008
10006084:	000bfac0 	call	1000bfac <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10006088:	e0bffe17 	ldw	r2,-8(fp)
1000608c:	10800084 	addi	r2,r2,2
10006090:	e0bffe15 	stw	r2,-8(fp)
10006094:	e0bffe17 	ldw	r2,-8(fp)
10006098:	10803250 	cmplti	r2,r2,201
1000609c:	103fef1e 	bne	r2,zero,1000605c <__alt_data_end+0xf800605c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100060a0:	0001883a 	nop
100060a4:	e037883a 	mov	sp,fp
100060a8:	dfc00117 	ldw	ra,4(sp)
100060ac:	df000017 	ldw	fp,0(sp)
100060b0:	dec00204 	addi	sp,sp,8
100060b4:	f800283a 	ret

100060b8 <cos>:
100060b8:	00a00034 	movhi	r2,32768
100060bc:	defffa04 	addi	sp,sp,-24
100060c0:	10bfffc4 	addi	r2,r2,-1
100060c4:	00cffa74 	movhi	r3,16361
100060c8:	dfc00515 	stw	ra,20(sp)
100060cc:	2884703a 	and	r2,r5,r2
100060d0:	18c87ec4 	addi	r3,r3,8699
100060d4:	1880180e 	bge	r3,r2,10006138 <cos+0x80>
100060d8:	00dffc34 	movhi	r3,32752
100060dc:	18ffffc4 	addi	r3,r3,-1
100060e0:	1880060e 	bge	r3,r2,100060fc <cos+0x44>
100060e4:	280f883a 	mov	r7,r5
100060e8:	200d883a 	mov	r6,r4
100060ec:	000b1bc0 	call	1000b1bc <__subdf3>
100060f0:	dfc00517 	ldw	ra,20(sp)
100060f4:	dec00604 	addi	sp,sp,24
100060f8:	f800283a 	ret
100060fc:	d9800104 	addi	r6,sp,4
10006100:	00062940 	call	10006294 <__ieee754_rem_pio2>
10006104:	108000cc 	andi	r2,r2,3
10006108:	00c00044 	movi	r3,1
1000610c:	10c01726 	beq	r2,r3,1000616c <cos+0xb4>
10006110:	01000084 	movi	r4,2
10006114:	11000e26 	beq	r2,r4,10006150 <cos+0x98>
10006118:	10001c26 	beq	r2,zero,1000618c <cos+0xd4>
1000611c:	d9800317 	ldw	r6,12(sp)
10006120:	d9c00417 	ldw	r7,16(sp)
10006124:	d9000117 	ldw	r4,4(sp)
10006128:	d9400217 	ldw	r5,8(sp)
1000612c:	d8c00015 	stw	r3,0(sp)
10006130:	0007c3c0 	call	10007c3c <__kernel_sin>
10006134:	003fee06 	br	100060f0 <__alt_data_end+0xf80060f0>
10006138:	000d883a 	mov	r6,zero
1000613c:	000f883a 	mov	r7,zero
10006140:	0006a000 	call	10006a00 <__kernel_cos>
10006144:	dfc00517 	ldw	ra,20(sp)
10006148:	dec00604 	addi	sp,sp,24
1000614c:	f800283a 	ret
10006150:	d9800317 	ldw	r6,12(sp)
10006154:	d9c00417 	ldw	r7,16(sp)
10006158:	d9000117 	ldw	r4,4(sp)
1000615c:	d9400217 	ldw	r5,8(sp)
10006160:	0006a000 	call	10006a00 <__kernel_cos>
10006164:	18e0003c 	xorhi	r3,r3,32768
10006168:	003fe106 	br	100060f0 <__alt_data_end+0xf80060f0>
1000616c:	d9800317 	ldw	r6,12(sp)
10006170:	d9c00417 	ldw	r7,16(sp)
10006174:	d9000117 	ldw	r4,4(sp)
10006178:	d9400217 	ldw	r5,8(sp)
1000617c:	d8800015 	stw	r2,0(sp)
10006180:	0007c3c0 	call	10007c3c <__kernel_sin>
10006184:	18e0003c 	xorhi	r3,r3,32768
10006188:	003fd906 	br	100060f0 <__alt_data_end+0xf80060f0>
1000618c:	d9800317 	ldw	r6,12(sp)
10006190:	d9c00417 	ldw	r7,16(sp)
10006194:	d9000117 	ldw	r4,4(sp)
10006198:	d9400217 	ldw	r5,8(sp)
1000619c:	0006a000 	call	10006a00 <__kernel_cos>
100061a0:	003fd306 	br	100060f0 <__alt_data_end+0xf80060f0>

100061a4 <sin>:
100061a4:	00a00034 	movhi	r2,32768
100061a8:	defffa04 	addi	sp,sp,-24
100061ac:	10bfffc4 	addi	r2,r2,-1
100061b0:	00cffa74 	movhi	r3,16361
100061b4:	dfc00515 	stw	ra,20(sp)
100061b8:	2884703a 	and	r2,r5,r2
100061bc:	18c87ec4 	addi	r3,r3,8699
100061c0:	1880180e 	bge	r3,r2,10006224 <sin+0x80>
100061c4:	00dffc34 	movhi	r3,32752
100061c8:	18ffffc4 	addi	r3,r3,-1
100061cc:	1880060e 	bge	r3,r2,100061e8 <sin+0x44>
100061d0:	280f883a 	mov	r7,r5
100061d4:	200d883a 	mov	r6,r4
100061d8:	000b1bc0 	call	1000b1bc <__subdf3>
100061dc:	dfc00517 	ldw	ra,20(sp)
100061e0:	dec00604 	addi	sp,sp,24
100061e4:	f800283a 	ret
100061e8:	d9800104 	addi	r6,sp,4
100061ec:	00062940 	call	10006294 <__ieee754_rem_pio2>
100061f0:	108000cc 	andi	r2,r2,3
100061f4:	00c00044 	movi	r3,1
100061f8:	10c01926 	beq	r2,r3,10006260 <sin+0xbc>
100061fc:	01000084 	movi	r4,2
10006200:	11000f26 	beq	r2,r4,10006240 <sin+0x9c>
10006204:	10001c26 	beq	r2,zero,10006278 <sin+0xd4>
10006208:	d9800317 	ldw	r6,12(sp)
1000620c:	d9c00417 	ldw	r7,16(sp)
10006210:	d9000117 	ldw	r4,4(sp)
10006214:	d9400217 	ldw	r5,8(sp)
10006218:	0006a000 	call	10006a00 <__kernel_cos>
1000621c:	18e0003c 	xorhi	r3,r3,32768
10006220:	003fee06 	br	100061dc <__alt_data_end+0xf80061dc>
10006224:	d8000015 	stw	zero,0(sp)
10006228:	000d883a 	mov	r6,zero
1000622c:	000f883a 	mov	r7,zero
10006230:	0007c3c0 	call	10007c3c <__kernel_sin>
10006234:	dfc00517 	ldw	ra,20(sp)
10006238:	dec00604 	addi	sp,sp,24
1000623c:	f800283a 	ret
10006240:	d9800317 	ldw	r6,12(sp)
10006244:	d9c00417 	ldw	r7,16(sp)
10006248:	d9000117 	ldw	r4,4(sp)
1000624c:	d9400217 	ldw	r5,8(sp)
10006250:	d8c00015 	stw	r3,0(sp)
10006254:	0007c3c0 	call	10007c3c <__kernel_sin>
10006258:	18e0003c 	xorhi	r3,r3,32768
1000625c:	003fdf06 	br	100061dc <__alt_data_end+0xf80061dc>
10006260:	d9800317 	ldw	r6,12(sp)
10006264:	d9c00417 	ldw	r7,16(sp)
10006268:	d9000117 	ldw	r4,4(sp)
1000626c:	d9400217 	ldw	r5,8(sp)
10006270:	0006a000 	call	10006a00 <__kernel_cos>
10006274:	003fd906 	br	100061dc <__alt_data_end+0xf80061dc>
10006278:	d9800317 	ldw	r6,12(sp)
1000627c:	d9c00417 	ldw	r7,16(sp)
10006280:	d9000117 	ldw	r4,4(sp)
10006284:	d9400217 	ldw	r5,8(sp)
10006288:	d8c00015 	stw	r3,0(sp)
1000628c:	0007c3c0 	call	10007c3c <__kernel_sin>
10006290:	003fd206 	br	100061dc <__alt_data_end+0xf80061dc>

10006294 <__ieee754_rem_pio2>:
10006294:	02200034 	movhi	r8,32768
10006298:	deffea04 	addi	sp,sp,-88
1000629c:	423fffc4 	addi	r8,r8,-1
100062a0:	00cffa74 	movhi	r3,16361
100062a4:	ddc01315 	stw	r23,76(sp)
100062a8:	dc400d15 	stw	r17,52(sp)
100062ac:	dfc01515 	stw	ra,84(sp)
100062b0:	df001415 	stw	fp,80(sp)
100062b4:	dd801215 	stw	r22,72(sp)
100062b8:	dd401115 	stw	r21,68(sp)
100062bc:	dd001015 	stw	r20,64(sp)
100062c0:	dcc00f15 	stw	r19,60(sp)
100062c4:	dc800e15 	stw	r18,56(sp)
100062c8:	dc000c15 	stw	r16,48(sp)
100062cc:	2a2e703a 	and	r23,r5,r8
100062d0:	18c87ec4 	addi	r3,r3,8699
100062d4:	2823883a 	mov	r17,r5
100062d8:	1dc0790e 	bge	r3,r23,100064c0 <__ieee754_rem_pio2+0x22c>
100062dc:	009000f4 	movhi	r2,16387
100062e0:	10b65ec4 	addi	r2,r2,-9861
100062e4:	3021883a 	mov	r16,r6
100062e8:	2027883a 	mov	r19,r4
100062ec:	15c02316 	blt	r2,r23,1000637c <__ieee754_rem_pio2+0xe8>
100062f0:	01cffe74 	movhi	r7,16377
100062f4:	39c87ec4 	addi	r7,r7,8699
100062f8:	01951034 	movhi	r6,21568
100062fc:	01417a0e 	bge	zero,r5,100068e8 <__ieee754_rem_pio2+0x654>
10006300:	000b1bc0 	call	1000b1bc <__subdf3>
10006304:	1025883a 	mov	r18,r2
10006308:	008ffe74 	movhi	r2,16377
1000630c:	10887ec4 	addi	r2,r2,8699
10006310:	1823883a 	mov	r17,r3
10006314:	b8808426 	beq	r23,r2,10006528 <__ieee754_rem_pio2+0x294>
10006318:	018698b4 	movhi	r6,6754
1000631c:	01cf7474 	movhi	r7,15825
10006320:	3198cc44 	addi	r6,r6,25393
10006324:	39ed1844 	addi	r7,r7,-19359
10006328:	9009883a 	mov	r4,r18
1000632c:	180b883a 	mov	r5,r3
10006330:	000b1bc0 	call	1000b1bc <__subdf3>
10006334:	100d883a 	mov	r6,r2
10006338:	180f883a 	mov	r7,r3
1000633c:	9009883a 	mov	r4,r18
10006340:	880b883a 	mov	r5,r17
10006344:	80800015 	stw	r2,0(r16)
10006348:	80c00115 	stw	r3,4(r16)
1000634c:	000b1bc0 	call	1000b1bc <__subdf3>
10006350:	018698b4 	movhi	r6,6754
10006354:	01cf7474 	movhi	r7,15825
10006358:	3198cc44 	addi	r6,r6,25393
1000635c:	39ed1844 	addi	r7,r7,-19359
10006360:	1009883a 	mov	r4,r2
10006364:	180b883a 	mov	r5,r3
10006368:	000b1bc0 	call	1000b1bc <__subdf3>
1000636c:	80800215 	stw	r2,8(r16)
10006370:	80c00315 	stw	r3,12(r16)
10006374:	00800044 	movi	r2,1
10006378:	00005606 	br	100064d4 <__ieee754_rem_pio2+0x240>
1000637c:	00904e74 	movhi	r2,16697
10006380:	10887ec4 	addi	r2,r2,8699
10006384:	15c0830e 	bge	r2,r23,10006594 <__ieee754_rem_pio2+0x300>
10006388:	009ffc34 	movhi	r2,32752
1000638c:	10bfffc4 	addi	r2,r2,-1
10006390:	15c05c16 	blt	r2,r23,10006504 <__ieee754_rem_pio2+0x270>
10006394:	b829d53a 	srai	r20,r23,20
10006398:	a53efa84 	addi	r20,r20,-1046
1000639c:	a024953a 	slli	r18,r20,20
100063a0:	bca5c83a 	sub	r18,r23,r18
100063a4:	900b883a 	mov	r5,r18
100063a8:	000bab80 	call	1000bab8 <__fixdfsi>
100063ac:	1009883a 	mov	r4,r2
100063b0:	000bb380 	call	1000bb38 <__floatsidf>
100063b4:	9809883a 	mov	r4,r19
100063b8:	900b883a 	mov	r5,r18
100063bc:	100d883a 	mov	r6,r2
100063c0:	180f883a 	mov	r7,r3
100063c4:	d8800215 	stw	r2,8(sp)
100063c8:	d8c00315 	stw	r3,12(sp)
100063cc:	000b1bc0 	call	1000b1bc <__subdf3>
100063d0:	000d883a 	mov	r6,zero
100063d4:	01d05c34 	movhi	r7,16752
100063d8:	1009883a 	mov	r4,r2
100063dc:	180b883a 	mov	r5,r3
100063e0:	000a9500 	call	1000a950 <__muldf3>
100063e4:	180b883a 	mov	r5,r3
100063e8:	1009883a 	mov	r4,r2
100063ec:	182b883a 	mov	r21,r3
100063f0:	102d883a 	mov	r22,r2
100063f4:	000bab80 	call	1000bab8 <__fixdfsi>
100063f8:	1009883a 	mov	r4,r2
100063fc:	000bb380 	call	1000bb38 <__floatsidf>
10006400:	100d883a 	mov	r6,r2
10006404:	180f883a 	mov	r7,r3
10006408:	b009883a 	mov	r4,r22
1000640c:	a80b883a 	mov	r5,r21
10006410:	1027883a 	mov	r19,r2
10006414:	1825883a 	mov	r18,r3
10006418:	d8800415 	stw	r2,16(sp)
1000641c:	d8c00515 	stw	r3,20(sp)
10006420:	000b1bc0 	call	1000b1bc <__subdf3>
10006424:	000d883a 	mov	r6,zero
10006428:	01d05c34 	movhi	r7,16752
1000642c:	1009883a 	mov	r4,r2
10006430:	180b883a 	mov	r5,r3
10006434:	000a9500 	call	1000a950 <__muldf3>
10006438:	000d883a 	mov	r6,zero
1000643c:	000f883a 	mov	r7,zero
10006440:	1009883a 	mov	r4,r2
10006444:	180b883a 	mov	r5,r3
10006448:	d8800615 	stw	r2,24(sp)
1000644c:	d8c00715 	stw	r3,28(sp)
10006450:	000a7ec0 	call	1000a7ec <__eqdf2>
10006454:	1001431e 	bne	r2,zero,10006964 <__ieee754_rem_pio2+0x6d0>
10006458:	000f883a 	mov	r7,zero
1000645c:	000d883a 	mov	r6,zero
10006460:	9809883a 	mov	r4,r19
10006464:	900b883a 	mov	r5,r18
10006468:	000a7ec0 	call	1000a7ec <__eqdf2>
1000646c:	100f003a 	cmpeq	r7,r2,zero
10006470:	00800084 	movi	r2,2
10006474:	11cfc83a 	sub	r7,r2,r7
10006478:	00800084 	movi	r2,2
1000647c:	d8800015 	stw	r2,0(sp)
10006480:	008400b4 	movhi	r2,4098
10006484:	10a6bf04 	addi	r2,r2,-25860
10006488:	d8800115 	stw	r2,4(sp)
1000648c:	a00d883a 	mov	r6,r20
10006490:	800b883a 	mov	r5,r16
10006494:	d9000204 	addi	r4,sp,8
10006498:	0006ea40 	call	10006ea4 <__kernel_rem_pio2>
1000649c:	88000d0e 	bge	r17,zero,100064d4 <__ieee754_rem_pio2+0x240>
100064a0:	81000117 	ldw	r4,4(r16)
100064a4:	80c00317 	ldw	r3,12(r16)
100064a8:	0085c83a 	sub	r2,zero,r2
100064ac:	2120003c 	xorhi	r4,r4,32768
100064b0:	18e0003c 	xorhi	r3,r3,32768
100064b4:	81000115 	stw	r4,4(r16)
100064b8:	80c00315 	stw	r3,12(r16)
100064bc:	00000506 	br	100064d4 <__ieee754_rem_pio2+0x240>
100064c0:	31000015 	stw	r4,0(r6)
100064c4:	31400115 	stw	r5,4(r6)
100064c8:	30000215 	stw	zero,8(r6)
100064cc:	30000315 	stw	zero,12(r6)
100064d0:	0005883a 	mov	r2,zero
100064d4:	dfc01517 	ldw	ra,84(sp)
100064d8:	df001417 	ldw	fp,80(sp)
100064dc:	ddc01317 	ldw	r23,76(sp)
100064e0:	dd801217 	ldw	r22,72(sp)
100064e4:	dd401117 	ldw	r21,68(sp)
100064e8:	dd001017 	ldw	r20,64(sp)
100064ec:	dcc00f17 	ldw	r19,60(sp)
100064f0:	dc800e17 	ldw	r18,56(sp)
100064f4:	dc400d17 	ldw	r17,52(sp)
100064f8:	dc000c17 	ldw	r16,48(sp)
100064fc:	dec01604 	addi	sp,sp,88
10006500:	f800283a 	ret
10006504:	200d883a 	mov	r6,r4
10006508:	280f883a 	mov	r7,r5
1000650c:	000b1bc0 	call	1000b1bc <__subdf3>
10006510:	80800215 	stw	r2,8(r16)
10006514:	80800015 	stw	r2,0(r16)
10006518:	80c00315 	stw	r3,12(r16)
1000651c:	80c00115 	stw	r3,4(r16)
10006520:	0005883a 	mov	r2,zero
10006524:	003feb06 	br	100064d4 <__alt_data_end+0xf80064d4>
10006528:	01cf7474 	movhi	r7,15825
1000652c:	9009883a 	mov	r4,r18
10006530:	39ed1844 	addi	r7,r7,-19359
10006534:	01869834 	movhi	r6,6752
10006538:	180b883a 	mov	r5,r3
1000653c:	000b1bc0 	call	1000b1bc <__subdf3>
10006540:	018b80f4 	movhi	r6,11779
10006544:	01cee8f4 	movhi	r7,15267
10006548:	319c1cc4 	addi	r6,r6,28787
1000654c:	39c66284 	addi	r7,r7,6538
10006550:	1009883a 	mov	r4,r2
10006554:	180b883a 	mov	r5,r3
10006558:	1025883a 	mov	r18,r2
1000655c:	1823883a 	mov	r17,r3
10006560:	000b1bc0 	call	1000b1bc <__subdf3>
10006564:	100d883a 	mov	r6,r2
10006568:	180f883a 	mov	r7,r3
1000656c:	9009883a 	mov	r4,r18
10006570:	880b883a 	mov	r5,r17
10006574:	80800015 	stw	r2,0(r16)
10006578:	80c00115 	stw	r3,4(r16)
1000657c:	000b1bc0 	call	1000b1bc <__subdf3>
10006580:	018b80f4 	movhi	r6,11779
10006584:	01cee8f4 	movhi	r7,15267
10006588:	319c1cc4 	addi	r6,r6,28787
1000658c:	39c66284 	addi	r7,r7,6538
10006590:	003f7306 	br	10006360 <__alt_data_end+0xf8006360>
10006594:	0007f080 	call	10007f08 <fabs>
10006598:	019b72b4 	movhi	r6,28106
1000659c:	01cff934 	movhi	r7,16356
100065a0:	31b220c4 	addi	r6,r6,-14205
100065a4:	39d7cc04 	addi	r7,r7,24368
100065a8:	1009883a 	mov	r4,r2
100065ac:	180b883a 	mov	r5,r3
100065b0:	102d883a 	mov	r22,r2
100065b4:	182b883a 	mov	r21,r3
100065b8:	000a9500 	call	1000a950 <__muldf3>
100065bc:	000d883a 	mov	r6,zero
100065c0:	01cff834 	movhi	r7,16352
100065c4:	1009883a 	mov	r4,r2
100065c8:	180b883a 	mov	r5,r3
100065cc:	00095700 	call	10009570 <__adddf3>
100065d0:	180b883a 	mov	r5,r3
100065d4:	1009883a 	mov	r4,r2
100065d8:	000bab80 	call	1000bab8 <__fixdfsi>
100065dc:	1009883a 	mov	r4,r2
100065e0:	1025883a 	mov	r18,r2
100065e4:	000bb380 	call	1000bb38 <__floatsidf>
100065e8:	01cffe74 	movhi	r7,16377
100065ec:	39c87ec4 	addi	r7,r7,8699
100065f0:	01951034 	movhi	r6,21568
100065f4:	1009883a 	mov	r4,r2
100065f8:	180b883a 	mov	r5,r3
100065fc:	1029883a 	mov	r20,r2
10006600:	1827883a 	mov	r19,r3
10006604:	000a9500 	call	1000a950 <__muldf3>
10006608:	b009883a 	mov	r4,r22
1000660c:	a80b883a 	mov	r5,r21
10006610:	100d883a 	mov	r6,r2
10006614:	180f883a 	mov	r7,r3
10006618:	000b1bc0 	call	1000b1bc <__subdf3>
1000661c:	018698b4 	movhi	r6,6754
10006620:	01cf7474 	movhi	r7,15825
10006624:	a009883a 	mov	r4,r20
10006628:	3198cc44 	addi	r6,r6,25393
1000662c:	39ed1844 	addi	r7,r7,-19359
10006630:	980b883a 	mov	r5,r19
10006634:	1039883a 	mov	fp,r2
10006638:	d8c00815 	stw	r3,32(sp)
1000663c:	000a9500 	call	1000a950 <__muldf3>
10006640:	010007c4 	movi	r4,31
10006644:	e017883a 	mov	r11,fp
10006648:	da800817 	ldw	r10,32(sp)
1000664c:	102d883a 	mov	r22,r2
10006650:	182b883a 	mov	r21,r3
10006654:	24802816 	blt	r4,r18,100066f8 <__ieee754_rem_pio2+0x464>
10006658:	913fffc4 	addi	r4,r18,-1
1000665c:	2109883a 	add	r4,r4,r4
10006660:	014400b4 	movhi	r5,4098
10006664:	2109883a 	add	r4,r4,r4
10006668:	29669f04 	addi	r5,r5,-25988
1000666c:	2909883a 	add	r4,r5,r4
10006670:	21000017 	ldw	r4,0(r4)
10006674:	b9002026 	beq	r23,r4,100066f8 <__ieee754_rem_pio2+0x464>
10006678:	100d883a 	mov	r6,r2
1000667c:	180f883a 	mov	r7,r3
10006680:	e009883a 	mov	r4,fp
10006684:	500b883a 	mov	r5,r10
10006688:	da800b15 	stw	r10,44(sp)
1000668c:	df000a15 	stw	fp,40(sp)
10006690:	000b1bc0 	call	1000b1bc <__subdf3>
10006694:	da800b17 	ldw	r10,44(sp)
10006698:	dac00a17 	ldw	r11,40(sp)
1000669c:	1019883a 	mov	r12,r2
100066a0:	1813883a 	mov	r9,r3
100066a4:	80800015 	stw	r2,0(r16)
100066a8:	80c00115 	stw	r3,4(r16)
100066ac:	600d883a 	mov	r6,r12
100066b0:	480f883a 	mov	r7,r9
100066b4:	5809883a 	mov	r4,r11
100066b8:	500b883a 	mov	r5,r10
100066bc:	da400b15 	stw	r9,44(sp)
100066c0:	db000a15 	stw	r12,40(sp)
100066c4:	000b1bc0 	call	1000b1bc <__subdf3>
100066c8:	b00d883a 	mov	r6,r22
100066cc:	a80f883a 	mov	r7,r21
100066d0:	1009883a 	mov	r4,r2
100066d4:	180b883a 	mov	r5,r3
100066d8:	000b1bc0 	call	1000b1bc <__subdf3>
100066dc:	80800215 	stw	r2,8(r16)
100066e0:	80c00315 	stw	r3,12(r16)
100066e4:	da400b17 	ldw	r9,44(sp)
100066e8:	db000a17 	ldw	r12,40(sp)
100066ec:	88009f16 	blt	r17,zero,1000696c <__ieee754_rem_pio2+0x6d8>
100066f0:	9005883a 	mov	r2,r18
100066f4:	003f7706 	br	100064d4 <__alt_data_end+0xf80064d4>
100066f8:	d9400817 	ldw	r5,32(sp)
100066fc:	100d883a 	mov	r6,r2
10006700:	180f883a 	mov	r7,r3
10006704:	e009883a 	mov	r4,fp
10006708:	da800b15 	stw	r10,44(sp)
1000670c:	dac00a15 	stw	r11,40(sp)
10006710:	000b1bc0 	call	1000b1bc <__subdf3>
10006714:	1019883a 	mov	r12,r2
10006718:	1804d53a 	srli	r2,r3,20
1000671c:	b811d53a 	srai	r8,r23,20
10006720:	1813883a 	mov	r9,r3
10006724:	1081ffcc 	andi	r2,r2,2047
10006728:	80c00115 	stw	r3,4(r16)
1000672c:	83000015 	stw	r12,0(r16)
10006730:	4085c83a 	sub	r2,r8,r2
10006734:	00c00404 	movi	r3,16
10006738:	da800b17 	ldw	r10,44(sp)
1000673c:	dac00a17 	ldw	r11,40(sp)
10006740:	18bfda0e 	bge	r3,r2,100066ac <__alt_data_end+0xf80066ac>
10006744:	01cf7474 	movhi	r7,15825
10006748:	39ed1844 	addi	r7,r7,-19359
1000674c:	01869834 	movhi	r6,6752
10006750:	a009883a 	mov	r4,r20
10006754:	980b883a 	mov	r5,r19
10006758:	da000a15 	stw	r8,40(sp)
1000675c:	000a9500 	call	1000a950 <__muldf3>
10006760:	d9400817 	ldw	r5,32(sp)
10006764:	100d883a 	mov	r6,r2
10006768:	180f883a 	mov	r7,r3
1000676c:	e009883a 	mov	r4,fp
10006770:	102d883a 	mov	r22,r2
10006774:	182b883a 	mov	r21,r3
10006778:	000b1bc0 	call	1000b1bc <__subdf3>
1000677c:	d9400817 	ldw	r5,32(sp)
10006780:	100d883a 	mov	r6,r2
10006784:	180f883a 	mov	r7,r3
10006788:	e009883a 	mov	r4,fp
1000678c:	182f883a 	mov	r23,r3
10006790:	d8800915 	stw	r2,36(sp)
10006794:	000b1bc0 	call	1000b1bc <__subdf3>
10006798:	b00d883a 	mov	r6,r22
1000679c:	a80f883a 	mov	r7,r21
100067a0:	1009883a 	mov	r4,r2
100067a4:	180b883a 	mov	r5,r3
100067a8:	000b1bc0 	call	1000b1bc <__subdf3>
100067ac:	018b80f4 	movhi	r6,11779
100067b0:	01cee8f4 	movhi	r7,15267
100067b4:	319c1cc4 	addi	r6,r6,28787
100067b8:	39c66284 	addi	r7,r7,6538
100067bc:	a009883a 	mov	r4,r20
100067c0:	980b883a 	mov	r5,r19
100067c4:	102d883a 	mov	r22,r2
100067c8:	182b883a 	mov	r21,r3
100067cc:	000a9500 	call	1000a950 <__muldf3>
100067d0:	b00d883a 	mov	r6,r22
100067d4:	a80f883a 	mov	r7,r21
100067d8:	1009883a 	mov	r4,r2
100067dc:	180b883a 	mov	r5,r3
100067e0:	000b1bc0 	call	1000b1bc <__subdf3>
100067e4:	d9000917 	ldw	r4,36(sp)
100067e8:	100d883a 	mov	r6,r2
100067ec:	180f883a 	mov	r7,r3
100067f0:	b80b883a 	mov	r5,r23
100067f4:	102d883a 	mov	r22,r2
100067f8:	182b883a 	mov	r21,r3
100067fc:	000b1bc0 	call	1000b1bc <__subdf3>
10006800:	1019883a 	mov	r12,r2
10006804:	1804d53a 	srli	r2,r3,20
10006808:	da000a17 	ldw	r8,40(sp)
1000680c:	83000015 	stw	r12,0(r16)
10006810:	1081ffcc 	andi	r2,r2,2047
10006814:	4091c83a 	sub	r8,r8,r2
10006818:	80c00115 	stw	r3,4(r16)
1000681c:	00800c44 	movi	r2,49
10006820:	1813883a 	mov	r9,r3
10006824:	1200730e 	bge	r2,r8,100069f4 <__ieee754_rem_pio2+0x760>
10006828:	01cee8f4 	movhi	r7,15267
1000682c:	39c66284 	addi	r7,r7,6538
10006830:	018b8034 	movhi	r6,11776
10006834:	a009883a 	mov	r4,r20
10006838:	980b883a 	mov	r5,r19
1000683c:	000a9500 	call	1000a950 <__muldf3>
10006840:	d9000917 	ldw	r4,36(sp)
10006844:	100d883a 	mov	r6,r2
10006848:	180f883a 	mov	r7,r3
1000684c:	b80b883a 	mov	r5,r23
10006850:	102d883a 	mov	r22,r2
10006854:	182b883a 	mov	r21,r3
10006858:	000b1bc0 	call	1000b1bc <__subdf3>
1000685c:	d9000917 	ldw	r4,36(sp)
10006860:	100d883a 	mov	r6,r2
10006864:	180f883a 	mov	r7,r3
10006868:	b80b883a 	mov	r5,r23
1000686c:	d8c00b15 	stw	r3,44(sp)
10006870:	d8800a15 	stw	r2,40(sp)
10006874:	000b1bc0 	call	1000b1bc <__subdf3>
10006878:	b00d883a 	mov	r6,r22
1000687c:	a80f883a 	mov	r7,r21
10006880:	1009883a 	mov	r4,r2
10006884:	180b883a 	mov	r5,r3
10006888:	000b1bc0 	call	1000b1bc <__subdf3>
1000688c:	01894834 	movhi	r6,9504
10006890:	01ce5f34 	movhi	r7,14716
10006894:	31927044 	addi	r6,r6,18881
10006898:	39e0e684 	addi	r7,r7,-31846
1000689c:	a009883a 	mov	r4,r20
100068a0:	980b883a 	mov	r5,r19
100068a4:	102d883a 	mov	r22,r2
100068a8:	182b883a 	mov	r21,r3
100068ac:	000a9500 	call	1000a950 <__muldf3>
100068b0:	b00d883a 	mov	r6,r22
100068b4:	a80f883a 	mov	r7,r21
100068b8:	1009883a 	mov	r4,r2
100068bc:	180b883a 	mov	r5,r3
100068c0:	000b1bc0 	call	1000b1bc <__subdf3>
100068c4:	dac00a17 	ldw	r11,40(sp)
100068c8:	da800b17 	ldw	r10,44(sp)
100068cc:	102d883a 	mov	r22,r2
100068d0:	182b883a 	mov	r21,r3
100068d4:	100d883a 	mov	r6,r2
100068d8:	180f883a 	mov	r7,r3
100068dc:	5809883a 	mov	r4,r11
100068e0:	500b883a 	mov	r5,r10
100068e4:	003f6a06 	br	10006690 <__alt_data_end+0xf8006690>
100068e8:	00095700 	call	10009570 <__adddf3>
100068ec:	1025883a 	mov	r18,r2
100068f0:	008ffe74 	movhi	r2,16377
100068f4:	10887ec4 	addi	r2,r2,8699
100068f8:	1823883a 	mov	r17,r3
100068fc:	b8802226 	beq	r23,r2,10006988 <__ieee754_rem_pio2+0x6f4>
10006900:	018698b4 	movhi	r6,6754
10006904:	01cf7474 	movhi	r7,15825
10006908:	3198cc44 	addi	r6,r6,25393
1000690c:	39ed1844 	addi	r7,r7,-19359
10006910:	9009883a 	mov	r4,r18
10006914:	180b883a 	mov	r5,r3
10006918:	00095700 	call	10009570 <__adddf3>
1000691c:	100d883a 	mov	r6,r2
10006920:	180f883a 	mov	r7,r3
10006924:	9009883a 	mov	r4,r18
10006928:	880b883a 	mov	r5,r17
1000692c:	80800015 	stw	r2,0(r16)
10006930:	80c00115 	stw	r3,4(r16)
10006934:	000b1bc0 	call	1000b1bc <__subdf3>
10006938:	018698b4 	movhi	r6,6754
1000693c:	01cf7474 	movhi	r7,15825
10006940:	3198cc44 	addi	r6,r6,25393
10006944:	39ed1844 	addi	r7,r7,-19359
10006948:	1009883a 	mov	r4,r2
1000694c:	180b883a 	mov	r5,r3
10006950:	00095700 	call	10009570 <__adddf3>
10006954:	80800215 	stw	r2,8(r16)
10006958:	80c00315 	stw	r3,12(r16)
1000695c:	00bfffc4 	movi	r2,-1
10006960:	003edc06 	br	100064d4 <__alt_data_end+0xf80064d4>
10006964:	01c000c4 	movi	r7,3
10006968:	003ec306 	br	10006478 <__alt_data_end+0xf8006478>
1000696c:	4a60003c 	xorhi	r9,r9,32768
10006970:	18e0003c 	xorhi	r3,r3,32768
10006974:	83000015 	stw	r12,0(r16)
10006978:	82400115 	stw	r9,4(r16)
1000697c:	80c00315 	stw	r3,12(r16)
10006980:	0485c83a 	sub	r2,zero,r18
10006984:	003ed306 	br	100064d4 <__alt_data_end+0xf80064d4>
10006988:	01cf7474 	movhi	r7,15825
1000698c:	9009883a 	mov	r4,r18
10006990:	39ed1844 	addi	r7,r7,-19359
10006994:	01869834 	movhi	r6,6752
10006998:	180b883a 	mov	r5,r3
1000699c:	00095700 	call	10009570 <__adddf3>
100069a0:	018b80f4 	movhi	r6,11779
100069a4:	01cee8f4 	movhi	r7,15267
100069a8:	319c1cc4 	addi	r6,r6,28787
100069ac:	39c66284 	addi	r7,r7,6538
100069b0:	1009883a 	mov	r4,r2
100069b4:	180b883a 	mov	r5,r3
100069b8:	1025883a 	mov	r18,r2
100069bc:	1823883a 	mov	r17,r3
100069c0:	00095700 	call	10009570 <__adddf3>
100069c4:	100d883a 	mov	r6,r2
100069c8:	180f883a 	mov	r7,r3
100069cc:	9009883a 	mov	r4,r18
100069d0:	880b883a 	mov	r5,r17
100069d4:	80800015 	stw	r2,0(r16)
100069d8:	80c00115 	stw	r3,4(r16)
100069dc:	000b1bc0 	call	1000b1bc <__subdf3>
100069e0:	018b80f4 	movhi	r6,11779
100069e4:	01cee8f4 	movhi	r7,15267
100069e8:	319c1cc4 	addi	r6,r6,28787
100069ec:	39c66284 	addi	r7,r7,6538
100069f0:	003fd506 	br	10006948 <__alt_data_end+0xf8006948>
100069f4:	dac00917 	ldw	r11,36(sp)
100069f8:	b815883a 	mov	r10,r23
100069fc:	003f2b06 	br	100066ac <__alt_data_end+0xf80066ac>

10006a00 <__kernel_cos>:
10006a00:	defff304 	addi	sp,sp,-52
10006a04:	dc000315 	stw	r16,12(sp)
10006a08:	04200034 	movhi	r16,32768
10006a0c:	843fffc4 	addi	r16,r16,-1
10006a10:	008f9034 	movhi	r2,15936
10006a14:	df000b15 	stw	fp,44(sp)
10006a18:	ddc00a15 	stw	r23,40(sp)
10006a1c:	dd800915 	stw	r22,36(sp)
10006a20:	dcc00615 	stw	r19,24(sp)
10006a24:	dfc00c15 	stw	ra,48(sp)
10006a28:	dd400815 	stw	r21,32(sp)
10006a2c:	dd000715 	stw	r20,28(sp)
10006a30:	dc800515 	stw	r18,20(sp)
10006a34:	dc400415 	stw	r17,16(sp)
10006a38:	2c20703a 	and	r16,r5,r16
10006a3c:	10bfffc4 	addi	r2,r2,-1
10006a40:	2827883a 	mov	r19,r5
10006a44:	202d883a 	mov	r22,r4
10006a48:	302f883a 	mov	r23,r6
10006a4c:	3839883a 	mov	fp,r7
10006a50:	14007516 	blt	r2,r16,10006c28 <__kernel_cos+0x228>
10006a54:	000bab80 	call	1000bab8 <__fixdfsi>
10006a58:	10010f26 	beq	r2,zero,10006e98 <__kernel_cos+0x498>
10006a5c:	b00d883a 	mov	r6,r22
10006a60:	980f883a 	mov	r7,r19
10006a64:	b009883a 	mov	r4,r22
10006a68:	980b883a 	mov	r5,r19
10006a6c:	000a9500 	call	1000a950 <__muldf3>
10006a70:	01afa234 	movhi	r6,48776
10006a74:	01ef6a74 	movhi	r7,48553
10006a78:	318e3504 	addi	r6,r6,14548
10006a7c:	39feba44 	addi	r7,r7,-1303
10006a80:	1009883a 	mov	r4,r2
10006a84:	180b883a 	mov	r5,r3
10006a88:	102b883a 	mov	r21,r2
10006a8c:	1829883a 	mov	r20,r3
10006a90:	000a9500 	call	1000a950 <__muldf3>
10006a94:	01af6d74 	movhi	r6,48565
10006a98:	01cf88b4 	movhi	r7,15906
10006a9c:	31ac7104 	addi	r6,r6,-20028
10006aa0:	39fba784 	addi	r7,r7,-4450
10006aa4:	1009883a 	mov	r4,r2
10006aa8:	180b883a 	mov	r5,r3
10006aac:	00095700 	call	10009570 <__adddf3>
10006ab0:	a80d883a 	mov	r6,r21
10006ab4:	a00f883a 	mov	r7,r20
10006ab8:	1009883a 	mov	r4,r2
10006abc:	180b883a 	mov	r5,r3
10006ac0:	000a9500 	call	1000a950 <__muldf3>
10006ac4:	01a02734 	movhi	r6,32924
10006ac8:	01cfa4b4 	movhi	r7,16018
10006acc:	3194ab44 	addi	r6,r6,21165
10006ad0:	39df93c4 	addi	r7,r7,32335
10006ad4:	1009883a 	mov	r4,r2
10006ad8:	180b883a 	mov	r5,r3
10006adc:	000b1bc0 	call	1000b1bc <__subdf3>
10006ae0:	a80d883a 	mov	r6,r21
10006ae4:	a00f883a 	mov	r7,r20
10006ae8:	1009883a 	mov	r4,r2
10006aec:	180b883a 	mov	r5,r3
10006af0:	000a9500 	call	1000a950 <__muldf3>
10006af4:	018672f4 	movhi	r6,6603
10006af8:	01cfbeb4 	movhi	r7,16122
10006afc:	31856404 	addi	r6,r6,5520
10006b00:	39c06804 	addi	r7,r7,416
10006b04:	1009883a 	mov	r4,r2
10006b08:	180b883a 	mov	r5,r3
10006b0c:	00095700 	call	10009570 <__adddf3>
10006b10:	a80d883a 	mov	r6,r21
10006b14:	a00f883a 	mov	r7,r20
10006b18:	1009883a 	mov	r4,r2
10006b1c:	180b883a 	mov	r5,r3
10006b20:	000a9500 	call	1000a950 <__muldf3>
10006b24:	0185b074 	movhi	r6,5825
10006b28:	01cfd5f4 	movhi	r7,16215
10006b2c:	31945dc4 	addi	r6,r6,20855
10006b30:	39f05b04 	addi	r7,r7,-16020
10006b34:	1009883a 	mov	r4,r2
10006b38:	180b883a 	mov	r5,r3
10006b3c:	000b1bc0 	call	1000b1bc <__subdf3>
10006b40:	a80d883a 	mov	r6,r21
10006b44:	a00f883a 	mov	r7,r20
10006b48:	1009883a 	mov	r4,r2
10006b4c:	180b883a 	mov	r5,r3
10006b50:	000a9500 	call	1000a950 <__muldf3>
10006b54:	01955574 	movhi	r6,21845
10006b58:	01cfe974 	movhi	r7,16293
10006b5c:	31955304 	addi	r6,r6,21836
10006b60:	39d55544 	addi	r7,r7,21845
10006b64:	1009883a 	mov	r4,r2
10006b68:	180b883a 	mov	r5,r3
10006b6c:	00095700 	call	10009570 <__adddf3>
10006b70:	a80d883a 	mov	r6,r21
10006b74:	a00f883a 	mov	r7,r20
10006b78:	1009883a 	mov	r4,r2
10006b7c:	180b883a 	mov	r5,r3
10006b80:	000a9500 	call	1000a950 <__muldf3>
10006b84:	1017883a 	mov	r11,r2
10006b88:	1815883a 	mov	r10,r3
10006b8c:	a809883a 	mov	r4,r21
10006b90:	a00b883a 	mov	r5,r20
10006b94:	000d883a 	mov	r6,zero
10006b98:	01cff834 	movhi	r7,16352
10006b9c:	da800215 	stw	r10,8(sp)
10006ba0:	dac00115 	stw	r11,4(sp)
10006ba4:	000a9500 	call	1000a950 <__muldf3>
10006ba8:	dac00117 	ldw	r11,4(sp)
10006bac:	da800217 	ldw	r10,8(sp)
10006bb0:	a809883a 	mov	r4,r21
10006bb4:	580d883a 	mov	r6,r11
10006bb8:	500f883a 	mov	r7,r10
10006bbc:	a00b883a 	mov	r5,r20
10006bc0:	1023883a 	mov	r17,r2
10006bc4:	1821883a 	mov	r16,r3
10006bc8:	000a9500 	call	1000a950 <__muldf3>
10006bcc:	b80d883a 	mov	r6,r23
10006bd0:	e00f883a 	mov	r7,fp
10006bd4:	b009883a 	mov	r4,r22
10006bd8:	980b883a 	mov	r5,r19
10006bdc:	1029883a 	mov	r20,r2
10006be0:	1825883a 	mov	r18,r3
10006be4:	000a9500 	call	1000a950 <__muldf3>
10006be8:	a009883a 	mov	r4,r20
10006bec:	900b883a 	mov	r5,r18
10006bf0:	100d883a 	mov	r6,r2
10006bf4:	180f883a 	mov	r7,r3
10006bf8:	000b1bc0 	call	1000b1bc <__subdf3>
10006bfc:	8809883a 	mov	r4,r17
10006c00:	800b883a 	mov	r5,r16
10006c04:	100d883a 	mov	r6,r2
10006c08:	180f883a 	mov	r7,r3
10006c0c:	000b1bc0 	call	1000b1bc <__subdf3>
10006c10:	100d883a 	mov	r6,r2
10006c14:	180f883a 	mov	r7,r3
10006c18:	0009883a 	mov	r4,zero
10006c1c:	014ffc34 	movhi	r5,16368
10006c20:	000b1bc0 	call	1000b1bc <__subdf3>
10006c24:	00008b06 	br	10006e54 <__kernel_cos+0x454>
10006c28:	200d883a 	mov	r6,r4
10006c2c:	280f883a 	mov	r7,r5
10006c30:	000a9500 	call	1000a950 <__muldf3>
10006c34:	01afa234 	movhi	r6,48776
10006c38:	01ef6a74 	movhi	r7,48553
10006c3c:	318e3504 	addi	r6,r6,14548
10006c40:	39feba44 	addi	r7,r7,-1303
10006c44:	1009883a 	mov	r4,r2
10006c48:	180b883a 	mov	r5,r3
10006c4c:	1025883a 	mov	r18,r2
10006c50:	1823883a 	mov	r17,r3
10006c54:	000a9500 	call	1000a950 <__muldf3>
10006c58:	01af6d74 	movhi	r6,48565
10006c5c:	01cf88b4 	movhi	r7,15906
10006c60:	31ac7104 	addi	r6,r6,-20028
10006c64:	39fba784 	addi	r7,r7,-4450
10006c68:	1009883a 	mov	r4,r2
10006c6c:	180b883a 	mov	r5,r3
10006c70:	00095700 	call	10009570 <__adddf3>
10006c74:	900d883a 	mov	r6,r18
10006c78:	880f883a 	mov	r7,r17
10006c7c:	1009883a 	mov	r4,r2
10006c80:	180b883a 	mov	r5,r3
10006c84:	000a9500 	call	1000a950 <__muldf3>
10006c88:	01a02734 	movhi	r6,32924
10006c8c:	01cfa4b4 	movhi	r7,16018
10006c90:	3194ab44 	addi	r6,r6,21165
10006c94:	39df93c4 	addi	r7,r7,32335
10006c98:	1009883a 	mov	r4,r2
10006c9c:	180b883a 	mov	r5,r3
10006ca0:	000b1bc0 	call	1000b1bc <__subdf3>
10006ca4:	900d883a 	mov	r6,r18
10006ca8:	880f883a 	mov	r7,r17
10006cac:	1009883a 	mov	r4,r2
10006cb0:	180b883a 	mov	r5,r3
10006cb4:	000a9500 	call	1000a950 <__muldf3>
10006cb8:	018672f4 	movhi	r6,6603
10006cbc:	01cfbeb4 	movhi	r7,16122
10006cc0:	31856404 	addi	r6,r6,5520
10006cc4:	39c06804 	addi	r7,r7,416
10006cc8:	1009883a 	mov	r4,r2
10006ccc:	180b883a 	mov	r5,r3
10006cd0:	00095700 	call	10009570 <__adddf3>
10006cd4:	900d883a 	mov	r6,r18
10006cd8:	880f883a 	mov	r7,r17
10006cdc:	1009883a 	mov	r4,r2
10006ce0:	180b883a 	mov	r5,r3
10006ce4:	000a9500 	call	1000a950 <__muldf3>
10006ce8:	0185b074 	movhi	r6,5825
10006cec:	01cfd5f4 	movhi	r7,16215
10006cf0:	31945dc4 	addi	r6,r6,20855
10006cf4:	39f05b04 	addi	r7,r7,-16020
10006cf8:	1009883a 	mov	r4,r2
10006cfc:	180b883a 	mov	r5,r3
10006d00:	000b1bc0 	call	1000b1bc <__subdf3>
10006d04:	900d883a 	mov	r6,r18
10006d08:	880f883a 	mov	r7,r17
10006d0c:	1009883a 	mov	r4,r2
10006d10:	180b883a 	mov	r5,r3
10006d14:	000a9500 	call	1000a950 <__muldf3>
10006d18:	01955574 	movhi	r6,21845
10006d1c:	01cfe974 	movhi	r7,16293
10006d20:	31955304 	addi	r6,r6,21836
10006d24:	39d55544 	addi	r7,r7,21845
10006d28:	1009883a 	mov	r4,r2
10006d2c:	180b883a 	mov	r5,r3
10006d30:	00095700 	call	10009570 <__adddf3>
10006d34:	900d883a 	mov	r6,r18
10006d38:	880f883a 	mov	r7,r17
10006d3c:	1009883a 	mov	r4,r2
10006d40:	180b883a 	mov	r5,r3
10006d44:	000a9500 	call	1000a950 <__muldf3>
10006d48:	1013883a 	mov	r9,r2
10006d4c:	1017883a 	mov	r11,r2
10006d50:	008ff4f4 	movhi	r2,16339
10006d54:	108ccc84 	addi	r2,r2,13106
10006d58:	1811883a 	mov	r8,r3
10006d5c:	902b883a 	mov	r21,r18
10006d60:	8829883a 	mov	r20,r17
10006d64:	1815883a 	mov	r10,r3
10006d68:	143f880e 	bge	r2,r16,10006b8c <__alt_data_end+0xf8006b8c>
10006d6c:	008ffa74 	movhi	r2,16361
10006d70:	14004416 	blt	r2,r16,10006e84 <__kernel_cos+0x484>
10006d74:	00bff834 	movhi	r2,65504
10006d78:	80a1883a 	add	r16,r16,r2
10006d7c:	000d883a 	mov	r6,zero
10006d80:	800f883a 	mov	r7,r16
10006d84:	0009883a 	mov	r4,zero
10006d88:	014ffc34 	movhi	r5,16368
10006d8c:	da400115 	stw	r9,4(sp)
10006d90:	d8c00215 	stw	r3,8(sp)
10006d94:	000b1bc0 	call	1000b1bc <__subdf3>
10006d98:	da000217 	ldw	r8,8(sp)
10006d9c:	da400117 	ldw	r9,4(sp)
10006da0:	102b883a 	mov	r21,r2
10006da4:	d8c00015 	stw	r3,0(sp)
10006da8:	9009883a 	mov	r4,r18
10006dac:	880b883a 	mov	r5,r17
10006db0:	000d883a 	mov	r6,zero
10006db4:	01cff834 	movhi	r7,16352
10006db8:	da000215 	stw	r8,8(sp)
10006dbc:	da400115 	stw	r9,4(sp)
10006dc0:	000a9500 	call	1000a950 <__muldf3>
10006dc4:	800f883a 	mov	r7,r16
10006dc8:	000d883a 	mov	r6,zero
10006dcc:	1009883a 	mov	r4,r2
10006dd0:	180b883a 	mov	r5,r3
10006dd4:	000b1bc0 	call	1000b1bc <__subdf3>
10006dd8:	da400117 	ldw	r9,4(sp)
10006ddc:	da000217 	ldw	r8,8(sp)
10006de0:	9009883a 	mov	r4,r18
10006de4:	480d883a 	mov	r6,r9
10006de8:	400f883a 	mov	r7,r8
10006dec:	880b883a 	mov	r5,r17
10006df0:	1029883a 	mov	r20,r2
10006df4:	1821883a 	mov	r16,r3
10006df8:	000a9500 	call	1000a950 <__muldf3>
10006dfc:	b80d883a 	mov	r6,r23
10006e00:	e00f883a 	mov	r7,fp
10006e04:	b009883a 	mov	r4,r22
10006e08:	980b883a 	mov	r5,r19
10006e0c:	1025883a 	mov	r18,r2
10006e10:	1823883a 	mov	r17,r3
10006e14:	000a9500 	call	1000a950 <__muldf3>
10006e18:	100d883a 	mov	r6,r2
10006e1c:	180f883a 	mov	r7,r3
10006e20:	9009883a 	mov	r4,r18
10006e24:	880b883a 	mov	r5,r17
10006e28:	000b1bc0 	call	1000b1bc <__subdf3>
10006e2c:	100d883a 	mov	r6,r2
10006e30:	180f883a 	mov	r7,r3
10006e34:	a009883a 	mov	r4,r20
10006e38:	800b883a 	mov	r5,r16
10006e3c:	000b1bc0 	call	1000b1bc <__subdf3>
10006e40:	d9400017 	ldw	r5,0(sp)
10006e44:	100d883a 	mov	r6,r2
10006e48:	180f883a 	mov	r7,r3
10006e4c:	a809883a 	mov	r4,r21
10006e50:	000b1bc0 	call	1000b1bc <__subdf3>
10006e54:	dfc00c17 	ldw	ra,48(sp)
10006e58:	df000b17 	ldw	fp,44(sp)
10006e5c:	ddc00a17 	ldw	r23,40(sp)
10006e60:	dd800917 	ldw	r22,36(sp)
10006e64:	dd400817 	ldw	r21,32(sp)
10006e68:	dd000717 	ldw	r20,28(sp)
10006e6c:	dcc00617 	ldw	r19,24(sp)
10006e70:	dc800517 	ldw	r18,20(sp)
10006e74:	dc400417 	ldw	r17,16(sp)
10006e78:	dc000317 	ldw	r16,12(sp)
10006e7c:	dec00d04 	addi	sp,sp,52
10006e80:	f800283a 	ret
10006e84:	008ff9f4 	movhi	r2,16359
10006e88:	002b883a 	mov	r21,zero
10006e8c:	d8800015 	stw	r2,0(sp)
10006e90:	040ff4b4 	movhi	r16,16338
10006e94:	003fc406 	br	10006da8 <__alt_data_end+0xf8006da8>
10006e98:	0005883a 	mov	r2,zero
10006e9c:	00cffc34 	movhi	r3,16368
10006ea0:	003fec06 	br	10006e54 <__alt_data_end+0xf8006e54>

10006ea4 <__kernel_rem_pio2>:
10006ea4:	deff5a04 	addi	sp,sp,-664
10006ea8:	da00a617 	ldw	r8,664(sp)
10006eac:	00c400b4 	movhi	r3,4098
10006eb0:	18e71104 	addi	r3,r3,-25532
10006eb4:	4205883a 	add	r2,r8,r8
10006eb8:	1085883a 	add	r2,r2,r2
10006ebc:	1885883a 	add	r2,r3,r2
10006ec0:	d9008e15 	stw	r4,568(sp)
10006ec4:	d9408f15 	stw	r5,572(sp)
10006ec8:	313fff44 	addi	r4,r6,-3
10006ecc:	01400604 	movi	r5,24
10006ed0:	dd80a215 	stw	r22,648(sp)
10006ed4:	dc009c15 	stw	r16,624(sp)
10006ed8:	dfc0a515 	stw	ra,660(sp)
10006edc:	df00a415 	stw	fp,656(sp)
10006ee0:	ddc0a315 	stw	r23,652(sp)
10006ee4:	dd40a115 	stw	r21,644(sp)
10006ee8:	dd00a015 	stw	r20,640(sp)
10006eec:	dcc09f15 	stw	r19,636(sp)
10006ef0:	dc809e15 	stw	r18,632(sp)
10006ef4:	dc409d15 	stw	r17,628(sp)
10006ef8:	3021883a 	mov	r16,r6
10006efc:	d9c09315 	stw	r7,588(sp)
10006f00:	15800017 	ldw	r22,0(r2)
10006f04:	00083cc0 	call	100083cc <__divsi3>
10006f08:	da009317 	ldw	r8,588(sp)
10006f0c:	d8809215 	stw	r2,584(sp)
10006f10:	423fffc4 	addi	r8,r8,-1
10006f14:	da008d15 	stw	r8,564(sp)
10006f18:	10033d16 	blt	r2,zero,10007c10 <__kernel_rem_pio2+0xd6c>
10006f1c:	da009217 	ldw	r8,584(sp)
10006f20:	017ffa04 	movi	r5,-24
10006f24:	42000044 	addi	r8,r8,1
10006f28:	4009883a 	mov	r4,r8
10006f2c:	da009515 	stw	r8,596(sp)
10006f30:	00085800 	call	10008580 <__mulsi3>
10006f34:	da008d17 	ldw	r8,564(sp)
10006f38:	1421883a 	add	r16,r2,r16
10006f3c:	d8809217 	ldw	r2,584(sp)
10006f40:	b207883a 	add	r3,r22,r8
10006f44:	dc009015 	stw	r16,576(sp)
10006f48:	1223c83a 	sub	r17,r2,r8
10006f4c:	18001016 	blt	r3,zero,10006f90 <__kernel_rem_pio2+0xec>
10006f50:	da00a717 	ldw	r8,668(sp)
10006f54:	8c65883a 	add	r18,r17,r17
10006f58:	94a5883a 	add	r18,r18,r18
10006f5c:	1c47883a 	add	r3,r3,r17
10006f60:	dcc05004 	addi	r19,sp,320
10006f64:	44a5883a 	add	r18,r8,r18
10006f68:	1c000044 	addi	r16,r3,1
10006f6c:	88015316 	blt	r17,zero,100074bc <__kernel_rem_pio2+0x618>
10006f70:	91000017 	ldw	r4,0(r18)
10006f74:	000bb380 	call	1000bb38 <__floatsidf>
10006f78:	98800015 	stw	r2,0(r19)
10006f7c:	98c00115 	stw	r3,4(r19)
10006f80:	8c400044 	addi	r17,r17,1
10006f84:	9cc00204 	addi	r19,r19,8
10006f88:	94800104 	addi	r18,r18,4
10006f8c:	8c3ff71e 	bne	r17,r16,10006f6c <__alt_data_end+0xf8006f6c>
10006f90:	b0002816 	blt	r22,zero,10007034 <__kernel_rem_pio2+0x190>
10006f94:	da008d17 	ldw	r8,564(sp)
10006f98:	b4c00044 	addi	r19,r22,1
10006f9c:	982690fa 	slli	r19,r19,3
10006fa0:	402490fa 	slli	r18,r8,3
10006fa4:	da008e17 	ldw	r8,568(sp)
10006fa8:	d8805004 	addi	r2,sp,320
10006fac:	94000204 	addi	r16,r18,8
10006fb0:	d823883a 	mov	r17,sp
10006fb4:	14a5883a 	add	r18,r2,r18
10006fb8:	dcef883a 	add	r23,sp,r19
10006fbc:	4421883a 	add	r16,r8,r16
10006fc0:	dd809115 	stw	r22,580(sp)
10006fc4:	4039883a 	mov	fp,r8
10006fc8:	da008d17 	ldw	r8,564(sp)
10006fcc:	40016016 	blt	r8,zero,10007550 <__kernel_rem_pio2+0x6ac>
10006fd0:	e027883a 	mov	r19,fp
10006fd4:	9029883a 	mov	r20,r18
10006fd8:	002d883a 	mov	r22,zero
10006fdc:	002b883a 	mov	r21,zero
10006fe0:	a1800017 	ldw	r6,0(r20)
10006fe4:	a1c00117 	ldw	r7,4(r20)
10006fe8:	99000017 	ldw	r4,0(r19)
10006fec:	99400117 	ldw	r5,4(r19)
10006ff0:	9cc00204 	addi	r19,r19,8
10006ff4:	a53ffe04 	addi	r20,r20,-8
10006ff8:	000a9500 	call	1000a950 <__muldf3>
10006ffc:	b009883a 	mov	r4,r22
10007000:	a80b883a 	mov	r5,r21
10007004:	100d883a 	mov	r6,r2
10007008:	180f883a 	mov	r7,r3
1000700c:	00095700 	call	10009570 <__adddf3>
10007010:	102d883a 	mov	r22,r2
10007014:	182b883a 	mov	r21,r3
10007018:	9c3ff11e 	bne	r19,r16,10006fe0 <__alt_data_end+0xf8006fe0>
1000701c:	8d800015 	stw	r22,0(r17)
10007020:	8d400115 	stw	r21,4(r17)
10007024:	8c400204 	addi	r17,r17,8
10007028:	94800204 	addi	r18,r18,8
1000702c:	8dffe61e 	bne	r17,r23,10006fc8 <__alt_data_end+0xf8006fc8>
10007030:	dd809117 	ldw	r22,580(sp)
10007034:	00d00034 	movhi	r3,16384
10007038:	da009317 	ldw	r8,588(sp)
1000703c:	18ffff84 	addi	r3,r3,-2
10007040:	b0c7883a 	add	r3,r22,r3
10007044:	18c7883a 	add	r3,r3,r3
10007048:	402090fa 	slli	r16,r8,3
1000704c:	18c7883a 	add	r3,r3,r3
10007050:	da007804 	addi	r8,sp,480
10007054:	40d1883a 	add	r8,r8,r3
10007058:	b0bfffc4 	addi	r2,r22,-1
1000705c:	da009615 	stw	r8,600(sp)
10007060:	da008e17 	ldw	r8,568(sp)
10007064:	1085883a 	add	r2,r2,r2
10007068:	1085883a 	add	r2,r2,r2
1000706c:	19000104 	addi	r4,r3,4
10007070:	d885883a 	add	r2,sp,r2
10007074:	4421883a 	add	r16,r8,r16
10007078:	da007804 	addi	r8,sp,480
1000707c:	4111883a 	add	r8,r8,r4
10007080:	10807804 	addi	r2,r2,480
10007084:	da009715 	stw	r8,604(sp)
10007088:	b025883a 	mov	r18,r22
1000708c:	d8809815 	stw	r2,608(sp)
10007090:	dd809415 	stw	r22,592(sp)
10007094:	900490fa 	slli	r2,r18,3
10007098:	d885883a 	add	r2,sp,r2
1000709c:	17000017 	ldw	fp,0(r2)
100070a0:	15400117 	ldw	r21,4(r2)
100070a4:	04802b0e 	bge	zero,r18,10007154 <__kernel_rem_pio2+0x2b0>
100070a8:	00880034 	movhi	r2,8192
100070ac:	10bfffc4 	addi	r2,r2,-1
100070b0:	90a9883a 	add	r20,r18,r2
100070b4:	a02890fa 	slli	r20,r20,3
100070b8:	dc407804 	addi	r17,sp,480
100070bc:	dcfffe04 	addi	r19,sp,-8
100070c0:	dd29883a 	add	r20,sp,r20
100070c4:	000d883a 	mov	r6,zero
100070c8:	01cf9c34 	movhi	r7,15984
100070cc:	e009883a 	mov	r4,fp
100070d0:	a80b883a 	mov	r5,r21
100070d4:	000a9500 	call	1000a950 <__muldf3>
100070d8:	180b883a 	mov	r5,r3
100070dc:	1009883a 	mov	r4,r2
100070e0:	000bab80 	call	1000bab8 <__fixdfsi>
100070e4:	1009883a 	mov	r4,r2
100070e8:	000bb380 	call	1000bb38 <__floatsidf>
100070ec:	000d883a 	mov	r6,zero
100070f0:	01d05c34 	movhi	r7,16752
100070f4:	1009883a 	mov	r4,r2
100070f8:	180b883a 	mov	r5,r3
100070fc:	102f883a 	mov	r23,r2
10007100:	182d883a 	mov	r22,r3
10007104:	000a9500 	call	1000a950 <__muldf3>
10007108:	100d883a 	mov	r6,r2
1000710c:	180f883a 	mov	r7,r3
10007110:	e009883a 	mov	r4,fp
10007114:	a80b883a 	mov	r5,r21
10007118:	000b1bc0 	call	1000b1bc <__subdf3>
1000711c:	180b883a 	mov	r5,r3
10007120:	1009883a 	mov	r4,r2
10007124:	000bab80 	call	1000bab8 <__fixdfsi>
10007128:	a1800017 	ldw	r6,0(r20)
1000712c:	a1c00117 	ldw	r7,4(r20)
10007130:	88800015 	stw	r2,0(r17)
10007134:	b809883a 	mov	r4,r23
10007138:	b00b883a 	mov	r5,r22
1000713c:	00095700 	call	10009570 <__adddf3>
10007140:	a53ffe04 	addi	r20,r20,-8
10007144:	1039883a 	mov	fp,r2
10007148:	182b883a 	mov	r21,r3
1000714c:	8c400104 	addi	r17,r17,4
10007150:	a4ffdc1e 	bne	r20,r19,100070c4 <__alt_data_end+0xf80070c4>
10007154:	d9809017 	ldw	r6,576(sp)
10007158:	a80b883a 	mov	r5,r21
1000715c:	e009883a 	mov	r4,fp
10007160:	00081080 	call	10008108 <scalbn>
10007164:	000d883a 	mov	r6,zero
10007168:	01cff034 	movhi	r7,16320
1000716c:	1009883a 	mov	r4,r2
10007170:	180b883a 	mov	r5,r3
10007174:	1027883a 	mov	r19,r2
10007178:	1823883a 	mov	r17,r3
1000717c:	000a9500 	call	1000a950 <__muldf3>
10007180:	1009883a 	mov	r4,r2
10007184:	180b883a 	mov	r5,r3
10007188:	0007f1c0 	call	10007f1c <floor>
1000718c:	000d883a 	mov	r6,zero
10007190:	01d00834 	movhi	r7,16416
10007194:	1009883a 	mov	r4,r2
10007198:	180b883a 	mov	r5,r3
1000719c:	000a9500 	call	1000a950 <__muldf3>
100071a0:	100d883a 	mov	r6,r2
100071a4:	180f883a 	mov	r7,r3
100071a8:	9809883a 	mov	r4,r19
100071ac:	880b883a 	mov	r5,r17
100071b0:	000b1bc0 	call	1000b1bc <__subdf3>
100071b4:	180b883a 	mov	r5,r3
100071b8:	1009883a 	mov	r4,r2
100071bc:	1827883a 	mov	r19,r3
100071c0:	1029883a 	mov	r20,r2
100071c4:	000bab80 	call	1000bab8 <__fixdfsi>
100071c8:	1009883a 	mov	r4,r2
100071cc:	1023883a 	mov	r17,r2
100071d0:	000bb380 	call	1000bb38 <__floatsidf>
100071d4:	a009883a 	mov	r4,r20
100071d8:	100d883a 	mov	r6,r2
100071dc:	180f883a 	mov	r7,r3
100071e0:	980b883a 	mov	r5,r19
100071e4:	000b1bc0 	call	1000b1bc <__subdf3>
100071e8:	d9009017 	ldw	r4,576(sp)
100071ec:	1013883a 	mov	r9,r2
100071f0:	102b883a 	mov	r21,r2
100071f4:	1811883a 	mov	r8,r3
100071f8:	0100b30e 	bge	zero,r4,100074c8 <__kernel_rem_pio2+0x624>
100071fc:	90bfffc4 	addi	r2,r18,-1
10007200:	1085883a 	add	r2,r2,r2
10007204:	1085883a 	add	r2,r2,r2
10007208:	d885883a 	add	r2,sp,r2
1000720c:	10807804 	addi	r2,r2,480
10007210:	d9809017 	ldw	r6,576(sp)
10007214:	11400017 	ldw	r5,0(r2)
10007218:	01000604 	movi	r4,24
1000721c:	2189c83a 	sub	r4,r4,r6
10007220:	290dd83a 	sra	r6,r5,r4
10007224:	d9c09017 	ldw	r7,576(sp)
10007228:	04c005c4 	movi	r19,23
1000722c:	3108983a 	sll	r4,r6,r4
10007230:	99e7c83a 	sub	r19,r19,r7
10007234:	89a3883a 	add	r17,r17,r6
10007238:	2909c83a 	sub	r4,r5,r4
1000723c:	24e7d83a 	sra	r19,r4,r19
10007240:	11000015 	stw	r4,0(r2)
10007244:	04c02a0e 	bge	zero,r19,100072f0 <__kernel_rem_pio2+0x44c>
10007248:	8c400044 	addi	r17,r17,1
1000724c:	0481570e 	bge	zero,r18,100077ac <__kernel_rem_pio2+0x908>
10007250:	02804034 	movhi	r10,256
10007254:	52bfffc4 	addi	r10,r10,-1
10007258:	d8807804 	addi	r2,sp,480
1000725c:	000b883a 	mov	r5,zero
10007260:	0029883a 	mov	r20,zero
10007264:	01c04034 	movhi	r7,256
10007268:	00000706 	br	10007288 <__kernel_rem_pio2+0x3e4>
1000726c:	390dc83a 	sub	r6,r7,r4
10007270:	20000226 	beq	r4,zero,1000727c <__kernel_rem_pio2+0x3d8>
10007274:	11800015 	stw	r6,0(r2)
10007278:	05000044 	movi	r20,1
1000727c:	29400044 	addi	r5,r5,1
10007280:	10800104 	addi	r2,r2,4
10007284:	2c80080e 	bge	r5,r18,100072a8 <__kernel_rem_pio2+0x404>
10007288:	11000017 	ldw	r4,0(r2)
1000728c:	a03ff726 	beq	r20,zero,1000726c <__alt_data_end+0xf800726c>
10007290:	5109c83a 	sub	r4,r10,r4
10007294:	11000015 	stw	r4,0(r2)
10007298:	29400044 	addi	r5,r5,1
1000729c:	05000044 	movi	r20,1
100072a0:	10800104 	addi	r2,r2,4
100072a4:	2cbff816 	blt	r5,r18,10007288 <__alt_data_end+0xf8007288>
100072a8:	d9009017 	ldw	r4,576(sp)
100072ac:	01000e0e 	bge	zero,r4,100072e8 <__kernel_rem_pio2+0x444>
100072b0:	00800044 	movi	r2,1
100072b4:	20808d26 	beq	r4,r2,100074ec <__kernel_rem_pio2+0x648>
100072b8:	00800084 	movi	r2,2
100072bc:	20800a1e 	bne	r4,r2,100072e8 <__kernel_rem_pio2+0x444>
100072c0:	90bfffc4 	addi	r2,r18,-1
100072c4:	1085883a 	add	r2,r2,r2
100072c8:	1085883a 	add	r2,r2,r2
100072cc:	d885883a 	add	r2,sp,r2
100072d0:	10807804 	addi	r2,r2,480
100072d4:	11400017 	ldw	r5,0(r2)
100072d8:	01001034 	movhi	r4,64
100072dc:	213fffc4 	addi	r4,r4,-1
100072e0:	2908703a 	and	r4,r5,r4
100072e4:	11000015 	stw	r4,0(r2)
100072e8:	00800084 	movi	r2,2
100072ec:	98805d26 	beq	r19,r2,10007464 <__kernel_rem_pio2+0x5c0>
100072f0:	400b883a 	mov	r5,r8
100072f4:	000d883a 	mov	r6,zero
100072f8:	000f883a 	mov	r7,zero
100072fc:	a809883a 	mov	r4,r21
10007300:	da009b15 	stw	r8,620(sp)
10007304:	000a7ec0 	call	1000a7ec <__eqdf2>
10007308:	da009b17 	ldw	r8,620(sp)
1000730c:	10012b1e 	bne	r2,zero,100077bc <__kernel_rem_pio2+0x918>
10007310:	da009417 	ldw	r8,592(sp)
10007314:	917fffc4 	addi	r5,r18,-1
10007318:	2a000e16 	blt	r5,r8,10007354 <__kernel_rem_pio2+0x4b0>
1000731c:	00900034 	movhi	r2,16384
10007320:	10bfffc4 	addi	r2,r2,-1
10007324:	9085883a 	add	r2,r18,r2
10007328:	1085883a 	add	r2,r2,r2
1000732c:	d9809717 	ldw	r6,604(sp)
10007330:	1085883a 	add	r2,r2,r2
10007334:	d9007804 	addi	r4,sp,480
10007338:	0007883a 	mov	r3,zero
1000733c:	2085883a 	add	r2,r4,r2
10007340:	11000017 	ldw	r4,0(r2)
10007344:	10bfff04 	addi	r2,r2,-4
10007348:	1906b03a 	or	r3,r3,r4
1000734c:	11bffc1e 	bne	r2,r6,10007340 <__alt_data_end+0xf8007340>
10007350:	1800821e 	bne	r3,zero,1000755c <__kernel_rem_pio2+0x6b8>
10007354:	da009817 	ldw	r8,608(sp)
10007358:	40800017 	ldw	r2,0(r8)
1000735c:	1001151e 	bne	r2,zero,100077b4 <__kernel_rem_pio2+0x910>
10007360:	d8809617 	ldw	r2,600(sp)
10007364:	05000044 	movi	r20,1
10007368:	10bfff04 	addi	r2,r2,-4
1000736c:	10c00117 	ldw	r3,4(r2)
10007370:	a5000044 	addi	r20,r20,1
10007374:	183ffc26 	beq	r3,zero,10007368 <__alt_data_end+0xf8007368>
10007378:	9529883a 	add	r20,r18,r20
1000737c:	90800044 	addi	r2,r18,1
10007380:	dd009115 	stw	r20,580(sp)
10007384:	a0803216 	blt	r20,r2,10007450 <__kernel_rem_pio2+0x5ac>
10007388:	da009317 	ldw	r8,588(sp)
1000738c:	d8c09117 	ldw	r3,580(sp)
10007390:	44a3883a 	add	r17,r8,r18
10007394:	da009217 	ldw	r8,584(sp)
10007398:	882290fa 	slli	r17,r17,3
1000739c:	40a5883a 	add	r18,r8,r2
100073a0:	da009517 	ldw	r8,596(sp)
100073a4:	100490fa 	slli	r2,r2,3
100073a8:	94a5883a 	add	r18,r18,r18
100073ac:	40eb883a 	add	r21,r8,r3
100073b0:	da00a717 	ldw	r8,668(sp)
100073b4:	ad6b883a 	add	r21,r21,r21
100073b8:	94a5883a 	add	r18,r18,r18
100073bc:	ad6b883a 	add	r21,r21,r21
100073c0:	d8c05004 	addi	r3,sp,320
100073c4:	44a5883a 	add	r18,r8,r18
100073c8:	1c63883a 	add	r17,r3,r17
100073cc:	d8a7883a 	add	r19,sp,r2
100073d0:	456b883a 	add	r21,r8,r21
100073d4:	91000017 	ldw	r4,0(r18)
100073d8:	000bb380 	call	1000bb38 <__floatsidf>
100073dc:	da008d17 	ldw	r8,564(sp)
100073e0:	88800015 	stw	r2,0(r17)
100073e4:	88c00115 	stw	r3,4(r17)
100073e8:	40001b16 	blt	r8,zero,10007458 <__kernel_rem_pio2+0x5b4>
100073ec:	dd008e17 	ldw	r20,568(sp)
100073f0:	882d883a 	mov	r22,r17
100073f4:	002f883a 	mov	r23,zero
100073f8:	0039883a 	mov	fp,zero
100073fc:	b1800017 	ldw	r6,0(r22)
10007400:	b1c00117 	ldw	r7,4(r22)
10007404:	a1000017 	ldw	r4,0(r20)
10007408:	a1400117 	ldw	r5,4(r20)
1000740c:	a5000204 	addi	r20,r20,8
10007410:	b5bffe04 	addi	r22,r22,-8
10007414:	000a9500 	call	1000a950 <__muldf3>
10007418:	b809883a 	mov	r4,r23
1000741c:	e00b883a 	mov	r5,fp
10007420:	100d883a 	mov	r6,r2
10007424:	180f883a 	mov	r7,r3
10007428:	00095700 	call	10009570 <__adddf3>
1000742c:	102f883a 	mov	r23,r2
10007430:	1839883a 	mov	fp,r3
10007434:	a43ff11e 	bne	r20,r16,100073fc <__alt_data_end+0xf80073fc>
10007438:	9dc00015 	stw	r23,0(r19)
1000743c:	9f000115 	stw	fp,4(r19)
10007440:	94800104 	addi	r18,r18,4
10007444:	8c400204 	addi	r17,r17,8
10007448:	9cc00204 	addi	r19,r19,8
1000744c:	957fe11e 	bne	r18,r21,100073d4 <__alt_data_end+0xf80073d4>
10007450:	dc809117 	ldw	r18,580(sp)
10007454:	003f0f06 	br	10007094 <__alt_data_end+0xf8007094>
10007458:	002f883a 	mov	r23,zero
1000745c:	0039883a 	mov	fp,zero
10007460:	003ff506 	br	10007438 <__alt_data_end+0xf8007438>
10007464:	480d883a 	mov	r6,r9
10007468:	180f883a 	mov	r7,r3
1000746c:	0009883a 	mov	r4,zero
10007470:	014ffc34 	movhi	r5,16368
10007474:	000b1bc0 	call	1000b1bc <__subdf3>
10007478:	102b883a 	mov	r21,r2
1000747c:	1811883a 	mov	r8,r3
10007480:	a03f9b26 	beq	r20,zero,100072f0 <__alt_data_end+0xf80072f0>
10007484:	d9809017 	ldw	r6,576(sp)
10007488:	0009883a 	mov	r4,zero
1000748c:	014ffc34 	movhi	r5,16368
10007490:	d8c09b15 	stw	r3,620(sp)
10007494:	00081080 	call	10008108 <scalbn>
10007498:	da009b17 	ldw	r8,620(sp)
1000749c:	a809883a 	mov	r4,r21
100074a0:	100d883a 	mov	r6,r2
100074a4:	400b883a 	mov	r5,r8
100074a8:	180f883a 	mov	r7,r3
100074ac:	000b1bc0 	call	1000b1bc <__subdf3>
100074b0:	102b883a 	mov	r21,r2
100074b4:	1811883a 	mov	r8,r3
100074b8:	003f8d06 	br	100072f0 <__alt_data_end+0xf80072f0>
100074bc:	0005883a 	mov	r2,zero
100074c0:	0007883a 	mov	r3,zero
100074c4:	003eac06 	br	10006f78 <__alt_data_end+0xf8006f78>
100074c8:	d8809017 	ldw	r2,576(sp)
100074cc:	1000121e 	bne	r2,zero,10007518 <__kernel_rem_pio2+0x674>
100074d0:	90bfffc4 	addi	r2,r18,-1
100074d4:	1085883a 	add	r2,r2,r2
100074d8:	1085883a 	add	r2,r2,r2
100074dc:	d885883a 	add	r2,sp,r2
100074e0:	14c07817 	ldw	r19,480(r2)
100074e4:	9827d5fa 	srai	r19,r19,23
100074e8:	003f5606 	br	10007244 <__alt_data_end+0xf8007244>
100074ec:	90bfffc4 	addi	r2,r18,-1
100074f0:	1085883a 	add	r2,r2,r2
100074f4:	1085883a 	add	r2,r2,r2
100074f8:	d885883a 	add	r2,sp,r2
100074fc:	10807804 	addi	r2,r2,480
10007500:	11000017 	ldw	r4,0(r2)
10007504:	01402034 	movhi	r5,128
10007508:	297fffc4 	addi	r5,r5,-1
1000750c:	2148703a 	and	r4,r4,r5
10007510:	11000015 	stw	r4,0(r2)
10007514:	003f7406 	br	100072e8 <__alt_data_end+0xf80072e8>
10007518:	4809883a 	mov	r4,r9
1000751c:	180b883a 	mov	r5,r3
10007520:	000d883a 	mov	r6,zero
10007524:	01cff834 	movhi	r7,16352
10007528:	d8c09a15 	stw	r3,616(sp)
1000752c:	d8c09b15 	stw	r3,620(sp)
10007530:	da409915 	stw	r9,612(sp)
10007534:	000a8740 	call	1000a874 <__gedf2>
10007538:	d8c09a17 	ldw	r3,616(sp)
1000753c:	da009b17 	ldw	r8,620(sp)
10007540:	da409917 	ldw	r9,612(sp)
10007544:	1000920e 	bge	r2,zero,10007790 <__kernel_rem_pio2+0x8ec>
10007548:	0027883a 	mov	r19,zero
1000754c:	003f6806 	br	100072f0 <__alt_data_end+0xf80072f0>
10007550:	002d883a 	mov	r22,zero
10007554:	002b883a 	mov	r21,zero
10007558:	003eb006 	br	1000701c <__alt_data_end+0xf800701c>
1000755c:	2945883a 	add	r2,r5,r5
10007560:	da009017 	ldw	r8,576(sp)
10007564:	1085883a 	add	r2,r2,r2
10007568:	d885883a 	add	r2,sp,r2
1000756c:	10807817 	ldw	r2,480(r2)
10007570:	423ffa04 	addi	r8,r8,-24
10007574:	dc409115 	stw	r17,580(sp)
10007578:	dcc08d15 	stw	r19,564(sp)
1000757c:	da009015 	stw	r8,576(sp)
10007580:	dd809417 	ldw	r22,592(sp)
10007584:	2823883a 	mov	r17,r5
10007588:	10000e1e 	bne	r2,zero,100075c4 <__kernel_rem_pio2+0x720>
1000758c:	00900034 	movhi	r2,16384
10007590:	10bfffc4 	addi	r2,r2,-1
10007594:	2885883a 	add	r2,r5,r2
10007598:	1085883a 	add	r2,r2,r2
1000759c:	d8c07804 	addi	r3,sp,480
100075a0:	1085883a 	add	r2,r2,r2
100075a4:	1885883a 	add	r2,r3,r2
100075a8:	4007883a 	mov	r3,r8
100075ac:	10bfff04 	addi	r2,r2,-4
100075b0:	11000117 	ldw	r4,4(r2)
100075b4:	8c7fffc4 	addi	r17,r17,-1
100075b8:	18fffa04 	addi	r3,r3,-24
100075bc:	203ffb26 	beq	r4,zero,100075ac <__alt_data_end+0xf80075ac>
100075c0:	d8c09015 	stw	r3,576(sp)
100075c4:	d9809017 	ldw	r6,576(sp)
100075c8:	0009883a 	mov	r4,zero
100075cc:	014ffc34 	movhi	r5,16368
100075d0:	00081080 	call	10008108 <scalbn>
100075d4:	1029883a 	mov	r20,r2
100075d8:	182b883a 	mov	r21,r3
100075dc:	88018416 	blt	r17,zero,10007bf0 <__kernel_rem_pio2+0xd4c>
100075e0:	881090fa 	slli	r8,r17,3
100075e4:	d8c07804 	addi	r3,sp,480
100075e8:	da008e15 	stw	r8,568(sp)
100075ec:	d8808e17 	ldw	r2,568(sp)
100075f0:	8c51883a 	add	r8,r17,r17
100075f4:	4211883a 	add	r8,r8,r8
100075f8:	d8a1883a 	add	r16,sp,r2
100075fc:	1a25883a 	add	r18,r3,r8
10007600:	da3ffe04 	addi	r8,sp,-8
10007604:	da008c15 	stw	r8,560(sp)
10007608:	8039883a 	mov	fp,r16
1000760c:	91000017 	ldw	r4,0(r18)
10007610:	e73ffe04 	addi	fp,fp,-8
10007614:	94bfff04 	addi	r18,r18,-4
10007618:	000bb380 	call	1000bb38 <__floatsidf>
1000761c:	a00d883a 	mov	r6,r20
10007620:	a80f883a 	mov	r7,r21
10007624:	1009883a 	mov	r4,r2
10007628:	180b883a 	mov	r5,r3
1000762c:	000a9500 	call	1000a950 <__muldf3>
10007630:	a009883a 	mov	r4,r20
10007634:	a80b883a 	mov	r5,r21
10007638:	e0800215 	stw	r2,8(fp)
1000763c:	e0c00315 	stw	r3,12(fp)
10007640:	000d883a 	mov	r6,zero
10007644:	01cf9c34 	movhi	r7,15984
10007648:	000a9500 	call	1000a950 <__muldf3>
1000764c:	da008c17 	ldw	r8,560(sp)
10007650:	1029883a 	mov	r20,r2
10007654:	182b883a 	mov	r21,r3
10007658:	e23fec1e 	bne	fp,r8,1000760c <__alt_data_end+0xf800760c>
1000765c:	0029883a 	mov	r20,zero
10007660:	b0004f16 	blt	r22,zero,100077a0 <__kernel_rem_pio2+0x8fc>
10007664:	054400b4 	movhi	r21,4098
10007668:	014ffe74 	movhi	r5,16377
1000766c:	ad670304 	addi	r21,r21,-25588
10007670:	8027883a 	mov	r19,r16
10007674:	01100034 	movhi	r4,16384
10007678:	29487ec4 	addi	r5,r5,8699
1000767c:	0039883a 	mov	fp,zero
10007680:	002f883a 	mov	r23,zero
10007684:	0025883a 	mov	r18,zero
10007688:	00000506 	br	100076a0 <__kernel_rem_pio2+0x7fc>
1000768c:	9cc00204 	addi	r19,r19,8
10007690:	a4800f16 	blt	r20,r18,100076d0 <__kernel_rem_pio2+0x82c>
10007694:	a9000017 	ldw	r4,0(r21)
10007698:	a9400117 	ldw	r5,4(r21)
1000769c:	ad400204 	addi	r21,r21,8
100076a0:	99800017 	ldw	r6,0(r19)
100076a4:	99c00117 	ldw	r7,4(r19)
100076a8:	94800044 	addi	r18,r18,1
100076ac:	000a9500 	call	1000a950 <__muldf3>
100076b0:	e009883a 	mov	r4,fp
100076b4:	b80b883a 	mov	r5,r23
100076b8:	100d883a 	mov	r6,r2
100076bc:	180f883a 	mov	r7,r3
100076c0:	00095700 	call	10009570 <__adddf3>
100076c4:	1039883a 	mov	fp,r2
100076c8:	182f883a 	mov	r23,r3
100076cc:	b4bfef0e 	bge	r22,r18,1000768c <__alt_data_end+0xf800768c>
100076d0:	a00490fa 	slli	r2,r20,3
100076d4:	da008c17 	ldw	r8,560(sp)
100076d8:	843ffe04 	addi	r16,r16,-8
100076dc:	d885883a 	add	r2,sp,r2
100076e0:	10802804 	addi	r2,r2,160
100076e4:	17000015 	stw	fp,0(r2)
100076e8:	15c00115 	stw	r23,4(r2)
100076ec:	a5000044 	addi	r20,r20,1
100076f0:	823fdb1e 	bne	r16,r8,10007660 <__alt_data_end+0xf8007660>
100076f4:	da00a617 	ldw	r8,664(sp)
100076f8:	00800084 	movi	r2,2
100076fc:	12006616 	blt	r2,r8,10007898 <__kernel_rem_pio2+0x9f4>
10007700:	0200de16 	blt	zero,r8,10007a7c <__kernel_rem_pio2+0xbd8>
10007704:	4000141e 	bne	r8,zero,10007758 <__kernel_rem_pio2+0x8b4>
10007708:	da008e17 	ldw	r8,568(sp)
1000770c:	d8802804 	addi	r2,sp,160
10007710:	0007883a 	mov	r3,zero
10007714:	1225883a 	add	r18,r2,r8
10007718:	043fffc4 	movi	r16,-1
1000771c:	0005883a 	mov	r2,zero
10007720:	91800017 	ldw	r6,0(r18)
10007724:	91c00117 	ldw	r7,4(r18)
10007728:	1009883a 	mov	r4,r2
1000772c:	180b883a 	mov	r5,r3
10007730:	8c7fffc4 	addi	r17,r17,-1
10007734:	00095700 	call	10009570 <__adddf3>
10007738:	94bffe04 	addi	r18,r18,-8
1000773c:	8c3ff81e 	bne	r17,r16,10007720 <__alt_data_end+0xf8007720>
10007740:	da008d17 	ldw	r8,564(sp)
10007744:	40000126 	beq	r8,zero,1000774c <__kernel_rem_pio2+0x8a8>
10007748:	18e0003c 	xorhi	r3,r3,32768
1000774c:	da008f17 	ldw	r8,572(sp)
10007750:	40800015 	stw	r2,0(r8)
10007754:	40c00115 	stw	r3,4(r8)
10007758:	da009117 	ldw	r8,580(sp)
1000775c:	408001cc 	andi	r2,r8,7
10007760:	dfc0a517 	ldw	ra,660(sp)
10007764:	df00a417 	ldw	fp,656(sp)
10007768:	ddc0a317 	ldw	r23,652(sp)
1000776c:	dd80a217 	ldw	r22,648(sp)
10007770:	dd40a117 	ldw	r21,644(sp)
10007774:	dd00a017 	ldw	r20,640(sp)
10007778:	dcc09f17 	ldw	r19,636(sp)
1000777c:	dc809e17 	ldw	r18,632(sp)
10007780:	dc409d17 	ldw	r17,628(sp)
10007784:	dc009c17 	ldw	r16,624(sp)
10007788:	dec0a604 	addi	sp,sp,664
1000778c:	f800283a 	ret
10007790:	8c400044 	addi	r17,r17,1
10007794:	04810d0e 	bge	zero,r18,10007bcc <__kernel_rem_pio2+0xd28>
10007798:	04c00084 	movi	r19,2
1000779c:	003eac06 	br	10007250 <__alt_data_end+0xf8007250>
100077a0:	0039883a 	mov	fp,zero
100077a4:	002f883a 	mov	r23,zero
100077a8:	003fc906 	br	100076d0 <__alt_data_end+0xf80076d0>
100077ac:	0029883a 	mov	r20,zero
100077b0:	003ebd06 	br	100072a8 <__alt_data_end+0xf80072a8>
100077b4:	05000044 	movi	r20,1
100077b8:	003eef06 	br	10007378 <__alt_data_end+0xf8007378>
100077bc:	4029883a 	mov	r20,r8
100077c0:	da009017 	ldw	r8,576(sp)
100077c4:	a809883a 	mov	r4,r21
100077c8:	a00b883a 	mov	r5,r20
100077cc:	020dc83a 	sub	r6,zero,r8
100077d0:	dc409115 	stw	r17,580(sp)
100077d4:	dd809417 	ldw	r22,592(sp)
100077d8:	dcc08d15 	stw	r19,564(sp)
100077dc:	00081080 	call	10008108 <scalbn>
100077e0:	000d883a 	mov	r6,zero
100077e4:	01d05c34 	movhi	r7,16752
100077e8:	1009883a 	mov	r4,r2
100077ec:	180b883a 	mov	r5,r3
100077f0:	102b883a 	mov	r21,r2
100077f4:	1823883a 	mov	r17,r3
100077f8:	000a8740 	call	1000a874 <__gedf2>
100077fc:	1000e916 	blt	r2,zero,10007ba4 <__kernel_rem_pio2+0xd00>
10007800:	000d883a 	mov	r6,zero
10007804:	01cf9c34 	movhi	r7,15984
10007808:	880b883a 	mov	r5,r17
1000780c:	a809883a 	mov	r4,r21
10007810:	000a9500 	call	1000a950 <__muldf3>
10007814:	180b883a 	mov	r5,r3
10007818:	1009883a 	mov	r4,r2
1000781c:	000bab80 	call	1000bab8 <__fixdfsi>
10007820:	1029883a 	mov	r20,r2
10007824:	9485883a 	add	r2,r18,r18
10007828:	1085883a 	add	r2,r2,r2
1000782c:	a009883a 	mov	r4,r20
10007830:	d8a1883a 	add	r16,sp,r2
10007834:	000bb380 	call	1000bb38 <__floatsidf>
10007838:	000d883a 	mov	r6,zero
1000783c:	01d05c34 	movhi	r7,16752
10007840:	1009883a 	mov	r4,r2
10007844:	180b883a 	mov	r5,r3
10007848:	000a9500 	call	1000a950 <__muldf3>
1000784c:	880b883a 	mov	r5,r17
10007850:	100d883a 	mov	r6,r2
10007854:	180f883a 	mov	r7,r3
10007858:	a809883a 	mov	r4,r21
1000785c:	000b1bc0 	call	1000b1bc <__subdf3>
10007860:	180b883a 	mov	r5,r3
10007864:	1009883a 	mov	r4,r2
10007868:	000bab80 	call	1000bab8 <__fixdfsi>
1000786c:	da009017 	ldw	r8,576(sp)
10007870:	94400044 	addi	r17,r18,1
10007874:	8c47883a 	add	r3,r17,r17
10007878:	84007804 	addi	r16,r16,480
1000787c:	18c7883a 	add	r3,r3,r3
10007880:	80800015 	stw	r2,0(r16)
10007884:	d8c7883a 	add	r3,sp,r3
10007888:	42000604 	addi	r8,r8,24
1000788c:	da009015 	stw	r8,576(sp)
10007890:	1d007815 	stw	r20,480(r3)
10007894:	003f4b06 	br	100075c4 <__alt_data_end+0xf80075c4>
10007898:	da00a617 	ldw	r8,664(sp)
1000789c:	008000c4 	movi	r2,3
100078a0:	40bfad1e 	bne	r8,r2,10007758 <__alt_data_end+0xf8007758>
100078a4:	0440bc0e 	bge	zero,r17,10007b98 <__kernel_rem_pio2+0xcf4>
100078a8:	da008e17 	ldw	r8,568(sp)
100078ac:	882090fa 	slli	r16,r17,3
100078b0:	dd402804 	addi	r21,sp,160
100078b4:	da05883a 	add	r2,sp,r8
100078b8:	10802804 	addi	r2,r2,160
100078bc:	15c00017 	ldw	r23,0(r2)
100078c0:	15800117 	ldw	r22,4(r2)
100078c4:	8029883a 	mov	r20,r16
100078c8:	843ffe04 	addi	r16,r16,-8
100078cc:	ac21883a 	add	r16,r21,r16
100078d0:	ad29883a 	add	r20,r21,r20
100078d4:	dac02604 	addi	r11,sp,152
100078d8:	8811883a 	mov	r8,r17
100078dc:	84400017 	ldw	r17,0(r16)
100078e0:	87000117 	ldw	fp,4(r16)
100078e4:	b80d883a 	mov	r6,r23
100078e8:	b00f883a 	mov	r7,r22
100078ec:	8809883a 	mov	r4,r17
100078f0:	e00b883a 	mov	r5,fp
100078f4:	da009b15 	stw	r8,620(sp)
100078f8:	dac09915 	stw	r11,612(sp)
100078fc:	00095700 	call	10009570 <__adddf3>
10007900:	100d883a 	mov	r6,r2
10007904:	180f883a 	mov	r7,r3
10007908:	8809883a 	mov	r4,r17
1000790c:	e00b883a 	mov	r5,fp
10007910:	1027883a 	mov	r19,r2
10007914:	1825883a 	mov	r18,r3
10007918:	000b1bc0 	call	1000b1bc <__subdf3>
1000791c:	b80d883a 	mov	r6,r23
10007920:	b00f883a 	mov	r7,r22
10007924:	1009883a 	mov	r4,r2
10007928:	180b883a 	mov	r5,r3
1000792c:	00095700 	call	10009570 <__adddf3>
10007930:	dac09917 	ldw	r11,612(sp)
10007934:	a0800015 	stw	r2,0(r20)
10007938:	a0c00115 	stw	r3,4(r20)
1000793c:	84c00015 	stw	r19,0(r16)
10007940:	84800115 	stw	r18,4(r16)
10007944:	843ffe04 	addi	r16,r16,-8
10007948:	a53ffe04 	addi	r20,r20,-8
1000794c:	982f883a 	mov	r23,r19
10007950:	902d883a 	mov	r22,r18
10007954:	da009b17 	ldw	r8,620(sp)
10007958:	5c3fe01e 	bne	r11,r16,100078dc <__alt_data_end+0xf80078dc>
1000795c:	00800044 	movi	r2,1
10007960:	12008d0e 	bge	r2,r8,10007b98 <__kernel_rem_pio2+0xcf4>
10007964:	402090fa 	slli	r16,r8,3
10007968:	da008e17 	ldw	r8,568(sp)
1000796c:	8023883a 	mov	r17,r16
10007970:	da05883a 	add	r2,sp,r8
10007974:	10802804 	addi	r2,r2,160
10007978:	15800017 	ldw	r22,0(r2)
1000797c:	15000117 	ldw	r20,4(r2)
10007980:	ac63883a 	add	r17,r21,r17
10007984:	843ffe04 	addi	r16,r16,-8
10007988:	ac21883a 	add	r16,r21,r16
1000798c:	8825883a 	mov	r18,r17
10007990:	8811883a 	mov	r8,r17
10007994:	84400017 	ldw	r17,0(r16)
10007998:	87000117 	ldw	fp,4(r16)
1000799c:	b009883a 	mov	r4,r22
100079a0:	a00b883a 	mov	r5,r20
100079a4:	880d883a 	mov	r6,r17
100079a8:	e00f883a 	mov	r7,fp
100079ac:	da009b15 	stw	r8,620(sp)
100079b0:	00095700 	call	10009570 <__adddf3>
100079b4:	100d883a 	mov	r6,r2
100079b8:	180f883a 	mov	r7,r3
100079bc:	8809883a 	mov	r4,r17
100079c0:	e00b883a 	mov	r5,fp
100079c4:	102f883a 	mov	r23,r2
100079c8:	1827883a 	mov	r19,r3
100079cc:	000b1bc0 	call	1000b1bc <__subdf3>
100079d0:	b00d883a 	mov	r6,r22
100079d4:	a00f883a 	mov	r7,r20
100079d8:	1009883a 	mov	r4,r2
100079dc:	180b883a 	mov	r5,r3
100079e0:	00095700 	call	10009570 <__adddf3>
100079e4:	90800015 	stw	r2,0(r18)
100079e8:	90c00115 	stw	r3,4(r18)
100079ec:	85c00015 	stw	r23,0(r16)
100079f0:	84c00115 	stw	r19,4(r16)
100079f4:	843ffe04 	addi	r16,r16,-8
100079f8:	94bffe04 	addi	r18,r18,-8
100079fc:	b82d883a 	mov	r22,r23
10007a00:	9829883a 	mov	r20,r19
10007a04:	da009b17 	ldw	r8,620(sp)
10007a08:	ac3fe21e 	bne	r21,r16,10007994 <__alt_data_end+0xf8007994>
10007a0c:	4023883a 	mov	r17,r8
10007a10:	dc002a04 	addi	r16,sp,168
10007a14:	0005883a 	mov	r2,zero
10007a18:	0007883a 	mov	r3,zero
10007a1c:	89800017 	ldw	r6,0(r17)
10007a20:	89c00117 	ldw	r7,4(r17)
10007a24:	1009883a 	mov	r4,r2
10007a28:	8c7ffe04 	addi	r17,r17,-8
10007a2c:	180b883a 	mov	r5,r3
10007a30:	00095700 	call	10009570 <__adddf3>
10007a34:	847ff91e 	bne	r16,r17,10007a1c <__alt_data_end+0xf8007a1c>
10007a38:	da008d17 	ldw	r8,564(sp)
10007a3c:	40004726 	beq	r8,zero,10007b5c <__kernel_rem_pio2+0xcb8>
10007a40:	d9002b17 	ldw	r4,172(sp)
10007a44:	d9402917 	ldw	r5,164(sp)
10007a48:	d9802a17 	ldw	r6,168(sp)
10007a4c:	da008f17 	ldw	r8,572(sp)
10007a50:	d9c02817 	ldw	r7,160(sp)
10007a54:	2960003c 	xorhi	r5,r5,32768
10007a58:	2120003c 	xorhi	r4,r4,32768
10007a5c:	18e0003c 	xorhi	r3,r3,32768
10007a60:	41c00015 	stw	r7,0(r8)
10007a64:	41400115 	stw	r5,4(r8)
10007a68:	41800215 	stw	r6,8(r8)
10007a6c:	41000315 	stw	r4,12(r8)
10007a70:	40800415 	stw	r2,16(r8)
10007a74:	40c00515 	stw	r3,20(r8)
10007a78:	003f3706 	br	10007758 <__alt_data_end+0xf8007758>
10007a7c:	da008e17 	ldw	r8,568(sp)
10007a80:	d8802804 	addi	r2,sp,160
10007a84:	dc002604 	addi	r16,sp,152
10007a88:	1225883a 	add	r18,r2,r8
10007a8c:	0007883a 	mov	r3,zero
10007a90:	0005883a 	mov	r2,zero
10007a94:	91800017 	ldw	r6,0(r18)
10007a98:	91c00117 	ldw	r7,4(r18)
10007a9c:	1009883a 	mov	r4,r2
10007aa0:	94bffe04 	addi	r18,r18,-8
10007aa4:	180b883a 	mov	r5,r3
10007aa8:	00095700 	call	10009570 <__adddf3>
10007aac:	943ff91e 	bne	r18,r16,10007a94 <__alt_data_end+0xf8007a94>
10007ab0:	da008d17 	ldw	r8,564(sp)
10007ab4:	d9002817 	ldw	r4,160(sp)
10007ab8:	d9402917 	ldw	r5,164(sp)
10007abc:	40001a26 	beq	r8,zero,10007b28 <__kernel_rem_pio2+0xc84>
10007ac0:	da008f17 	ldw	r8,572(sp)
10007ac4:	19a0003c 	xorhi	r6,r3,32768
10007ac8:	180f883a 	mov	r7,r3
10007acc:	41800115 	stw	r6,4(r8)
10007ad0:	40800015 	stw	r2,0(r8)
10007ad4:	100d883a 	mov	r6,r2
10007ad8:	000b1bc0 	call	1000b1bc <__subdf3>
10007adc:	04400c0e 	bge	zero,r17,10007b10 <__kernel_rem_pio2+0xc6c>
10007ae0:	dc002a04 	addi	r16,sp,168
10007ae4:	04800044 	movi	r18,1
10007ae8:	81800017 	ldw	r6,0(r16)
10007aec:	81c00117 	ldw	r7,4(r16)
10007af0:	1009883a 	mov	r4,r2
10007af4:	180b883a 	mov	r5,r3
10007af8:	94800044 	addi	r18,r18,1
10007afc:	00095700 	call	10009570 <__adddf3>
10007b00:	84000204 	addi	r16,r16,8
10007b04:	8cbff80e 	bge	r17,r18,10007ae8 <__alt_data_end+0xf8007ae8>
10007b08:	da008d17 	ldw	r8,564(sp)
10007b0c:	40004226 	beq	r8,zero,10007c18 <__kernel_rem_pio2+0xd74>
10007b10:	da008f17 	ldw	r8,572(sp)
10007b14:	1009883a 	mov	r4,r2
10007b18:	18a0003c 	xorhi	r2,r3,32768
10007b1c:	41000215 	stw	r4,8(r8)
10007b20:	40800315 	stw	r2,12(r8)
10007b24:	003f0c06 	br	10007758 <__alt_data_end+0xf8007758>
10007b28:	da008f17 	ldw	r8,572(sp)
10007b2c:	100d883a 	mov	r6,r2
10007b30:	180f883a 	mov	r7,r3
10007b34:	40800015 	stw	r2,0(r8)
10007b38:	40c00115 	stw	r3,4(r8)
10007b3c:	000b1bc0 	call	1000b1bc <__subdf3>
10007b40:	047fe716 	blt	zero,r17,10007ae0 <__alt_data_end+0xf8007ae0>
10007b44:	da008f17 	ldw	r8,572(sp)
10007b48:	1009883a 	mov	r4,r2
10007b4c:	1805883a 	mov	r2,r3
10007b50:	41000215 	stw	r4,8(r8)
10007b54:	40800315 	stw	r2,12(r8)
10007b58:	003eff06 	br	10007758 <__alt_data_end+0xf8007758>
10007b5c:	da008f17 	ldw	r8,572(sp)
10007b60:	d9802817 	ldw	r6,160(sp)
10007b64:	d9402a17 	ldw	r5,168(sp)
10007b68:	d9002b17 	ldw	r4,172(sp)
10007b6c:	41800015 	stw	r6,0(r8)
10007b70:	d9802917 	ldw	r6,164(sp)
10007b74:	41400215 	stw	r5,8(r8)
10007b78:	41000315 	stw	r4,12(r8)
10007b7c:	41800115 	stw	r6,4(r8)
10007b80:	40800415 	stw	r2,16(r8)
10007b84:	40c00515 	stw	r3,20(r8)
10007b88:	003ef306 	br	10007758 <__alt_data_end+0xf8007758>
10007b8c:	da00a617 	ldw	r8,664(sp)
10007b90:	008000c4 	movi	r2,3
10007b94:	40bef01e 	bne	r8,r2,10007758 <__alt_data_end+0xf8007758>
10007b98:	0005883a 	mov	r2,zero
10007b9c:	0007883a 	mov	r3,zero
10007ba0:	003fa506 	br	10007a38 <__alt_data_end+0xf8007a38>
10007ba4:	9485883a 	add	r2,r18,r18
10007ba8:	1085883a 	add	r2,r2,r2
10007bac:	d8a1883a 	add	r16,sp,r2
10007bb0:	880b883a 	mov	r5,r17
10007bb4:	a809883a 	mov	r4,r21
10007bb8:	84007804 	addi	r16,r16,480
10007bbc:	000bab80 	call	1000bab8 <__fixdfsi>
10007bc0:	80800015 	stw	r2,0(r16)
10007bc4:	9023883a 	mov	r17,r18
10007bc8:	003e7e06 	br	100075c4 <__alt_data_end+0xf80075c4>
10007bcc:	a80d883a 	mov	r6,r21
10007bd0:	400f883a 	mov	r7,r8
10007bd4:	0009883a 	mov	r4,zero
10007bd8:	014ffc34 	movhi	r5,16368
10007bdc:	000b1bc0 	call	1000b1bc <__subdf3>
10007be0:	102b883a 	mov	r21,r2
10007be4:	1811883a 	mov	r8,r3
10007be8:	04c00084 	movi	r19,2
10007bec:	003dc006 	br	100072f0 <__alt_data_end+0xf80072f0>
10007bf0:	da00a617 	ldw	r8,664(sp)
10007bf4:	00800084 	movi	r2,2
10007bf8:	123fe416 	blt	r2,r8,10007b8c <__alt_data_end+0xf8007b8c>
10007bfc:	02000c16 	blt	zero,r8,10007c30 <__kernel_rem_pio2+0xd8c>
10007c00:	403ed51e 	bne	r8,zero,10007758 <__alt_data_end+0xf8007758>
10007c04:	0005883a 	mov	r2,zero
10007c08:	0007883a 	mov	r3,zero
10007c0c:	003ecc06 	br	10007740 <__alt_data_end+0xf8007740>
10007c10:	d8009215 	stw	zero,584(sp)
10007c14:	003cc106 	br	10006f1c <__alt_data_end+0xf8006f1c>
10007c18:	da008f17 	ldw	r8,572(sp)
10007c1c:	1009883a 	mov	r4,r2
10007c20:	1805883a 	mov	r2,r3
10007c24:	41000215 	stw	r4,8(r8)
10007c28:	40800315 	stw	r2,12(r8)
10007c2c:	003eca06 	br	10007758 <__alt_data_end+0xf8007758>
10007c30:	0005883a 	mov	r2,zero
10007c34:	0007883a 	mov	r3,zero
10007c38:	003f9d06 	br	10007ab0 <__alt_data_end+0xf8007ab0>

10007c3c <__kernel_sin>:
10007c3c:	00a00034 	movhi	r2,32768
10007c40:	defff404 	addi	sp,sp,-48
10007c44:	10bfffc4 	addi	r2,r2,-1
10007c48:	00cf9034 	movhi	r3,15936
10007c4c:	ddc00915 	stw	r23,36(sp)
10007c50:	dd800815 	stw	r22,32(sp)
10007c54:	dc400315 	stw	r17,12(sp)
10007c58:	dc000215 	stw	r16,8(sp)
10007c5c:	dfc00b15 	stw	ra,44(sp)
10007c60:	df000a15 	stw	fp,40(sp)
10007c64:	dd400715 	stw	r21,28(sp)
10007c68:	dd000615 	stw	r20,24(sp)
10007c6c:	dcc00515 	stw	r19,20(sp)
10007c70:	dc800415 	stw	r18,16(sp)
10007c74:	2884703a 	and	r2,r5,r2
10007c78:	18ffffc4 	addi	r3,r3,-1
10007c7c:	2821883a 	mov	r16,r5
10007c80:	2023883a 	mov	r17,r4
10007c84:	302f883a 	mov	r23,r6
10007c88:	382d883a 	mov	r22,r7
10007c8c:	18800216 	blt	r3,r2,10007c98 <__kernel_sin+0x5c>
10007c90:	000bab80 	call	1000bab8 <__fixdfsi>
10007c94:	10009926 	beq	r2,zero,10007efc <__kernel_sin+0x2c0>
10007c98:	880d883a 	mov	r6,r17
10007c9c:	800f883a 	mov	r7,r16
10007ca0:	8809883a 	mov	r4,r17
10007ca4:	800b883a 	mov	r5,r16
10007ca8:	000a9500 	call	1000a950 <__muldf3>
10007cac:	100d883a 	mov	r6,r2
10007cb0:	180f883a 	mov	r7,r3
10007cb4:	8809883a 	mov	r4,r17
10007cb8:	800b883a 	mov	r5,r16
10007cbc:	1027883a 	mov	r19,r2
10007cc0:	1825883a 	mov	r18,r3
10007cc4:	000a9500 	call	1000a950 <__muldf3>
10007cc8:	0196b434 	movhi	r6,23248
10007ccc:	01cf79b4 	movhi	r7,15846
10007cd0:	31b55f04 	addi	r6,r6,-10884
10007cd4:	39f64e84 	addi	r7,r7,-9926
10007cd8:	9809883a 	mov	r4,r19
10007cdc:	900b883a 	mov	r5,r18
10007ce0:	102b883a 	mov	r21,r2
10007ce4:	1829883a 	mov	r20,r3
10007ce8:	000a9500 	call	1000a950 <__muldf3>
10007cec:	01a28b34 	movhi	r6,35372
10007cf0:	01cf96f4 	movhi	r7,15963
10007cf4:	31a73ac4 	addi	r6,r6,-25365
10007cf8:	39f97984 	addi	r7,r7,-6682
10007cfc:	1009883a 	mov	r4,r2
10007d00:	180b883a 	mov	r5,r3
10007d04:	000b1bc0 	call	1000b1bc <__subdf3>
10007d08:	980d883a 	mov	r6,r19
10007d0c:	900f883a 	mov	r7,r18
10007d10:	1009883a 	mov	r4,r2
10007d14:	180b883a 	mov	r5,r3
10007d18:	000a9500 	call	1000a950 <__muldf3>
10007d1c:	0195ecb4 	movhi	r6,22450
10007d20:	01cfb1f4 	movhi	r7,16071
10007d24:	31bf9f44 	addi	r6,r6,-387
10007d28:	39c778c4 	addi	r7,r7,7651
10007d2c:	1009883a 	mov	r4,r2
10007d30:	180b883a 	mov	r5,r3
10007d34:	00095700 	call	10009570 <__adddf3>
10007d38:	980d883a 	mov	r6,r19
10007d3c:	900f883a 	mov	r7,r18
10007d40:	1009883a 	mov	r4,r2
10007d44:	180b883a 	mov	r5,r3
10007d48:	000a9500 	call	1000a950 <__muldf3>
10007d4c:	01867074 	movhi	r6,6593
10007d50:	01cfcab4 	movhi	r7,16170
10007d54:	31987544 	addi	r6,r6,25045
10007d58:	39c06804 	addi	r7,r7,416
10007d5c:	1009883a 	mov	r4,r2
10007d60:	180b883a 	mov	r5,r3
10007d64:	000b1bc0 	call	1000b1bc <__subdf3>
10007d68:	980d883a 	mov	r6,r19
10007d6c:	900f883a 	mov	r7,r18
10007d70:	1009883a 	mov	r4,r2
10007d74:	180b883a 	mov	r5,r3
10007d78:	000a9500 	call	1000a950 <__muldf3>
10007d7c:	01844474 	movhi	r6,4369
10007d80:	01cfe074 	movhi	r7,16257
10007d84:	31be2984 	addi	r6,r6,-1882
10007d88:	39c44444 	addi	r7,r7,4369
10007d8c:	1009883a 	mov	r4,r2
10007d90:	180b883a 	mov	r5,r3
10007d94:	00095700 	call	10009570 <__adddf3>
10007d98:	1011883a 	mov	r8,r2
10007d9c:	d8800c17 	ldw	r2,48(sp)
10007da0:	1839883a 	mov	fp,r3
10007da4:	10003e26 	beq	r2,zero,10007ea0 <__kernel_sin+0x264>
10007da8:	000d883a 	mov	r6,zero
10007dac:	01cff834 	movhi	r7,16352
10007db0:	b809883a 	mov	r4,r23
10007db4:	b00b883a 	mov	r5,r22
10007db8:	da000015 	stw	r8,0(sp)
10007dbc:	000a9500 	call	1000a950 <__muldf3>
10007dc0:	da000017 	ldw	r8,0(sp)
10007dc4:	e00f883a 	mov	r7,fp
10007dc8:	a809883a 	mov	r4,r21
10007dcc:	400d883a 	mov	r6,r8
10007dd0:	a00b883a 	mov	r5,r20
10007dd4:	d8c00115 	stw	r3,4(sp)
10007dd8:	d8800015 	stw	r2,0(sp)
10007ddc:	000a9500 	call	1000a950 <__muldf3>
10007de0:	da800017 	ldw	r10,0(sp)
10007de4:	da400117 	ldw	r9,4(sp)
10007de8:	100d883a 	mov	r6,r2
10007dec:	5009883a 	mov	r4,r10
10007df0:	480b883a 	mov	r5,r9
10007df4:	180f883a 	mov	r7,r3
10007df8:	000b1bc0 	call	1000b1bc <__subdf3>
10007dfc:	980d883a 	mov	r6,r19
10007e00:	900f883a 	mov	r7,r18
10007e04:	1009883a 	mov	r4,r2
10007e08:	180b883a 	mov	r5,r3
10007e0c:	000a9500 	call	1000a950 <__muldf3>
10007e10:	b80d883a 	mov	r6,r23
10007e14:	b00f883a 	mov	r7,r22
10007e18:	1009883a 	mov	r4,r2
10007e1c:	180b883a 	mov	r5,r3
10007e20:	000b1bc0 	call	1000b1bc <__subdf3>
10007e24:	01955574 	movhi	r6,21845
10007e28:	01cff174 	movhi	r7,16325
10007e2c:	31955244 	addi	r6,r6,21833
10007e30:	39d55544 	addi	r7,r7,21845
10007e34:	a809883a 	mov	r4,r21
10007e38:	a00b883a 	mov	r5,r20
10007e3c:	1027883a 	mov	r19,r2
10007e40:	1825883a 	mov	r18,r3
10007e44:	000a9500 	call	1000a950 <__muldf3>
10007e48:	100d883a 	mov	r6,r2
10007e4c:	180f883a 	mov	r7,r3
10007e50:	9809883a 	mov	r4,r19
10007e54:	900b883a 	mov	r5,r18
10007e58:	00095700 	call	10009570 <__adddf3>
10007e5c:	100d883a 	mov	r6,r2
10007e60:	180f883a 	mov	r7,r3
10007e64:	8809883a 	mov	r4,r17
10007e68:	800b883a 	mov	r5,r16
10007e6c:	000b1bc0 	call	1000b1bc <__subdf3>
10007e70:	dfc00b17 	ldw	ra,44(sp)
10007e74:	df000a17 	ldw	fp,40(sp)
10007e78:	ddc00917 	ldw	r23,36(sp)
10007e7c:	dd800817 	ldw	r22,32(sp)
10007e80:	dd400717 	ldw	r21,28(sp)
10007e84:	dd000617 	ldw	r20,24(sp)
10007e88:	dcc00517 	ldw	r19,20(sp)
10007e8c:	dc800417 	ldw	r18,16(sp)
10007e90:	dc400317 	ldw	r17,12(sp)
10007e94:	dc000217 	ldw	r16,8(sp)
10007e98:	dec00c04 	addi	sp,sp,48
10007e9c:	f800283a 	ret
10007ea0:	400d883a 	mov	r6,r8
10007ea4:	9809883a 	mov	r4,r19
10007ea8:	900b883a 	mov	r5,r18
10007eac:	180f883a 	mov	r7,r3
10007eb0:	000a9500 	call	1000a950 <__muldf3>
10007eb4:	01955574 	movhi	r6,21845
10007eb8:	01cff174 	movhi	r7,16325
10007ebc:	31955244 	addi	r6,r6,21833
10007ec0:	39d55544 	addi	r7,r7,21845
10007ec4:	1009883a 	mov	r4,r2
10007ec8:	180b883a 	mov	r5,r3
10007ecc:	000b1bc0 	call	1000b1bc <__subdf3>
10007ed0:	a80d883a 	mov	r6,r21
10007ed4:	a00f883a 	mov	r7,r20
10007ed8:	1009883a 	mov	r4,r2
10007edc:	180b883a 	mov	r5,r3
10007ee0:	000a9500 	call	1000a950 <__muldf3>
10007ee4:	880d883a 	mov	r6,r17
10007ee8:	800f883a 	mov	r7,r16
10007eec:	1009883a 	mov	r4,r2
10007ef0:	180b883a 	mov	r5,r3
10007ef4:	00095700 	call	10009570 <__adddf3>
10007ef8:	003fdd06 	br	10007e70 <__alt_data_end+0xf8007e70>
10007efc:	8805883a 	mov	r2,r17
10007f00:	8007883a 	mov	r3,r16
10007f04:	003fda06 	br	10007e70 <__alt_data_end+0xf8007e70>

10007f08 <fabs>:
10007f08:	00e00034 	movhi	r3,32768
10007f0c:	18ffffc4 	addi	r3,r3,-1
10007f10:	2005883a 	mov	r2,r4
10007f14:	28c6703a 	and	r3,r5,r3
10007f18:	f800283a 	ret

10007f1c <floor>:
10007f1c:	2811d53a 	srai	r8,r5,20
10007f20:	defffa04 	addi	sp,sp,-24
10007f24:	dcc00315 	stw	r19,12(sp)
10007f28:	4201ffcc 	andi	r8,r8,2047
10007f2c:	dc800215 	stw	r18,8(sp)
10007f30:	dc400115 	stw	r17,4(sp)
10007f34:	dc000015 	stw	r16,0(sp)
10007f38:	dfc00515 	stw	ra,20(sp)
10007f3c:	dd000415 	stw	r20,16(sp)
10007f40:	44bf0044 	addi	r18,r8,-1023
10007f44:	018004c4 	movi	r6,19
10007f48:	2821883a 	mov	r16,r5
10007f4c:	2005883a 	mov	r2,r4
10007f50:	280f883a 	mov	r7,r5
10007f54:	2827883a 	mov	r19,r5
10007f58:	2023883a 	mov	r17,r4
10007f5c:	34801916 	blt	r6,r18,10007fc4 <floor+0xa8>
10007f60:	90003c16 	blt	r18,zero,10008054 <floor+0x138>
10007f64:	05000434 	movhi	r20,16
10007f68:	a53fffc4 	addi	r20,r20,-1
10007f6c:	a4a9d83a 	sra	r20,r20,r18
10007f70:	2d0c703a 	and	r6,r5,r20
10007f74:	310cb03a 	or	r6,r6,r4
10007f78:	30001626 	beq	r6,zero,10007fd4 <floor+0xb8>
10007f7c:	01a20034 	movhi	r6,34816
10007f80:	01df8e34 	movhi	r7,32312
10007f84:	319d6704 	addi	r6,r6,30108
10007f88:	39f90f04 	addi	r7,r7,-7108
10007f8c:	00095700 	call	10009570 <__adddf3>
10007f90:	000d883a 	mov	r6,zero
10007f94:	000f883a 	mov	r7,zero
10007f98:	1009883a 	mov	r4,r2
10007f9c:	180b883a 	mov	r5,r3
10007fa0:	000a8740 	call	1000a874 <__gedf2>
10007fa4:	0080040e 	bge	zero,r2,10007fb8 <floor+0x9c>
10007fa8:	80003c16 	blt	r16,zero,1000809c <floor+0x180>
10007fac:	0520303a 	nor	r16,zero,r20
10007fb0:	84e0703a 	and	r16,r16,r19
10007fb4:	0023883a 	mov	r17,zero
10007fb8:	8805883a 	mov	r2,r17
10007fbc:	8007883a 	mov	r3,r16
10007fc0:	00000506 	br	10007fd8 <floor+0xbc>
10007fc4:	01800cc4 	movi	r6,51
10007fc8:	34800b0e 	bge	r6,r18,10007ff8 <floor+0xdc>
10007fcc:	01810004 	movi	r6,1024
10007fd0:	91802f26 	beq	r18,r6,10008090 <floor+0x174>
10007fd4:	3807883a 	mov	r3,r7
10007fd8:	dfc00517 	ldw	ra,20(sp)
10007fdc:	dd000417 	ldw	r20,16(sp)
10007fe0:	dcc00317 	ldw	r19,12(sp)
10007fe4:	dc800217 	ldw	r18,8(sp)
10007fe8:	dc400117 	ldw	r17,4(sp)
10007fec:	dc000017 	ldw	r16,0(sp)
10007ff0:	dec00604 	addi	sp,sp,24
10007ff4:	f800283a 	ret
10007ff8:	423efb44 	addi	r8,r8,-1043
10007ffc:	053fffc4 	movi	r20,-1
10008000:	a228d83a 	srl	r20,r20,r8
10008004:	250c703a 	and	r6,r4,r20
10008008:	303ff226 	beq	r6,zero,10007fd4 <__alt_data_end+0xf8007fd4>
1000800c:	01a20034 	movhi	r6,34816
10008010:	01df8e34 	movhi	r7,32312
10008014:	319d6704 	addi	r6,r6,30108
10008018:	39f90f04 	addi	r7,r7,-7108
1000801c:	00095700 	call	10009570 <__adddf3>
10008020:	000d883a 	mov	r6,zero
10008024:	000f883a 	mov	r7,zero
10008028:	1009883a 	mov	r4,r2
1000802c:	180b883a 	mov	r5,r3
10008030:	000a8740 	call	1000a874 <__gedf2>
10008034:	00bfe00e 	bge	zero,r2,10007fb8 <__alt_data_end+0xf8007fb8>
10008038:	80001c16 	blt	r16,zero,100080ac <floor+0x190>
1000803c:	0510303a 	nor	r8,zero,r20
10008040:	9821883a 	mov	r16,r19
10008044:	8a22703a 	and	r17,r17,r8
10008048:	8805883a 	mov	r2,r17
1000804c:	8007883a 	mov	r3,r16
10008050:	003fe106 	br	10007fd8 <__alt_data_end+0xf8007fd8>
10008054:	01a20034 	movhi	r6,34816
10008058:	01df8e34 	movhi	r7,32312
1000805c:	319d6704 	addi	r6,r6,30108
10008060:	39f90f04 	addi	r7,r7,-7108
10008064:	00095700 	call	10009570 <__adddf3>
10008068:	000d883a 	mov	r6,zero
1000806c:	000f883a 	mov	r7,zero
10008070:	1009883a 	mov	r4,r2
10008074:	180b883a 	mov	r5,r3
10008078:	000a8740 	call	1000a874 <__gedf2>
1000807c:	00bfce0e 	bge	zero,r2,10007fb8 <__alt_data_end+0xf8007fb8>
10008080:	80001516 	blt	r16,zero,100080d8 <floor+0x1bc>
10008084:	0023883a 	mov	r17,zero
10008088:	0021883a 	mov	r16,zero
1000808c:	003fca06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10008090:	200d883a 	mov	r6,r4
10008094:	00095700 	call	10009570 <__adddf3>
10008098:	003fcf06 	br	10007fd8 <__alt_data_end+0xf8007fd8>
1000809c:	00800434 	movhi	r2,16
100080a0:	14a5d83a 	sra	r18,r2,r18
100080a4:	84a7883a 	add	r19,r16,r18
100080a8:	003fc006 	br	10007fac <__alt_data_end+0xf8007fac>
100080ac:	00800504 	movi	r2,20
100080b0:	90801326 	beq	r18,r2,10008100 <floor+0x1e4>
100080b4:	00800d04 	movi	r2,52
100080b8:	14a5c83a 	sub	r18,r2,r18
100080bc:	00800044 	movi	r2,1
100080c0:	1484983a 	sll	r2,r2,r18
100080c4:	1445883a 	add	r2,r2,r17
100080c8:	14400b2e 	bgeu	r2,r17,100080f8 <floor+0x1dc>
100080cc:	84c00044 	addi	r19,r16,1
100080d0:	1023883a 	mov	r17,r2
100080d4:	003fd906 	br	1000803c <__alt_data_end+0xf800803c>
100080d8:	00a00034 	movhi	r2,32768
100080dc:	10bfffc4 	addi	r2,r2,-1
100080e0:	8084703a 	and	r2,r16,r2
100080e4:	1462b03a 	or	r17,r2,r17
100080e8:	883fb326 	beq	r17,zero,10007fb8 <__alt_data_end+0xf8007fb8>
100080ec:	0023883a 	mov	r17,zero
100080f0:	042ffc34 	movhi	r16,49136
100080f4:	003fb006 	br	10007fb8 <__alt_data_end+0xf8007fb8>
100080f8:	1023883a 	mov	r17,r2
100080fc:	003fcf06 	br	1000803c <__alt_data_end+0xf800803c>
10008100:	84c00044 	addi	r19,r16,1
10008104:	003fcd06 	br	1000803c <__alt_data_end+0xf800803c>

10008108 <scalbn>:
10008108:	2a1ffc2c 	andhi	r8,r5,32752
1000810c:	4011d53a 	srai	r8,r8,20
10008110:	defffe04 	addi	sp,sp,-8
10008114:	dc000015 	stw	r16,0(sp)
10008118:	dfc00115 	stw	ra,4(sp)
1000811c:	280f883a 	mov	r7,r5
10008120:	2015883a 	mov	r10,r4
10008124:	3021883a 	mov	r16,r6
10008128:	40001e1e 	bne	r8,zero,100081a4 <scalbn+0x9c>
1000812c:	00a00034 	movhi	r2,32768
10008130:	10bfffc4 	addi	r2,r2,-1
10008134:	2884703a 	and	r2,r5,r2
10008138:	1104b03a 	or	r2,r2,r4
1000813c:	10002226 	beq	r2,zero,100081c8 <scalbn+0xc0>
10008140:	01d0d434 	movhi	r7,17232
10008144:	000d883a 	mov	r6,zero
10008148:	000a9500 	call	1000a950 <__muldf3>
1000814c:	013ffff4 	movhi	r4,65535
10008150:	210f2c04 	addi	r4,r4,15536
10008154:	1015883a 	mov	r10,r2
10008158:	180f883a 	mov	r7,r3
1000815c:	81002a16 	blt	r16,r4,10008208 <scalbn+0x100>
10008160:	191ffc2c 	andhi	r4,r3,32752
10008164:	2009d53a 	srai	r4,r4,20
10008168:	223ff284 	addi	r8,r4,-54
1000816c:	8211883a 	add	r8,r16,r8
10008170:	0081ff84 	movi	r2,2046
10008174:	12002f16 	blt	r2,r8,10008234 <scalbn+0x12c>
10008178:	0200190e 	bge	zero,r8,100081e0 <scalbn+0xd8>
1000817c:	4010953a 	slli	r8,r8,20
10008180:	01600434 	movhi	r5,32784
10008184:	297fffc4 	addi	r5,r5,-1
10008188:	194e703a 	and	r7,r3,r5
1000818c:	5005883a 	mov	r2,r10
10008190:	3a06b03a 	or	r3,r7,r8
10008194:	dfc00117 	ldw	ra,4(sp)
10008198:	dc000017 	ldw	r16,0(sp)
1000819c:	dec00204 	addi	sp,sp,8
100081a0:	f800283a 	ret
100081a4:	0081ffc4 	movi	r2,2047
100081a8:	2807883a 	mov	r3,r5
100081ac:	40bfef1e 	bne	r8,r2,1000816c <__alt_data_end+0xf800816c>
100081b0:	200d883a 	mov	r6,r4
100081b4:	00095700 	call	10009570 <__adddf3>
100081b8:	dfc00117 	ldw	ra,4(sp)
100081bc:	dc000017 	ldw	r16,0(sp)
100081c0:	dec00204 	addi	sp,sp,8
100081c4:	f800283a 	ret
100081c8:	2005883a 	mov	r2,r4
100081cc:	2807883a 	mov	r3,r5
100081d0:	dfc00117 	ldw	ra,4(sp)
100081d4:	dc000017 	ldw	r16,0(sp)
100081d8:	dec00204 	addi	sp,sp,8
100081dc:	f800283a 	ret
100081e0:	00bff2c4 	movi	r2,-53
100081e4:	4080240e 	bge	r8,r2,10008278 <scalbn+0x170>
100081e8:	00b0d414 	movui	r2,50000
100081ec:	14001116 	blt	r2,r16,10008234 <scalbn+0x12c>
100081f0:	0130be74 	movhi	r4,49913
100081f4:	01406974 	movhi	r5,421
100081f8:	213cd644 	addi	r4,r4,-3239
100081fc:	295b87c4 	addi	r5,r5,28191
10008200:	500d883a 	mov	r6,r10
10008204:	00082a40 	call	100082a4 <copysign>
10008208:	01b0be74 	movhi	r6,49913
1000820c:	01c06974 	movhi	r7,421
10008210:	31bcd644 	addi	r6,r6,-3239
10008214:	39db87c4 	addi	r7,r7,28191
10008218:	1009883a 	mov	r4,r2
1000821c:	180b883a 	mov	r5,r3
10008220:	000a9500 	call	1000a950 <__muldf3>
10008224:	dfc00117 	ldw	ra,4(sp)
10008228:	dc000017 	ldw	r16,0(sp)
1000822c:	dec00204 	addi	sp,sp,8
10008230:	f800283a 	ret
10008234:	01220034 	movhi	r4,34816
10008238:	015f8e34 	movhi	r5,32312
1000823c:	500d883a 	mov	r6,r10
10008240:	211d6704 	addi	r4,r4,30108
10008244:	29790f04 	addi	r5,r5,-7108
10008248:	00082a40 	call	100082a4 <copysign>
1000824c:	01a20034 	movhi	r6,34816
10008250:	01df8e34 	movhi	r7,32312
10008254:	319d6704 	addi	r6,r6,30108
10008258:	39f90f04 	addi	r7,r7,-7108
1000825c:	1009883a 	mov	r4,r2
10008260:	180b883a 	mov	r5,r3
10008264:	000a9500 	call	1000a950 <__muldf3>
10008268:	dfc00117 	ldw	ra,4(sp)
1000826c:	dc000017 	ldw	r16,0(sp)
10008270:	dec00204 	addi	sp,sp,8
10008274:	f800283a 	ret
10008278:	42000d84 	addi	r8,r8,54
1000827c:	4012953a 	slli	r9,r8,20
10008280:	01e00434 	movhi	r7,32784
10008284:	39ffffc4 	addi	r7,r7,-1
10008288:	19ca703a 	and	r5,r3,r7
1000828c:	000d883a 	mov	r6,zero
10008290:	01cf2434 	movhi	r7,15504
10008294:	5009883a 	mov	r4,r10
10008298:	494ab03a 	or	r5,r9,r5
1000829c:	000a9500 	call	1000a950 <__muldf3>
100082a0:	003fbc06 	br	10008194 <__alt_data_end+0xf8008194>

100082a4 <copysign>:
100082a4:	2005883a 	mov	r2,r4
100082a8:	01200034 	movhi	r4,32768
100082ac:	213fffc4 	addi	r4,r4,-1
100082b0:	38e0002c 	andhi	r3,r7,32768
100082b4:	290a703a 	and	r5,r5,r4
100082b8:	28c6b03a 	or	r3,r5,r3
100082bc:	f800283a 	ret

100082c0 <__muldi3>:
100082c0:	defff604 	addi	sp,sp,-40
100082c4:	dd800615 	stw	r22,24(sp)
100082c8:	dd400515 	stw	r21,20(sp)
100082cc:	dc400115 	stw	r17,4(sp)
100082d0:	357fffcc 	andi	r21,r6,65535
100082d4:	2022d43a 	srli	r17,r4,16
100082d8:	25bfffcc 	andi	r22,r4,65535
100082dc:	dcc00315 	stw	r19,12(sp)
100082e0:	dc800215 	stw	r18,8(sp)
100082e4:	2027883a 	mov	r19,r4
100082e8:	2825883a 	mov	r18,r5
100082ec:	b009883a 	mov	r4,r22
100082f0:	a80b883a 	mov	r5,r21
100082f4:	dfc00915 	stw	ra,36(sp)
100082f8:	df000815 	stw	fp,32(sp)
100082fc:	ddc00715 	stw	r23,28(sp)
10008300:	3839883a 	mov	fp,r7
10008304:	302ed43a 	srli	r23,r6,16
10008308:	dd000415 	stw	r20,16(sp)
1000830c:	dc000015 	stw	r16,0(sp)
10008310:	3029883a 	mov	r20,r6
10008314:	00085800 	call	10008580 <__mulsi3>
10008318:	a80b883a 	mov	r5,r21
1000831c:	8809883a 	mov	r4,r17
10008320:	1021883a 	mov	r16,r2
10008324:	00085800 	call	10008580 <__mulsi3>
10008328:	8809883a 	mov	r4,r17
1000832c:	b80b883a 	mov	r5,r23
10008330:	102b883a 	mov	r21,r2
10008334:	00085800 	call	10008580 <__mulsi3>
10008338:	b80b883a 	mov	r5,r23
1000833c:	b009883a 	mov	r4,r22
10008340:	1023883a 	mov	r17,r2
10008344:	00085800 	call	10008580 <__mulsi3>
10008348:	8006d43a 	srli	r3,r16,16
1000834c:	1545883a 	add	r2,r2,r21
10008350:	1885883a 	add	r2,r3,r2
10008354:	1540022e 	bgeu	r2,r21,10008360 <__muldi3+0xa0>
10008358:	00c00074 	movhi	r3,1
1000835c:	88e3883a 	add	r17,r17,r3
10008360:	1006d43a 	srli	r3,r2,16
10008364:	1004943a 	slli	r2,r2,16
10008368:	e00b883a 	mov	r5,fp
1000836c:	9809883a 	mov	r4,r19
10008370:	843fffcc 	andi	r16,r16,65535
10008374:	1c63883a 	add	r17,r3,r17
10008378:	1421883a 	add	r16,r2,r16
1000837c:	00085800 	call	10008580 <__mulsi3>
10008380:	900b883a 	mov	r5,r18
10008384:	a009883a 	mov	r4,r20
10008388:	1027883a 	mov	r19,r2
1000838c:	00085800 	call	10008580 <__mulsi3>
10008390:	9885883a 	add	r2,r19,r2
10008394:	1447883a 	add	r3,r2,r17
10008398:	8005883a 	mov	r2,r16
1000839c:	dfc00917 	ldw	ra,36(sp)
100083a0:	df000817 	ldw	fp,32(sp)
100083a4:	ddc00717 	ldw	r23,28(sp)
100083a8:	dd800617 	ldw	r22,24(sp)
100083ac:	dd400517 	ldw	r21,20(sp)
100083b0:	dd000417 	ldw	r20,16(sp)
100083b4:	dcc00317 	ldw	r19,12(sp)
100083b8:	dc800217 	ldw	r18,8(sp)
100083bc:	dc400117 	ldw	r17,4(sp)
100083c0:	dc000017 	ldw	r16,0(sp)
100083c4:	dec00a04 	addi	sp,sp,40
100083c8:	f800283a 	ret

100083cc <__divsi3>:
100083cc:	20001b16 	blt	r4,zero,1000843c <__divsi3+0x70>
100083d0:	000f883a 	mov	r7,zero
100083d4:	28001616 	blt	r5,zero,10008430 <__divsi3+0x64>
100083d8:	200d883a 	mov	r6,r4
100083dc:	29001a2e 	bgeu	r5,r4,10008448 <__divsi3+0x7c>
100083e0:	00800804 	movi	r2,32
100083e4:	00c00044 	movi	r3,1
100083e8:	00000106 	br	100083f0 <__divsi3+0x24>
100083ec:	10000d26 	beq	r2,zero,10008424 <__divsi3+0x58>
100083f0:	294b883a 	add	r5,r5,r5
100083f4:	10bfffc4 	addi	r2,r2,-1
100083f8:	18c7883a 	add	r3,r3,r3
100083fc:	293ffb36 	bltu	r5,r4,100083ec <__alt_data_end+0xf80083ec>
10008400:	0005883a 	mov	r2,zero
10008404:	18000726 	beq	r3,zero,10008424 <__divsi3+0x58>
10008408:	0005883a 	mov	r2,zero
1000840c:	31400236 	bltu	r6,r5,10008418 <__divsi3+0x4c>
10008410:	314dc83a 	sub	r6,r6,r5
10008414:	10c4b03a 	or	r2,r2,r3
10008418:	1806d07a 	srli	r3,r3,1
1000841c:	280ad07a 	srli	r5,r5,1
10008420:	183ffa1e 	bne	r3,zero,1000840c <__alt_data_end+0xf800840c>
10008424:	38000126 	beq	r7,zero,1000842c <__divsi3+0x60>
10008428:	0085c83a 	sub	r2,zero,r2
1000842c:	f800283a 	ret
10008430:	014bc83a 	sub	r5,zero,r5
10008434:	39c0005c 	xori	r7,r7,1
10008438:	003fe706 	br	100083d8 <__alt_data_end+0xf80083d8>
1000843c:	0109c83a 	sub	r4,zero,r4
10008440:	01c00044 	movi	r7,1
10008444:	003fe306 	br	100083d4 <__alt_data_end+0xf80083d4>
10008448:	00c00044 	movi	r3,1
1000844c:	003fee06 	br	10008408 <__alt_data_end+0xf8008408>

10008450 <__modsi3>:
10008450:	20001716 	blt	r4,zero,100084b0 <__modsi3+0x60>
10008454:	000f883a 	mov	r7,zero
10008458:	2005883a 	mov	r2,r4
1000845c:	28001216 	blt	r5,zero,100084a8 <__modsi3+0x58>
10008460:	2900162e 	bgeu	r5,r4,100084bc <__modsi3+0x6c>
10008464:	01800804 	movi	r6,32
10008468:	00c00044 	movi	r3,1
1000846c:	00000106 	br	10008474 <__modsi3+0x24>
10008470:	30000a26 	beq	r6,zero,1000849c <__modsi3+0x4c>
10008474:	294b883a 	add	r5,r5,r5
10008478:	31bfffc4 	addi	r6,r6,-1
1000847c:	18c7883a 	add	r3,r3,r3
10008480:	293ffb36 	bltu	r5,r4,10008470 <__alt_data_end+0xf8008470>
10008484:	18000526 	beq	r3,zero,1000849c <__modsi3+0x4c>
10008488:	1806d07a 	srli	r3,r3,1
1000848c:	11400136 	bltu	r2,r5,10008494 <__modsi3+0x44>
10008490:	1145c83a 	sub	r2,r2,r5
10008494:	280ad07a 	srli	r5,r5,1
10008498:	183ffb1e 	bne	r3,zero,10008488 <__alt_data_end+0xf8008488>
1000849c:	38000126 	beq	r7,zero,100084a4 <__modsi3+0x54>
100084a0:	0085c83a 	sub	r2,zero,r2
100084a4:	f800283a 	ret
100084a8:	014bc83a 	sub	r5,zero,r5
100084ac:	003fec06 	br	10008460 <__alt_data_end+0xf8008460>
100084b0:	0109c83a 	sub	r4,zero,r4
100084b4:	01c00044 	movi	r7,1
100084b8:	003fe706 	br	10008458 <__alt_data_end+0xf8008458>
100084bc:	00c00044 	movi	r3,1
100084c0:	003ff106 	br	10008488 <__alt_data_end+0xf8008488>

100084c4 <__udivsi3>:
100084c4:	200d883a 	mov	r6,r4
100084c8:	2900152e 	bgeu	r5,r4,10008520 <__udivsi3+0x5c>
100084cc:	28001416 	blt	r5,zero,10008520 <__udivsi3+0x5c>
100084d0:	00800804 	movi	r2,32
100084d4:	00c00044 	movi	r3,1
100084d8:	00000206 	br	100084e4 <__udivsi3+0x20>
100084dc:	10000e26 	beq	r2,zero,10008518 <__udivsi3+0x54>
100084e0:	28000516 	blt	r5,zero,100084f8 <__udivsi3+0x34>
100084e4:	294b883a 	add	r5,r5,r5
100084e8:	10bfffc4 	addi	r2,r2,-1
100084ec:	18c7883a 	add	r3,r3,r3
100084f0:	293ffa36 	bltu	r5,r4,100084dc <__alt_data_end+0xf80084dc>
100084f4:	18000826 	beq	r3,zero,10008518 <__udivsi3+0x54>
100084f8:	0005883a 	mov	r2,zero
100084fc:	31400236 	bltu	r6,r5,10008508 <__udivsi3+0x44>
10008500:	314dc83a 	sub	r6,r6,r5
10008504:	10c4b03a 	or	r2,r2,r3
10008508:	1806d07a 	srli	r3,r3,1
1000850c:	280ad07a 	srli	r5,r5,1
10008510:	183ffa1e 	bne	r3,zero,100084fc <__alt_data_end+0xf80084fc>
10008514:	f800283a 	ret
10008518:	0005883a 	mov	r2,zero
1000851c:	f800283a 	ret
10008520:	00c00044 	movi	r3,1
10008524:	003ff406 	br	100084f8 <__alt_data_end+0xf80084f8>

10008528 <__umodsi3>:
10008528:	2005883a 	mov	r2,r4
1000852c:	2900122e 	bgeu	r5,r4,10008578 <__umodsi3+0x50>
10008530:	28001116 	blt	r5,zero,10008578 <__umodsi3+0x50>
10008534:	01800804 	movi	r6,32
10008538:	00c00044 	movi	r3,1
1000853c:	00000206 	br	10008548 <__umodsi3+0x20>
10008540:	30000c26 	beq	r6,zero,10008574 <__umodsi3+0x4c>
10008544:	28000516 	blt	r5,zero,1000855c <__umodsi3+0x34>
10008548:	294b883a 	add	r5,r5,r5
1000854c:	31bfffc4 	addi	r6,r6,-1
10008550:	18c7883a 	add	r3,r3,r3
10008554:	293ffa36 	bltu	r5,r4,10008540 <__alt_data_end+0xf8008540>
10008558:	18000626 	beq	r3,zero,10008574 <__umodsi3+0x4c>
1000855c:	1806d07a 	srli	r3,r3,1
10008560:	11400136 	bltu	r2,r5,10008568 <__umodsi3+0x40>
10008564:	1145c83a 	sub	r2,r2,r5
10008568:	280ad07a 	srli	r5,r5,1
1000856c:	183ffb1e 	bne	r3,zero,1000855c <__alt_data_end+0xf800855c>
10008570:	f800283a 	ret
10008574:	f800283a 	ret
10008578:	00c00044 	movi	r3,1
1000857c:	003ff706 	br	1000855c <__alt_data_end+0xf800855c>

10008580 <__mulsi3>:
10008580:	0005883a 	mov	r2,zero
10008584:	20000726 	beq	r4,zero,100085a4 <__mulsi3+0x24>
10008588:	20c0004c 	andi	r3,r4,1
1000858c:	2008d07a 	srli	r4,r4,1
10008590:	18000126 	beq	r3,zero,10008598 <__mulsi3+0x18>
10008594:	1145883a 	add	r2,r2,r5
10008598:	294b883a 	add	r5,r5,r5
1000859c:	203ffa1e 	bne	r4,zero,10008588 <__alt_data_end+0xf8008588>
100085a0:	f800283a 	ret
100085a4:	f800283a 	ret

100085a8 <__addsf3>:
100085a8:	defffc04 	addi	sp,sp,-16
100085ac:	2004d7fa 	srli	r2,r4,31
100085b0:	280cd5fa 	srli	r6,r5,23
100085b4:	dc000015 	stw	r16,0(sp)
100085b8:	00c02034 	movhi	r3,128
100085bc:	2020d5fa 	srli	r16,r4,23
100085c0:	280ed7fa 	srli	r7,r5,31
100085c4:	18ffffc4 	addi	r3,r3,-1
100085c8:	dc400115 	stw	r17,4(sp)
100085cc:	1908703a 	and	r4,r3,r4
100085d0:	194a703a 	and	r5,r3,r5
100085d4:	dfc00315 	stw	ra,12(sp)
100085d8:	dc800215 	stw	r18,8(sp)
100085dc:	14403fcc 	andi	r17,r2,255
100085e0:	84003fcc 	andi	r16,r16,255
100085e4:	200890fa 	slli	r4,r4,3
100085e8:	31803fcc 	andi	r6,r6,255
100085ec:	280a90fa 	slli	r5,r5,3
100085f0:	89c05026 	beq	r17,r7,10008734 <__addsf3+0x18c>
100085f4:	8185c83a 	sub	r2,r16,r6
100085f8:	00807a0e 	bge	zero,r2,100087e4 <__addsf3+0x23c>
100085fc:	30001e1e 	bne	r6,zero,10008678 <__addsf3+0xd0>
10008600:	28006d1e 	bne	r5,zero,100087b8 <__addsf3+0x210>
10008604:	208001cc 	andi	r2,r4,7
10008608:	10000426 	beq	r2,zero,1000861c <__addsf3+0x74>
1000860c:	208003cc 	andi	r2,r4,15
10008610:	00c00104 	movi	r3,4
10008614:	10c00126 	beq	r2,r3,1000861c <__addsf3+0x74>
10008618:	20c9883a 	add	r4,r4,r3
1000861c:	2081002c 	andhi	r2,r4,1024
10008620:	10003926 	beq	r2,zero,10008708 <__addsf3+0x160>
10008624:	84000044 	addi	r16,r16,1
10008628:	00803fc4 	movi	r2,255
1000862c:	80807826 	beq	r16,r2,10008810 <__addsf3+0x268>
10008630:	200891ba 	slli	r4,r4,6
10008634:	8805883a 	mov	r2,r17
10008638:	2008d27a 	srli	r4,r4,9
1000863c:	84003fcc 	andi	r16,r16,255
10008640:	800695fa 	slli	r3,r16,23
10008644:	10803fcc 	andi	r2,r2,255
10008648:	04002034 	movhi	r16,128
1000864c:	843fffc4 	addi	r16,r16,-1
10008650:	100497fa 	slli	r2,r2,31
10008654:	2408703a 	and	r4,r4,r16
10008658:	20e0b03a 	or	r16,r4,r3
1000865c:	8084b03a 	or	r2,r16,r2
10008660:	dfc00317 	ldw	ra,12(sp)
10008664:	dc800217 	ldw	r18,8(sp)
10008668:	dc400117 	ldw	r17,4(sp)
1000866c:	dc000017 	ldw	r16,0(sp)
10008670:	dec00404 	addi	sp,sp,16
10008674:	f800283a 	ret
10008678:	00c03fc4 	movi	r3,255
1000867c:	80ffe126 	beq	r16,r3,10008604 <__alt_data_end+0xf8008604>
10008680:	29410034 	orhi	r5,r5,1024
10008684:	00c006c4 	movi	r3,27
10008688:	18807516 	blt	r3,r2,10008860 <__addsf3+0x2b8>
1000868c:	00c00804 	movi	r3,32
10008690:	1887c83a 	sub	r3,r3,r2
10008694:	28c6983a 	sll	r3,r5,r3
10008698:	288ad83a 	srl	r5,r5,r2
1000869c:	1804c03a 	cmpne	r2,r3,zero
100086a0:	288ab03a 	or	r5,r5,r2
100086a4:	2149c83a 	sub	r4,r4,r5
100086a8:	2081002c 	andhi	r2,r4,1024
100086ac:	10001426 	beq	r2,zero,10008700 <__addsf3+0x158>
100086b0:	04810034 	movhi	r18,1024
100086b4:	94bfffc4 	addi	r18,r18,-1
100086b8:	24a4703a 	and	r18,r4,r18
100086bc:	9009883a 	mov	r4,r18
100086c0:	000becc0 	call	1000becc <__clzsi2>
100086c4:	10bffec4 	addi	r2,r2,-5
100086c8:	90a4983a 	sll	r18,r18,r2
100086cc:	14005416 	blt	r2,r16,10008820 <__addsf3+0x278>
100086d0:	1405c83a 	sub	r2,r2,r16
100086d4:	11000044 	addi	r4,r2,1
100086d8:	00800804 	movi	r2,32
100086dc:	1105c83a 	sub	r2,r2,r4
100086e0:	9084983a 	sll	r2,r18,r2
100086e4:	9124d83a 	srl	r18,r18,r4
100086e8:	0021883a 	mov	r16,zero
100086ec:	1008c03a 	cmpne	r4,r2,zero
100086f0:	9108b03a 	or	r4,r18,r4
100086f4:	003fc306 	br	10008604 <__alt_data_end+0xf8008604>
100086f8:	1000db26 	beq	r2,zero,10008a68 <__addsf3+0x4c0>
100086fc:	1009883a 	mov	r4,r2
10008700:	208001cc 	andi	r2,r4,7
10008704:	103fc11e 	bne	r2,zero,1000860c <__alt_data_end+0xf800860c>
10008708:	2006d0fa 	srli	r3,r4,3
1000870c:	01003fc4 	movi	r4,255
10008710:	8805883a 	mov	r2,r17
10008714:	8100241e 	bne	r16,r4,100087a8 <__addsf3+0x200>
10008718:	18006e26 	beq	r3,zero,100088d4 <__addsf3+0x32c>
1000871c:	19001034 	orhi	r4,r3,64
10008720:	00c02034 	movhi	r3,128
10008724:	18ffffc4 	addi	r3,r3,-1
10008728:	043fffc4 	movi	r16,-1
1000872c:	20c8703a 	and	r4,r4,r3
10008730:	003fc206 	br	1000863c <__alt_data_end+0xf800863c>
10008734:	8187c83a 	sub	r3,r16,r6
10008738:	00c03e0e 	bge	zero,r3,10008834 <__addsf3+0x28c>
1000873c:	30002326 	beq	r6,zero,100087cc <__addsf3+0x224>
10008740:	01803fc4 	movi	r6,255
10008744:	81bfaf26 	beq	r16,r6,10008604 <__alt_data_end+0xf8008604>
10008748:	29410034 	orhi	r5,r5,1024
1000874c:	018006c4 	movi	r6,27
10008750:	30c07416 	blt	r6,r3,10008924 <__addsf3+0x37c>
10008754:	01800804 	movi	r6,32
10008758:	30cdc83a 	sub	r6,r6,r3
1000875c:	298c983a 	sll	r6,r5,r6
10008760:	28cad83a 	srl	r5,r5,r3
10008764:	3006c03a 	cmpne	r3,r6,zero
10008768:	28cab03a 	or	r5,r5,r3
1000876c:	2149883a 	add	r4,r4,r5
10008770:	20c1002c 	andhi	r3,r4,1024
10008774:	183fe226 	beq	r3,zero,10008700 <__alt_data_end+0xf8008700>
10008778:	84000044 	addi	r16,r16,1
1000877c:	00c03fc4 	movi	r3,255
10008780:	80c05426 	beq	r16,r3,100088d4 <__addsf3+0x32c>
10008784:	00bf0034 	movhi	r2,64512
10008788:	10bfffc4 	addi	r2,r2,-1
1000878c:	20c0004c 	andi	r3,r4,1
10008790:	2088703a 	and	r4,r4,r2
10008794:	2008d07a 	srli	r4,r4,1
10008798:	20c8b03a 	or	r4,r4,r3
1000879c:	003f9906 	br	10008604 <__alt_data_end+0xf8008604>
100087a0:	0007883a 	mov	r3,zero
100087a4:	0005883a 	mov	r2,zero
100087a8:	01002034 	movhi	r4,128
100087ac:	213fffc4 	addi	r4,r4,-1
100087b0:	1908703a 	and	r4,r3,r4
100087b4:	003fa106 	br	1000863c <__alt_data_end+0xf800863c>
100087b8:	10bfffc4 	addi	r2,r2,-1
100087bc:	103fb926 	beq	r2,zero,100086a4 <__alt_data_end+0xf80086a4>
100087c0:	00c03fc4 	movi	r3,255
100087c4:	80ffaf1e 	bne	r16,r3,10008684 <__alt_data_end+0xf8008684>
100087c8:	003f8e06 	br	10008604 <__alt_data_end+0xf8008604>
100087cc:	283f8d26 	beq	r5,zero,10008604 <__alt_data_end+0xf8008604>
100087d0:	18ffffc4 	addi	r3,r3,-1
100087d4:	183fe526 	beq	r3,zero,1000876c <__alt_data_end+0xf800876c>
100087d8:	01803fc4 	movi	r6,255
100087dc:	81bfdb1e 	bne	r16,r6,1000874c <__alt_data_end+0xf800874c>
100087e0:	003f8806 	br	10008604 <__alt_data_end+0xf8008604>
100087e4:	1000201e 	bne	r2,zero,10008868 <__addsf3+0x2c0>
100087e8:	80800044 	addi	r2,r16,1
100087ec:	10803fcc 	andi	r2,r2,255
100087f0:	01800044 	movi	r6,1
100087f4:	3080450e 	bge	r6,r2,1000890c <__addsf3+0x364>
100087f8:	2165c83a 	sub	r18,r4,r5
100087fc:	90c1002c 	andhi	r3,r18,1024
10008800:	18002b26 	beq	r3,zero,100088b0 <__addsf3+0x308>
10008804:	2925c83a 	sub	r18,r5,r4
10008808:	3823883a 	mov	r17,r7
1000880c:	003fab06 	br	100086bc <__alt_data_end+0xf80086bc>
10008810:	8805883a 	mov	r2,r17
10008814:	043fffc4 	movi	r16,-1
10008818:	0009883a 	mov	r4,zero
1000881c:	003f8706 	br	1000863c <__alt_data_end+0xf800863c>
10008820:	013f0034 	movhi	r4,64512
10008824:	213fffc4 	addi	r4,r4,-1
10008828:	80a1c83a 	sub	r16,r16,r2
1000882c:	9108703a 	and	r4,r18,r4
10008830:	003f7406 	br	10008604 <__alt_data_end+0xf8008604>
10008834:	1800411e 	bne	r3,zero,1000893c <__addsf3+0x394>
10008838:	80c00044 	addi	r3,r16,1
1000883c:	19c03fcc 	andi	r7,r3,255
10008840:	01800044 	movi	r6,1
10008844:	31c0260e 	bge	r6,r7,100088e0 <__addsf3+0x338>
10008848:	01803fc4 	movi	r6,255
1000884c:	19802126 	beq	r3,r6,100088d4 <__addsf3+0x32c>
10008850:	2149883a 	add	r4,r4,r5
10008854:	2008d07a 	srli	r4,r4,1
10008858:	1821883a 	mov	r16,r3
1000885c:	003f6906 	br	10008604 <__alt_data_end+0xf8008604>
10008860:	01400044 	movi	r5,1
10008864:	003f8f06 	br	100086a4 <__alt_data_end+0xf80086a4>
10008868:	8000151e 	bne	r16,zero,100088c0 <__addsf3+0x318>
1000886c:	20002f26 	beq	r4,zero,1000892c <__addsf3+0x384>
10008870:	0084303a 	nor	r2,zero,r2
10008874:	10000a26 	beq	r2,zero,100088a0 <__addsf3+0x2f8>
10008878:	00c03fc4 	movi	r3,255
1000887c:	30c02b26 	beq	r6,r3,1000892c <__addsf3+0x384>
10008880:	00c006c4 	movi	r3,27
10008884:	18806d16 	blt	r3,r2,10008a3c <__addsf3+0x494>
10008888:	00c00804 	movi	r3,32
1000888c:	1887c83a 	sub	r3,r3,r2
10008890:	20c6983a 	sll	r3,r4,r3
10008894:	2084d83a 	srl	r2,r4,r2
10008898:	1808c03a 	cmpne	r4,r3,zero
1000889c:	1108b03a 	or	r4,r2,r4
100088a0:	2909c83a 	sub	r4,r5,r4
100088a4:	3021883a 	mov	r16,r6
100088a8:	3823883a 	mov	r17,r7
100088ac:	003f7e06 	br	100086a8 <__alt_data_end+0xf80086a8>
100088b0:	903f821e 	bne	r18,zero,100086bc <__alt_data_end+0xf80086bc>
100088b4:	0005883a 	mov	r2,zero
100088b8:	0021883a 	mov	r16,zero
100088bc:	003fba06 	br	100087a8 <__alt_data_end+0xf80087a8>
100088c0:	00c03fc4 	movi	r3,255
100088c4:	30c01926 	beq	r6,r3,1000892c <__addsf3+0x384>
100088c8:	0085c83a 	sub	r2,zero,r2
100088cc:	21010034 	orhi	r4,r4,1024
100088d0:	003feb06 	br	10008880 <__alt_data_end+0xf8008880>
100088d4:	043fffc4 	movi	r16,-1
100088d8:	0009883a 	mov	r4,zero
100088dc:	003f5706 	br	1000863c <__alt_data_end+0xf800863c>
100088e0:	80004a1e 	bne	r16,zero,10008a0c <__addsf3+0x464>
100088e4:	20005926 	beq	r4,zero,10008a4c <__addsf3+0x4a4>
100088e8:	283f4626 	beq	r5,zero,10008604 <__alt_data_end+0xf8008604>
100088ec:	2149883a 	add	r4,r4,r5
100088f0:	2081002c 	andhi	r2,r4,1024
100088f4:	103f8226 	beq	r2,zero,10008700 <__alt_data_end+0xf8008700>
100088f8:	00bf0034 	movhi	r2,64512
100088fc:	10bfffc4 	addi	r2,r2,-1
10008900:	3021883a 	mov	r16,r6
10008904:	2088703a 	and	r4,r4,r2
10008908:	003f3e06 	br	10008604 <__alt_data_end+0xf8008604>
1000890c:	8000121e 	bne	r16,zero,10008958 <__addsf3+0x3b0>
10008910:	2000261e 	bne	r4,zero,100089ac <__addsf3+0x404>
10008914:	283fa226 	beq	r5,zero,100087a0 <__alt_data_end+0xf80087a0>
10008918:	2809883a 	mov	r4,r5
1000891c:	3823883a 	mov	r17,r7
10008920:	003f3806 	br	10008604 <__alt_data_end+0xf8008604>
10008924:	01400044 	movi	r5,1
10008928:	003f9006 	br	1000876c <__alt_data_end+0xf800876c>
1000892c:	2809883a 	mov	r4,r5
10008930:	3021883a 	mov	r16,r6
10008934:	3823883a 	mov	r17,r7
10008938:	003f3206 	br	10008604 <__alt_data_end+0xf8008604>
1000893c:	80000c1e 	bne	r16,zero,10008970 <__addsf3+0x3c8>
10008940:	20002f26 	beq	r4,zero,10008a00 <__addsf3+0x458>
10008944:	00c6303a 	nor	r3,zero,r3
10008948:	18002b1e 	bne	r3,zero,100089f8 <__addsf3+0x450>
1000894c:	2149883a 	add	r4,r4,r5
10008950:	3021883a 	mov	r16,r6
10008954:	003f8606 	br	10008770 <__alt_data_end+0xf8008770>
10008958:	20001b1e 	bne	r4,zero,100089c8 <__addsf3+0x420>
1000895c:	28003926 	beq	r5,zero,10008a44 <__addsf3+0x49c>
10008960:	2809883a 	mov	r4,r5
10008964:	3823883a 	mov	r17,r7
10008968:	04003fc4 	movi	r16,255
1000896c:	003f2506 	br	10008604 <__alt_data_end+0xf8008604>
10008970:	01c03fc4 	movi	r7,255
10008974:	31c02226 	beq	r6,r7,10008a00 <__addsf3+0x458>
10008978:	00c7c83a 	sub	r3,zero,r3
1000897c:	21010034 	orhi	r4,r4,1024
10008980:	01c006c4 	movi	r7,27
10008984:	38c03616 	blt	r7,r3,10008a60 <__addsf3+0x4b8>
10008988:	01c00804 	movi	r7,32
1000898c:	38cfc83a 	sub	r7,r7,r3
10008990:	21ce983a 	sll	r7,r4,r7
10008994:	20c6d83a 	srl	r3,r4,r3
10008998:	3808c03a 	cmpne	r4,r7,zero
1000899c:	1906b03a 	or	r3,r3,r4
100089a0:	1949883a 	add	r4,r3,r5
100089a4:	3021883a 	mov	r16,r6
100089a8:	003f7106 	br	10008770 <__alt_data_end+0xf8008770>
100089ac:	283f1526 	beq	r5,zero,10008604 <__alt_data_end+0xf8008604>
100089b0:	2145c83a 	sub	r2,r4,r5
100089b4:	10c1002c 	andhi	r3,r2,1024
100089b8:	183f4f26 	beq	r3,zero,100086f8 <__alt_data_end+0xf80086f8>
100089bc:	2909c83a 	sub	r4,r5,r4
100089c0:	3823883a 	mov	r17,r7
100089c4:	003f0f06 	br	10008604 <__alt_data_end+0xf8008604>
100089c8:	28001a26 	beq	r5,zero,10008a34 <__addsf3+0x48c>
100089cc:	2008d0fa 	srli	r4,r4,3
100089d0:	2080102c 	andhi	r2,r4,64
100089d4:	10000526 	beq	r2,zero,100089ec <__addsf3+0x444>
100089d8:	280ad0fa 	srli	r5,r5,3
100089dc:	2880102c 	andhi	r2,r5,64
100089e0:	1000021e 	bne	r2,zero,100089ec <__addsf3+0x444>
100089e4:	2809883a 	mov	r4,r5
100089e8:	3823883a 	mov	r17,r7
100089ec:	200890fa 	slli	r4,r4,3
100089f0:	04003fc4 	movi	r16,255
100089f4:	003f0306 	br	10008604 <__alt_data_end+0xf8008604>
100089f8:	01c03fc4 	movi	r7,255
100089fc:	31ffe01e 	bne	r6,r7,10008980 <__alt_data_end+0xf8008980>
10008a00:	2809883a 	mov	r4,r5
10008a04:	3021883a 	mov	r16,r6
10008a08:	003efe06 	br	10008604 <__alt_data_end+0xf8008604>
10008a0c:	20001126 	beq	r4,zero,10008a54 <__addsf3+0x4ac>
10008a10:	28000826 	beq	r5,zero,10008a34 <__addsf3+0x48c>
10008a14:	2008d0fa 	srli	r4,r4,3
10008a18:	2080102c 	andhi	r2,r4,64
10008a1c:	103ff326 	beq	r2,zero,100089ec <__alt_data_end+0xf80089ec>
10008a20:	280ad0fa 	srli	r5,r5,3
10008a24:	2880102c 	andhi	r2,r5,64
10008a28:	103ff01e 	bne	r2,zero,100089ec <__alt_data_end+0xf80089ec>
10008a2c:	2809883a 	mov	r4,r5
10008a30:	003fee06 	br	100089ec <__alt_data_end+0xf80089ec>
10008a34:	04003fc4 	movi	r16,255
10008a38:	003ef206 	br	10008604 <__alt_data_end+0xf8008604>
10008a3c:	01000044 	movi	r4,1
10008a40:	003f9706 	br	100088a0 <__alt_data_end+0xf80088a0>
10008a44:	0005883a 	mov	r2,zero
10008a48:	003f3406 	br	1000871c <__alt_data_end+0xf800871c>
10008a4c:	2809883a 	mov	r4,r5
10008a50:	003eec06 	br	10008604 <__alt_data_end+0xf8008604>
10008a54:	2809883a 	mov	r4,r5
10008a58:	04003fc4 	movi	r16,255
10008a5c:	003ee906 	br	10008604 <__alt_data_end+0xf8008604>
10008a60:	00c00044 	movi	r3,1
10008a64:	003fce06 	br	100089a0 <__alt_data_end+0xf80089a0>
10008a68:	0005883a 	mov	r2,zero
10008a6c:	003f4e06 	br	100087a8 <__alt_data_end+0xf80087a8>

10008a70 <__lesf2>:
10008a70:	2004d5fa 	srli	r2,r4,23
10008a74:	280cd5fa 	srli	r6,r5,23
10008a78:	00c02034 	movhi	r3,128
10008a7c:	18ffffc4 	addi	r3,r3,-1
10008a80:	10803fcc 	andi	r2,r2,255
10008a84:	01c03fc4 	movi	r7,255
10008a88:	1910703a 	and	r8,r3,r4
10008a8c:	31803fcc 	andi	r6,r6,255
10008a90:	1946703a 	and	r3,r3,r5
10008a94:	2008d7fa 	srli	r4,r4,31
10008a98:	280ad7fa 	srli	r5,r5,31
10008a9c:	11c01b26 	beq	r2,r7,10008b0c <__lesf2+0x9c>
10008aa0:	01c03fc4 	movi	r7,255
10008aa4:	31c01126 	beq	r6,r7,10008aec <__lesf2+0x7c>
10008aa8:	1000071e 	bne	r2,zero,10008ac8 <__lesf2+0x58>
10008aac:	400f003a 	cmpeq	r7,r8,zero
10008ab0:	21003fcc 	andi	r4,r4,255
10008ab4:	3000081e 	bne	r6,zero,10008ad8 <__lesf2+0x68>
10008ab8:	1800071e 	bne	r3,zero,10008ad8 <__lesf2+0x68>
10008abc:	0005883a 	mov	r2,zero
10008ac0:	40000f1e 	bne	r8,zero,10008b00 <__lesf2+0x90>
10008ac4:	f800283a 	ret
10008ac8:	21003fcc 	andi	r4,r4,255
10008acc:	30000a1e 	bne	r6,zero,10008af8 <__lesf2+0x88>
10008ad0:	18000b26 	beq	r3,zero,10008b00 <__lesf2+0x90>
10008ad4:	000f883a 	mov	r7,zero
10008ad8:	29403fcc 	andi	r5,r5,255
10008adc:	38000726 	beq	r7,zero,10008afc <__lesf2+0x8c>
10008ae0:	28000826 	beq	r5,zero,10008b04 <__lesf2+0x94>
10008ae4:	00800044 	movi	r2,1
10008ae8:	f800283a 	ret
10008aec:	183fee26 	beq	r3,zero,10008aa8 <__alt_data_end+0xf8008aa8>
10008af0:	00800084 	movi	r2,2
10008af4:	f800283a 	ret
10008af8:	29403fcc 	andi	r5,r5,255
10008afc:	21400626 	beq	r4,r5,10008b18 <__lesf2+0xa8>
10008b00:	203ff826 	beq	r4,zero,10008ae4 <__alt_data_end+0xf8008ae4>
10008b04:	00bfffc4 	movi	r2,-1
10008b08:	f800283a 	ret
10008b0c:	403fe426 	beq	r8,zero,10008aa0 <__alt_data_end+0xf8008aa0>
10008b10:	00800084 	movi	r2,2
10008b14:	f800283a 	ret
10008b18:	30bff916 	blt	r6,r2,10008b00 <__alt_data_end+0xf8008b00>
10008b1c:	11800216 	blt	r2,r6,10008b28 <__lesf2+0xb8>
10008b20:	1a3ff736 	bltu	r3,r8,10008b00 <__alt_data_end+0xf8008b00>
10008b24:	40c0022e 	bgeu	r8,r3,10008b30 <__lesf2+0xc0>
10008b28:	203fee1e 	bne	r4,zero,10008ae4 <__alt_data_end+0xf8008ae4>
10008b2c:	003ff506 	br	10008b04 <__alt_data_end+0xf8008b04>
10008b30:	0005883a 	mov	r2,zero
10008b34:	f800283a 	ret

10008b38 <__mulsf3>:
10008b38:	defff504 	addi	sp,sp,-44
10008b3c:	dc000115 	stw	r16,4(sp)
10008b40:	2020d5fa 	srli	r16,r4,23
10008b44:	dd400615 	stw	r21,24(sp)
10008b48:	202ad7fa 	srli	r21,r4,31
10008b4c:	dc800315 	stw	r18,12(sp)
10008b50:	04802034 	movhi	r18,128
10008b54:	df000915 	stw	fp,36(sp)
10008b58:	dd000515 	stw	r20,20(sp)
10008b5c:	94bfffc4 	addi	r18,r18,-1
10008b60:	dfc00a15 	stw	ra,40(sp)
10008b64:	ddc00815 	stw	r23,32(sp)
10008b68:	dd800715 	stw	r22,28(sp)
10008b6c:	dcc00415 	stw	r19,16(sp)
10008b70:	dc400215 	stw	r17,8(sp)
10008b74:	84003fcc 	andi	r16,r16,255
10008b78:	9124703a 	and	r18,r18,r4
10008b7c:	a829883a 	mov	r20,r21
10008b80:	af003fcc 	andi	fp,r21,255
10008b84:	80005426 	beq	r16,zero,10008cd8 <__mulsf3+0x1a0>
10008b88:	00803fc4 	movi	r2,255
10008b8c:	80802f26 	beq	r16,r2,10008c4c <__mulsf3+0x114>
10008b90:	91002034 	orhi	r4,r18,128
10008b94:	202490fa 	slli	r18,r4,3
10008b98:	843fe044 	addi	r16,r16,-127
10008b9c:	0023883a 	mov	r17,zero
10008ba0:	002f883a 	mov	r23,zero
10008ba4:	2804d5fa 	srli	r2,r5,23
10008ba8:	282cd7fa 	srli	r22,r5,31
10008bac:	01002034 	movhi	r4,128
10008bb0:	213fffc4 	addi	r4,r4,-1
10008bb4:	10803fcc 	andi	r2,r2,255
10008bb8:	2166703a 	and	r19,r4,r5
10008bbc:	b1803fcc 	andi	r6,r22,255
10008bc0:	10004c26 	beq	r2,zero,10008cf4 <__mulsf3+0x1bc>
10008bc4:	00c03fc4 	movi	r3,255
10008bc8:	10c04726 	beq	r2,r3,10008ce8 <__mulsf3+0x1b0>
10008bcc:	99002034 	orhi	r4,r19,128
10008bd0:	202690fa 	slli	r19,r4,3
10008bd4:	10bfe044 	addi	r2,r2,-127
10008bd8:	0007883a 	mov	r3,zero
10008bdc:	80a1883a 	add	r16,r16,r2
10008be0:	010003c4 	movi	r4,15
10008be4:	1c44b03a 	or	r2,r3,r17
10008be8:	b56af03a 	xor	r21,r22,r21
10008bec:	81c00044 	addi	r7,r16,1
10008bf0:	20806b36 	bltu	r4,r2,10008da0 <__mulsf3+0x268>
10008bf4:	100490ba 	slli	r2,r2,2
10008bf8:	01040074 	movhi	r4,4097
10008bfc:	21230304 	addi	r4,r4,-29684
10008c00:	1105883a 	add	r2,r2,r4
10008c04:	10800017 	ldw	r2,0(r2)
10008c08:	1000683a 	jmp	r2
10008c0c:	10008da0 	cmpeqi	zero,r2,566
10008c10:	10008c60 	cmpeqi	zero,r2,561
10008c14:	10008c60 	cmpeqi	zero,r2,561
10008c18:	10008c5c 	xori	zero,r2,561
10008c1c:	10008d84 	addi	zero,r2,566
10008c20:	10008d84 	addi	zero,r2,566
10008c24:	10008d70 	cmpltui	zero,r2,565
10008c28:	10008c5c 	xori	zero,r2,561
10008c2c:	10008d84 	addi	zero,r2,566
10008c30:	10008d70 	cmpltui	zero,r2,565
10008c34:	10008d84 	addi	zero,r2,566
10008c38:	10008c5c 	xori	zero,r2,561
10008c3c:	10008d90 	cmplti	zero,r2,566
10008c40:	10008d90 	cmplti	zero,r2,566
10008c44:	10008d90 	cmplti	zero,r2,566
10008c48:	10008ea0 	cmpeqi	zero,r2,570
10008c4c:	90003b1e 	bne	r18,zero,10008d3c <__mulsf3+0x204>
10008c50:	04400204 	movi	r17,8
10008c54:	05c00084 	movi	r23,2
10008c58:	003fd206 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008c5c:	302b883a 	mov	r21,r6
10008c60:	00800084 	movi	r2,2
10008c64:	18802626 	beq	r3,r2,10008d00 <__mulsf3+0x1c8>
10008c68:	008000c4 	movi	r2,3
10008c6c:	1880b826 	beq	r3,r2,10008f50 <__mulsf3+0x418>
10008c70:	00800044 	movi	r2,1
10008c74:	1880af1e 	bne	r3,r2,10008f34 <__mulsf3+0x3fc>
10008c78:	a829883a 	mov	r20,r21
10008c7c:	0007883a 	mov	r3,zero
10008c80:	0009883a 	mov	r4,zero
10008c84:	18803fcc 	andi	r2,r3,255
10008c88:	100695fa 	slli	r3,r2,23
10008c8c:	a0803fcc 	andi	r2,r20,255
10008c90:	100a97fa 	slli	r5,r2,31
10008c94:	00802034 	movhi	r2,128
10008c98:	10bfffc4 	addi	r2,r2,-1
10008c9c:	2084703a 	and	r2,r4,r2
10008ca0:	10c4b03a 	or	r2,r2,r3
10008ca4:	1144b03a 	or	r2,r2,r5
10008ca8:	dfc00a17 	ldw	ra,40(sp)
10008cac:	df000917 	ldw	fp,36(sp)
10008cb0:	ddc00817 	ldw	r23,32(sp)
10008cb4:	dd800717 	ldw	r22,28(sp)
10008cb8:	dd400617 	ldw	r21,24(sp)
10008cbc:	dd000517 	ldw	r20,20(sp)
10008cc0:	dcc00417 	ldw	r19,16(sp)
10008cc4:	dc800317 	ldw	r18,12(sp)
10008cc8:	dc400217 	ldw	r17,8(sp)
10008ccc:	dc000117 	ldw	r16,4(sp)
10008cd0:	dec00b04 	addi	sp,sp,44
10008cd4:	f800283a 	ret
10008cd8:	90000d1e 	bne	r18,zero,10008d10 <__mulsf3+0x1d8>
10008cdc:	04400104 	movi	r17,4
10008ce0:	05c00044 	movi	r23,1
10008ce4:	003faf06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008ce8:	9806c03a 	cmpne	r3,r19,zero
10008cec:	18c00084 	addi	r3,r3,2
10008cf0:	003fba06 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008cf4:	9800141e 	bne	r19,zero,10008d48 <__mulsf3+0x210>
10008cf8:	00c00044 	movi	r3,1
10008cfc:	003fb706 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008d00:	a829883a 	mov	r20,r21
10008d04:	00ffffc4 	movi	r3,-1
10008d08:	0009883a 	mov	r4,zero
10008d0c:	003fdd06 	br	10008c84 <__alt_data_end+0xf8008c84>
10008d10:	9009883a 	mov	r4,r18
10008d14:	d9400015 	stw	r5,0(sp)
10008d18:	000becc0 	call	1000becc <__clzsi2>
10008d1c:	10fffec4 	addi	r3,r2,-5
10008d20:	10801d84 	addi	r2,r2,118
10008d24:	90e4983a 	sll	r18,r18,r3
10008d28:	00a1c83a 	sub	r16,zero,r2
10008d2c:	0023883a 	mov	r17,zero
10008d30:	002f883a 	mov	r23,zero
10008d34:	d9400017 	ldw	r5,0(sp)
10008d38:	003f9a06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008d3c:	04400304 	movi	r17,12
10008d40:	05c000c4 	movi	r23,3
10008d44:	003f9706 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008d48:	9809883a 	mov	r4,r19
10008d4c:	d9800015 	stw	r6,0(sp)
10008d50:	000becc0 	call	1000becc <__clzsi2>
10008d54:	10fffec4 	addi	r3,r2,-5
10008d58:	10801d84 	addi	r2,r2,118
10008d5c:	98e6983a 	sll	r19,r19,r3
10008d60:	0085c83a 	sub	r2,zero,r2
10008d64:	0007883a 	mov	r3,zero
10008d68:	d9800017 	ldw	r6,0(sp)
10008d6c:	003f9b06 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008d70:	01002034 	movhi	r4,128
10008d74:	0029883a 	mov	r20,zero
10008d78:	213fffc4 	addi	r4,r4,-1
10008d7c:	00ffffc4 	movi	r3,-1
10008d80:	003fc006 	br	10008c84 <__alt_data_end+0xf8008c84>
10008d84:	9027883a 	mov	r19,r18
10008d88:	b807883a 	mov	r3,r23
10008d8c:	003fb406 	br	10008c60 <__alt_data_end+0xf8008c60>
10008d90:	9027883a 	mov	r19,r18
10008d94:	e02b883a 	mov	r21,fp
10008d98:	b807883a 	mov	r3,r23
10008d9c:	003fb006 	br	10008c60 <__alt_data_end+0xf8008c60>
10008da0:	9028d43a 	srli	r20,r18,16
10008da4:	982cd43a 	srli	r22,r19,16
10008da8:	94bfffcc 	andi	r18,r18,65535
10008dac:	9cffffcc 	andi	r19,r19,65535
10008db0:	980b883a 	mov	r5,r19
10008db4:	9009883a 	mov	r4,r18
10008db8:	d9c00015 	stw	r7,0(sp)
10008dbc:	00085800 	call	10008580 <__mulsi3>
10008dc0:	a00b883a 	mov	r5,r20
10008dc4:	9809883a 	mov	r4,r19
10008dc8:	1023883a 	mov	r17,r2
10008dcc:	00085800 	call	10008580 <__mulsi3>
10008dd0:	a009883a 	mov	r4,r20
10008dd4:	b00b883a 	mov	r5,r22
10008dd8:	1027883a 	mov	r19,r2
10008ddc:	00085800 	call	10008580 <__mulsi3>
10008de0:	b00b883a 	mov	r5,r22
10008de4:	9009883a 	mov	r4,r18
10008de8:	1029883a 	mov	r20,r2
10008dec:	00085800 	call	10008580 <__mulsi3>
10008df0:	8806d43a 	srli	r3,r17,16
10008df4:	14c5883a 	add	r2,r2,r19
10008df8:	d9c00017 	ldw	r7,0(sp)
10008dfc:	1885883a 	add	r2,r3,r2
10008e00:	14c0022e 	bgeu	r2,r19,10008e0c <__mulsf3+0x2d4>
10008e04:	00c00074 	movhi	r3,1
10008e08:	a0e9883a 	add	r20,r20,r3
10008e0c:	1026943a 	slli	r19,r2,16
10008e10:	8c7fffcc 	andi	r17,r17,65535
10008e14:	1004d43a 	srli	r2,r2,16
10008e18:	9c63883a 	add	r17,r19,r17
10008e1c:	882691ba 	slli	r19,r17,6
10008e20:	1505883a 	add	r2,r2,r20
10008e24:	8822d6ba 	srli	r17,r17,26
10008e28:	100891ba 	slli	r4,r2,6
10008e2c:	9826c03a 	cmpne	r19,r19,zero
10008e30:	9c62b03a 	or	r17,r19,r17
10008e34:	8926b03a 	or	r19,r17,r4
10008e38:	9882002c 	andhi	r2,r19,2048
10008e3c:	10000426 	beq	r2,zero,10008e50 <__mulsf3+0x318>
10008e40:	9804d07a 	srli	r2,r19,1
10008e44:	9900004c 	andi	r4,r19,1
10008e48:	3821883a 	mov	r16,r7
10008e4c:	1126b03a 	or	r19,r2,r4
10008e50:	80c01fc4 	addi	r3,r16,127
10008e54:	00c0210e 	bge	zero,r3,10008edc <__mulsf3+0x3a4>
10008e58:	988001cc 	andi	r2,r19,7
10008e5c:	10000426 	beq	r2,zero,10008e70 <__mulsf3+0x338>
10008e60:	988003cc 	andi	r2,r19,15
10008e64:	01000104 	movi	r4,4
10008e68:	11000126 	beq	r2,r4,10008e70 <__mulsf3+0x338>
10008e6c:	9927883a 	add	r19,r19,r4
10008e70:	9882002c 	andhi	r2,r19,2048
10008e74:	10000426 	beq	r2,zero,10008e88 <__mulsf3+0x350>
10008e78:	00be0034 	movhi	r2,63488
10008e7c:	10bfffc4 	addi	r2,r2,-1
10008e80:	80c02004 	addi	r3,r16,128
10008e84:	98a6703a 	and	r19,r19,r2
10008e88:	00803f84 	movi	r2,254
10008e8c:	10ff9c16 	blt	r2,r3,10008d00 <__alt_data_end+0xf8008d00>
10008e90:	980891ba 	slli	r4,r19,6
10008e94:	a829883a 	mov	r20,r21
10008e98:	2008d27a 	srli	r4,r4,9
10008e9c:	003f7906 	br	10008c84 <__alt_data_end+0xf8008c84>
10008ea0:	9080102c 	andhi	r2,r18,64
10008ea4:	10000826 	beq	r2,zero,10008ec8 <__mulsf3+0x390>
10008ea8:	9880102c 	andhi	r2,r19,64
10008eac:	1000061e 	bne	r2,zero,10008ec8 <__mulsf3+0x390>
10008eb0:	00802034 	movhi	r2,128
10008eb4:	99001034 	orhi	r4,r19,64
10008eb8:	10bfffc4 	addi	r2,r2,-1
10008ebc:	b029883a 	mov	r20,r22
10008ec0:	2088703a 	and	r4,r4,r2
10008ec4:	003fad06 	br	10008d7c <__alt_data_end+0xf8008d7c>
10008ec8:	00802034 	movhi	r2,128
10008ecc:	91001034 	orhi	r4,r18,64
10008ed0:	10bfffc4 	addi	r2,r2,-1
10008ed4:	2088703a 	and	r4,r4,r2
10008ed8:	003fa806 	br	10008d7c <__alt_data_end+0xf8008d7c>
10008edc:	00800044 	movi	r2,1
10008ee0:	10c7c83a 	sub	r3,r2,r3
10008ee4:	008006c4 	movi	r2,27
10008ee8:	10ff6316 	blt	r2,r3,10008c78 <__alt_data_end+0xf8008c78>
10008eec:	00800804 	movi	r2,32
10008ef0:	10c5c83a 	sub	r2,r2,r3
10008ef4:	9884983a 	sll	r2,r19,r2
10008ef8:	98c6d83a 	srl	r3,r19,r3
10008efc:	1004c03a 	cmpne	r2,r2,zero
10008f00:	1884b03a 	or	r2,r3,r2
10008f04:	10c001cc 	andi	r3,r2,7
10008f08:	18000426 	beq	r3,zero,10008f1c <__mulsf3+0x3e4>
10008f0c:	10c003cc 	andi	r3,r2,15
10008f10:	01000104 	movi	r4,4
10008f14:	19000126 	beq	r3,r4,10008f1c <__mulsf3+0x3e4>
10008f18:	1105883a 	add	r2,r2,r4
10008f1c:	10c1002c 	andhi	r3,r2,1024
10008f20:	18000626 	beq	r3,zero,10008f3c <__mulsf3+0x404>
10008f24:	a829883a 	mov	r20,r21
10008f28:	00c00044 	movi	r3,1
10008f2c:	0009883a 	mov	r4,zero
10008f30:	003f5406 	br	10008c84 <__alt_data_end+0xf8008c84>
10008f34:	3821883a 	mov	r16,r7
10008f38:	003fc506 	br	10008e50 <__alt_data_end+0xf8008e50>
10008f3c:	100491ba 	slli	r2,r2,6
10008f40:	a829883a 	mov	r20,r21
10008f44:	0007883a 	mov	r3,zero
10008f48:	1008d27a 	srli	r4,r2,9
10008f4c:	003f4d06 	br	10008c84 <__alt_data_end+0xf8008c84>
10008f50:	00802034 	movhi	r2,128
10008f54:	99001034 	orhi	r4,r19,64
10008f58:	10bfffc4 	addi	r2,r2,-1
10008f5c:	a829883a 	mov	r20,r21
10008f60:	2088703a 	and	r4,r4,r2
10008f64:	003f8506 	br	10008d7c <__alt_data_end+0xf8008d7c>

10008f68 <__subsf3>:
10008f68:	defffc04 	addi	sp,sp,-16
10008f6c:	280cd5fa 	srli	r6,r5,23
10008f70:	dc000015 	stw	r16,0(sp)
10008f74:	01c02034 	movhi	r7,128
10008f78:	2020d5fa 	srli	r16,r4,23
10008f7c:	39ffffc4 	addi	r7,r7,-1
10008f80:	3906703a 	and	r3,r7,r4
10008f84:	dc400115 	stw	r17,4(sp)
10008f88:	394e703a 	and	r7,r7,r5
10008f8c:	2022d7fa 	srli	r17,r4,31
10008f90:	dfc00315 	stw	ra,12(sp)
10008f94:	dc800215 	stw	r18,8(sp)
10008f98:	31803fcc 	andi	r6,r6,255
10008f9c:	01003fc4 	movi	r4,255
10008fa0:	84003fcc 	andi	r16,r16,255
10008fa4:	180690fa 	slli	r3,r3,3
10008fa8:	2804d7fa 	srli	r2,r5,31
10008fac:	380e90fa 	slli	r7,r7,3
10008fb0:	31006d26 	beq	r6,r4,10009168 <__subsf3+0x200>
10008fb4:	1080005c 	xori	r2,r2,1
10008fb8:	8189c83a 	sub	r4,r16,r6
10008fbc:	14404f26 	beq	r2,r17,100090fc <__subsf3+0x194>
10008fc0:	0100770e 	bge	zero,r4,100091a0 <__subsf3+0x238>
10008fc4:	30001e1e 	bne	r6,zero,10009040 <__subsf3+0xd8>
10008fc8:	38006a1e 	bne	r7,zero,10009174 <__subsf3+0x20c>
10008fcc:	188001cc 	andi	r2,r3,7
10008fd0:	10000426 	beq	r2,zero,10008fe4 <__subsf3+0x7c>
10008fd4:	188003cc 	andi	r2,r3,15
10008fd8:	01000104 	movi	r4,4
10008fdc:	11000126 	beq	r2,r4,10008fe4 <__subsf3+0x7c>
10008fe0:	1907883a 	add	r3,r3,r4
10008fe4:	1881002c 	andhi	r2,r3,1024
10008fe8:	10003926 	beq	r2,zero,100090d0 <__subsf3+0x168>
10008fec:	84000044 	addi	r16,r16,1
10008ff0:	00803fc4 	movi	r2,255
10008ff4:	80807526 	beq	r16,r2,100091cc <__subsf3+0x264>
10008ff8:	180691ba 	slli	r3,r3,6
10008ffc:	8880004c 	andi	r2,r17,1
10009000:	180ad27a 	srli	r5,r3,9
10009004:	84003fcc 	andi	r16,r16,255
10009008:	800695fa 	slli	r3,r16,23
1000900c:	10803fcc 	andi	r2,r2,255
10009010:	01002034 	movhi	r4,128
10009014:	213fffc4 	addi	r4,r4,-1
10009018:	100497fa 	slli	r2,r2,31
1000901c:	2920703a 	and	r16,r5,r4
10009020:	80e0b03a 	or	r16,r16,r3
10009024:	8084b03a 	or	r2,r16,r2
10009028:	dfc00317 	ldw	ra,12(sp)
1000902c:	dc800217 	ldw	r18,8(sp)
10009030:	dc400117 	ldw	r17,4(sp)
10009034:	dc000017 	ldw	r16,0(sp)
10009038:	dec00404 	addi	sp,sp,16
1000903c:	f800283a 	ret
10009040:	00803fc4 	movi	r2,255
10009044:	80bfe126 	beq	r16,r2,10008fcc <__alt_data_end+0xf8008fcc>
10009048:	39c10034 	orhi	r7,r7,1024
1000904c:	008006c4 	movi	r2,27
10009050:	11007416 	blt	r2,r4,10009224 <__subsf3+0x2bc>
10009054:	00800804 	movi	r2,32
10009058:	1105c83a 	sub	r2,r2,r4
1000905c:	3884983a 	sll	r2,r7,r2
10009060:	390ed83a 	srl	r7,r7,r4
10009064:	1008c03a 	cmpne	r4,r2,zero
10009068:	390eb03a 	or	r7,r7,r4
1000906c:	19c7c83a 	sub	r3,r3,r7
10009070:	1881002c 	andhi	r2,r3,1024
10009074:	10001426 	beq	r2,zero,100090c8 <__subsf3+0x160>
10009078:	04810034 	movhi	r18,1024
1000907c:	94bfffc4 	addi	r18,r18,-1
10009080:	1ca4703a 	and	r18,r3,r18
10009084:	9009883a 	mov	r4,r18
10009088:	000becc0 	call	1000becc <__clzsi2>
1000908c:	10bffec4 	addi	r2,r2,-5
10009090:	90a4983a 	sll	r18,r18,r2
10009094:	14005116 	blt	r2,r16,100091dc <__subsf3+0x274>
10009098:	1405c83a 	sub	r2,r2,r16
1000909c:	10c00044 	addi	r3,r2,1
100090a0:	00800804 	movi	r2,32
100090a4:	10c5c83a 	sub	r2,r2,r3
100090a8:	9084983a 	sll	r2,r18,r2
100090ac:	90e4d83a 	srl	r18,r18,r3
100090b0:	0021883a 	mov	r16,zero
100090b4:	1006c03a 	cmpne	r3,r2,zero
100090b8:	90c6b03a 	or	r3,r18,r3
100090bc:	003fc306 	br	10008fcc <__alt_data_end+0xf8008fcc>
100090c0:	2000e026 	beq	r4,zero,10009444 <__subsf3+0x4dc>
100090c4:	2007883a 	mov	r3,r4
100090c8:	188001cc 	andi	r2,r3,7
100090cc:	103fc11e 	bne	r2,zero,10008fd4 <__alt_data_end+0xf8008fd4>
100090d0:	180ad0fa 	srli	r5,r3,3
100090d4:	00c03fc4 	movi	r3,255
100090d8:	8880004c 	andi	r2,r17,1
100090dc:	80c0031e 	bne	r16,r3,100090ec <__subsf3+0x184>
100090e0:	28006d26 	beq	r5,zero,10009298 <__subsf3+0x330>
100090e4:	29401034 	orhi	r5,r5,64
100090e8:	043fffc4 	movi	r16,-1
100090ec:	00c02034 	movhi	r3,128
100090f0:	18ffffc4 	addi	r3,r3,-1
100090f4:	28ca703a 	and	r5,r5,r3
100090f8:	003fc206 	br	10009004 <__alt_data_end+0xf8009004>
100090fc:	01003c0e 	bge	zero,r4,100091f0 <__subsf3+0x288>
10009100:	30002126 	beq	r6,zero,10009188 <__subsf3+0x220>
10009104:	01403fc4 	movi	r5,255
10009108:	817fb026 	beq	r16,r5,10008fcc <__alt_data_end+0xf8008fcc>
1000910c:	39c10034 	orhi	r7,r7,1024
10009110:	014006c4 	movi	r5,27
10009114:	29007416 	blt	r5,r4,100092e8 <__subsf3+0x380>
10009118:	01400804 	movi	r5,32
1000911c:	290bc83a 	sub	r5,r5,r4
10009120:	394a983a 	sll	r5,r7,r5
10009124:	390ed83a 	srl	r7,r7,r4
10009128:	2808c03a 	cmpne	r4,r5,zero
1000912c:	390eb03a 	or	r7,r7,r4
10009130:	19c7883a 	add	r3,r3,r7
10009134:	1901002c 	andhi	r4,r3,1024
10009138:	20003826 	beq	r4,zero,1000921c <__subsf3+0x2b4>
1000913c:	84000044 	addi	r16,r16,1
10009140:	01003fc4 	movi	r4,255
10009144:	81005426 	beq	r16,r4,10009298 <__subsf3+0x330>
10009148:	1023883a 	mov	r17,r2
1000914c:	00bf0034 	movhi	r2,64512
10009150:	10bfffc4 	addi	r2,r2,-1
10009154:	1900004c 	andi	r4,r3,1
10009158:	1886703a 	and	r3,r3,r2
1000915c:	1806d07a 	srli	r3,r3,1
10009160:	1906b03a 	or	r3,r3,r4
10009164:	003f9906 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009168:	383f9226 	beq	r7,zero,10008fb4 <__alt_data_end+0xf8008fb4>
1000916c:	10803fcc 	andi	r2,r2,255
10009170:	003f9106 	br	10008fb8 <__alt_data_end+0xf8008fb8>
10009174:	213fffc4 	addi	r4,r4,-1
10009178:	203fbc26 	beq	r4,zero,1000906c <__alt_data_end+0xf800906c>
1000917c:	00803fc4 	movi	r2,255
10009180:	80bfb21e 	bne	r16,r2,1000904c <__alt_data_end+0xf800904c>
10009184:	003f9106 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009188:	383f9026 	beq	r7,zero,10008fcc <__alt_data_end+0xf8008fcc>
1000918c:	213fffc4 	addi	r4,r4,-1
10009190:	203fe726 	beq	r4,zero,10009130 <__alt_data_end+0xf8009130>
10009194:	01403fc4 	movi	r5,255
10009198:	817fdd1e 	bne	r16,r5,10009110 <__alt_data_end+0xf8009110>
1000919c:	003f8b06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100091a0:	2000221e 	bne	r4,zero,1000922c <__subsf3+0x2c4>
100091a4:	81000044 	addi	r4,r16,1
100091a8:	21003fcc 	andi	r4,r4,255
100091ac:	01400044 	movi	r5,1
100091b0:	2900470e 	bge	r5,r4,100092d0 <__subsf3+0x368>
100091b4:	19e5c83a 	sub	r18,r3,r7
100091b8:	9141002c 	andhi	r5,r18,1024
100091bc:	28002d26 	beq	r5,zero,10009274 <__subsf3+0x30c>
100091c0:	38e5c83a 	sub	r18,r7,r3
100091c4:	1023883a 	mov	r17,r2
100091c8:	003fae06 	br	10009084 <__alt_data_end+0xf8009084>
100091cc:	8880004c 	andi	r2,r17,1
100091d0:	043fffc4 	movi	r16,-1
100091d4:	000b883a 	mov	r5,zero
100091d8:	003f8a06 	br	10009004 <__alt_data_end+0xf8009004>
100091dc:	00ff0034 	movhi	r3,64512
100091e0:	18ffffc4 	addi	r3,r3,-1
100091e4:	80a1c83a 	sub	r16,r16,r2
100091e8:	90c6703a 	and	r3,r18,r3
100091ec:	003f7706 	br	10008fcc <__alt_data_end+0xf8008fcc>
100091f0:	2000431e 	bne	r4,zero,10009300 <__subsf3+0x398>
100091f4:	81000044 	addi	r4,r16,1
100091f8:	21803fcc 	andi	r6,r4,255
100091fc:	01400044 	movi	r5,1
10009200:	2980280e 	bge	r5,r6,100092a4 <__subsf3+0x33c>
10009204:	01403fc4 	movi	r5,255
10009208:	21402326 	beq	r4,r5,10009298 <__subsf3+0x330>
1000920c:	19c7883a 	add	r3,r3,r7
10009210:	1806d07a 	srli	r3,r3,1
10009214:	2021883a 	mov	r16,r4
10009218:	003f6c06 	br	10008fcc <__alt_data_end+0xf8008fcc>
1000921c:	1023883a 	mov	r17,r2
10009220:	003fa906 	br	100090c8 <__alt_data_end+0xf80090c8>
10009224:	01c00044 	movi	r7,1
10009228:	003f9006 	br	1000906c <__alt_data_end+0xf800906c>
1000922c:	8000151e 	bne	r16,zero,10009284 <__subsf3+0x31c>
10009230:	18002f26 	beq	r3,zero,100092f0 <__subsf3+0x388>
10009234:	0108303a 	nor	r4,zero,r4
10009238:	20000a26 	beq	r4,zero,10009264 <__subsf3+0x2fc>
1000923c:	01403fc4 	movi	r5,255
10009240:	31402b26 	beq	r6,r5,100092f0 <__subsf3+0x388>
10009244:	014006c4 	movi	r5,27
10009248:	29006e16 	blt	r5,r4,10009404 <__subsf3+0x49c>
1000924c:	01400804 	movi	r5,32
10009250:	290bc83a 	sub	r5,r5,r4
10009254:	194a983a 	sll	r5,r3,r5
10009258:	1908d83a 	srl	r4,r3,r4
1000925c:	2806c03a 	cmpne	r3,r5,zero
10009260:	20c6b03a 	or	r3,r4,r3
10009264:	38c7c83a 	sub	r3,r7,r3
10009268:	3021883a 	mov	r16,r6
1000926c:	1023883a 	mov	r17,r2
10009270:	003f7f06 	br	10009070 <__alt_data_end+0xf8009070>
10009274:	903f831e 	bne	r18,zero,10009084 <__alt_data_end+0xf8009084>
10009278:	0005883a 	mov	r2,zero
1000927c:	0021883a 	mov	r16,zero
10009280:	003f9a06 	br	100090ec <__alt_data_end+0xf80090ec>
10009284:	01403fc4 	movi	r5,255
10009288:	31401926 	beq	r6,r5,100092f0 <__subsf3+0x388>
1000928c:	0109c83a 	sub	r4,zero,r4
10009290:	18c10034 	orhi	r3,r3,1024
10009294:	003feb06 	br	10009244 <__alt_data_end+0xf8009244>
10009298:	043fffc4 	movi	r16,-1
1000929c:	000b883a 	mov	r5,zero
100092a0:	003f5806 	br	10009004 <__alt_data_end+0xf8009004>
100092a4:	8000481e 	bne	r16,zero,100093c8 <__subsf3+0x460>
100092a8:	18006226 	beq	r3,zero,10009434 <__subsf3+0x4cc>
100092ac:	383f4726 	beq	r7,zero,10008fcc <__alt_data_end+0xf8008fcc>
100092b0:	19c7883a 	add	r3,r3,r7
100092b4:	1881002c 	andhi	r2,r3,1024
100092b8:	103f8326 	beq	r2,zero,100090c8 <__alt_data_end+0xf80090c8>
100092bc:	00bf0034 	movhi	r2,64512
100092c0:	10bfffc4 	addi	r2,r2,-1
100092c4:	2821883a 	mov	r16,r5
100092c8:	1886703a 	and	r3,r3,r2
100092cc:	003f3f06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100092d0:	80001c1e 	bne	r16,zero,10009344 <__subsf3+0x3dc>
100092d4:	1800261e 	bne	r3,zero,10009370 <__subsf3+0x408>
100092d8:	38004c26 	beq	r7,zero,1000940c <__subsf3+0x4a4>
100092dc:	3807883a 	mov	r3,r7
100092e0:	1023883a 	mov	r17,r2
100092e4:	003f3906 	br	10008fcc <__alt_data_end+0xf8008fcc>
100092e8:	01c00044 	movi	r7,1
100092ec:	003f9006 	br	10009130 <__alt_data_end+0xf8009130>
100092f0:	3807883a 	mov	r3,r7
100092f4:	3021883a 	mov	r16,r6
100092f8:	1023883a 	mov	r17,r2
100092fc:	003f3306 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009300:	8000161e 	bne	r16,zero,1000935c <__subsf3+0x3f4>
10009304:	18002d26 	beq	r3,zero,100093bc <__subsf3+0x454>
10009308:	0108303a 	nor	r4,zero,r4
1000930c:	20000a26 	beq	r4,zero,10009338 <__subsf3+0x3d0>
10009310:	01403fc4 	movi	r5,255
10009314:	31402926 	beq	r6,r5,100093bc <__subsf3+0x454>
10009318:	014006c4 	movi	r5,27
1000931c:	29004716 	blt	r5,r4,1000943c <__subsf3+0x4d4>
10009320:	01400804 	movi	r5,32
10009324:	290bc83a 	sub	r5,r5,r4
10009328:	194a983a 	sll	r5,r3,r5
1000932c:	1908d83a 	srl	r4,r3,r4
10009330:	2806c03a 	cmpne	r3,r5,zero
10009334:	20c6b03a 	or	r3,r4,r3
10009338:	19c7883a 	add	r3,r3,r7
1000933c:	3021883a 	mov	r16,r6
10009340:	003f7c06 	br	10009134 <__alt_data_end+0xf8009134>
10009344:	1800111e 	bne	r3,zero,1000938c <__subsf3+0x424>
10009348:	38003326 	beq	r7,zero,10009418 <__subsf3+0x4b0>
1000934c:	3807883a 	mov	r3,r7
10009350:	1023883a 	mov	r17,r2
10009354:	04003fc4 	movi	r16,255
10009358:	003f1c06 	br	10008fcc <__alt_data_end+0xf8008fcc>
1000935c:	01403fc4 	movi	r5,255
10009360:	31401626 	beq	r6,r5,100093bc <__subsf3+0x454>
10009364:	0109c83a 	sub	r4,zero,r4
10009368:	18c10034 	orhi	r3,r3,1024
1000936c:	003fea06 	br	10009318 <__alt_data_end+0xf8009318>
10009370:	383f1626 	beq	r7,zero,10008fcc <__alt_data_end+0xf8008fcc>
10009374:	19c9c83a 	sub	r4,r3,r7
10009378:	2141002c 	andhi	r5,r4,1024
1000937c:	283f5026 	beq	r5,zero,100090c0 <__alt_data_end+0xf80090c0>
10009380:	38c7c83a 	sub	r3,r7,r3
10009384:	1023883a 	mov	r17,r2
10009388:	003f1006 	br	10008fcc <__alt_data_end+0xf8008fcc>
1000938c:	38001b26 	beq	r7,zero,100093fc <__subsf3+0x494>
10009390:	1806d0fa 	srli	r3,r3,3
10009394:	1900102c 	andhi	r4,r3,64
10009398:	20000526 	beq	r4,zero,100093b0 <__subsf3+0x448>
1000939c:	380ed0fa 	srli	r7,r7,3
100093a0:	3900102c 	andhi	r4,r7,64
100093a4:	2000021e 	bne	r4,zero,100093b0 <__subsf3+0x448>
100093a8:	3807883a 	mov	r3,r7
100093ac:	1023883a 	mov	r17,r2
100093b0:	180690fa 	slli	r3,r3,3
100093b4:	04003fc4 	movi	r16,255
100093b8:	003f0406 	br	10008fcc <__alt_data_end+0xf8008fcc>
100093bc:	3807883a 	mov	r3,r7
100093c0:	3021883a 	mov	r16,r6
100093c4:	003f0106 	br	10008fcc <__alt_data_end+0xf8008fcc>
100093c8:	18001726 	beq	r3,zero,10009428 <__subsf3+0x4c0>
100093cc:	38000b26 	beq	r7,zero,100093fc <__subsf3+0x494>
100093d0:	1806d0fa 	srli	r3,r3,3
100093d4:	1900102c 	andhi	r4,r3,64
100093d8:	20000426 	beq	r4,zero,100093ec <__subsf3+0x484>
100093dc:	380ed0fa 	srli	r7,r7,3
100093e0:	3900102c 	andhi	r4,r7,64
100093e4:	2000011e 	bne	r4,zero,100093ec <__subsf3+0x484>
100093e8:	3807883a 	mov	r3,r7
100093ec:	180690fa 	slli	r3,r3,3
100093f0:	1023883a 	mov	r17,r2
100093f4:	04003fc4 	movi	r16,255
100093f8:	003ef406 	br	10008fcc <__alt_data_end+0xf8008fcc>
100093fc:	04003fc4 	movi	r16,255
10009400:	003ef206 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009404:	00c00044 	movi	r3,1
10009408:	003f9606 	br	10009264 <__alt_data_end+0xf8009264>
1000940c:	000b883a 	mov	r5,zero
10009410:	0005883a 	mov	r2,zero
10009414:	003f3506 	br	100090ec <__alt_data_end+0xf80090ec>
10009418:	01402034 	movhi	r5,128
1000941c:	297fffc4 	addi	r5,r5,-1
10009420:	0005883a 	mov	r2,zero
10009424:	003f2f06 	br	100090e4 <__alt_data_end+0xf80090e4>
10009428:	3807883a 	mov	r3,r7
1000942c:	04003fc4 	movi	r16,255
10009430:	003ee606 	br	10008fcc <__alt_data_end+0xf8008fcc>
10009434:	3807883a 	mov	r3,r7
10009438:	003ee406 	br	10008fcc <__alt_data_end+0xf8008fcc>
1000943c:	00c00044 	movi	r3,1
10009440:	003fbd06 	br	10009338 <__alt_data_end+0xf8009338>
10009444:	0005883a 	mov	r2,zero
10009448:	003f2806 	br	100090ec <__alt_data_end+0xf80090ec>

1000944c <__floatsisf>:
1000944c:	defffd04 	addi	sp,sp,-12
10009450:	dfc00215 	stw	ra,8(sp)
10009454:	dc400115 	stw	r17,4(sp)
10009458:	dc000015 	stw	r16,0(sp)
1000945c:	20003526 	beq	r4,zero,10009534 <__floatsisf+0xe8>
10009460:	2021883a 	mov	r16,r4
10009464:	2022d7fa 	srli	r17,r4,31
10009468:	20003616 	blt	r4,zero,10009544 <__floatsisf+0xf8>
1000946c:	8009883a 	mov	r4,r16
10009470:	000becc0 	call	1000becc <__clzsi2>
10009474:	00c02784 	movi	r3,158
10009478:	1887c83a 	sub	r3,r3,r2
1000947c:	01002584 	movi	r4,150
10009480:	20c01416 	blt	r4,r3,100094d4 <__floatsisf+0x88>
10009484:	20c9c83a 	sub	r4,r4,r3
10009488:	8120983a 	sll	r16,r16,r4
1000948c:	00802034 	movhi	r2,128
10009490:	10bfffc4 	addi	r2,r2,-1
10009494:	8809883a 	mov	r4,r17
10009498:	80a0703a 	and	r16,r16,r2
1000949c:	18803fcc 	andi	r2,r3,255
100094a0:	100695fa 	slli	r3,r2,23
100094a4:	20803fcc 	andi	r2,r4,255
100094a8:	100897fa 	slli	r4,r2,31
100094ac:	00802034 	movhi	r2,128
100094b0:	10bfffc4 	addi	r2,r2,-1
100094b4:	8084703a 	and	r2,r16,r2
100094b8:	10c4b03a 	or	r2,r2,r3
100094bc:	1104b03a 	or	r2,r2,r4
100094c0:	dfc00217 	ldw	ra,8(sp)
100094c4:	dc400117 	ldw	r17,4(sp)
100094c8:	dc000017 	ldw	r16,0(sp)
100094cc:	dec00304 	addi	sp,sp,12
100094d0:	f800283a 	ret
100094d4:	01002644 	movi	r4,153
100094d8:	20c01c16 	blt	r4,r3,1000954c <__floatsisf+0x100>
100094dc:	20c9c83a 	sub	r4,r4,r3
100094e0:	8120983a 	sll	r16,r16,r4
100094e4:	013f0034 	movhi	r4,64512
100094e8:	213fffc4 	addi	r4,r4,-1
100094ec:	814001cc 	andi	r5,r16,7
100094f0:	8108703a 	and	r4,r16,r4
100094f4:	28000426 	beq	r5,zero,10009508 <__floatsisf+0xbc>
100094f8:	840003cc 	andi	r16,r16,15
100094fc:	01400104 	movi	r5,4
10009500:	81400126 	beq	r16,r5,10009508 <__floatsisf+0xbc>
10009504:	2149883a 	add	r4,r4,r5
10009508:	2141002c 	andhi	r5,r4,1024
1000950c:	28000526 	beq	r5,zero,10009524 <__floatsisf+0xd8>
10009510:	00c027c4 	movi	r3,159
10009514:	1887c83a 	sub	r3,r3,r2
10009518:	00bf0034 	movhi	r2,64512
1000951c:	10bfffc4 	addi	r2,r2,-1
10009520:	2088703a 	and	r4,r4,r2
10009524:	202091ba 	slli	r16,r4,6
10009528:	8809883a 	mov	r4,r17
1000952c:	8020d27a 	srli	r16,r16,9
10009530:	003fda06 	br	1000949c <__alt_data_end+0xf800949c>
10009534:	0009883a 	mov	r4,zero
10009538:	0007883a 	mov	r3,zero
1000953c:	0021883a 	mov	r16,zero
10009540:	003fd606 	br	1000949c <__alt_data_end+0xf800949c>
10009544:	0121c83a 	sub	r16,zero,r4
10009548:	003fc806 	br	1000946c <__alt_data_end+0xf800946c>
1000954c:	01002e44 	movi	r4,185
10009550:	20c9c83a 	sub	r4,r4,r3
10009554:	01400144 	movi	r5,5
10009558:	8108983a 	sll	r4,r16,r4
1000955c:	288bc83a 	sub	r5,r5,r2
10009560:	8160d83a 	srl	r16,r16,r5
10009564:	2008c03a 	cmpne	r4,r4,zero
10009568:	8120b03a 	or	r16,r16,r4
1000956c:	003fdd06 	br	100094e4 <__alt_data_end+0xf80094e4>

10009570 <__adddf3>:
10009570:	02c00434 	movhi	r11,16
10009574:	5affffc4 	addi	r11,r11,-1
10009578:	2806d7fa 	srli	r3,r5,31
1000957c:	2ad4703a 	and	r10,r5,r11
10009580:	3ad2703a 	and	r9,r7,r11
10009584:	3804d53a 	srli	r2,r7,20
10009588:	3018d77a 	srli	r12,r6,29
1000958c:	280ad53a 	srli	r5,r5,20
10009590:	501490fa 	slli	r10,r10,3
10009594:	2010d77a 	srli	r8,r4,29
10009598:	481290fa 	slli	r9,r9,3
1000959c:	380ed7fa 	srli	r7,r7,31
100095a0:	defffb04 	addi	sp,sp,-20
100095a4:	dc800215 	stw	r18,8(sp)
100095a8:	dc400115 	stw	r17,4(sp)
100095ac:	dc000015 	stw	r16,0(sp)
100095b0:	dfc00415 	stw	ra,16(sp)
100095b4:	dcc00315 	stw	r19,12(sp)
100095b8:	1c803fcc 	andi	r18,r3,255
100095bc:	2c01ffcc 	andi	r16,r5,2047
100095c0:	5210b03a 	or	r8,r10,r8
100095c4:	202290fa 	slli	r17,r4,3
100095c8:	1081ffcc 	andi	r2,r2,2047
100095cc:	4b12b03a 	or	r9,r9,r12
100095d0:	300c90fa 	slli	r6,r6,3
100095d4:	91c07526 	beq	r18,r7,100097ac <__adddf3+0x23c>
100095d8:	8087c83a 	sub	r3,r16,r2
100095dc:	00c0ab0e 	bge	zero,r3,1000988c <__adddf3+0x31c>
100095e0:	10002a1e 	bne	r2,zero,1000968c <__adddf3+0x11c>
100095e4:	4984b03a 	or	r2,r9,r6
100095e8:	1000961e 	bne	r2,zero,10009844 <__adddf3+0x2d4>
100095ec:	888001cc 	andi	r2,r17,7
100095f0:	10000726 	beq	r2,zero,10009610 <__adddf3+0xa0>
100095f4:	888003cc 	andi	r2,r17,15
100095f8:	00c00104 	movi	r3,4
100095fc:	10c00426 	beq	r2,r3,10009610 <__adddf3+0xa0>
10009600:	88c7883a 	add	r3,r17,r3
10009604:	1c63803a 	cmpltu	r17,r3,r17
10009608:	4451883a 	add	r8,r8,r17
1000960c:	1823883a 	mov	r17,r3
10009610:	4080202c 	andhi	r2,r8,128
10009614:	10005926 	beq	r2,zero,1000977c <__adddf3+0x20c>
10009618:	84000044 	addi	r16,r16,1
1000961c:	0081ffc4 	movi	r2,2047
10009620:	8080ba26 	beq	r16,r2,1000990c <__adddf3+0x39c>
10009624:	00bfe034 	movhi	r2,65408
10009628:	10bfffc4 	addi	r2,r2,-1
1000962c:	4090703a 	and	r8,r8,r2
10009630:	4004977a 	slli	r2,r8,29
10009634:	4010927a 	slli	r8,r8,9
10009638:	8822d0fa 	srli	r17,r17,3
1000963c:	8401ffcc 	andi	r16,r16,2047
10009640:	4010d33a 	srli	r8,r8,12
10009644:	9007883a 	mov	r3,r18
10009648:	1444b03a 	or	r2,r2,r17
1000964c:	8401ffcc 	andi	r16,r16,2047
10009650:	8020953a 	slli	r16,r16,20
10009654:	18c03fcc 	andi	r3,r3,255
10009658:	01000434 	movhi	r4,16
1000965c:	213fffc4 	addi	r4,r4,-1
10009660:	180697fa 	slli	r3,r3,31
10009664:	4110703a 	and	r8,r8,r4
10009668:	4410b03a 	or	r8,r8,r16
1000966c:	40c6b03a 	or	r3,r8,r3
10009670:	dfc00417 	ldw	ra,16(sp)
10009674:	dcc00317 	ldw	r19,12(sp)
10009678:	dc800217 	ldw	r18,8(sp)
1000967c:	dc400117 	ldw	r17,4(sp)
10009680:	dc000017 	ldw	r16,0(sp)
10009684:	dec00504 	addi	sp,sp,20
10009688:	f800283a 	ret
1000968c:	0081ffc4 	movi	r2,2047
10009690:	80bfd626 	beq	r16,r2,100095ec <__alt_data_end+0xf80095ec>
10009694:	4a402034 	orhi	r9,r9,128
10009698:	00800e04 	movi	r2,56
1000969c:	10c09f16 	blt	r2,r3,1000991c <__adddf3+0x3ac>
100096a0:	008007c4 	movi	r2,31
100096a4:	10c0c216 	blt	r2,r3,100099b0 <__adddf3+0x440>
100096a8:	00800804 	movi	r2,32
100096ac:	10c5c83a 	sub	r2,r2,r3
100096b0:	488a983a 	sll	r5,r9,r2
100096b4:	30c8d83a 	srl	r4,r6,r3
100096b8:	3084983a 	sll	r2,r6,r2
100096bc:	48c6d83a 	srl	r3,r9,r3
100096c0:	290cb03a 	or	r6,r5,r4
100096c4:	1004c03a 	cmpne	r2,r2,zero
100096c8:	308cb03a 	or	r6,r6,r2
100096cc:	898dc83a 	sub	r6,r17,r6
100096d0:	89a3803a 	cmpltu	r17,r17,r6
100096d4:	40d1c83a 	sub	r8,r8,r3
100096d8:	4451c83a 	sub	r8,r8,r17
100096dc:	3023883a 	mov	r17,r6
100096e0:	4080202c 	andhi	r2,r8,128
100096e4:	10002326 	beq	r2,zero,10009774 <__adddf3+0x204>
100096e8:	04c02034 	movhi	r19,128
100096ec:	9cffffc4 	addi	r19,r19,-1
100096f0:	44e6703a 	and	r19,r8,r19
100096f4:	98007626 	beq	r19,zero,100098d0 <__adddf3+0x360>
100096f8:	9809883a 	mov	r4,r19
100096fc:	000becc0 	call	1000becc <__clzsi2>
10009700:	10fffe04 	addi	r3,r2,-8
10009704:	010007c4 	movi	r4,31
10009708:	20c07716 	blt	r4,r3,100098e8 <__adddf3+0x378>
1000970c:	00800804 	movi	r2,32
10009710:	10c5c83a 	sub	r2,r2,r3
10009714:	8884d83a 	srl	r2,r17,r2
10009718:	98d0983a 	sll	r8,r19,r3
1000971c:	88e2983a 	sll	r17,r17,r3
10009720:	1204b03a 	or	r2,r2,r8
10009724:	1c007416 	blt	r3,r16,100098f8 <__adddf3+0x388>
10009728:	1c21c83a 	sub	r16,r3,r16
1000972c:	82000044 	addi	r8,r16,1
10009730:	00c007c4 	movi	r3,31
10009734:	1a009116 	blt	r3,r8,1000997c <__adddf3+0x40c>
10009738:	00c00804 	movi	r3,32
1000973c:	1a07c83a 	sub	r3,r3,r8
10009740:	8a08d83a 	srl	r4,r17,r8
10009744:	88e2983a 	sll	r17,r17,r3
10009748:	10c6983a 	sll	r3,r2,r3
1000974c:	1210d83a 	srl	r8,r2,r8
10009750:	8804c03a 	cmpne	r2,r17,zero
10009754:	1906b03a 	or	r3,r3,r4
10009758:	18a2b03a 	or	r17,r3,r2
1000975c:	0021883a 	mov	r16,zero
10009760:	003fa206 	br	100095ec <__alt_data_end+0xf80095ec>
10009764:	1890b03a 	or	r8,r3,r2
10009768:	40017d26 	beq	r8,zero,10009d60 <__adddf3+0x7f0>
1000976c:	1011883a 	mov	r8,r2
10009770:	1823883a 	mov	r17,r3
10009774:	888001cc 	andi	r2,r17,7
10009778:	103f9e1e 	bne	r2,zero,100095f4 <__alt_data_end+0xf80095f4>
1000977c:	4004977a 	slli	r2,r8,29
10009780:	8822d0fa 	srli	r17,r17,3
10009784:	4010d0fa 	srli	r8,r8,3
10009788:	9007883a 	mov	r3,r18
1000978c:	1444b03a 	or	r2,r2,r17
10009790:	0101ffc4 	movi	r4,2047
10009794:	81002426 	beq	r16,r4,10009828 <__adddf3+0x2b8>
10009798:	8120703a 	and	r16,r16,r4
1000979c:	01000434 	movhi	r4,16
100097a0:	213fffc4 	addi	r4,r4,-1
100097a4:	4110703a 	and	r8,r8,r4
100097a8:	003fa806 	br	1000964c <__alt_data_end+0xf800964c>
100097ac:	8089c83a 	sub	r4,r16,r2
100097b0:	01005e0e 	bge	zero,r4,1000992c <__adddf3+0x3bc>
100097b4:	10002b26 	beq	r2,zero,10009864 <__adddf3+0x2f4>
100097b8:	0081ffc4 	movi	r2,2047
100097bc:	80bf8b26 	beq	r16,r2,100095ec <__alt_data_end+0xf80095ec>
100097c0:	4a402034 	orhi	r9,r9,128
100097c4:	00800e04 	movi	r2,56
100097c8:	1100a40e 	bge	r2,r4,10009a5c <__adddf3+0x4ec>
100097cc:	498cb03a 	or	r6,r9,r6
100097d0:	300ac03a 	cmpne	r5,r6,zero
100097d4:	0013883a 	mov	r9,zero
100097d8:	2c4b883a 	add	r5,r5,r17
100097dc:	2c63803a 	cmpltu	r17,r5,r17
100097e0:	4a11883a 	add	r8,r9,r8
100097e4:	8a11883a 	add	r8,r17,r8
100097e8:	2823883a 	mov	r17,r5
100097ec:	4080202c 	andhi	r2,r8,128
100097f0:	103fe026 	beq	r2,zero,10009774 <__alt_data_end+0xf8009774>
100097f4:	84000044 	addi	r16,r16,1
100097f8:	0081ffc4 	movi	r2,2047
100097fc:	8080d226 	beq	r16,r2,10009b48 <__adddf3+0x5d8>
10009800:	00bfe034 	movhi	r2,65408
10009804:	10bfffc4 	addi	r2,r2,-1
10009808:	4090703a 	and	r8,r8,r2
1000980c:	880ad07a 	srli	r5,r17,1
10009810:	400897fa 	slli	r4,r8,31
10009814:	88c0004c 	andi	r3,r17,1
10009818:	28e2b03a 	or	r17,r5,r3
1000981c:	4010d07a 	srli	r8,r8,1
10009820:	2462b03a 	or	r17,r4,r17
10009824:	003f7106 	br	100095ec <__alt_data_end+0xf80095ec>
10009828:	4088b03a 	or	r4,r8,r2
1000982c:	20014526 	beq	r4,zero,10009d44 <__adddf3+0x7d4>
10009830:	01000434 	movhi	r4,16
10009834:	42000234 	orhi	r8,r8,8
10009838:	213fffc4 	addi	r4,r4,-1
1000983c:	4110703a 	and	r8,r8,r4
10009840:	003f8206 	br	1000964c <__alt_data_end+0xf800964c>
10009844:	18ffffc4 	addi	r3,r3,-1
10009848:	1800491e 	bne	r3,zero,10009970 <__adddf3+0x400>
1000984c:	898bc83a 	sub	r5,r17,r6
10009850:	8963803a 	cmpltu	r17,r17,r5
10009854:	4251c83a 	sub	r8,r8,r9
10009858:	4451c83a 	sub	r8,r8,r17
1000985c:	2823883a 	mov	r17,r5
10009860:	003f9f06 	br	100096e0 <__alt_data_end+0xf80096e0>
10009864:	4984b03a 	or	r2,r9,r6
10009868:	103f6026 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
1000986c:	213fffc4 	addi	r4,r4,-1
10009870:	2000931e 	bne	r4,zero,10009ac0 <__adddf3+0x550>
10009874:	898d883a 	add	r6,r17,r6
10009878:	3463803a 	cmpltu	r17,r6,r17
1000987c:	4251883a 	add	r8,r8,r9
10009880:	8a11883a 	add	r8,r17,r8
10009884:	3023883a 	mov	r17,r6
10009888:	003fd806 	br	100097ec <__alt_data_end+0xf80097ec>
1000988c:	1800541e 	bne	r3,zero,100099e0 <__adddf3+0x470>
10009890:	80800044 	addi	r2,r16,1
10009894:	1081ffcc 	andi	r2,r2,2047
10009898:	00c00044 	movi	r3,1
1000989c:	1880a00e 	bge	r3,r2,10009b20 <__adddf3+0x5b0>
100098a0:	8989c83a 	sub	r4,r17,r6
100098a4:	8905803a 	cmpltu	r2,r17,r4
100098a8:	4267c83a 	sub	r19,r8,r9
100098ac:	98a7c83a 	sub	r19,r19,r2
100098b0:	9880202c 	andhi	r2,r19,128
100098b4:	10006326 	beq	r2,zero,10009a44 <__adddf3+0x4d4>
100098b8:	3463c83a 	sub	r17,r6,r17
100098bc:	4a07c83a 	sub	r3,r9,r8
100098c0:	344d803a 	cmpltu	r6,r6,r17
100098c4:	19a7c83a 	sub	r19,r3,r6
100098c8:	3825883a 	mov	r18,r7
100098cc:	983f8a1e 	bne	r19,zero,100096f8 <__alt_data_end+0xf80096f8>
100098d0:	8809883a 	mov	r4,r17
100098d4:	000becc0 	call	1000becc <__clzsi2>
100098d8:	10800804 	addi	r2,r2,32
100098dc:	10fffe04 	addi	r3,r2,-8
100098e0:	010007c4 	movi	r4,31
100098e4:	20ff890e 	bge	r4,r3,1000970c <__alt_data_end+0xf800970c>
100098e8:	10bff604 	addi	r2,r2,-40
100098ec:	8884983a 	sll	r2,r17,r2
100098f0:	0023883a 	mov	r17,zero
100098f4:	1c3f8c0e 	bge	r3,r16,10009728 <__alt_data_end+0xf8009728>
100098f8:	023fe034 	movhi	r8,65408
100098fc:	423fffc4 	addi	r8,r8,-1
10009900:	80e1c83a 	sub	r16,r16,r3
10009904:	1210703a 	and	r8,r2,r8
10009908:	003f3806 	br	100095ec <__alt_data_end+0xf80095ec>
1000990c:	9007883a 	mov	r3,r18
10009910:	0011883a 	mov	r8,zero
10009914:	0005883a 	mov	r2,zero
10009918:	003f4c06 	br	1000964c <__alt_data_end+0xf800964c>
1000991c:	498cb03a 	or	r6,r9,r6
10009920:	300cc03a 	cmpne	r6,r6,zero
10009924:	0007883a 	mov	r3,zero
10009928:	003f6806 	br	100096cc <__alt_data_end+0xf80096cc>
1000992c:	20009c1e 	bne	r4,zero,10009ba0 <__adddf3+0x630>
10009930:	80800044 	addi	r2,r16,1
10009934:	1141ffcc 	andi	r5,r2,2047
10009938:	01000044 	movi	r4,1
1000993c:	2140670e 	bge	r4,r5,10009adc <__adddf3+0x56c>
10009940:	0101ffc4 	movi	r4,2047
10009944:	11007f26 	beq	r2,r4,10009b44 <__adddf3+0x5d4>
10009948:	898d883a 	add	r6,r17,r6
1000994c:	4247883a 	add	r3,r8,r9
10009950:	3451803a 	cmpltu	r8,r6,r17
10009954:	40d1883a 	add	r8,r8,r3
10009958:	402297fa 	slli	r17,r8,31
1000995c:	300cd07a 	srli	r6,r6,1
10009960:	4010d07a 	srli	r8,r8,1
10009964:	1021883a 	mov	r16,r2
10009968:	89a2b03a 	or	r17,r17,r6
1000996c:	003f1f06 	br	100095ec <__alt_data_end+0xf80095ec>
10009970:	0081ffc4 	movi	r2,2047
10009974:	80bf481e 	bne	r16,r2,10009698 <__alt_data_end+0xf8009698>
10009978:	003f1c06 	br	100095ec <__alt_data_end+0xf80095ec>
1000997c:	843ff844 	addi	r16,r16,-31
10009980:	01000804 	movi	r4,32
10009984:	1406d83a 	srl	r3,r2,r16
10009988:	41005026 	beq	r8,r4,10009acc <__adddf3+0x55c>
1000998c:	01001004 	movi	r4,64
10009990:	2211c83a 	sub	r8,r4,r8
10009994:	1204983a 	sll	r2,r2,r8
10009998:	88a2b03a 	or	r17,r17,r2
1000999c:	8822c03a 	cmpne	r17,r17,zero
100099a0:	1c62b03a 	or	r17,r3,r17
100099a4:	0011883a 	mov	r8,zero
100099a8:	0021883a 	mov	r16,zero
100099ac:	003f7106 	br	10009774 <__alt_data_end+0xf8009774>
100099b0:	193ff804 	addi	r4,r3,-32
100099b4:	00800804 	movi	r2,32
100099b8:	4908d83a 	srl	r4,r9,r4
100099bc:	18804526 	beq	r3,r2,10009ad4 <__adddf3+0x564>
100099c0:	00801004 	movi	r2,64
100099c4:	10c5c83a 	sub	r2,r2,r3
100099c8:	4886983a 	sll	r3,r9,r2
100099cc:	198cb03a 	or	r6,r3,r6
100099d0:	300cc03a 	cmpne	r6,r6,zero
100099d4:	218cb03a 	or	r6,r4,r6
100099d8:	0007883a 	mov	r3,zero
100099dc:	003f3b06 	br	100096cc <__alt_data_end+0xf80096cc>
100099e0:	80002a26 	beq	r16,zero,10009a8c <__adddf3+0x51c>
100099e4:	0101ffc4 	movi	r4,2047
100099e8:	11006826 	beq	r2,r4,10009b8c <__adddf3+0x61c>
100099ec:	00c7c83a 	sub	r3,zero,r3
100099f0:	42002034 	orhi	r8,r8,128
100099f4:	01000e04 	movi	r4,56
100099f8:	20c07c16 	blt	r4,r3,10009bec <__adddf3+0x67c>
100099fc:	010007c4 	movi	r4,31
10009a00:	20c0da16 	blt	r4,r3,10009d6c <__adddf3+0x7fc>
10009a04:	01000804 	movi	r4,32
10009a08:	20c9c83a 	sub	r4,r4,r3
10009a0c:	4114983a 	sll	r10,r8,r4
10009a10:	88cad83a 	srl	r5,r17,r3
10009a14:	8908983a 	sll	r4,r17,r4
10009a18:	40c6d83a 	srl	r3,r8,r3
10009a1c:	5162b03a 	or	r17,r10,r5
10009a20:	2008c03a 	cmpne	r4,r4,zero
10009a24:	8922b03a 	or	r17,r17,r4
10009a28:	3463c83a 	sub	r17,r6,r17
10009a2c:	48c7c83a 	sub	r3,r9,r3
10009a30:	344d803a 	cmpltu	r6,r6,r17
10009a34:	1991c83a 	sub	r8,r3,r6
10009a38:	1021883a 	mov	r16,r2
10009a3c:	3825883a 	mov	r18,r7
10009a40:	003f2706 	br	100096e0 <__alt_data_end+0xf80096e0>
10009a44:	24d0b03a 	or	r8,r4,r19
10009a48:	40001b1e 	bne	r8,zero,10009ab8 <__adddf3+0x548>
10009a4c:	0005883a 	mov	r2,zero
10009a50:	0007883a 	mov	r3,zero
10009a54:	0021883a 	mov	r16,zero
10009a58:	003f4d06 	br	10009790 <__alt_data_end+0xf8009790>
10009a5c:	008007c4 	movi	r2,31
10009a60:	11003c16 	blt	r2,r4,10009b54 <__adddf3+0x5e4>
10009a64:	00800804 	movi	r2,32
10009a68:	1105c83a 	sub	r2,r2,r4
10009a6c:	488e983a 	sll	r7,r9,r2
10009a70:	310ad83a 	srl	r5,r6,r4
10009a74:	3084983a 	sll	r2,r6,r2
10009a78:	4912d83a 	srl	r9,r9,r4
10009a7c:	394ab03a 	or	r5,r7,r5
10009a80:	1004c03a 	cmpne	r2,r2,zero
10009a84:	288ab03a 	or	r5,r5,r2
10009a88:	003f5306 	br	100097d8 <__alt_data_end+0xf80097d8>
10009a8c:	4448b03a 	or	r4,r8,r17
10009a90:	20003e26 	beq	r4,zero,10009b8c <__adddf3+0x61c>
10009a94:	00c6303a 	nor	r3,zero,r3
10009a98:	18003a1e 	bne	r3,zero,10009b84 <__adddf3+0x614>
10009a9c:	3463c83a 	sub	r17,r6,r17
10009aa0:	4a07c83a 	sub	r3,r9,r8
10009aa4:	344d803a 	cmpltu	r6,r6,r17
10009aa8:	1991c83a 	sub	r8,r3,r6
10009aac:	1021883a 	mov	r16,r2
10009ab0:	3825883a 	mov	r18,r7
10009ab4:	003f0a06 	br	100096e0 <__alt_data_end+0xf80096e0>
10009ab8:	2023883a 	mov	r17,r4
10009abc:	003f0d06 	br	100096f4 <__alt_data_end+0xf80096f4>
10009ac0:	0081ffc4 	movi	r2,2047
10009ac4:	80bf3f1e 	bne	r16,r2,100097c4 <__alt_data_end+0xf80097c4>
10009ac8:	003ec806 	br	100095ec <__alt_data_end+0xf80095ec>
10009acc:	0005883a 	mov	r2,zero
10009ad0:	003fb106 	br	10009998 <__alt_data_end+0xf8009998>
10009ad4:	0007883a 	mov	r3,zero
10009ad8:	003fbc06 	br	100099cc <__alt_data_end+0xf80099cc>
10009adc:	4444b03a 	or	r2,r8,r17
10009ae0:	8000871e 	bne	r16,zero,10009d00 <__adddf3+0x790>
10009ae4:	1000ba26 	beq	r2,zero,10009dd0 <__adddf3+0x860>
10009ae8:	4984b03a 	or	r2,r9,r6
10009aec:	103ebf26 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
10009af0:	8985883a 	add	r2,r17,r6
10009af4:	4247883a 	add	r3,r8,r9
10009af8:	1451803a 	cmpltu	r8,r2,r17
10009afc:	40d1883a 	add	r8,r8,r3
10009b00:	40c0202c 	andhi	r3,r8,128
10009b04:	1023883a 	mov	r17,r2
10009b08:	183f1a26 	beq	r3,zero,10009774 <__alt_data_end+0xf8009774>
10009b0c:	00bfe034 	movhi	r2,65408
10009b10:	10bfffc4 	addi	r2,r2,-1
10009b14:	2021883a 	mov	r16,r4
10009b18:	4090703a 	and	r8,r8,r2
10009b1c:	003eb306 	br	100095ec <__alt_data_end+0xf80095ec>
10009b20:	4444b03a 	or	r2,r8,r17
10009b24:	8000291e 	bne	r16,zero,10009bcc <__adddf3+0x65c>
10009b28:	10004b1e 	bne	r2,zero,10009c58 <__adddf3+0x6e8>
10009b2c:	4990b03a 	or	r8,r9,r6
10009b30:	40008b26 	beq	r8,zero,10009d60 <__adddf3+0x7f0>
10009b34:	4811883a 	mov	r8,r9
10009b38:	3023883a 	mov	r17,r6
10009b3c:	3825883a 	mov	r18,r7
10009b40:	003eaa06 	br	100095ec <__alt_data_end+0xf80095ec>
10009b44:	1021883a 	mov	r16,r2
10009b48:	0011883a 	mov	r8,zero
10009b4c:	0005883a 	mov	r2,zero
10009b50:	003f0f06 	br	10009790 <__alt_data_end+0xf8009790>
10009b54:	217ff804 	addi	r5,r4,-32
10009b58:	00800804 	movi	r2,32
10009b5c:	494ad83a 	srl	r5,r9,r5
10009b60:	20807d26 	beq	r4,r2,10009d58 <__adddf3+0x7e8>
10009b64:	00801004 	movi	r2,64
10009b68:	1109c83a 	sub	r4,r2,r4
10009b6c:	4912983a 	sll	r9,r9,r4
10009b70:	498cb03a 	or	r6,r9,r6
10009b74:	300cc03a 	cmpne	r6,r6,zero
10009b78:	298ab03a 	or	r5,r5,r6
10009b7c:	0013883a 	mov	r9,zero
10009b80:	003f1506 	br	100097d8 <__alt_data_end+0xf80097d8>
10009b84:	0101ffc4 	movi	r4,2047
10009b88:	113f9a1e 	bne	r2,r4,100099f4 <__alt_data_end+0xf80099f4>
10009b8c:	4811883a 	mov	r8,r9
10009b90:	3023883a 	mov	r17,r6
10009b94:	1021883a 	mov	r16,r2
10009b98:	3825883a 	mov	r18,r7
10009b9c:	003e9306 	br	100095ec <__alt_data_end+0xf80095ec>
10009ba0:	8000161e 	bne	r16,zero,10009bfc <__adddf3+0x68c>
10009ba4:	444ab03a 	or	r5,r8,r17
10009ba8:	28005126 	beq	r5,zero,10009cf0 <__adddf3+0x780>
10009bac:	0108303a 	nor	r4,zero,r4
10009bb0:	20004d1e 	bne	r4,zero,10009ce8 <__adddf3+0x778>
10009bb4:	89a3883a 	add	r17,r17,r6
10009bb8:	4253883a 	add	r9,r8,r9
10009bbc:	898d803a 	cmpltu	r6,r17,r6
10009bc0:	3251883a 	add	r8,r6,r9
10009bc4:	1021883a 	mov	r16,r2
10009bc8:	003f0806 	br	100097ec <__alt_data_end+0xf80097ec>
10009bcc:	1000301e 	bne	r2,zero,10009c90 <__adddf3+0x720>
10009bd0:	4984b03a 	or	r2,r9,r6
10009bd4:	10007126 	beq	r2,zero,10009d9c <__adddf3+0x82c>
10009bd8:	4811883a 	mov	r8,r9
10009bdc:	3023883a 	mov	r17,r6
10009be0:	3825883a 	mov	r18,r7
10009be4:	0401ffc4 	movi	r16,2047
10009be8:	003e8006 	br	100095ec <__alt_data_end+0xf80095ec>
10009bec:	4462b03a 	or	r17,r8,r17
10009bf0:	8822c03a 	cmpne	r17,r17,zero
10009bf4:	0007883a 	mov	r3,zero
10009bf8:	003f8b06 	br	10009a28 <__alt_data_end+0xf8009a28>
10009bfc:	0141ffc4 	movi	r5,2047
10009c00:	11403b26 	beq	r2,r5,10009cf0 <__adddf3+0x780>
10009c04:	0109c83a 	sub	r4,zero,r4
10009c08:	42002034 	orhi	r8,r8,128
10009c0c:	01400e04 	movi	r5,56
10009c10:	29006716 	blt	r5,r4,10009db0 <__adddf3+0x840>
10009c14:	014007c4 	movi	r5,31
10009c18:	29007016 	blt	r5,r4,10009ddc <__adddf3+0x86c>
10009c1c:	01400804 	movi	r5,32
10009c20:	290bc83a 	sub	r5,r5,r4
10009c24:	4154983a 	sll	r10,r8,r5
10009c28:	890ed83a 	srl	r7,r17,r4
10009c2c:	894a983a 	sll	r5,r17,r5
10009c30:	4108d83a 	srl	r4,r8,r4
10009c34:	51e2b03a 	or	r17,r10,r7
10009c38:	280ac03a 	cmpne	r5,r5,zero
10009c3c:	8962b03a 	or	r17,r17,r5
10009c40:	89a3883a 	add	r17,r17,r6
10009c44:	2253883a 	add	r9,r4,r9
10009c48:	898d803a 	cmpltu	r6,r17,r6
10009c4c:	3251883a 	add	r8,r6,r9
10009c50:	1021883a 	mov	r16,r2
10009c54:	003ee506 	br	100097ec <__alt_data_end+0xf80097ec>
10009c58:	4984b03a 	or	r2,r9,r6
10009c5c:	103e6326 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
10009c60:	8987c83a 	sub	r3,r17,r6
10009c64:	88c9803a 	cmpltu	r4,r17,r3
10009c68:	4245c83a 	sub	r2,r8,r9
10009c6c:	1105c83a 	sub	r2,r2,r4
10009c70:	1100202c 	andhi	r4,r2,128
10009c74:	203ebb26 	beq	r4,zero,10009764 <__alt_data_end+0xf8009764>
10009c78:	3463c83a 	sub	r17,r6,r17
10009c7c:	4a07c83a 	sub	r3,r9,r8
10009c80:	344d803a 	cmpltu	r6,r6,r17
10009c84:	1991c83a 	sub	r8,r3,r6
10009c88:	3825883a 	mov	r18,r7
10009c8c:	003e5706 	br	100095ec <__alt_data_end+0xf80095ec>
10009c90:	4984b03a 	or	r2,r9,r6
10009c94:	10002e26 	beq	r2,zero,10009d50 <__adddf3+0x7e0>
10009c98:	4004d0fa 	srli	r2,r8,3
10009c9c:	8822d0fa 	srli	r17,r17,3
10009ca0:	4010977a 	slli	r8,r8,29
10009ca4:	10c0022c 	andhi	r3,r2,8
10009ca8:	4462b03a 	or	r17,r8,r17
10009cac:	18000826 	beq	r3,zero,10009cd0 <__adddf3+0x760>
10009cb0:	4808d0fa 	srli	r4,r9,3
10009cb4:	20c0022c 	andhi	r3,r4,8
10009cb8:	1800051e 	bne	r3,zero,10009cd0 <__adddf3+0x760>
10009cbc:	300cd0fa 	srli	r6,r6,3
10009cc0:	4806977a 	slli	r3,r9,29
10009cc4:	2005883a 	mov	r2,r4
10009cc8:	3825883a 	mov	r18,r7
10009ccc:	19a2b03a 	or	r17,r3,r6
10009cd0:	8810d77a 	srli	r8,r17,29
10009cd4:	100490fa 	slli	r2,r2,3
10009cd8:	882290fa 	slli	r17,r17,3
10009cdc:	0401ffc4 	movi	r16,2047
10009ce0:	4090b03a 	or	r8,r8,r2
10009ce4:	003e4106 	br	100095ec <__alt_data_end+0xf80095ec>
10009ce8:	0141ffc4 	movi	r5,2047
10009cec:	117fc71e 	bne	r2,r5,10009c0c <__alt_data_end+0xf8009c0c>
10009cf0:	4811883a 	mov	r8,r9
10009cf4:	3023883a 	mov	r17,r6
10009cf8:	1021883a 	mov	r16,r2
10009cfc:	003e3b06 	br	100095ec <__alt_data_end+0xf80095ec>
10009d00:	10002f26 	beq	r2,zero,10009dc0 <__adddf3+0x850>
10009d04:	4984b03a 	or	r2,r9,r6
10009d08:	10001126 	beq	r2,zero,10009d50 <__adddf3+0x7e0>
10009d0c:	4004d0fa 	srli	r2,r8,3
10009d10:	8822d0fa 	srli	r17,r17,3
10009d14:	4010977a 	slli	r8,r8,29
10009d18:	10c0022c 	andhi	r3,r2,8
10009d1c:	4462b03a 	or	r17,r8,r17
10009d20:	183feb26 	beq	r3,zero,10009cd0 <__alt_data_end+0xf8009cd0>
10009d24:	4808d0fa 	srli	r4,r9,3
10009d28:	20c0022c 	andhi	r3,r4,8
10009d2c:	183fe81e 	bne	r3,zero,10009cd0 <__alt_data_end+0xf8009cd0>
10009d30:	300cd0fa 	srli	r6,r6,3
10009d34:	4806977a 	slli	r3,r9,29
10009d38:	2005883a 	mov	r2,r4
10009d3c:	19a2b03a 	or	r17,r3,r6
10009d40:	003fe306 	br	10009cd0 <__alt_data_end+0xf8009cd0>
10009d44:	0011883a 	mov	r8,zero
10009d48:	0005883a 	mov	r2,zero
10009d4c:	003e3f06 	br	1000964c <__alt_data_end+0xf800964c>
10009d50:	0401ffc4 	movi	r16,2047
10009d54:	003e2506 	br	100095ec <__alt_data_end+0xf80095ec>
10009d58:	0013883a 	mov	r9,zero
10009d5c:	003f8406 	br	10009b70 <__alt_data_end+0xf8009b70>
10009d60:	0005883a 	mov	r2,zero
10009d64:	0007883a 	mov	r3,zero
10009d68:	003e8906 	br	10009790 <__alt_data_end+0xf8009790>
10009d6c:	197ff804 	addi	r5,r3,-32
10009d70:	01000804 	movi	r4,32
10009d74:	414ad83a 	srl	r5,r8,r5
10009d78:	19002426 	beq	r3,r4,10009e0c <__adddf3+0x89c>
10009d7c:	01001004 	movi	r4,64
10009d80:	20c7c83a 	sub	r3,r4,r3
10009d84:	40c6983a 	sll	r3,r8,r3
10009d88:	1c46b03a 	or	r3,r3,r17
10009d8c:	1806c03a 	cmpne	r3,r3,zero
10009d90:	28e2b03a 	or	r17,r5,r3
10009d94:	0007883a 	mov	r3,zero
10009d98:	003f2306 	br	10009a28 <__alt_data_end+0xf8009a28>
10009d9c:	0007883a 	mov	r3,zero
10009da0:	5811883a 	mov	r8,r11
10009da4:	00bfffc4 	movi	r2,-1
10009da8:	0401ffc4 	movi	r16,2047
10009dac:	003e7806 	br	10009790 <__alt_data_end+0xf8009790>
10009db0:	4462b03a 	or	r17,r8,r17
10009db4:	8822c03a 	cmpne	r17,r17,zero
10009db8:	0009883a 	mov	r4,zero
10009dbc:	003fa006 	br	10009c40 <__alt_data_end+0xf8009c40>
10009dc0:	4811883a 	mov	r8,r9
10009dc4:	3023883a 	mov	r17,r6
10009dc8:	0401ffc4 	movi	r16,2047
10009dcc:	003e0706 	br	100095ec <__alt_data_end+0xf80095ec>
10009dd0:	4811883a 	mov	r8,r9
10009dd4:	3023883a 	mov	r17,r6
10009dd8:	003e0406 	br	100095ec <__alt_data_end+0xf80095ec>
10009ddc:	21fff804 	addi	r7,r4,-32
10009de0:	01400804 	movi	r5,32
10009de4:	41ced83a 	srl	r7,r8,r7
10009de8:	21400a26 	beq	r4,r5,10009e14 <__adddf3+0x8a4>
10009dec:	01401004 	movi	r5,64
10009df0:	2909c83a 	sub	r4,r5,r4
10009df4:	4108983a 	sll	r4,r8,r4
10009df8:	2448b03a 	or	r4,r4,r17
10009dfc:	2008c03a 	cmpne	r4,r4,zero
10009e00:	3922b03a 	or	r17,r7,r4
10009e04:	0009883a 	mov	r4,zero
10009e08:	003f8d06 	br	10009c40 <__alt_data_end+0xf8009c40>
10009e0c:	0007883a 	mov	r3,zero
10009e10:	003fdd06 	br	10009d88 <__alt_data_end+0xf8009d88>
10009e14:	0009883a 	mov	r4,zero
10009e18:	003ff706 	br	10009df8 <__alt_data_end+0xf8009df8>

10009e1c <__divdf3>:
10009e1c:	defff004 	addi	sp,sp,-64
10009e20:	dc800815 	stw	r18,32(sp)
10009e24:	2824d53a 	srli	r18,r5,20
10009e28:	dd800c15 	stw	r22,48(sp)
10009e2c:	282cd7fa 	srli	r22,r5,31
10009e30:	dc000615 	stw	r16,24(sp)
10009e34:	04000434 	movhi	r16,16
10009e38:	843fffc4 	addi	r16,r16,-1
10009e3c:	dfc00f15 	stw	ra,60(sp)
10009e40:	df000e15 	stw	fp,56(sp)
10009e44:	ddc00d15 	stw	r23,52(sp)
10009e48:	dd400b15 	stw	r21,44(sp)
10009e4c:	dd000a15 	stw	r20,40(sp)
10009e50:	dcc00915 	stw	r19,36(sp)
10009e54:	dc400715 	stw	r17,28(sp)
10009e58:	9481ffcc 	andi	r18,r18,2047
10009e5c:	2c20703a 	and	r16,r5,r16
10009e60:	b2003fcc 	andi	r8,r22,255
10009e64:	90006126 	beq	r18,zero,10009fec <__divdf3+0x1d0>
10009e68:	0081ffc4 	movi	r2,2047
10009e6c:	202b883a 	mov	r21,r4
10009e70:	90803726 	beq	r18,r2,10009f50 <__divdf3+0x134>
10009e74:	80800434 	orhi	r2,r16,16
10009e78:	100490fa 	slli	r2,r2,3
10009e7c:	2020d77a 	srli	r16,r4,29
10009e80:	202a90fa 	slli	r21,r4,3
10009e84:	94bf0044 	addi	r18,r18,-1023
10009e88:	80a0b03a 	or	r16,r16,r2
10009e8c:	0013883a 	mov	r9,zero
10009e90:	000b883a 	mov	r5,zero
10009e94:	3806d53a 	srli	r3,r7,20
10009e98:	382ed7fa 	srli	r23,r7,31
10009e9c:	04400434 	movhi	r17,16
10009ea0:	8c7fffc4 	addi	r17,r17,-1
10009ea4:	18c1ffcc 	andi	r3,r3,2047
10009ea8:	3029883a 	mov	r20,r6
10009eac:	3c62703a 	and	r17,r7,r17
10009eb0:	bf003fcc 	andi	fp,r23,255
10009eb4:	18006e26 	beq	r3,zero,1000a070 <__divdf3+0x254>
10009eb8:	0081ffc4 	movi	r2,2047
10009ebc:	18806626 	beq	r3,r2,1000a058 <__divdf3+0x23c>
10009ec0:	88800434 	orhi	r2,r17,16
10009ec4:	100490fa 	slli	r2,r2,3
10009ec8:	3022d77a 	srli	r17,r6,29
10009ecc:	302890fa 	slli	r20,r6,3
10009ed0:	18ff0044 	addi	r3,r3,-1023
10009ed4:	88a2b03a 	or	r17,r17,r2
10009ed8:	000f883a 	mov	r7,zero
10009edc:	b5e6f03a 	xor	r19,r22,r23
10009ee0:	3a4cb03a 	or	r6,r7,r9
10009ee4:	008003c4 	movi	r2,15
10009ee8:	9809883a 	mov	r4,r19
10009eec:	90c7c83a 	sub	r3,r18,r3
10009ef0:	9cc03fcc 	andi	r19,r19,255
10009ef4:	11809636 	bltu	r2,r6,1000a150 <__divdf3+0x334>
10009ef8:	300c90ba 	slli	r6,r6,2
10009efc:	00840074 	movhi	r2,4097
10009f00:	10a7c404 	addi	r2,r2,-24816
10009f04:	308d883a 	add	r6,r6,r2
10009f08:	30800017 	ldw	r2,0(r6)
10009f0c:	1000683a 	jmp	r2
10009f10:	1000a150 	cmplti	zero,r2,645
10009f14:	10009f88 	cmpgei	zero,r2,638
10009f18:	1000a140 	call	11000a14 <_gp+0xfdcd1c>
10009f1c:	10009f7c 	xorhi	zero,r2,637
10009f20:	1000a140 	call	11000a14 <_gp+0xfdcd1c>
10009f24:	1000a114 	ori	zero,r2,644
10009f28:	1000a140 	call	11000a14 <_gp+0xfdcd1c>
10009f2c:	10009f7c 	xorhi	zero,r2,637
10009f30:	10009f88 	cmpgei	zero,r2,638
10009f34:	10009f88 	cmpgei	zero,r2,638
10009f38:	1000a114 	ori	zero,r2,644
10009f3c:	10009f7c 	xorhi	zero,r2,637
10009f40:	10009f6c 	andhi	zero,r2,637
10009f44:	10009f6c 	andhi	zero,r2,637
10009f48:	10009f6c 	andhi	zero,r2,637
10009f4c:	1000a4d8 	cmpnei	zero,r2,659
10009f50:	2404b03a 	or	r2,r4,r16
10009f54:	10006c1e 	bne	r2,zero,1000a108 <__divdf3+0x2ec>
10009f58:	02400204 	movi	r9,8
10009f5c:	0021883a 	mov	r16,zero
10009f60:	002b883a 	mov	r21,zero
10009f64:	01400084 	movi	r5,2
10009f68:	003fca06 	br	10009e94 <__alt_data_end+0xf8009e94>
10009f6c:	8023883a 	mov	r17,r16
10009f70:	a829883a 	mov	r20,r21
10009f74:	4039883a 	mov	fp,r8
10009f78:	280f883a 	mov	r7,r5
10009f7c:	00800084 	movi	r2,2
10009f80:	3881601e 	bne	r7,r2,1000a504 <__divdf3+0x6e8>
10009f84:	e027883a 	mov	r19,fp
10009f88:	9900004c 	andi	r4,r19,1
10009f8c:	0081ffc4 	movi	r2,2047
10009f90:	0021883a 	mov	r16,zero
10009f94:	002b883a 	mov	r21,zero
10009f98:	1004953a 	slli	r2,r2,20
10009f9c:	20c03fcc 	andi	r3,r4,255
10009fa0:	01400434 	movhi	r5,16
10009fa4:	297fffc4 	addi	r5,r5,-1
10009fa8:	180697fa 	slli	r3,r3,31
10009fac:	8160703a 	and	r16,r16,r5
10009fb0:	80a0b03a 	or	r16,r16,r2
10009fb4:	80c6b03a 	or	r3,r16,r3
10009fb8:	a805883a 	mov	r2,r21
10009fbc:	dfc00f17 	ldw	ra,60(sp)
10009fc0:	df000e17 	ldw	fp,56(sp)
10009fc4:	ddc00d17 	ldw	r23,52(sp)
10009fc8:	dd800c17 	ldw	r22,48(sp)
10009fcc:	dd400b17 	ldw	r21,44(sp)
10009fd0:	dd000a17 	ldw	r20,40(sp)
10009fd4:	dcc00917 	ldw	r19,36(sp)
10009fd8:	dc800817 	ldw	r18,32(sp)
10009fdc:	dc400717 	ldw	r17,28(sp)
10009fe0:	dc000617 	ldw	r16,24(sp)
10009fe4:	dec01004 	addi	sp,sp,64
10009fe8:	f800283a 	ret
10009fec:	2404b03a 	or	r2,r4,r16
10009ff0:	2023883a 	mov	r17,r4
10009ff4:	10003f26 	beq	r2,zero,1000a0f4 <__divdf3+0x2d8>
10009ff8:	80015e26 	beq	r16,zero,1000a574 <__divdf3+0x758>
10009ffc:	8009883a 	mov	r4,r16
1000a000:	d9800215 	stw	r6,8(sp)
1000a004:	d9c00515 	stw	r7,20(sp)
1000a008:	da000415 	stw	r8,16(sp)
1000a00c:	000becc0 	call	1000becc <__clzsi2>
1000a010:	d9800217 	ldw	r6,8(sp)
1000a014:	d9c00517 	ldw	r7,20(sp)
1000a018:	da000417 	ldw	r8,16(sp)
1000a01c:	113ffd44 	addi	r4,r2,-11
1000a020:	00c00704 	movi	r3,28
1000a024:	19014f16 	blt	r3,r4,1000a564 <__divdf3+0x748>
1000a028:	00c00744 	movi	r3,29
1000a02c:	157ffe04 	addi	r21,r2,-8
1000a030:	1907c83a 	sub	r3,r3,r4
1000a034:	8560983a 	sll	r16,r16,r21
1000a038:	88c6d83a 	srl	r3,r17,r3
1000a03c:	8d6a983a 	sll	r21,r17,r21
1000a040:	1c20b03a 	or	r16,r3,r16
1000a044:	1080fcc4 	addi	r2,r2,1011
1000a048:	00a5c83a 	sub	r18,zero,r2
1000a04c:	0013883a 	mov	r9,zero
1000a050:	000b883a 	mov	r5,zero
1000a054:	003f8f06 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a058:	3444b03a 	or	r2,r6,r17
1000a05c:	1000231e 	bne	r2,zero,1000a0ec <__divdf3+0x2d0>
1000a060:	0023883a 	mov	r17,zero
1000a064:	0029883a 	mov	r20,zero
1000a068:	01c00084 	movi	r7,2
1000a06c:	003f9b06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a070:	3444b03a 	or	r2,r6,r17
1000a074:	10001926 	beq	r2,zero,1000a0dc <__divdf3+0x2c0>
1000a078:	88014b26 	beq	r17,zero,1000a5a8 <__divdf3+0x78c>
1000a07c:	8809883a 	mov	r4,r17
1000a080:	d9400115 	stw	r5,4(sp)
1000a084:	d9800215 	stw	r6,8(sp)
1000a088:	da000415 	stw	r8,16(sp)
1000a08c:	da400315 	stw	r9,12(sp)
1000a090:	000becc0 	call	1000becc <__clzsi2>
1000a094:	d9400117 	ldw	r5,4(sp)
1000a098:	d9800217 	ldw	r6,8(sp)
1000a09c:	da000417 	ldw	r8,16(sp)
1000a0a0:	da400317 	ldw	r9,12(sp)
1000a0a4:	113ffd44 	addi	r4,r2,-11
1000a0a8:	00c00704 	movi	r3,28
1000a0ac:	19013a16 	blt	r3,r4,1000a598 <__divdf3+0x77c>
1000a0b0:	00c00744 	movi	r3,29
1000a0b4:	153ffe04 	addi	r20,r2,-8
1000a0b8:	1907c83a 	sub	r3,r3,r4
1000a0bc:	8d22983a 	sll	r17,r17,r20
1000a0c0:	30c6d83a 	srl	r3,r6,r3
1000a0c4:	3528983a 	sll	r20,r6,r20
1000a0c8:	1c62b03a 	or	r17,r3,r17
1000a0cc:	1080fcc4 	addi	r2,r2,1011
1000a0d0:	0087c83a 	sub	r3,zero,r2
1000a0d4:	000f883a 	mov	r7,zero
1000a0d8:	003f8006 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0dc:	0023883a 	mov	r17,zero
1000a0e0:	0029883a 	mov	r20,zero
1000a0e4:	01c00044 	movi	r7,1
1000a0e8:	003f7c06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0ec:	01c000c4 	movi	r7,3
1000a0f0:	003f7a06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0f4:	02400104 	movi	r9,4
1000a0f8:	0021883a 	mov	r16,zero
1000a0fc:	002b883a 	mov	r21,zero
1000a100:	01400044 	movi	r5,1
1000a104:	003f6306 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a108:	02400304 	movi	r9,12
1000a10c:	014000c4 	movi	r5,3
1000a110:	003f6006 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a114:	04000434 	movhi	r16,16
1000a118:	0009883a 	mov	r4,zero
1000a11c:	843fffc4 	addi	r16,r16,-1
1000a120:	057fffc4 	movi	r21,-1
1000a124:	0081ffc4 	movi	r2,2047
1000a128:	003f9b06 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a12c:	00c00044 	movi	r3,1
1000a130:	1887c83a 	sub	r3,r3,r2
1000a134:	01000e04 	movi	r4,56
1000a138:	20c1530e 	bge	r4,r3,1000a688 <__divdf3+0x86c>
1000a13c:	9900004c 	andi	r4,r19,1
1000a140:	0005883a 	mov	r2,zero
1000a144:	0021883a 	mov	r16,zero
1000a148:	002b883a 	mov	r21,zero
1000a14c:	003f9206 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a150:	8c012e36 	bltu	r17,r16,1000a60c <__divdf3+0x7f0>
1000a154:	84412c26 	beq	r16,r17,1000a608 <__divdf3+0x7ec>
1000a158:	a82f883a 	mov	r23,r21
1000a15c:	18ffffc4 	addi	r3,r3,-1
1000a160:	002b883a 	mov	r21,zero
1000a164:	a004d63a 	srli	r2,r20,24
1000a168:	8822923a 	slli	r17,r17,8
1000a16c:	a028923a 	slli	r20,r20,8
1000a170:	8009883a 	mov	r4,r16
1000a174:	88acb03a 	or	r22,r17,r2
1000a178:	dd000015 	stw	r20,0(sp)
1000a17c:	b028d43a 	srli	r20,r22,16
1000a180:	d8c00215 	stw	r3,8(sp)
1000a184:	b4bfffcc 	andi	r18,r22,65535
1000a188:	a00b883a 	mov	r5,r20
1000a18c:	00084c40 	call	100084c4 <__udivsi3>
1000a190:	100b883a 	mov	r5,r2
1000a194:	9009883a 	mov	r4,r18
1000a198:	1023883a 	mov	r17,r2
1000a19c:	00085800 	call	10008580 <__mulsi3>
1000a1a0:	8009883a 	mov	r4,r16
1000a1a4:	a00b883a 	mov	r5,r20
1000a1a8:	1039883a 	mov	fp,r2
1000a1ac:	00085280 	call	10008528 <__umodsi3>
1000a1b0:	1004943a 	slli	r2,r2,16
1000a1b4:	b808d43a 	srli	r4,r23,16
1000a1b8:	d8c00217 	ldw	r3,8(sp)
1000a1bc:	2084b03a 	or	r2,r4,r2
1000a1c0:	1700062e 	bgeu	r2,fp,1000a1dc <__divdf3+0x3c0>
1000a1c4:	1585883a 	add	r2,r2,r22
1000a1c8:	893fffc4 	addi	r4,r17,-1
1000a1cc:	15811d36 	bltu	r2,r22,1000a644 <__divdf3+0x828>
1000a1d0:	17011c2e 	bgeu	r2,fp,1000a644 <__divdf3+0x828>
1000a1d4:	8c7fff84 	addi	r17,r17,-2
1000a1d8:	1585883a 	add	r2,r2,r22
1000a1dc:	1739c83a 	sub	fp,r2,fp
1000a1e0:	a00b883a 	mov	r5,r20
1000a1e4:	e009883a 	mov	r4,fp
1000a1e8:	d8c00215 	stw	r3,8(sp)
1000a1ec:	00084c40 	call	100084c4 <__udivsi3>
1000a1f0:	100b883a 	mov	r5,r2
1000a1f4:	9009883a 	mov	r4,r18
1000a1f8:	1021883a 	mov	r16,r2
1000a1fc:	00085800 	call	10008580 <__mulsi3>
1000a200:	a00b883a 	mov	r5,r20
1000a204:	e009883a 	mov	r4,fp
1000a208:	d8800415 	stw	r2,16(sp)
1000a20c:	00085280 	call	10008528 <__umodsi3>
1000a210:	1004943a 	slli	r2,r2,16
1000a214:	da000417 	ldw	r8,16(sp)
1000a218:	bdffffcc 	andi	r23,r23,65535
1000a21c:	b884b03a 	or	r2,r23,r2
1000a220:	d8c00217 	ldw	r3,8(sp)
1000a224:	1200062e 	bgeu	r2,r8,1000a240 <__divdf3+0x424>
1000a228:	1585883a 	add	r2,r2,r22
1000a22c:	813fffc4 	addi	r4,r16,-1
1000a230:	15810236 	bltu	r2,r22,1000a63c <__divdf3+0x820>
1000a234:	1201012e 	bgeu	r2,r8,1000a63c <__divdf3+0x820>
1000a238:	843fff84 	addi	r16,r16,-2
1000a23c:	1585883a 	add	r2,r2,r22
1000a240:	8822943a 	slli	r17,r17,16
1000a244:	d9800017 	ldw	r6,0(sp)
1000a248:	1211c83a 	sub	r8,r2,r8
1000a24c:	8c22b03a 	or	r17,r17,r16
1000a250:	373fffcc 	andi	fp,r6,65535
1000a254:	8abfffcc 	andi	r10,r17,65535
1000a258:	8820d43a 	srli	r16,r17,16
1000a25c:	5009883a 	mov	r4,r10
1000a260:	e00b883a 	mov	r5,fp
1000a264:	302ed43a 	srli	r23,r6,16
1000a268:	d8c00215 	stw	r3,8(sp)
1000a26c:	da000415 	stw	r8,16(sp)
1000a270:	da800115 	stw	r10,4(sp)
1000a274:	00085800 	call	10008580 <__mulsi3>
1000a278:	800b883a 	mov	r5,r16
1000a27c:	e009883a 	mov	r4,fp
1000a280:	d8800515 	stw	r2,20(sp)
1000a284:	00085800 	call	10008580 <__mulsi3>
1000a288:	8009883a 	mov	r4,r16
1000a28c:	b80b883a 	mov	r5,r23
1000a290:	d8800315 	stw	r2,12(sp)
1000a294:	00085800 	call	10008580 <__mulsi3>
1000a298:	da800117 	ldw	r10,4(sp)
1000a29c:	b80b883a 	mov	r5,r23
1000a2a0:	1021883a 	mov	r16,r2
1000a2a4:	5009883a 	mov	r4,r10
1000a2a8:	00085800 	call	10008580 <__mulsi3>
1000a2ac:	d9c00517 	ldw	r7,20(sp)
1000a2b0:	da400317 	ldw	r9,12(sp)
1000a2b4:	d8c00217 	ldw	r3,8(sp)
1000a2b8:	3808d43a 	srli	r4,r7,16
1000a2bc:	1245883a 	add	r2,r2,r9
1000a2c0:	da000417 	ldw	r8,16(sp)
1000a2c4:	2085883a 	add	r2,r4,r2
1000a2c8:	1240022e 	bgeu	r2,r9,1000a2d4 <__divdf3+0x4b8>
1000a2cc:	01000074 	movhi	r4,1
1000a2d0:	8121883a 	add	r16,r16,r4
1000a2d4:	1008d43a 	srli	r4,r2,16
1000a2d8:	1004943a 	slli	r2,r2,16
1000a2dc:	39ffffcc 	andi	r7,r7,65535
1000a2e0:	2409883a 	add	r4,r4,r16
1000a2e4:	11c5883a 	add	r2,r2,r7
1000a2e8:	4100bb36 	bltu	r8,r4,1000a5d8 <__divdf3+0x7bc>
1000a2ec:	4100d726 	beq	r8,r4,1000a64c <__divdf3+0x830>
1000a2f0:	4109c83a 	sub	r4,r8,r4
1000a2f4:	a8a1c83a 	sub	r16,r21,r2
1000a2f8:	ac2b803a 	cmpltu	r21,r21,r16
1000a2fc:	256bc83a 	sub	r21,r4,r21
1000a300:	b540d926 	beq	r22,r21,1000a668 <__divdf3+0x84c>
1000a304:	a00b883a 	mov	r5,r20
1000a308:	a809883a 	mov	r4,r21
1000a30c:	d8c00215 	stw	r3,8(sp)
1000a310:	00084c40 	call	100084c4 <__udivsi3>
1000a314:	100b883a 	mov	r5,r2
1000a318:	9009883a 	mov	r4,r18
1000a31c:	d8800515 	stw	r2,20(sp)
1000a320:	00085800 	call	10008580 <__mulsi3>
1000a324:	a809883a 	mov	r4,r21
1000a328:	a00b883a 	mov	r5,r20
1000a32c:	d8800415 	stw	r2,16(sp)
1000a330:	00085280 	call	10008528 <__umodsi3>
1000a334:	1004943a 	slli	r2,r2,16
1000a338:	8008d43a 	srli	r4,r16,16
1000a33c:	da000417 	ldw	r8,16(sp)
1000a340:	d8c00217 	ldw	r3,8(sp)
1000a344:	2084b03a 	or	r2,r4,r2
1000a348:	d9c00517 	ldw	r7,20(sp)
1000a34c:	1200062e 	bgeu	r2,r8,1000a368 <__divdf3+0x54c>
1000a350:	1585883a 	add	r2,r2,r22
1000a354:	393fffc4 	addi	r4,r7,-1
1000a358:	1580c536 	bltu	r2,r22,1000a670 <__divdf3+0x854>
1000a35c:	1200c42e 	bgeu	r2,r8,1000a670 <__divdf3+0x854>
1000a360:	39ffff84 	addi	r7,r7,-2
1000a364:	1585883a 	add	r2,r2,r22
1000a368:	122bc83a 	sub	r21,r2,r8
1000a36c:	a00b883a 	mov	r5,r20
1000a370:	a809883a 	mov	r4,r21
1000a374:	d8c00215 	stw	r3,8(sp)
1000a378:	d9c00515 	stw	r7,20(sp)
1000a37c:	00084c40 	call	100084c4 <__udivsi3>
1000a380:	9009883a 	mov	r4,r18
1000a384:	100b883a 	mov	r5,r2
1000a388:	d8800415 	stw	r2,16(sp)
1000a38c:	00085800 	call	10008580 <__mulsi3>
1000a390:	a809883a 	mov	r4,r21
1000a394:	a00b883a 	mov	r5,r20
1000a398:	1025883a 	mov	r18,r2
1000a39c:	00085280 	call	10008528 <__umodsi3>
1000a3a0:	1004943a 	slli	r2,r2,16
1000a3a4:	813fffcc 	andi	r4,r16,65535
1000a3a8:	d8c00217 	ldw	r3,8(sp)
1000a3ac:	20a0b03a 	or	r16,r4,r2
1000a3b0:	d9c00517 	ldw	r7,20(sp)
1000a3b4:	da000417 	ldw	r8,16(sp)
1000a3b8:	8480062e 	bgeu	r16,r18,1000a3d4 <__divdf3+0x5b8>
1000a3bc:	85a1883a 	add	r16,r16,r22
1000a3c0:	40bfffc4 	addi	r2,r8,-1
1000a3c4:	8580ac36 	bltu	r16,r22,1000a678 <__divdf3+0x85c>
1000a3c8:	8480ab2e 	bgeu	r16,r18,1000a678 <__divdf3+0x85c>
1000a3cc:	423fff84 	addi	r8,r8,-2
1000a3d0:	85a1883a 	add	r16,r16,r22
1000a3d4:	3804943a 	slli	r2,r7,16
1000a3d8:	84a1c83a 	sub	r16,r16,r18
1000a3dc:	e009883a 	mov	r4,fp
1000a3e0:	1228b03a 	or	r20,r2,r8
1000a3e4:	a1ffffcc 	andi	r7,r20,65535
1000a3e8:	a024d43a 	srli	r18,r20,16
1000a3ec:	380b883a 	mov	r5,r7
1000a3f0:	d8c00215 	stw	r3,8(sp)
1000a3f4:	d9c00515 	stw	r7,20(sp)
1000a3f8:	00085800 	call	10008580 <__mulsi3>
1000a3fc:	900b883a 	mov	r5,r18
1000a400:	e009883a 	mov	r4,fp
1000a404:	102b883a 	mov	r21,r2
1000a408:	00085800 	call	10008580 <__mulsi3>
1000a40c:	900b883a 	mov	r5,r18
1000a410:	b809883a 	mov	r4,r23
1000a414:	1039883a 	mov	fp,r2
1000a418:	00085800 	call	10008580 <__mulsi3>
1000a41c:	d9c00517 	ldw	r7,20(sp)
1000a420:	b80b883a 	mov	r5,r23
1000a424:	1025883a 	mov	r18,r2
1000a428:	3809883a 	mov	r4,r7
1000a42c:	00085800 	call	10008580 <__mulsi3>
1000a430:	a808d43a 	srli	r4,r21,16
1000a434:	1705883a 	add	r2,r2,fp
1000a438:	d8c00217 	ldw	r3,8(sp)
1000a43c:	2085883a 	add	r2,r4,r2
1000a440:	1700022e 	bgeu	r2,fp,1000a44c <__divdf3+0x630>
1000a444:	01000074 	movhi	r4,1
1000a448:	9125883a 	add	r18,r18,r4
1000a44c:	1008d43a 	srli	r4,r2,16
1000a450:	1004943a 	slli	r2,r2,16
1000a454:	ad7fffcc 	andi	r21,r21,65535
1000a458:	2489883a 	add	r4,r4,r18
1000a45c:	1545883a 	add	r2,r2,r21
1000a460:	81003836 	bltu	r16,r4,1000a544 <__divdf3+0x728>
1000a464:	81003626 	beq	r16,r4,1000a540 <__divdf3+0x724>
1000a468:	a5000054 	ori	r20,r20,1
1000a46c:	1880ffc4 	addi	r2,r3,1023
1000a470:	00bf2e0e 	bge	zero,r2,1000a12c <__alt_data_end+0xf800a12c>
1000a474:	a10001cc 	andi	r4,r20,7
1000a478:	20000726 	beq	r4,zero,1000a498 <__divdf3+0x67c>
1000a47c:	a10003cc 	andi	r4,r20,15
1000a480:	01400104 	movi	r5,4
1000a484:	21400426 	beq	r4,r5,1000a498 <__divdf3+0x67c>
1000a488:	a149883a 	add	r4,r20,r5
1000a48c:	2529803a 	cmpltu	r20,r4,r20
1000a490:	8d23883a 	add	r17,r17,r20
1000a494:	2029883a 	mov	r20,r4
1000a498:	8900402c 	andhi	r4,r17,256
1000a49c:	20000426 	beq	r4,zero,1000a4b0 <__divdf3+0x694>
1000a4a0:	18810004 	addi	r2,r3,1024
1000a4a4:	00ffc034 	movhi	r3,65280
1000a4a8:	18ffffc4 	addi	r3,r3,-1
1000a4ac:	88e2703a 	and	r17,r17,r3
1000a4b0:	00c1ff84 	movi	r3,2046
1000a4b4:	18beb416 	blt	r3,r2,10009f88 <__alt_data_end+0xf8009f88>
1000a4b8:	a028d0fa 	srli	r20,r20,3
1000a4bc:	882a977a 	slli	r21,r17,29
1000a4c0:	8820927a 	slli	r16,r17,9
1000a4c4:	1081ffcc 	andi	r2,r2,2047
1000a4c8:	ad2ab03a 	or	r21,r21,r20
1000a4cc:	8020d33a 	srli	r16,r16,12
1000a4d0:	9900004c 	andi	r4,r19,1
1000a4d4:	003eb006 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a4d8:	8080022c 	andhi	r2,r16,8
1000a4dc:	10001226 	beq	r2,zero,1000a528 <__divdf3+0x70c>
1000a4e0:	8880022c 	andhi	r2,r17,8
1000a4e4:	1000101e 	bne	r2,zero,1000a528 <__divdf3+0x70c>
1000a4e8:	00800434 	movhi	r2,16
1000a4ec:	8c000234 	orhi	r16,r17,8
1000a4f0:	10bfffc4 	addi	r2,r2,-1
1000a4f4:	b809883a 	mov	r4,r23
1000a4f8:	80a0703a 	and	r16,r16,r2
1000a4fc:	a02b883a 	mov	r21,r20
1000a500:	003f0806 	br	1000a124 <__alt_data_end+0xf800a124>
1000a504:	008000c4 	movi	r2,3
1000a508:	3880b126 	beq	r7,r2,1000a7d0 <__divdf3+0x9b4>
1000a50c:	00800044 	movi	r2,1
1000a510:	38805b1e 	bne	r7,r2,1000a680 <__divdf3+0x864>
1000a514:	e009883a 	mov	r4,fp
1000a518:	0005883a 	mov	r2,zero
1000a51c:	0021883a 	mov	r16,zero
1000a520:	002b883a 	mov	r21,zero
1000a524:	003e9c06 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a528:	00800434 	movhi	r2,16
1000a52c:	84000234 	orhi	r16,r16,8
1000a530:	10bfffc4 	addi	r2,r2,-1
1000a534:	b009883a 	mov	r4,r22
1000a538:	80a0703a 	and	r16,r16,r2
1000a53c:	003ef906 	br	1000a124 <__alt_data_end+0xf800a124>
1000a540:	103fca26 	beq	r2,zero,1000a46c <__alt_data_end+0xf800a46c>
1000a544:	b421883a 	add	r16,r22,r16
1000a548:	a17fffc4 	addi	r5,r20,-1
1000a54c:	8580422e 	bgeu	r16,r22,1000a658 <__divdf3+0x83c>
1000a550:	2829883a 	mov	r20,r5
1000a554:	813fc41e 	bne	r16,r4,1000a468 <__alt_data_end+0xf800a468>
1000a558:	d9800017 	ldw	r6,0(sp)
1000a55c:	30bfc21e 	bne	r6,r2,1000a468 <__alt_data_end+0xf800a468>
1000a560:	003fc206 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a564:	143ff604 	addi	r16,r2,-40
1000a568:	8c20983a 	sll	r16,r17,r16
1000a56c:	002b883a 	mov	r21,zero
1000a570:	003eb406 	br	1000a044 <__alt_data_end+0xf800a044>
1000a574:	d9800215 	stw	r6,8(sp)
1000a578:	d9c00515 	stw	r7,20(sp)
1000a57c:	da000415 	stw	r8,16(sp)
1000a580:	000becc0 	call	1000becc <__clzsi2>
1000a584:	10800804 	addi	r2,r2,32
1000a588:	da000417 	ldw	r8,16(sp)
1000a58c:	d9c00517 	ldw	r7,20(sp)
1000a590:	d9800217 	ldw	r6,8(sp)
1000a594:	003ea106 	br	1000a01c <__alt_data_end+0xf800a01c>
1000a598:	147ff604 	addi	r17,r2,-40
1000a59c:	3462983a 	sll	r17,r6,r17
1000a5a0:	0029883a 	mov	r20,zero
1000a5a4:	003ec906 	br	1000a0cc <__alt_data_end+0xf800a0cc>
1000a5a8:	3009883a 	mov	r4,r6
1000a5ac:	d9400115 	stw	r5,4(sp)
1000a5b0:	d9800215 	stw	r6,8(sp)
1000a5b4:	da000415 	stw	r8,16(sp)
1000a5b8:	da400315 	stw	r9,12(sp)
1000a5bc:	000becc0 	call	1000becc <__clzsi2>
1000a5c0:	10800804 	addi	r2,r2,32
1000a5c4:	da400317 	ldw	r9,12(sp)
1000a5c8:	da000417 	ldw	r8,16(sp)
1000a5cc:	d9800217 	ldw	r6,8(sp)
1000a5d0:	d9400117 	ldw	r5,4(sp)
1000a5d4:	003eb306 	br	1000a0a4 <__alt_data_end+0xf800a0a4>
1000a5d8:	d9800017 	ldw	r6,0(sp)
1000a5dc:	a9ab883a 	add	r21,r21,r6
1000a5e0:	a98b803a 	cmpltu	r5,r21,r6
1000a5e4:	2d8b883a 	add	r5,r5,r22
1000a5e8:	2a11883a 	add	r8,r5,r8
1000a5ec:	897fffc4 	addi	r5,r17,-1
1000a5f0:	b2000c2e 	bgeu	r22,r8,1000a624 <__divdf3+0x808>
1000a5f4:	41003f36 	bltu	r8,r4,1000a6f4 <__divdf3+0x8d8>
1000a5f8:	22006c26 	beq	r4,r8,1000a7ac <__divdf3+0x990>
1000a5fc:	4109c83a 	sub	r4,r8,r4
1000a600:	2823883a 	mov	r17,r5
1000a604:	003f3b06 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a608:	ad3ed336 	bltu	r21,r20,1000a158 <__alt_data_end+0xf800a158>
1000a60c:	a804d07a 	srli	r2,r21,1
1000a610:	802e97fa 	slli	r23,r16,31
1000a614:	a82a97fa 	slli	r21,r21,31
1000a618:	8020d07a 	srli	r16,r16,1
1000a61c:	b8aeb03a 	or	r23,r23,r2
1000a620:	003ed006 	br	1000a164 <__alt_data_end+0xf800a164>
1000a624:	b23ff51e 	bne	r22,r8,1000a5fc <__alt_data_end+0xf800a5fc>
1000a628:	d9800017 	ldw	r6,0(sp)
1000a62c:	a9bff12e 	bgeu	r21,r6,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a630:	b109c83a 	sub	r4,r22,r4
1000a634:	2823883a 	mov	r17,r5
1000a638:	003f2e06 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a63c:	2021883a 	mov	r16,r4
1000a640:	003eff06 	br	1000a240 <__alt_data_end+0xf800a240>
1000a644:	2023883a 	mov	r17,r4
1000a648:	003ee406 	br	1000a1dc <__alt_data_end+0xf800a1dc>
1000a64c:	a8bfe236 	bltu	r21,r2,1000a5d8 <__alt_data_end+0xf800a5d8>
1000a650:	0009883a 	mov	r4,zero
1000a654:	003f2706 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a658:	81002d36 	bltu	r16,r4,1000a710 <__divdf3+0x8f4>
1000a65c:	24005626 	beq	r4,r16,1000a7b8 <__divdf3+0x99c>
1000a660:	2829883a 	mov	r20,r5
1000a664:	003f8006 	br	1000a468 <__alt_data_end+0xf800a468>
1000a668:	053fffc4 	movi	r20,-1
1000a66c:	003f7f06 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a670:	200f883a 	mov	r7,r4
1000a674:	003f3c06 	br	1000a368 <__alt_data_end+0xf800a368>
1000a678:	1011883a 	mov	r8,r2
1000a67c:	003f5506 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a680:	e027883a 	mov	r19,fp
1000a684:	003f7906 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a688:	010007c4 	movi	r4,31
1000a68c:	20c02816 	blt	r4,r3,1000a730 <__divdf3+0x914>
1000a690:	00800804 	movi	r2,32
1000a694:	10c5c83a 	sub	r2,r2,r3
1000a698:	888a983a 	sll	r5,r17,r2
1000a69c:	a0c8d83a 	srl	r4,r20,r3
1000a6a0:	a084983a 	sll	r2,r20,r2
1000a6a4:	88e2d83a 	srl	r17,r17,r3
1000a6a8:	2906b03a 	or	r3,r5,r4
1000a6ac:	1004c03a 	cmpne	r2,r2,zero
1000a6b0:	1886b03a 	or	r3,r3,r2
1000a6b4:	188001cc 	andi	r2,r3,7
1000a6b8:	10000726 	beq	r2,zero,1000a6d8 <__divdf3+0x8bc>
1000a6bc:	188003cc 	andi	r2,r3,15
1000a6c0:	01000104 	movi	r4,4
1000a6c4:	11000426 	beq	r2,r4,1000a6d8 <__divdf3+0x8bc>
1000a6c8:	1805883a 	mov	r2,r3
1000a6cc:	10c00104 	addi	r3,r2,4
1000a6d0:	1885803a 	cmpltu	r2,r3,r2
1000a6d4:	88a3883a 	add	r17,r17,r2
1000a6d8:	8880202c 	andhi	r2,r17,128
1000a6dc:	10002926 	beq	r2,zero,1000a784 <__divdf3+0x968>
1000a6e0:	9900004c 	andi	r4,r19,1
1000a6e4:	00800044 	movi	r2,1
1000a6e8:	0021883a 	mov	r16,zero
1000a6ec:	002b883a 	mov	r21,zero
1000a6f0:	003e2906 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a6f4:	d9800017 	ldw	r6,0(sp)
1000a6f8:	8c7fff84 	addi	r17,r17,-2
1000a6fc:	a9ab883a 	add	r21,r21,r6
1000a700:	a98b803a 	cmpltu	r5,r21,r6
1000a704:	2d8b883a 	add	r5,r5,r22
1000a708:	2a11883a 	add	r8,r5,r8
1000a70c:	003ef806 	br	1000a2f0 <__alt_data_end+0xf800a2f0>
1000a710:	d9800017 	ldw	r6,0(sp)
1000a714:	318f883a 	add	r7,r6,r6
1000a718:	398b803a 	cmpltu	r5,r7,r6
1000a71c:	2d8d883a 	add	r6,r5,r22
1000a720:	81a1883a 	add	r16,r16,r6
1000a724:	a17fff84 	addi	r5,r20,-2
1000a728:	d9c00015 	stw	r7,0(sp)
1000a72c:	003f8806 	br	1000a550 <__alt_data_end+0xf800a550>
1000a730:	013ff844 	movi	r4,-31
1000a734:	2085c83a 	sub	r2,r4,r2
1000a738:	8888d83a 	srl	r4,r17,r2
1000a73c:	00800804 	movi	r2,32
1000a740:	18802126 	beq	r3,r2,1000a7c8 <__divdf3+0x9ac>
1000a744:	04001004 	movi	r16,64
1000a748:	80c7c83a 	sub	r3,r16,r3
1000a74c:	88e0983a 	sll	r16,r17,r3
1000a750:	8504b03a 	or	r2,r16,r20
1000a754:	1004c03a 	cmpne	r2,r2,zero
1000a758:	2084b03a 	or	r2,r4,r2
1000a75c:	144001cc 	andi	r17,r2,7
1000a760:	88000d1e 	bne	r17,zero,1000a798 <__divdf3+0x97c>
1000a764:	0021883a 	mov	r16,zero
1000a768:	102ad0fa 	srli	r21,r2,3
1000a76c:	9900004c 	andi	r4,r19,1
1000a770:	0005883a 	mov	r2,zero
1000a774:	ac6ab03a 	or	r21,r21,r17
1000a778:	003e0706 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a77c:	1007883a 	mov	r3,r2
1000a780:	0023883a 	mov	r17,zero
1000a784:	8820927a 	slli	r16,r17,9
1000a788:	1805883a 	mov	r2,r3
1000a78c:	8822977a 	slli	r17,r17,29
1000a790:	8020d33a 	srli	r16,r16,12
1000a794:	003ff406 	br	1000a768 <__alt_data_end+0xf800a768>
1000a798:	10c003cc 	andi	r3,r2,15
1000a79c:	01000104 	movi	r4,4
1000a7a0:	193ff626 	beq	r3,r4,1000a77c <__alt_data_end+0xf800a77c>
1000a7a4:	0023883a 	mov	r17,zero
1000a7a8:	003fc806 	br	1000a6cc <__alt_data_end+0xf800a6cc>
1000a7ac:	a8bfd136 	bltu	r21,r2,1000a6f4 <__alt_data_end+0xf800a6f4>
1000a7b0:	2823883a 	mov	r17,r5
1000a7b4:	003fa606 	br	1000a650 <__alt_data_end+0xf800a650>
1000a7b8:	d9800017 	ldw	r6,0(sp)
1000a7bc:	30bfd436 	bltu	r6,r2,1000a710 <__alt_data_end+0xf800a710>
1000a7c0:	2829883a 	mov	r20,r5
1000a7c4:	003f6406 	br	1000a558 <__alt_data_end+0xf800a558>
1000a7c8:	0021883a 	mov	r16,zero
1000a7cc:	003fe006 	br	1000a750 <__alt_data_end+0xf800a750>
1000a7d0:	00800434 	movhi	r2,16
1000a7d4:	8c000234 	orhi	r16,r17,8
1000a7d8:	10bfffc4 	addi	r2,r2,-1
1000a7dc:	e009883a 	mov	r4,fp
1000a7e0:	80a0703a 	and	r16,r16,r2
1000a7e4:	a02b883a 	mov	r21,r20
1000a7e8:	003e4e06 	br	1000a124 <__alt_data_end+0xf800a124>

1000a7ec <__eqdf2>:
1000a7ec:	2804d53a 	srli	r2,r5,20
1000a7f0:	3806d53a 	srli	r3,r7,20
1000a7f4:	02000434 	movhi	r8,16
1000a7f8:	423fffc4 	addi	r8,r8,-1
1000a7fc:	1081ffcc 	andi	r2,r2,2047
1000a800:	0281ffc4 	movi	r10,2047
1000a804:	2a12703a 	and	r9,r5,r8
1000a808:	18c1ffcc 	andi	r3,r3,2047
1000a80c:	3a10703a 	and	r8,r7,r8
1000a810:	280ad7fa 	srli	r5,r5,31
1000a814:	380ed7fa 	srli	r7,r7,31
1000a818:	12801026 	beq	r2,r10,1000a85c <__eqdf2+0x70>
1000a81c:	0281ffc4 	movi	r10,2047
1000a820:	1a800a26 	beq	r3,r10,1000a84c <__eqdf2+0x60>
1000a824:	10c00226 	beq	r2,r3,1000a830 <__eqdf2+0x44>
1000a828:	00800044 	movi	r2,1
1000a82c:	f800283a 	ret
1000a830:	4a3ffd1e 	bne	r9,r8,1000a828 <__alt_data_end+0xf800a828>
1000a834:	21bffc1e 	bne	r4,r6,1000a828 <__alt_data_end+0xf800a828>
1000a838:	29c00c26 	beq	r5,r7,1000a86c <__eqdf2+0x80>
1000a83c:	103ffa1e 	bne	r2,zero,1000a828 <__alt_data_end+0xf800a828>
1000a840:	2244b03a 	or	r2,r4,r9
1000a844:	1004c03a 	cmpne	r2,r2,zero
1000a848:	f800283a 	ret
1000a84c:	3214b03a 	or	r10,r6,r8
1000a850:	503ff426 	beq	r10,zero,1000a824 <__alt_data_end+0xf800a824>
1000a854:	00800044 	movi	r2,1
1000a858:	f800283a 	ret
1000a85c:	2254b03a 	or	r10,r4,r9
1000a860:	503fee26 	beq	r10,zero,1000a81c <__alt_data_end+0xf800a81c>
1000a864:	00800044 	movi	r2,1
1000a868:	f800283a 	ret
1000a86c:	0005883a 	mov	r2,zero
1000a870:	f800283a 	ret

1000a874 <__gedf2>:
1000a874:	2804d53a 	srli	r2,r5,20
1000a878:	3806d53a 	srli	r3,r7,20
1000a87c:	02000434 	movhi	r8,16
1000a880:	423fffc4 	addi	r8,r8,-1
1000a884:	1081ffcc 	andi	r2,r2,2047
1000a888:	0241ffc4 	movi	r9,2047
1000a88c:	2a14703a 	and	r10,r5,r8
1000a890:	18c1ffcc 	andi	r3,r3,2047
1000a894:	3a10703a 	and	r8,r7,r8
1000a898:	280ad7fa 	srli	r5,r5,31
1000a89c:	380ed7fa 	srli	r7,r7,31
1000a8a0:	12401d26 	beq	r2,r9,1000a918 <__gedf2+0xa4>
1000a8a4:	0241ffc4 	movi	r9,2047
1000a8a8:	1a401226 	beq	r3,r9,1000a8f4 <__gedf2+0x80>
1000a8ac:	1000081e 	bne	r2,zero,1000a8d0 <__gedf2+0x5c>
1000a8b0:	2296b03a 	or	r11,r4,r10
1000a8b4:	5813003a 	cmpeq	r9,r11,zero
1000a8b8:	1800091e 	bne	r3,zero,1000a8e0 <__gedf2+0x6c>
1000a8bc:	3218b03a 	or	r12,r6,r8
1000a8c0:	6000071e 	bne	r12,zero,1000a8e0 <__gedf2+0x6c>
1000a8c4:	0005883a 	mov	r2,zero
1000a8c8:	5800101e 	bne	r11,zero,1000a90c <__gedf2+0x98>
1000a8cc:	f800283a 	ret
1000a8d0:	18000c1e 	bne	r3,zero,1000a904 <__gedf2+0x90>
1000a8d4:	3212b03a 	or	r9,r6,r8
1000a8d8:	48000c26 	beq	r9,zero,1000a90c <__gedf2+0x98>
1000a8dc:	0013883a 	mov	r9,zero
1000a8e0:	39c03fcc 	andi	r7,r7,255
1000a8e4:	48000826 	beq	r9,zero,1000a908 <__gedf2+0x94>
1000a8e8:	38000926 	beq	r7,zero,1000a910 <__gedf2+0x9c>
1000a8ec:	00800044 	movi	r2,1
1000a8f0:	f800283a 	ret
1000a8f4:	3212b03a 	or	r9,r6,r8
1000a8f8:	483fec26 	beq	r9,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8fc:	00bfff84 	movi	r2,-2
1000a900:	f800283a 	ret
1000a904:	39c03fcc 	andi	r7,r7,255
1000a908:	29c00626 	beq	r5,r7,1000a924 <__gedf2+0xb0>
1000a90c:	283ff726 	beq	r5,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000a910:	00bfffc4 	movi	r2,-1
1000a914:	f800283a 	ret
1000a918:	2292b03a 	or	r9,r4,r10
1000a91c:	483fe126 	beq	r9,zero,1000a8a4 <__alt_data_end+0xf800a8a4>
1000a920:	003ff606 	br	1000a8fc <__alt_data_end+0xf800a8fc>
1000a924:	18bff916 	blt	r3,r2,1000a90c <__alt_data_end+0xf800a90c>
1000a928:	10c00316 	blt	r2,r3,1000a938 <__gedf2+0xc4>
1000a92c:	42bff736 	bltu	r8,r10,1000a90c <__alt_data_end+0xf800a90c>
1000a930:	52000326 	beq	r10,r8,1000a940 <__gedf2+0xcc>
1000a934:	5200042e 	bgeu	r10,r8,1000a948 <__gedf2+0xd4>
1000a938:	283fec1e 	bne	r5,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000a93c:	003ff406 	br	1000a910 <__alt_data_end+0xf800a910>
1000a940:	313ff236 	bltu	r6,r4,1000a90c <__alt_data_end+0xf800a90c>
1000a944:	21bffc36 	bltu	r4,r6,1000a938 <__alt_data_end+0xf800a938>
1000a948:	0005883a 	mov	r2,zero
1000a94c:	f800283a 	ret

1000a950 <__muldf3>:
1000a950:	deffee04 	addi	sp,sp,-72
1000a954:	dd000c15 	stw	r20,48(sp)
1000a958:	2828d53a 	srli	r20,r5,20
1000a95c:	ddc00f15 	stw	r23,60(sp)
1000a960:	282ed7fa 	srli	r23,r5,31
1000a964:	dc000815 	stw	r16,32(sp)
1000a968:	04000434 	movhi	r16,16
1000a96c:	dcc00b15 	stw	r19,44(sp)
1000a970:	843fffc4 	addi	r16,r16,-1
1000a974:	dfc01115 	stw	ra,68(sp)
1000a978:	df001015 	stw	fp,64(sp)
1000a97c:	dd800e15 	stw	r22,56(sp)
1000a980:	dd400d15 	stw	r21,52(sp)
1000a984:	dc800a15 	stw	r18,40(sp)
1000a988:	dc400915 	stw	r17,36(sp)
1000a98c:	a501ffcc 	andi	r20,r20,2047
1000a990:	2c20703a 	and	r16,r5,r16
1000a994:	b827883a 	mov	r19,r23
1000a998:	ba403fcc 	andi	r9,r23,255
1000a99c:	a0006026 	beq	r20,zero,1000ab20 <__muldf3+0x1d0>
1000a9a0:	0081ffc4 	movi	r2,2047
1000a9a4:	202d883a 	mov	r22,r4
1000a9a8:	a0803626 	beq	r20,r2,1000aa84 <__muldf3+0x134>
1000a9ac:	84000434 	orhi	r16,r16,16
1000a9b0:	200ad77a 	srli	r5,r4,29
1000a9b4:	800490fa 	slli	r2,r16,3
1000a9b8:	202c90fa 	slli	r22,r4,3
1000a9bc:	a53f0044 	addi	r20,r20,-1023
1000a9c0:	28a0b03a 	or	r16,r5,r2
1000a9c4:	002b883a 	mov	r21,zero
1000a9c8:	000b883a 	mov	r5,zero
1000a9cc:	3804d53a 	srli	r2,r7,20
1000a9d0:	3838d7fa 	srli	fp,r7,31
1000a9d4:	04400434 	movhi	r17,16
1000a9d8:	8c7fffc4 	addi	r17,r17,-1
1000a9dc:	1081ffcc 	andi	r2,r2,2047
1000a9e0:	3025883a 	mov	r18,r6
1000a9e4:	3c62703a 	and	r17,r7,r17
1000a9e8:	e2803fcc 	andi	r10,fp,255
1000a9ec:	10006d26 	beq	r2,zero,1000aba4 <__muldf3+0x254>
1000a9f0:	00c1ffc4 	movi	r3,2047
1000a9f4:	10c06526 	beq	r2,r3,1000ab8c <__muldf3+0x23c>
1000a9f8:	8c400434 	orhi	r17,r17,16
1000a9fc:	300ed77a 	srli	r7,r6,29
1000aa00:	880690fa 	slli	r3,r17,3
1000aa04:	302490fa 	slli	r18,r6,3
1000aa08:	10bf0044 	addi	r2,r2,-1023
1000aa0c:	38e2b03a 	or	r17,r7,r3
1000aa10:	000f883a 	mov	r7,zero
1000aa14:	a087883a 	add	r3,r20,r2
1000aa18:	010003c4 	movi	r4,15
1000aa1c:	3d44b03a 	or	r2,r7,r21
1000aa20:	e5ccf03a 	xor	r6,fp,r23
1000aa24:	1a000044 	addi	r8,r3,1
1000aa28:	20809b36 	bltu	r4,r2,1000ac98 <__muldf3+0x348>
1000aa2c:	100490ba 	slli	r2,r2,2
1000aa30:	01040074 	movhi	r4,4097
1000aa34:	212a9104 	addi	r4,r4,-21948
1000aa38:	1105883a 	add	r2,r2,r4
1000aa3c:	10800017 	ldw	r2,0(r2)
1000aa40:	1000683a 	jmp	r2
1000aa44:	1000ac98 	cmpnei	zero,r2,690
1000aa48:	1000aaa4 	muli	zero,r2,682
1000aa4c:	1000aaa4 	muli	zero,r2,682
1000aa50:	1000aaa0 	cmpeqi	zero,r2,682
1000aa54:	1000ac74 	orhi	zero,r2,689
1000aa58:	1000ac74 	orhi	zero,r2,689
1000aa5c:	1000ac5c 	xori	zero,r2,689
1000aa60:	1000aaa0 	cmpeqi	zero,r2,682
1000aa64:	1000ac74 	orhi	zero,r2,689
1000aa68:	1000ac5c 	xori	zero,r2,689
1000aa6c:	1000ac74 	orhi	zero,r2,689
1000aa70:	1000aaa0 	cmpeqi	zero,r2,682
1000aa74:	1000ac84 	addi	zero,r2,690
1000aa78:	1000ac84 	addi	zero,r2,690
1000aa7c:	1000ac84 	addi	zero,r2,690
1000aa80:	1000afe4 	muli	zero,r2,703
1000aa84:	2404b03a 	or	r2,r4,r16
1000aa88:	1000711e 	bne	r2,zero,1000ac50 <__muldf3+0x300>
1000aa8c:	05400204 	movi	r21,8
1000aa90:	0021883a 	mov	r16,zero
1000aa94:	002d883a 	mov	r22,zero
1000aa98:	01400084 	movi	r5,2
1000aa9c:	003fcb06 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000aaa0:	500d883a 	mov	r6,r10
1000aaa4:	00800084 	movi	r2,2
1000aaa8:	38805926 	beq	r7,r2,1000ac10 <__muldf3+0x2c0>
1000aaac:	008000c4 	movi	r2,3
1000aab0:	3881bb26 	beq	r7,r2,1000b1a0 <__muldf3+0x850>
1000aab4:	00800044 	movi	r2,1
1000aab8:	3881961e 	bne	r7,r2,1000b114 <__muldf3+0x7c4>
1000aabc:	3027883a 	mov	r19,r6
1000aac0:	0005883a 	mov	r2,zero
1000aac4:	0021883a 	mov	r16,zero
1000aac8:	002d883a 	mov	r22,zero
1000aacc:	1004953a 	slli	r2,r2,20
1000aad0:	98c03fcc 	andi	r3,r19,255
1000aad4:	04400434 	movhi	r17,16
1000aad8:	8c7fffc4 	addi	r17,r17,-1
1000aadc:	180697fa 	slli	r3,r3,31
1000aae0:	8460703a 	and	r16,r16,r17
1000aae4:	80a0b03a 	or	r16,r16,r2
1000aae8:	80c6b03a 	or	r3,r16,r3
1000aaec:	b005883a 	mov	r2,r22
1000aaf0:	dfc01117 	ldw	ra,68(sp)
1000aaf4:	df001017 	ldw	fp,64(sp)
1000aaf8:	ddc00f17 	ldw	r23,60(sp)
1000aafc:	dd800e17 	ldw	r22,56(sp)
1000ab00:	dd400d17 	ldw	r21,52(sp)
1000ab04:	dd000c17 	ldw	r20,48(sp)
1000ab08:	dcc00b17 	ldw	r19,44(sp)
1000ab0c:	dc800a17 	ldw	r18,40(sp)
1000ab10:	dc400917 	ldw	r17,36(sp)
1000ab14:	dc000817 	ldw	r16,32(sp)
1000ab18:	dec01204 	addi	sp,sp,72
1000ab1c:	f800283a 	ret
1000ab20:	2404b03a 	or	r2,r4,r16
1000ab24:	202b883a 	mov	r21,r4
1000ab28:	10004426 	beq	r2,zero,1000ac3c <__muldf3+0x2ec>
1000ab2c:	80015126 	beq	r16,zero,1000b074 <__muldf3+0x724>
1000ab30:	8009883a 	mov	r4,r16
1000ab34:	d9800715 	stw	r6,28(sp)
1000ab38:	d9c00215 	stw	r7,8(sp)
1000ab3c:	da400415 	stw	r9,16(sp)
1000ab40:	000becc0 	call	1000becc <__clzsi2>
1000ab44:	d9800717 	ldw	r6,28(sp)
1000ab48:	d9c00217 	ldw	r7,8(sp)
1000ab4c:	da400417 	ldw	r9,16(sp)
1000ab50:	113ffd44 	addi	r4,r2,-11
1000ab54:	00c00704 	movi	r3,28
1000ab58:	19014216 	blt	r3,r4,1000b064 <__muldf3+0x714>
1000ab5c:	00c00744 	movi	r3,29
1000ab60:	15bffe04 	addi	r22,r2,-8
1000ab64:	1907c83a 	sub	r3,r3,r4
1000ab68:	85a0983a 	sll	r16,r16,r22
1000ab6c:	a8c6d83a 	srl	r3,r21,r3
1000ab70:	adac983a 	sll	r22,r21,r22
1000ab74:	1c20b03a 	or	r16,r3,r16
1000ab78:	1080fcc4 	addi	r2,r2,1011
1000ab7c:	00a9c83a 	sub	r20,zero,r2
1000ab80:	002b883a 	mov	r21,zero
1000ab84:	000b883a 	mov	r5,zero
1000ab88:	003f9006 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000ab8c:	3446b03a 	or	r3,r6,r17
1000ab90:	1800281e 	bne	r3,zero,1000ac34 <__muldf3+0x2e4>
1000ab94:	0023883a 	mov	r17,zero
1000ab98:	0025883a 	mov	r18,zero
1000ab9c:	01c00084 	movi	r7,2
1000aba0:	003f9c06 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000aba4:	3446b03a 	or	r3,r6,r17
1000aba8:	18001e26 	beq	r3,zero,1000ac24 <__muldf3+0x2d4>
1000abac:	88012126 	beq	r17,zero,1000b034 <__muldf3+0x6e4>
1000abb0:	8809883a 	mov	r4,r17
1000abb4:	d9400215 	stw	r5,8(sp)
1000abb8:	d9800715 	stw	r6,28(sp)
1000abbc:	da400415 	stw	r9,16(sp)
1000abc0:	da800315 	stw	r10,12(sp)
1000abc4:	000becc0 	call	1000becc <__clzsi2>
1000abc8:	d9400217 	ldw	r5,8(sp)
1000abcc:	d9800717 	ldw	r6,28(sp)
1000abd0:	da400417 	ldw	r9,16(sp)
1000abd4:	da800317 	ldw	r10,12(sp)
1000abd8:	113ffd44 	addi	r4,r2,-11
1000abdc:	00c00704 	movi	r3,28
1000abe0:	19011016 	blt	r3,r4,1000b024 <__muldf3+0x6d4>
1000abe4:	00c00744 	movi	r3,29
1000abe8:	14bffe04 	addi	r18,r2,-8
1000abec:	1907c83a 	sub	r3,r3,r4
1000abf0:	8ca2983a 	sll	r17,r17,r18
1000abf4:	30c6d83a 	srl	r3,r6,r3
1000abf8:	34a4983a 	sll	r18,r6,r18
1000abfc:	1c62b03a 	or	r17,r3,r17
1000ac00:	1080fcc4 	addi	r2,r2,1011
1000ac04:	0085c83a 	sub	r2,zero,r2
1000ac08:	000f883a 	mov	r7,zero
1000ac0c:	003f8106 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000ac10:	3027883a 	mov	r19,r6
1000ac14:	0081ffc4 	movi	r2,2047
1000ac18:	0021883a 	mov	r16,zero
1000ac1c:	002d883a 	mov	r22,zero
1000ac20:	003faa06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000ac24:	0023883a 	mov	r17,zero
1000ac28:	0025883a 	mov	r18,zero
1000ac2c:	01c00044 	movi	r7,1
1000ac30:	003f7806 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000ac34:	01c000c4 	movi	r7,3
1000ac38:	003f7606 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000ac3c:	05400104 	movi	r21,4
1000ac40:	0021883a 	mov	r16,zero
1000ac44:	002d883a 	mov	r22,zero
1000ac48:	01400044 	movi	r5,1
1000ac4c:	003f5f06 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000ac50:	05400304 	movi	r21,12
1000ac54:	014000c4 	movi	r5,3
1000ac58:	003f5c06 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000ac5c:	04000434 	movhi	r16,16
1000ac60:	0027883a 	mov	r19,zero
1000ac64:	843fffc4 	addi	r16,r16,-1
1000ac68:	05bfffc4 	movi	r22,-1
1000ac6c:	0081ffc4 	movi	r2,2047
1000ac70:	003f9606 	br	1000aacc <__alt_data_end+0xf800aacc>
1000ac74:	8023883a 	mov	r17,r16
1000ac78:	b025883a 	mov	r18,r22
1000ac7c:	280f883a 	mov	r7,r5
1000ac80:	003f8806 	br	1000aaa4 <__alt_data_end+0xf800aaa4>
1000ac84:	8023883a 	mov	r17,r16
1000ac88:	b025883a 	mov	r18,r22
1000ac8c:	480d883a 	mov	r6,r9
1000ac90:	280f883a 	mov	r7,r5
1000ac94:	003f8306 	br	1000aaa4 <__alt_data_end+0xf800aaa4>
1000ac98:	b026d43a 	srli	r19,r22,16
1000ac9c:	902ed43a 	srli	r23,r18,16
1000aca0:	b5bfffcc 	andi	r22,r22,65535
1000aca4:	94bfffcc 	andi	r18,r18,65535
1000aca8:	b00b883a 	mov	r5,r22
1000acac:	9009883a 	mov	r4,r18
1000acb0:	d8c00515 	stw	r3,20(sp)
1000acb4:	d9800715 	stw	r6,28(sp)
1000acb8:	da000615 	stw	r8,24(sp)
1000acbc:	00085800 	call	10008580 <__mulsi3>
1000acc0:	980b883a 	mov	r5,r19
1000acc4:	9009883a 	mov	r4,r18
1000acc8:	1029883a 	mov	r20,r2
1000accc:	00085800 	call	10008580 <__mulsi3>
1000acd0:	b80b883a 	mov	r5,r23
1000acd4:	9809883a 	mov	r4,r19
1000acd8:	102b883a 	mov	r21,r2
1000acdc:	00085800 	call	10008580 <__mulsi3>
1000ace0:	b809883a 	mov	r4,r23
1000ace4:	b00b883a 	mov	r5,r22
1000ace8:	1039883a 	mov	fp,r2
1000acec:	00085800 	call	10008580 <__mulsi3>
1000acf0:	a008d43a 	srli	r4,r20,16
1000acf4:	1545883a 	add	r2,r2,r21
1000acf8:	d8c00517 	ldw	r3,20(sp)
1000acfc:	2085883a 	add	r2,r4,r2
1000ad00:	d9800717 	ldw	r6,28(sp)
1000ad04:	da000617 	ldw	r8,24(sp)
1000ad08:	1540022e 	bgeu	r2,r21,1000ad14 <__muldf3+0x3c4>
1000ad0c:	01000074 	movhi	r4,1
1000ad10:	e139883a 	add	fp,fp,r4
1000ad14:	100e943a 	slli	r7,r2,16
1000ad18:	1004d43a 	srli	r2,r2,16
1000ad1c:	882ad43a 	srli	r21,r17,16
1000ad20:	a53fffcc 	andi	r20,r20,65535
1000ad24:	8c7fffcc 	andi	r17,r17,65535
1000ad28:	3d29883a 	add	r20,r7,r20
1000ad2c:	b00b883a 	mov	r5,r22
1000ad30:	8809883a 	mov	r4,r17
1000ad34:	d8c00515 	stw	r3,20(sp)
1000ad38:	d9800715 	stw	r6,28(sp)
1000ad3c:	da000615 	stw	r8,24(sp)
1000ad40:	dd000115 	stw	r20,4(sp)
1000ad44:	d8800015 	stw	r2,0(sp)
1000ad48:	00085800 	call	10008580 <__mulsi3>
1000ad4c:	980b883a 	mov	r5,r19
1000ad50:	8809883a 	mov	r4,r17
1000ad54:	d8800215 	stw	r2,8(sp)
1000ad58:	00085800 	call	10008580 <__mulsi3>
1000ad5c:	9809883a 	mov	r4,r19
1000ad60:	a80b883a 	mov	r5,r21
1000ad64:	1029883a 	mov	r20,r2
1000ad68:	00085800 	call	10008580 <__mulsi3>
1000ad6c:	b00b883a 	mov	r5,r22
1000ad70:	a809883a 	mov	r4,r21
1000ad74:	d8800415 	stw	r2,16(sp)
1000ad78:	00085800 	call	10008580 <__mulsi3>
1000ad7c:	d9c00217 	ldw	r7,8(sp)
1000ad80:	1505883a 	add	r2,r2,r20
1000ad84:	d8c00517 	ldw	r3,20(sp)
1000ad88:	3826d43a 	srli	r19,r7,16
1000ad8c:	d9800717 	ldw	r6,28(sp)
1000ad90:	da000617 	ldw	r8,24(sp)
1000ad94:	9885883a 	add	r2,r19,r2
1000ad98:	da400417 	ldw	r9,16(sp)
1000ad9c:	1500022e 	bgeu	r2,r20,1000ada8 <__muldf3+0x458>
1000ada0:	01000074 	movhi	r4,1
1000ada4:	4913883a 	add	r9,r9,r4
1000ada8:	1028d43a 	srli	r20,r2,16
1000adac:	1004943a 	slli	r2,r2,16
1000adb0:	802cd43a 	srli	r22,r16,16
1000adb4:	843fffcc 	andi	r16,r16,65535
1000adb8:	3cffffcc 	andi	r19,r7,65535
1000adbc:	9009883a 	mov	r4,r18
1000adc0:	800b883a 	mov	r5,r16
1000adc4:	a269883a 	add	r20,r20,r9
1000adc8:	d8c00515 	stw	r3,20(sp)
1000adcc:	d9800715 	stw	r6,28(sp)
1000add0:	da000615 	stw	r8,24(sp)
1000add4:	14e7883a 	add	r19,r2,r19
1000add8:	00085800 	call	10008580 <__mulsi3>
1000addc:	9009883a 	mov	r4,r18
1000ade0:	b00b883a 	mov	r5,r22
1000ade4:	d8800315 	stw	r2,12(sp)
1000ade8:	00085800 	call	10008580 <__mulsi3>
1000adec:	b809883a 	mov	r4,r23
1000adf0:	b00b883a 	mov	r5,r22
1000adf4:	d8800215 	stw	r2,8(sp)
1000adf8:	00085800 	call	10008580 <__mulsi3>
1000adfc:	b80b883a 	mov	r5,r23
1000ae00:	8009883a 	mov	r4,r16
1000ae04:	d8800415 	stw	r2,16(sp)
1000ae08:	00085800 	call	10008580 <__mulsi3>
1000ae0c:	da800317 	ldw	r10,12(sp)
1000ae10:	d9c00217 	ldw	r7,8(sp)
1000ae14:	d9000017 	ldw	r4,0(sp)
1000ae18:	502ed43a 	srli	r23,r10,16
1000ae1c:	11c5883a 	add	r2,r2,r7
1000ae20:	24e5883a 	add	r18,r4,r19
1000ae24:	b885883a 	add	r2,r23,r2
1000ae28:	d8c00517 	ldw	r3,20(sp)
1000ae2c:	d9800717 	ldw	r6,28(sp)
1000ae30:	da000617 	ldw	r8,24(sp)
1000ae34:	da400417 	ldw	r9,16(sp)
1000ae38:	11c0022e 	bgeu	r2,r7,1000ae44 <__muldf3+0x4f4>
1000ae3c:	01000074 	movhi	r4,1
1000ae40:	4913883a 	add	r9,r9,r4
1000ae44:	100ed43a 	srli	r7,r2,16
1000ae48:	1004943a 	slli	r2,r2,16
1000ae4c:	55ffffcc 	andi	r23,r10,65535
1000ae50:	3a53883a 	add	r9,r7,r9
1000ae54:	8809883a 	mov	r4,r17
1000ae58:	800b883a 	mov	r5,r16
1000ae5c:	d8c00515 	stw	r3,20(sp)
1000ae60:	d9800715 	stw	r6,28(sp)
1000ae64:	da000615 	stw	r8,24(sp)
1000ae68:	da400415 	stw	r9,16(sp)
1000ae6c:	15ef883a 	add	r23,r2,r23
1000ae70:	00085800 	call	10008580 <__mulsi3>
1000ae74:	8809883a 	mov	r4,r17
1000ae78:	b00b883a 	mov	r5,r22
1000ae7c:	d8800215 	stw	r2,8(sp)
1000ae80:	00085800 	call	10008580 <__mulsi3>
1000ae84:	b00b883a 	mov	r5,r22
1000ae88:	a809883a 	mov	r4,r21
1000ae8c:	d8800315 	stw	r2,12(sp)
1000ae90:	00085800 	call	10008580 <__mulsi3>
1000ae94:	8009883a 	mov	r4,r16
1000ae98:	a80b883a 	mov	r5,r21
1000ae9c:	1023883a 	mov	r17,r2
1000aea0:	00085800 	call	10008580 <__mulsi3>
1000aea4:	d9c00217 	ldw	r7,8(sp)
1000aea8:	da800317 	ldw	r10,12(sp)
1000aeac:	d8c00517 	ldw	r3,20(sp)
1000aeb0:	3808d43a 	srli	r4,r7,16
1000aeb4:	1285883a 	add	r2,r2,r10
1000aeb8:	d9800717 	ldw	r6,28(sp)
1000aebc:	2085883a 	add	r2,r4,r2
1000aec0:	da000617 	ldw	r8,24(sp)
1000aec4:	da400417 	ldw	r9,16(sp)
1000aec8:	1280022e 	bgeu	r2,r10,1000aed4 <__muldf3+0x584>
1000aecc:	01000074 	movhi	r4,1
1000aed0:	8923883a 	add	r17,r17,r4
1000aed4:	1008943a 	slli	r4,r2,16
1000aed8:	39ffffcc 	andi	r7,r7,65535
1000aedc:	e4b9883a 	add	fp,fp,r18
1000aee0:	21cf883a 	add	r7,r4,r7
1000aee4:	e4e7803a 	cmpltu	r19,fp,r19
1000aee8:	3d0f883a 	add	r7,r7,r20
1000aeec:	bf39883a 	add	fp,r23,fp
1000aef0:	99c9883a 	add	r4,r19,r7
1000aef4:	e5ef803a 	cmpltu	r23,fp,r23
1000aef8:	490b883a 	add	r5,r9,r4
1000aefc:	1004d43a 	srli	r2,r2,16
1000af00:	b965883a 	add	r18,r23,r5
1000af04:	24c9803a 	cmpltu	r4,r4,r19
1000af08:	3d29803a 	cmpltu	r20,r7,r20
1000af0c:	a128b03a 	or	r20,r20,r4
1000af10:	95ef803a 	cmpltu	r23,r18,r23
1000af14:	2a53803a 	cmpltu	r9,r5,r9
1000af18:	a0a9883a 	add	r20,r20,r2
1000af1c:	4deeb03a 	or	r23,r9,r23
1000af20:	a5ef883a 	add	r23,r20,r23
1000af24:	bc63883a 	add	r17,r23,r17
1000af28:	e004927a 	slli	r2,fp,9
1000af2c:	d9000117 	ldw	r4,4(sp)
1000af30:	882e927a 	slli	r23,r17,9
1000af34:	9022d5fa 	srli	r17,r18,23
1000af38:	e038d5fa 	srli	fp,fp,23
1000af3c:	1104b03a 	or	r2,r2,r4
1000af40:	9024927a 	slli	r18,r18,9
1000af44:	1004c03a 	cmpne	r2,r2,zero
1000af48:	bc62b03a 	or	r17,r23,r17
1000af4c:	1738b03a 	or	fp,r2,fp
1000af50:	8880402c 	andhi	r2,r17,256
1000af54:	e4a4b03a 	or	r18,fp,r18
1000af58:	10000726 	beq	r2,zero,1000af78 <__muldf3+0x628>
1000af5c:	9006d07a 	srli	r3,r18,1
1000af60:	880497fa 	slli	r2,r17,31
1000af64:	9480004c 	andi	r18,r18,1
1000af68:	8822d07a 	srli	r17,r17,1
1000af6c:	1ca4b03a 	or	r18,r3,r18
1000af70:	14a4b03a 	or	r18,r2,r18
1000af74:	4007883a 	mov	r3,r8
1000af78:	1880ffc4 	addi	r2,r3,1023
1000af7c:	0080460e 	bge	zero,r2,1000b098 <__muldf3+0x748>
1000af80:	910001cc 	andi	r4,r18,7
1000af84:	20000726 	beq	r4,zero,1000afa4 <__muldf3+0x654>
1000af88:	910003cc 	andi	r4,r18,15
1000af8c:	01400104 	movi	r5,4
1000af90:	21400426 	beq	r4,r5,1000afa4 <__muldf3+0x654>
1000af94:	9149883a 	add	r4,r18,r5
1000af98:	24a5803a 	cmpltu	r18,r4,r18
1000af9c:	8ca3883a 	add	r17,r17,r18
1000afa0:	2025883a 	mov	r18,r4
1000afa4:	8900402c 	andhi	r4,r17,256
1000afa8:	20000426 	beq	r4,zero,1000afbc <__muldf3+0x66c>
1000afac:	18810004 	addi	r2,r3,1024
1000afb0:	00ffc034 	movhi	r3,65280
1000afb4:	18ffffc4 	addi	r3,r3,-1
1000afb8:	88e2703a 	and	r17,r17,r3
1000afbc:	00c1ff84 	movi	r3,2046
1000afc0:	18bf1316 	blt	r3,r2,1000ac10 <__alt_data_end+0xf800ac10>
1000afc4:	882c977a 	slli	r22,r17,29
1000afc8:	9024d0fa 	srli	r18,r18,3
1000afcc:	8822927a 	slli	r17,r17,9
1000afd0:	1081ffcc 	andi	r2,r2,2047
1000afd4:	b4acb03a 	or	r22,r22,r18
1000afd8:	8820d33a 	srli	r16,r17,12
1000afdc:	3027883a 	mov	r19,r6
1000afe0:	003eba06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000afe4:	8080022c 	andhi	r2,r16,8
1000afe8:	10000926 	beq	r2,zero,1000b010 <__muldf3+0x6c0>
1000afec:	8880022c 	andhi	r2,r17,8
1000aff0:	1000071e 	bne	r2,zero,1000b010 <__muldf3+0x6c0>
1000aff4:	00800434 	movhi	r2,16
1000aff8:	8c000234 	orhi	r16,r17,8
1000affc:	10bfffc4 	addi	r2,r2,-1
1000b000:	e027883a 	mov	r19,fp
1000b004:	80a0703a 	and	r16,r16,r2
1000b008:	902d883a 	mov	r22,r18
1000b00c:	003f1706 	br	1000ac6c <__alt_data_end+0xf800ac6c>
1000b010:	00800434 	movhi	r2,16
1000b014:	84000234 	orhi	r16,r16,8
1000b018:	10bfffc4 	addi	r2,r2,-1
1000b01c:	80a0703a 	and	r16,r16,r2
1000b020:	003f1206 	br	1000ac6c <__alt_data_end+0xf800ac6c>
1000b024:	147ff604 	addi	r17,r2,-40
1000b028:	3462983a 	sll	r17,r6,r17
1000b02c:	0025883a 	mov	r18,zero
1000b030:	003ef306 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000b034:	3009883a 	mov	r4,r6
1000b038:	d9400215 	stw	r5,8(sp)
1000b03c:	d9800715 	stw	r6,28(sp)
1000b040:	da400415 	stw	r9,16(sp)
1000b044:	da800315 	stw	r10,12(sp)
1000b048:	000becc0 	call	1000becc <__clzsi2>
1000b04c:	10800804 	addi	r2,r2,32
1000b050:	da800317 	ldw	r10,12(sp)
1000b054:	da400417 	ldw	r9,16(sp)
1000b058:	d9800717 	ldw	r6,28(sp)
1000b05c:	d9400217 	ldw	r5,8(sp)
1000b060:	003edd06 	br	1000abd8 <__alt_data_end+0xf800abd8>
1000b064:	143ff604 	addi	r16,r2,-40
1000b068:	ac20983a 	sll	r16,r21,r16
1000b06c:	002d883a 	mov	r22,zero
1000b070:	003ec106 	br	1000ab78 <__alt_data_end+0xf800ab78>
1000b074:	d9800715 	stw	r6,28(sp)
1000b078:	d9c00215 	stw	r7,8(sp)
1000b07c:	da400415 	stw	r9,16(sp)
1000b080:	000becc0 	call	1000becc <__clzsi2>
1000b084:	10800804 	addi	r2,r2,32
1000b088:	da400417 	ldw	r9,16(sp)
1000b08c:	d9c00217 	ldw	r7,8(sp)
1000b090:	d9800717 	ldw	r6,28(sp)
1000b094:	003eae06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000b098:	00c00044 	movi	r3,1
1000b09c:	1887c83a 	sub	r3,r3,r2
1000b0a0:	01000e04 	movi	r4,56
1000b0a4:	20fe8516 	blt	r4,r3,1000aabc <__alt_data_end+0xf800aabc>
1000b0a8:	010007c4 	movi	r4,31
1000b0ac:	20c01b16 	blt	r4,r3,1000b11c <__muldf3+0x7cc>
1000b0b0:	00800804 	movi	r2,32
1000b0b4:	10c5c83a 	sub	r2,r2,r3
1000b0b8:	888a983a 	sll	r5,r17,r2
1000b0bc:	90c8d83a 	srl	r4,r18,r3
1000b0c0:	9084983a 	sll	r2,r18,r2
1000b0c4:	88e2d83a 	srl	r17,r17,r3
1000b0c8:	2906b03a 	or	r3,r5,r4
1000b0cc:	1004c03a 	cmpne	r2,r2,zero
1000b0d0:	1886b03a 	or	r3,r3,r2
1000b0d4:	188001cc 	andi	r2,r3,7
1000b0d8:	10000726 	beq	r2,zero,1000b0f8 <__muldf3+0x7a8>
1000b0dc:	188003cc 	andi	r2,r3,15
1000b0e0:	01000104 	movi	r4,4
1000b0e4:	11000426 	beq	r2,r4,1000b0f8 <__muldf3+0x7a8>
1000b0e8:	1805883a 	mov	r2,r3
1000b0ec:	10c00104 	addi	r3,r2,4
1000b0f0:	1885803a 	cmpltu	r2,r3,r2
1000b0f4:	88a3883a 	add	r17,r17,r2
1000b0f8:	8880202c 	andhi	r2,r17,128
1000b0fc:	10001c26 	beq	r2,zero,1000b170 <__muldf3+0x820>
1000b100:	3027883a 	mov	r19,r6
1000b104:	00800044 	movi	r2,1
1000b108:	0021883a 	mov	r16,zero
1000b10c:	002d883a 	mov	r22,zero
1000b110:	003e6e06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000b114:	4007883a 	mov	r3,r8
1000b118:	003f9706 	br	1000af78 <__alt_data_end+0xf800af78>
1000b11c:	017ff844 	movi	r5,-31
1000b120:	2885c83a 	sub	r2,r5,r2
1000b124:	888ad83a 	srl	r5,r17,r2
1000b128:	00800804 	movi	r2,32
1000b12c:	18801a26 	beq	r3,r2,1000b198 <__muldf3+0x848>
1000b130:	01001004 	movi	r4,64
1000b134:	20c7c83a 	sub	r3,r4,r3
1000b138:	88e2983a 	sll	r17,r17,r3
1000b13c:	8ca4b03a 	or	r18,r17,r18
1000b140:	9004c03a 	cmpne	r2,r18,zero
1000b144:	2884b03a 	or	r2,r5,r2
1000b148:	144001cc 	andi	r17,r2,7
1000b14c:	88000d1e 	bne	r17,zero,1000b184 <__muldf3+0x834>
1000b150:	0021883a 	mov	r16,zero
1000b154:	102cd0fa 	srli	r22,r2,3
1000b158:	3027883a 	mov	r19,r6
1000b15c:	0005883a 	mov	r2,zero
1000b160:	b46cb03a 	or	r22,r22,r17
1000b164:	003e5906 	br	1000aacc <__alt_data_end+0xf800aacc>
1000b168:	1007883a 	mov	r3,r2
1000b16c:	0023883a 	mov	r17,zero
1000b170:	8820927a 	slli	r16,r17,9
1000b174:	1805883a 	mov	r2,r3
1000b178:	8822977a 	slli	r17,r17,29
1000b17c:	8020d33a 	srli	r16,r16,12
1000b180:	003ff406 	br	1000b154 <__alt_data_end+0xf800b154>
1000b184:	10c003cc 	andi	r3,r2,15
1000b188:	01000104 	movi	r4,4
1000b18c:	193ff626 	beq	r3,r4,1000b168 <__alt_data_end+0xf800b168>
1000b190:	0023883a 	mov	r17,zero
1000b194:	003fd506 	br	1000b0ec <__alt_data_end+0xf800b0ec>
1000b198:	0023883a 	mov	r17,zero
1000b19c:	003fe706 	br	1000b13c <__alt_data_end+0xf800b13c>
1000b1a0:	00800434 	movhi	r2,16
1000b1a4:	8c000234 	orhi	r16,r17,8
1000b1a8:	10bfffc4 	addi	r2,r2,-1
1000b1ac:	3027883a 	mov	r19,r6
1000b1b0:	80a0703a 	and	r16,r16,r2
1000b1b4:	902d883a 	mov	r22,r18
1000b1b8:	003eac06 	br	1000ac6c <__alt_data_end+0xf800ac6c>

1000b1bc <__subdf3>:
1000b1bc:	02000434 	movhi	r8,16
1000b1c0:	423fffc4 	addi	r8,r8,-1
1000b1c4:	defffb04 	addi	sp,sp,-20
1000b1c8:	2a14703a 	and	r10,r5,r8
1000b1cc:	3812d53a 	srli	r9,r7,20
1000b1d0:	3a10703a 	and	r8,r7,r8
1000b1d4:	2006d77a 	srli	r3,r4,29
1000b1d8:	3004d77a 	srli	r2,r6,29
1000b1dc:	dc000015 	stw	r16,0(sp)
1000b1e0:	501490fa 	slli	r10,r10,3
1000b1e4:	2820d53a 	srli	r16,r5,20
1000b1e8:	401090fa 	slli	r8,r8,3
1000b1ec:	dc800215 	stw	r18,8(sp)
1000b1f0:	dc400115 	stw	r17,4(sp)
1000b1f4:	dfc00415 	stw	ra,16(sp)
1000b1f8:	202290fa 	slli	r17,r4,3
1000b1fc:	dcc00315 	stw	r19,12(sp)
1000b200:	4a41ffcc 	andi	r9,r9,2047
1000b204:	0101ffc4 	movi	r4,2047
1000b208:	2824d7fa 	srli	r18,r5,31
1000b20c:	8401ffcc 	andi	r16,r16,2047
1000b210:	50c6b03a 	or	r3,r10,r3
1000b214:	380ed7fa 	srli	r7,r7,31
1000b218:	408ab03a 	or	r5,r8,r2
1000b21c:	300c90fa 	slli	r6,r6,3
1000b220:	49009626 	beq	r9,r4,1000b47c <__subdf3+0x2c0>
1000b224:	39c0005c 	xori	r7,r7,1
1000b228:	8245c83a 	sub	r2,r16,r9
1000b22c:	3c807426 	beq	r7,r18,1000b400 <__subdf3+0x244>
1000b230:	0080af0e 	bge	zero,r2,1000b4f0 <__subdf3+0x334>
1000b234:	48002a1e 	bne	r9,zero,1000b2e0 <__subdf3+0x124>
1000b238:	2988b03a 	or	r4,r5,r6
1000b23c:	20009a1e 	bne	r4,zero,1000b4a8 <__subdf3+0x2ec>
1000b240:	888001cc 	andi	r2,r17,7
1000b244:	10000726 	beq	r2,zero,1000b264 <__subdf3+0xa8>
1000b248:	888003cc 	andi	r2,r17,15
1000b24c:	01000104 	movi	r4,4
1000b250:	11000426 	beq	r2,r4,1000b264 <__subdf3+0xa8>
1000b254:	890b883a 	add	r5,r17,r4
1000b258:	2c63803a 	cmpltu	r17,r5,r17
1000b25c:	1c47883a 	add	r3,r3,r17
1000b260:	2823883a 	mov	r17,r5
1000b264:	1880202c 	andhi	r2,r3,128
1000b268:	10005926 	beq	r2,zero,1000b3d0 <__subdf3+0x214>
1000b26c:	84000044 	addi	r16,r16,1
1000b270:	0081ffc4 	movi	r2,2047
1000b274:	8080be26 	beq	r16,r2,1000b570 <__subdf3+0x3b4>
1000b278:	017fe034 	movhi	r5,65408
1000b27c:	297fffc4 	addi	r5,r5,-1
1000b280:	1946703a 	and	r3,r3,r5
1000b284:	1804977a 	slli	r2,r3,29
1000b288:	1806927a 	slli	r3,r3,9
1000b28c:	8822d0fa 	srli	r17,r17,3
1000b290:	8401ffcc 	andi	r16,r16,2047
1000b294:	180ad33a 	srli	r5,r3,12
1000b298:	9100004c 	andi	r4,r18,1
1000b29c:	1444b03a 	or	r2,r2,r17
1000b2a0:	80c1ffcc 	andi	r3,r16,2047
1000b2a4:	1820953a 	slli	r16,r3,20
1000b2a8:	20c03fcc 	andi	r3,r4,255
1000b2ac:	180897fa 	slli	r4,r3,31
1000b2b0:	00c00434 	movhi	r3,16
1000b2b4:	18ffffc4 	addi	r3,r3,-1
1000b2b8:	28c6703a 	and	r3,r5,r3
1000b2bc:	1c06b03a 	or	r3,r3,r16
1000b2c0:	1906b03a 	or	r3,r3,r4
1000b2c4:	dfc00417 	ldw	ra,16(sp)
1000b2c8:	dcc00317 	ldw	r19,12(sp)
1000b2cc:	dc800217 	ldw	r18,8(sp)
1000b2d0:	dc400117 	ldw	r17,4(sp)
1000b2d4:	dc000017 	ldw	r16,0(sp)
1000b2d8:	dec00504 	addi	sp,sp,20
1000b2dc:	f800283a 	ret
1000b2e0:	0101ffc4 	movi	r4,2047
1000b2e4:	813fd626 	beq	r16,r4,1000b240 <__alt_data_end+0xf800b240>
1000b2e8:	29402034 	orhi	r5,r5,128
1000b2ec:	01000e04 	movi	r4,56
1000b2f0:	2080a316 	blt	r4,r2,1000b580 <__subdf3+0x3c4>
1000b2f4:	010007c4 	movi	r4,31
1000b2f8:	2080c616 	blt	r4,r2,1000b614 <__subdf3+0x458>
1000b2fc:	01000804 	movi	r4,32
1000b300:	2089c83a 	sub	r4,r4,r2
1000b304:	2910983a 	sll	r8,r5,r4
1000b308:	308ed83a 	srl	r7,r6,r2
1000b30c:	3108983a 	sll	r4,r6,r4
1000b310:	2884d83a 	srl	r2,r5,r2
1000b314:	41ccb03a 	or	r6,r8,r7
1000b318:	2008c03a 	cmpne	r4,r4,zero
1000b31c:	310cb03a 	or	r6,r6,r4
1000b320:	898dc83a 	sub	r6,r17,r6
1000b324:	89a3803a 	cmpltu	r17,r17,r6
1000b328:	1887c83a 	sub	r3,r3,r2
1000b32c:	1c47c83a 	sub	r3,r3,r17
1000b330:	3023883a 	mov	r17,r6
1000b334:	1880202c 	andhi	r2,r3,128
1000b338:	10002326 	beq	r2,zero,1000b3c8 <__subdf3+0x20c>
1000b33c:	04c02034 	movhi	r19,128
1000b340:	9cffffc4 	addi	r19,r19,-1
1000b344:	1ce6703a 	and	r19,r3,r19
1000b348:	98007a26 	beq	r19,zero,1000b534 <__subdf3+0x378>
1000b34c:	9809883a 	mov	r4,r19
1000b350:	000becc0 	call	1000becc <__clzsi2>
1000b354:	113ffe04 	addi	r4,r2,-8
1000b358:	00c007c4 	movi	r3,31
1000b35c:	19007b16 	blt	r3,r4,1000b54c <__subdf3+0x390>
1000b360:	00800804 	movi	r2,32
1000b364:	1105c83a 	sub	r2,r2,r4
1000b368:	8884d83a 	srl	r2,r17,r2
1000b36c:	9906983a 	sll	r3,r19,r4
1000b370:	8922983a 	sll	r17,r17,r4
1000b374:	10c4b03a 	or	r2,r2,r3
1000b378:	24007816 	blt	r4,r16,1000b55c <__subdf3+0x3a0>
1000b37c:	2421c83a 	sub	r16,r4,r16
1000b380:	80c00044 	addi	r3,r16,1
1000b384:	010007c4 	movi	r4,31
1000b388:	20c09516 	blt	r4,r3,1000b5e0 <__subdf3+0x424>
1000b38c:	01400804 	movi	r5,32
1000b390:	28cbc83a 	sub	r5,r5,r3
1000b394:	88c8d83a 	srl	r4,r17,r3
1000b398:	8962983a 	sll	r17,r17,r5
1000b39c:	114a983a 	sll	r5,r2,r5
1000b3a0:	10c6d83a 	srl	r3,r2,r3
1000b3a4:	8804c03a 	cmpne	r2,r17,zero
1000b3a8:	290ab03a 	or	r5,r5,r4
1000b3ac:	28a2b03a 	or	r17,r5,r2
1000b3b0:	0021883a 	mov	r16,zero
1000b3b4:	003fa206 	br	1000b240 <__alt_data_end+0xf800b240>
1000b3b8:	2090b03a 	or	r8,r4,r2
1000b3bc:	40018e26 	beq	r8,zero,1000b9f8 <__subdf3+0x83c>
1000b3c0:	1007883a 	mov	r3,r2
1000b3c4:	2023883a 	mov	r17,r4
1000b3c8:	888001cc 	andi	r2,r17,7
1000b3cc:	103f9e1e 	bne	r2,zero,1000b248 <__alt_data_end+0xf800b248>
1000b3d0:	1804977a 	slli	r2,r3,29
1000b3d4:	8822d0fa 	srli	r17,r17,3
1000b3d8:	1810d0fa 	srli	r8,r3,3
1000b3dc:	9100004c 	andi	r4,r18,1
1000b3e0:	1444b03a 	or	r2,r2,r17
1000b3e4:	00c1ffc4 	movi	r3,2047
1000b3e8:	80c02826 	beq	r16,r3,1000b48c <__subdf3+0x2d0>
1000b3ec:	01400434 	movhi	r5,16
1000b3f0:	297fffc4 	addi	r5,r5,-1
1000b3f4:	80e0703a 	and	r16,r16,r3
1000b3f8:	414a703a 	and	r5,r8,r5
1000b3fc:	003fa806 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b400:	0080630e 	bge	zero,r2,1000b590 <__subdf3+0x3d4>
1000b404:	48003026 	beq	r9,zero,1000b4c8 <__subdf3+0x30c>
1000b408:	0101ffc4 	movi	r4,2047
1000b40c:	813f8c26 	beq	r16,r4,1000b240 <__alt_data_end+0xf800b240>
1000b410:	29402034 	orhi	r5,r5,128
1000b414:	01000e04 	movi	r4,56
1000b418:	2080a90e 	bge	r4,r2,1000b6c0 <__subdf3+0x504>
1000b41c:	298cb03a 	or	r6,r5,r6
1000b420:	3012c03a 	cmpne	r9,r6,zero
1000b424:	0005883a 	mov	r2,zero
1000b428:	4c53883a 	add	r9,r9,r17
1000b42c:	4c63803a 	cmpltu	r17,r9,r17
1000b430:	10c7883a 	add	r3,r2,r3
1000b434:	88c7883a 	add	r3,r17,r3
1000b438:	4823883a 	mov	r17,r9
1000b43c:	1880202c 	andhi	r2,r3,128
1000b440:	1000d026 	beq	r2,zero,1000b784 <__subdf3+0x5c8>
1000b444:	84000044 	addi	r16,r16,1
1000b448:	0081ffc4 	movi	r2,2047
1000b44c:	8080fe26 	beq	r16,r2,1000b848 <__subdf3+0x68c>
1000b450:	00bfe034 	movhi	r2,65408
1000b454:	10bfffc4 	addi	r2,r2,-1
1000b458:	1886703a 	and	r3,r3,r2
1000b45c:	880ad07a 	srli	r5,r17,1
1000b460:	180497fa 	slli	r2,r3,31
1000b464:	8900004c 	andi	r4,r17,1
1000b468:	2922b03a 	or	r17,r5,r4
1000b46c:	1806d07a 	srli	r3,r3,1
1000b470:	1462b03a 	or	r17,r2,r17
1000b474:	3825883a 	mov	r18,r7
1000b478:	003f7106 	br	1000b240 <__alt_data_end+0xf800b240>
1000b47c:	2984b03a 	or	r2,r5,r6
1000b480:	103f6826 	beq	r2,zero,1000b224 <__alt_data_end+0xf800b224>
1000b484:	39c03fcc 	andi	r7,r7,255
1000b488:	003f6706 	br	1000b228 <__alt_data_end+0xf800b228>
1000b48c:	4086b03a 	or	r3,r8,r2
1000b490:	18015226 	beq	r3,zero,1000b9dc <__subdf3+0x820>
1000b494:	00c00434 	movhi	r3,16
1000b498:	41400234 	orhi	r5,r8,8
1000b49c:	18ffffc4 	addi	r3,r3,-1
1000b4a0:	28ca703a 	and	r5,r5,r3
1000b4a4:	003f7e06 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b4a8:	10bfffc4 	addi	r2,r2,-1
1000b4ac:	1000491e 	bne	r2,zero,1000b5d4 <__subdf3+0x418>
1000b4b0:	898fc83a 	sub	r7,r17,r6
1000b4b4:	89e3803a 	cmpltu	r17,r17,r7
1000b4b8:	1947c83a 	sub	r3,r3,r5
1000b4bc:	1c47c83a 	sub	r3,r3,r17
1000b4c0:	3823883a 	mov	r17,r7
1000b4c4:	003f9b06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b4c8:	2988b03a 	or	r4,r5,r6
1000b4cc:	203f5c26 	beq	r4,zero,1000b240 <__alt_data_end+0xf800b240>
1000b4d0:	10bfffc4 	addi	r2,r2,-1
1000b4d4:	1000931e 	bne	r2,zero,1000b724 <__subdf3+0x568>
1000b4d8:	898d883a 	add	r6,r17,r6
1000b4dc:	3463803a 	cmpltu	r17,r6,r17
1000b4e0:	1947883a 	add	r3,r3,r5
1000b4e4:	88c7883a 	add	r3,r17,r3
1000b4e8:	3023883a 	mov	r17,r6
1000b4ec:	003fd306 	br	1000b43c <__alt_data_end+0xf800b43c>
1000b4f0:	1000541e 	bne	r2,zero,1000b644 <__subdf3+0x488>
1000b4f4:	80800044 	addi	r2,r16,1
1000b4f8:	1081ffcc 	andi	r2,r2,2047
1000b4fc:	01000044 	movi	r4,1
1000b500:	2080a20e 	bge	r4,r2,1000b78c <__subdf3+0x5d0>
1000b504:	8989c83a 	sub	r4,r17,r6
1000b508:	8905803a 	cmpltu	r2,r17,r4
1000b50c:	1967c83a 	sub	r19,r3,r5
1000b510:	98a7c83a 	sub	r19,r19,r2
1000b514:	9880202c 	andhi	r2,r19,128
1000b518:	10006326 	beq	r2,zero,1000b6a8 <__subdf3+0x4ec>
1000b51c:	3463c83a 	sub	r17,r6,r17
1000b520:	28c7c83a 	sub	r3,r5,r3
1000b524:	344d803a 	cmpltu	r6,r6,r17
1000b528:	19a7c83a 	sub	r19,r3,r6
1000b52c:	3825883a 	mov	r18,r7
1000b530:	983f861e 	bne	r19,zero,1000b34c <__alt_data_end+0xf800b34c>
1000b534:	8809883a 	mov	r4,r17
1000b538:	000becc0 	call	1000becc <__clzsi2>
1000b53c:	10800804 	addi	r2,r2,32
1000b540:	113ffe04 	addi	r4,r2,-8
1000b544:	00c007c4 	movi	r3,31
1000b548:	193f850e 	bge	r3,r4,1000b360 <__alt_data_end+0xf800b360>
1000b54c:	10bff604 	addi	r2,r2,-40
1000b550:	8884983a 	sll	r2,r17,r2
1000b554:	0023883a 	mov	r17,zero
1000b558:	243f880e 	bge	r4,r16,1000b37c <__alt_data_end+0xf800b37c>
1000b55c:	00ffe034 	movhi	r3,65408
1000b560:	18ffffc4 	addi	r3,r3,-1
1000b564:	8121c83a 	sub	r16,r16,r4
1000b568:	10c6703a 	and	r3,r2,r3
1000b56c:	003f3406 	br	1000b240 <__alt_data_end+0xf800b240>
1000b570:	9100004c 	andi	r4,r18,1
1000b574:	000b883a 	mov	r5,zero
1000b578:	0005883a 	mov	r2,zero
1000b57c:	003f4806 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b580:	298cb03a 	or	r6,r5,r6
1000b584:	300cc03a 	cmpne	r6,r6,zero
1000b588:	0005883a 	mov	r2,zero
1000b58c:	003f6406 	br	1000b320 <__alt_data_end+0xf800b320>
1000b590:	10009a1e 	bne	r2,zero,1000b7fc <__subdf3+0x640>
1000b594:	82400044 	addi	r9,r16,1
1000b598:	4881ffcc 	andi	r2,r9,2047
1000b59c:	02800044 	movi	r10,1
1000b5a0:	5080670e 	bge	r10,r2,1000b740 <__subdf3+0x584>
1000b5a4:	0081ffc4 	movi	r2,2047
1000b5a8:	4880af26 	beq	r9,r2,1000b868 <__subdf3+0x6ac>
1000b5ac:	898d883a 	add	r6,r17,r6
1000b5b0:	1945883a 	add	r2,r3,r5
1000b5b4:	3447803a 	cmpltu	r3,r6,r17
1000b5b8:	1887883a 	add	r3,r3,r2
1000b5bc:	182297fa 	slli	r17,r3,31
1000b5c0:	300cd07a 	srli	r6,r6,1
1000b5c4:	1806d07a 	srli	r3,r3,1
1000b5c8:	4821883a 	mov	r16,r9
1000b5cc:	89a2b03a 	or	r17,r17,r6
1000b5d0:	003f1b06 	br	1000b240 <__alt_data_end+0xf800b240>
1000b5d4:	0101ffc4 	movi	r4,2047
1000b5d8:	813f441e 	bne	r16,r4,1000b2ec <__alt_data_end+0xf800b2ec>
1000b5dc:	003f1806 	br	1000b240 <__alt_data_end+0xf800b240>
1000b5e0:	843ff844 	addi	r16,r16,-31
1000b5e4:	01400804 	movi	r5,32
1000b5e8:	1408d83a 	srl	r4,r2,r16
1000b5ec:	19405026 	beq	r3,r5,1000b730 <__subdf3+0x574>
1000b5f0:	01401004 	movi	r5,64
1000b5f4:	28c7c83a 	sub	r3,r5,r3
1000b5f8:	10c4983a 	sll	r2,r2,r3
1000b5fc:	88a2b03a 	or	r17,r17,r2
1000b600:	8822c03a 	cmpne	r17,r17,zero
1000b604:	2462b03a 	or	r17,r4,r17
1000b608:	0007883a 	mov	r3,zero
1000b60c:	0021883a 	mov	r16,zero
1000b610:	003f6d06 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b614:	11fff804 	addi	r7,r2,-32
1000b618:	01000804 	movi	r4,32
1000b61c:	29ced83a 	srl	r7,r5,r7
1000b620:	11004526 	beq	r2,r4,1000b738 <__subdf3+0x57c>
1000b624:	01001004 	movi	r4,64
1000b628:	2089c83a 	sub	r4,r4,r2
1000b62c:	2904983a 	sll	r2,r5,r4
1000b630:	118cb03a 	or	r6,r2,r6
1000b634:	300cc03a 	cmpne	r6,r6,zero
1000b638:	398cb03a 	or	r6,r7,r6
1000b63c:	0005883a 	mov	r2,zero
1000b640:	003f3706 	br	1000b320 <__alt_data_end+0xf800b320>
1000b644:	80002a26 	beq	r16,zero,1000b6f0 <__subdf3+0x534>
1000b648:	0101ffc4 	movi	r4,2047
1000b64c:	49006626 	beq	r9,r4,1000b7e8 <__subdf3+0x62c>
1000b650:	0085c83a 	sub	r2,zero,r2
1000b654:	18c02034 	orhi	r3,r3,128
1000b658:	01000e04 	movi	r4,56
1000b65c:	20807e16 	blt	r4,r2,1000b858 <__subdf3+0x69c>
1000b660:	010007c4 	movi	r4,31
1000b664:	2080e716 	blt	r4,r2,1000ba04 <__subdf3+0x848>
1000b668:	01000804 	movi	r4,32
1000b66c:	2089c83a 	sub	r4,r4,r2
1000b670:	1914983a 	sll	r10,r3,r4
1000b674:	8890d83a 	srl	r8,r17,r2
1000b678:	8908983a 	sll	r4,r17,r4
1000b67c:	1884d83a 	srl	r2,r3,r2
1000b680:	5222b03a 	or	r17,r10,r8
1000b684:	2006c03a 	cmpne	r3,r4,zero
1000b688:	88e2b03a 	or	r17,r17,r3
1000b68c:	3463c83a 	sub	r17,r6,r17
1000b690:	2885c83a 	sub	r2,r5,r2
1000b694:	344d803a 	cmpltu	r6,r6,r17
1000b698:	1187c83a 	sub	r3,r2,r6
1000b69c:	4821883a 	mov	r16,r9
1000b6a0:	3825883a 	mov	r18,r7
1000b6a4:	003f2306 	br	1000b334 <__alt_data_end+0xf800b334>
1000b6a8:	24d0b03a 	or	r8,r4,r19
1000b6ac:	40001b1e 	bne	r8,zero,1000b71c <__subdf3+0x560>
1000b6b0:	0005883a 	mov	r2,zero
1000b6b4:	0009883a 	mov	r4,zero
1000b6b8:	0021883a 	mov	r16,zero
1000b6bc:	003f4906 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000b6c0:	010007c4 	movi	r4,31
1000b6c4:	20803a16 	blt	r4,r2,1000b7b0 <__subdf3+0x5f4>
1000b6c8:	01000804 	movi	r4,32
1000b6cc:	2089c83a 	sub	r4,r4,r2
1000b6d0:	2912983a 	sll	r9,r5,r4
1000b6d4:	3090d83a 	srl	r8,r6,r2
1000b6d8:	3108983a 	sll	r4,r6,r4
1000b6dc:	2884d83a 	srl	r2,r5,r2
1000b6e0:	4a12b03a 	or	r9,r9,r8
1000b6e4:	2008c03a 	cmpne	r4,r4,zero
1000b6e8:	4912b03a 	or	r9,r9,r4
1000b6ec:	003f4e06 	br	1000b428 <__alt_data_end+0xf800b428>
1000b6f0:	1c48b03a 	or	r4,r3,r17
1000b6f4:	20003c26 	beq	r4,zero,1000b7e8 <__subdf3+0x62c>
1000b6f8:	0084303a 	nor	r2,zero,r2
1000b6fc:	1000381e 	bne	r2,zero,1000b7e0 <__subdf3+0x624>
1000b700:	3463c83a 	sub	r17,r6,r17
1000b704:	28c5c83a 	sub	r2,r5,r3
1000b708:	344d803a 	cmpltu	r6,r6,r17
1000b70c:	1187c83a 	sub	r3,r2,r6
1000b710:	4821883a 	mov	r16,r9
1000b714:	3825883a 	mov	r18,r7
1000b718:	003f0606 	br	1000b334 <__alt_data_end+0xf800b334>
1000b71c:	2023883a 	mov	r17,r4
1000b720:	003f0906 	br	1000b348 <__alt_data_end+0xf800b348>
1000b724:	0101ffc4 	movi	r4,2047
1000b728:	813f3a1e 	bne	r16,r4,1000b414 <__alt_data_end+0xf800b414>
1000b72c:	003ec406 	br	1000b240 <__alt_data_end+0xf800b240>
1000b730:	0005883a 	mov	r2,zero
1000b734:	003fb106 	br	1000b5fc <__alt_data_end+0xf800b5fc>
1000b738:	0005883a 	mov	r2,zero
1000b73c:	003fbc06 	br	1000b630 <__alt_data_end+0xf800b630>
1000b740:	1c44b03a 	or	r2,r3,r17
1000b744:	80008e1e 	bne	r16,zero,1000b980 <__subdf3+0x7c4>
1000b748:	1000c826 	beq	r2,zero,1000ba6c <__subdf3+0x8b0>
1000b74c:	2984b03a 	or	r2,r5,r6
1000b750:	103ebb26 	beq	r2,zero,1000b240 <__alt_data_end+0xf800b240>
1000b754:	8989883a 	add	r4,r17,r6
1000b758:	1945883a 	add	r2,r3,r5
1000b75c:	2447803a 	cmpltu	r3,r4,r17
1000b760:	1887883a 	add	r3,r3,r2
1000b764:	1880202c 	andhi	r2,r3,128
1000b768:	2023883a 	mov	r17,r4
1000b76c:	103f1626 	beq	r2,zero,1000b3c8 <__alt_data_end+0xf800b3c8>
1000b770:	00bfe034 	movhi	r2,65408
1000b774:	10bfffc4 	addi	r2,r2,-1
1000b778:	5021883a 	mov	r16,r10
1000b77c:	1886703a 	and	r3,r3,r2
1000b780:	003eaf06 	br	1000b240 <__alt_data_end+0xf800b240>
1000b784:	3825883a 	mov	r18,r7
1000b788:	003f0f06 	br	1000b3c8 <__alt_data_end+0xf800b3c8>
1000b78c:	1c44b03a 	or	r2,r3,r17
1000b790:	8000251e 	bne	r16,zero,1000b828 <__subdf3+0x66c>
1000b794:	1000661e 	bne	r2,zero,1000b930 <__subdf3+0x774>
1000b798:	2990b03a 	or	r8,r5,r6
1000b79c:	40009626 	beq	r8,zero,1000b9f8 <__subdf3+0x83c>
1000b7a0:	2807883a 	mov	r3,r5
1000b7a4:	3023883a 	mov	r17,r6
1000b7a8:	3825883a 	mov	r18,r7
1000b7ac:	003ea406 	br	1000b240 <__alt_data_end+0xf800b240>
1000b7b0:	127ff804 	addi	r9,r2,-32
1000b7b4:	01000804 	movi	r4,32
1000b7b8:	2a52d83a 	srl	r9,r5,r9
1000b7bc:	11008c26 	beq	r2,r4,1000b9f0 <__subdf3+0x834>
1000b7c0:	01001004 	movi	r4,64
1000b7c4:	2085c83a 	sub	r2,r4,r2
1000b7c8:	2884983a 	sll	r2,r5,r2
1000b7cc:	118cb03a 	or	r6,r2,r6
1000b7d0:	300cc03a 	cmpne	r6,r6,zero
1000b7d4:	4992b03a 	or	r9,r9,r6
1000b7d8:	0005883a 	mov	r2,zero
1000b7dc:	003f1206 	br	1000b428 <__alt_data_end+0xf800b428>
1000b7e0:	0101ffc4 	movi	r4,2047
1000b7e4:	493f9c1e 	bne	r9,r4,1000b658 <__alt_data_end+0xf800b658>
1000b7e8:	2807883a 	mov	r3,r5
1000b7ec:	3023883a 	mov	r17,r6
1000b7f0:	4821883a 	mov	r16,r9
1000b7f4:	3825883a 	mov	r18,r7
1000b7f8:	003e9106 	br	1000b240 <__alt_data_end+0xf800b240>
1000b7fc:	80001f1e 	bne	r16,zero,1000b87c <__subdf3+0x6c0>
1000b800:	1c48b03a 	or	r4,r3,r17
1000b804:	20005a26 	beq	r4,zero,1000b970 <__subdf3+0x7b4>
1000b808:	0084303a 	nor	r2,zero,r2
1000b80c:	1000561e 	bne	r2,zero,1000b968 <__subdf3+0x7ac>
1000b810:	89a3883a 	add	r17,r17,r6
1000b814:	1945883a 	add	r2,r3,r5
1000b818:	898d803a 	cmpltu	r6,r17,r6
1000b81c:	3087883a 	add	r3,r6,r2
1000b820:	4821883a 	mov	r16,r9
1000b824:	003f0506 	br	1000b43c <__alt_data_end+0xf800b43c>
1000b828:	10002b1e 	bne	r2,zero,1000b8d8 <__subdf3+0x71c>
1000b82c:	2984b03a 	or	r2,r5,r6
1000b830:	10008026 	beq	r2,zero,1000ba34 <__subdf3+0x878>
1000b834:	2807883a 	mov	r3,r5
1000b838:	3023883a 	mov	r17,r6
1000b83c:	3825883a 	mov	r18,r7
1000b840:	0401ffc4 	movi	r16,2047
1000b844:	003e7e06 	br	1000b240 <__alt_data_end+0xf800b240>
1000b848:	3809883a 	mov	r4,r7
1000b84c:	0011883a 	mov	r8,zero
1000b850:	0005883a 	mov	r2,zero
1000b854:	003ee306 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000b858:	1c62b03a 	or	r17,r3,r17
1000b85c:	8822c03a 	cmpne	r17,r17,zero
1000b860:	0005883a 	mov	r2,zero
1000b864:	003f8906 	br	1000b68c <__alt_data_end+0xf800b68c>
1000b868:	3809883a 	mov	r4,r7
1000b86c:	4821883a 	mov	r16,r9
1000b870:	0011883a 	mov	r8,zero
1000b874:	0005883a 	mov	r2,zero
1000b878:	003eda06 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000b87c:	0101ffc4 	movi	r4,2047
1000b880:	49003b26 	beq	r9,r4,1000b970 <__subdf3+0x7b4>
1000b884:	0085c83a 	sub	r2,zero,r2
1000b888:	18c02034 	orhi	r3,r3,128
1000b88c:	01000e04 	movi	r4,56
1000b890:	20806e16 	blt	r4,r2,1000ba4c <__subdf3+0x890>
1000b894:	010007c4 	movi	r4,31
1000b898:	20807716 	blt	r4,r2,1000ba78 <__subdf3+0x8bc>
1000b89c:	01000804 	movi	r4,32
1000b8a0:	2089c83a 	sub	r4,r4,r2
1000b8a4:	1914983a 	sll	r10,r3,r4
1000b8a8:	8890d83a 	srl	r8,r17,r2
1000b8ac:	8908983a 	sll	r4,r17,r4
1000b8b0:	1884d83a 	srl	r2,r3,r2
1000b8b4:	5222b03a 	or	r17,r10,r8
1000b8b8:	2006c03a 	cmpne	r3,r4,zero
1000b8bc:	88e2b03a 	or	r17,r17,r3
1000b8c0:	89a3883a 	add	r17,r17,r6
1000b8c4:	1145883a 	add	r2,r2,r5
1000b8c8:	898d803a 	cmpltu	r6,r17,r6
1000b8cc:	3087883a 	add	r3,r6,r2
1000b8d0:	4821883a 	mov	r16,r9
1000b8d4:	003ed906 	br	1000b43c <__alt_data_end+0xf800b43c>
1000b8d8:	2984b03a 	or	r2,r5,r6
1000b8dc:	10004226 	beq	r2,zero,1000b9e8 <__subdf3+0x82c>
1000b8e0:	1808d0fa 	srli	r4,r3,3
1000b8e4:	8822d0fa 	srli	r17,r17,3
1000b8e8:	1806977a 	slli	r3,r3,29
1000b8ec:	2080022c 	andhi	r2,r4,8
1000b8f0:	1c62b03a 	or	r17,r3,r17
1000b8f4:	10000826 	beq	r2,zero,1000b918 <__subdf3+0x75c>
1000b8f8:	2812d0fa 	srli	r9,r5,3
1000b8fc:	4880022c 	andhi	r2,r9,8
1000b900:	1000051e 	bne	r2,zero,1000b918 <__subdf3+0x75c>
1000b904:	300cd0fa 	srli	r6,r6,3
1000b908:	2804977a 	slli	r2,r5,29
1000b90c:	4809883a 	mov	r4,r9
1000b910:	3825883a 	mov	r18,r7
1000b914:	11a2b03a 	or	r17,r2,r6
1000b918:	8806d77a 	srli	r3,r17,29
1000b91c:	200890fa 	slli	r4,r4,3
1000b920:	882290fa 	slli	r17,r17,3
1000b924:	0401ffc4 	movi	r16,2047
1000b928:	1906b03a 	or	r3,r3,r4
1000b92c:	003e4406 	br	1000b240 <__alt_data_end+0xf800b240>
1000b930:	2984b03a 	or	r2,r5,r6
1000b934:	103e4226 	beq	r2,zero,1000b240 <__alt_data_end+0xf800b240>
1000b938:	8989c83a 	sub	r4,r17,r6
1000b93c:	8911803a 	cmpltu	r8,r17,r4
1000b940:	1945c83a 	sub	r2,r3,r5
1000b944:	1205c83a 	sub	r2,r2,r8
1000b948:	1200202c 	andhi	r8,r2,128
1000b94c:	403e9a26 	beq	r8,zero,1000b3b8 <__alt_data_end+0xf800b3b8>
1000b950:	3463c83a 	sub	r17,r6,r17
1000b954:	28c5c83a 	sub	r2,r5,r3
1000b958:	344d803a 	cmpltu	r6,r6,r17
1000b95c:	1187c83a 	sub	r3,r2,r6
1000b960:	3825883a 	mov	r18,r7
1000b964:	003e3606 	br	1000b240 <__alt_data_end+0xf800b240>
1000b968:	0101ffc4 	movi	r4,2047
1000b96c:	493fc71e 	bne	r9,r4,1000b88c <__alt_data_end+0xf800b88c>
1000b970:	2807883a 	mov	r3,r5
1000b974:	3023883a 	mov	r17,r6
1000b978:	4821883a 	mov	r16,r9
1000b97c:	003e3006 	br	1000b240 <__alt_data_end+0xf800b240>
1000b980:	10003626 	beq	r2,zero,1000ba5c <__subdf3+0x8a0>
1000b984:	2984b03a 	or	r2,r5,r6
1000b988:	10001726 	beq	r2,zero,1000b9e8 <__subdf3+0x82c>
1000b98c:	1808d0fa 	srli	r4,r3,3
1000b990:	8822d0fa 	srli	r17,r17,3
1000b994:	1806977a 	slli	r3,r3,29
1000b998:	2080022c 	andhi	r2,r4,8
1000b99c:	1c62b03a 	or	r17,r3,r17
1000b9a0:	10000726 	beq	r2,zero,1000b9c0 <__subdf3+0x804>
1000b9a4:	2812d0fa 	srli	r9,r5,3
1000b9a8:	4880022c 	andhi	r2,r9,8
1000b9ac:	1000041e 	bne	r2,zero,1000b9c0 <__subdf3+0x804>
1000b9b0:	300cd0fa 	srli	r6,r6,3
1000b9b4:	2804977a 	slli	r2,r5,29
1000b9b8:	4809883a 	mov	r4,r9
1000b9bc:	11a2b03a 	or	r17,r2,r6
1000b9c0:	8806d77a 	srli	r3,r17,29
1000b9c4:	200890fa 	slli	r4,r4,3
1000b9c8:	882290fa 	slli	r17,r17,3
1000b9cc:	3825883a 	mov	r18,r7
1000b9d0:	1906b03a 	or	r3,r3,r4
1000b9d4:	0401ffc4 	movi	r16,2047
1000b9d8:	003e1906 	br	1000b240 <__alt_data_end+0xf800b240>
1000b9dc:	000b883a 	mov	r5,zero
1000b9e0:	0005883a 	mov	r2,zero
1000b9e4:	003e2e06 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b9e8:	0401ffc4 	movi	r16,2047
1000b9ec:	003e1406 	br	1000b240 <__alt_data_end+0xf800b240>
1000b9f0:	0005883a 	mov	r2,zero
1000b9f4:	003f7506 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000b9f8:	0005883a 	mov	r2,zero
1000b9fc:	0009883a 	mov	r4,zero
1000ba00:	003e7806 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000ba04:	123ff804 	addi	r8,r2,-32
1000ba08:	01000804 	movi	r4,32
1000ba0c:	1a10d83a 	srl	r8,r3,r8
1000ba10:	11002526 	beq	r2,r4,1000baa8 <__subdf3+0x8ec>
1000ba14:	01001004 	movi	r4,64
1000ba18:	2085c83a 	sub	r2,r4,r2
1000ba1c:	1884983a 	sll	r2,r3,r2
1000ba20:	1444b03a 	or	r2,r2,r17
1000ba24:	1004c03a 	cmpne	r2,r2,zero
1000ba28:	40a2b03a 	or	r17,r8,r2
1000ba2c:	0005883a 	mov	r2,zero
1000ba30:	003f1606 	br	1000b68c <__alt_data_end+0xf800b68c>
1000ba34:	02000434 	movhi	r8,16
1000ba38:	0009883a 	mov	r4,zero
1000ba3c:	423fffc4 	addi	r8,r8,-1
1000ba40:	00bfffc4 	movi	r2,-1
1000ba44:	0401ffc4 	movi	r16,2047
1000ba48:	003e6606 	br	1000b3e4 <__alt_data_end+0xf800b3e4>
1000ba4c:	1c62b03a 	or	r17,r3,r17
1000ba50:	8822c03a 	cmpne	r17,r17,zero
1000ba54:	0005883a 	mov	r2,zero
1000ba58:	003f9906 	br	1000b8c0 <__alt_data_end+0xf800b8c0>
1000ba5c:	2807883a 	mov	r3,r5
1000ba60:	3023883a 	mov	r17,r6
1000ba64:	0401ffc4 	movi	r16,2047
1000ba68:	003df506 	br	1000b240 <__alt_data_end+0xf800b240>
1000ba6c:	2807883a 	mov	r3,r5
1000ba70:	3023883a 	mov	r17,r6
1000ba74:	003df206 	br	1000b240 <__alt_data_end+0xf800b240>
1000ba78:	123ff804 	addi	r8,r2,-32
1000ba7c:	01000804 	movi	r4,32
1000ba80:	1a10d83a 	srl	r8,r3,r8
1000ba84:	11000a26 	beq	r2,r4,1000bab0 <__subdf3+0x8f4>
1000ba88:	01001004 	movi	r4,64
1000ba8c:	2085c83a 	sub	r2,r4,r2
1000ba90:	1884983a 	sll	r2,r3,r2
1000ba94:	1444b03a 	or	r2,r2,r17
1000ba98:	1004c03a 	cmpne	r2,r2,zero
1000ba9c:	40a2b03a 	or	r17,r8,r2
1000baa0:	0005883a 	mov	r2,zero
1000baa4:	003f8606 	br	1000b8c0 <__alt_data_end+0xf800b8c0>
1000baa8:	0005883a 	mov	r2,zero
1000baac:	003fdc06 	br	1000ba20 <__alt_data_end+0xf800ba20>
1000bab0:	0005883a 	mov	r2,zero
1000bab4:	003ff706 	br	1000ba94 <__alt_data_end+0xf800ba94>

1000bab8 <__fixdfsi>:
1000bab8:	280cd53a 	srli	r6,r5,20
1000babc:	00c00434 	movhi	r3,16
1000bac0:	18ffffc4 	addi	r3,r3,-1
1000bac4:	3181ffcc 	andi	r6,r6,2047
1000bac8:	01c0ff84 	movi	r7,1022
1000bacc:	28c6703a 	and	r3,r5,r3
1000bad0:	280ad7fa 	srli	r5,r5,31
1000bad4:	3980120e 	bge	r7,r6,1000bb20 <__fixdfsi+0x68>
1000bad8:	00810744 	movi	r2,1053
1000badc:	11800c16 	blt	r2,r6,1000bb10 <__fixdfsi+0x58>
1000bae0:	00810cc4 	movi	r2,1075
1000bae4:	1185c83a 	sub	r2,r2,r6
1000bae8:	01c007c4 	movi	r7,31
1000baec:	18c00434 	orhi	r3,r3,16
1000baf0:	38800d16 	blt	r7,r2,1000bb28 <__fixdfsi+0x70>
1000baf4:	31befb44 	addi	r6,r6,-1043
1000baf8:	2084d83a 	srl	r2,r4,r2
1000bafc:	1986983a 	sll	r3,r3,r6
1000bb00:	1884b03a 	or	r2,r3,r2
1000bb04:	28000726 	beq	r5,zero,1000bb24 <__fixdfsi+0x6c>
1000bb08:	0085c83a 	sub	r2,zero,r2
1000bb0c:	f800283a 	ret
1000bb10:	00a00034 	movhi	r2,32768
1000bb14:	10bfffc4 	addi	r2,r2,-1
1000bb18:	2885883a 	add	r2,r5,r2
1000bb1c:	f800283a 	ret
1000bb20:	0005883a 	mov	r2,zero
1000bb24:	f800283a 	ret
1000bb28:	008104c4 	movi	r2,1043
1000bb2c:	1185c83a 	sub	r2,r2,r6
1000bb30:	1884d83a 	srl	r2,r3,r2
1000bb34:	003ff306 	br	1000bb04 <__alt_data_end+0xf800bb04>

1000bb38 <__floatsidf>:
1000bb38:	defffd04 	addi	sp,sp,-12
1000bb3c:	dfc00215 	stw	ra,8(sp)
1000bb40:	dc400115 	stw	r17,4(sp)
1000bb44:	dc000015 	stw	r16,0(sp)
1000bb48:	20002b26 	beq	r4,zero,1000bbf8 <__floatsidf+0xc0>
1000bb4c:	2023883a 	mov	r17,r4
1000bb50:	2020d7fa 	srli	r16,r4,31
1000bb54:	20002d16 	blt	r4,zero,1000bc0c <__floatsidf+0xd4>
1000bb58:	8809883a 	mov	r4,r17
1000bb5c:	000becc0 	call	1000becc <__clzsi2>
1000bb60:	01410784 	movi	r5,1054
1000bb64:	288bc83a 	sub	r5,r5,r2
1000bb68:	01010cc4 	movi	r4,1075
1000bb6c:	2149c83a 	sub	r4,r4,r5
1000bb70:	00c007c4 	movi	r3,31
1000bb74:	1900160e 	bge	r3,r4,1000bbd0 <__floatsidf+0x98>
1000bb78:	00c104c4 	movi	r3,1043
1000bb7c:	1947c83a 	sub	r3,r3,r5
1000bb80:	88c6983a 	sll	r3,r17,r3
1000bb84:	00800434 	movhi	r2,16
1000bb88:	10bfffc4 	addi	r2,r2,-1
1000bb8c:	1886703a 	and	r3,r3,r2
1000bb90:	2941ffcc 	andi	r5,r5,2047
1000bb94:	800d883a 	mov	r6,r16
1000bb98:	0005883a 	mov	r2,zero
1000bb9c:	280a953a 	slli	r5,r5,20
1000bba0:	31803fcc 	andi	r6,r6,255
1000bba4:	01000434 	movhi	r4,16
1000bba8:	300c97fa 	slli	r6,r6,31
1000bbac:	213fffc4 	addi	r4,r4,-1
1000bbb0:	1906703a 	and	r3,r3,r4
1000bbb4:	1946b03a 	or	r3,r3,r5
1000bbb8:	1986b03a 	or	r3,r3,r6
1000bbbc:	dfc00217 	ldw	ra,8(sp)
1000bbc0:	dc400117 	ldw	r17,4(sp)
1000bbc4:	dc000017 	ldw	r16,0(sp)
1000bbc8:	dec00304 	addi	sp,sp,12
1000bbcc:	f800283a 	ret
1000bbd0:	00c002c4 	movi	r3,11
1000bbd4:	1887c83a 	sub	r3,r3,r2
1000bbd8:	88c6d83a 	srl	r3,r17,r3
1000bbdc:	8904983a 	sll	r2,r17,r4
1000bbe0:	01000434 	movhi	r4,16
1000bbe4:	213fffc4 	addi	r4,r4,-1
1000bbe8:	2941ffcc 	andi	r5,r5,2047
1000bbec:	1906703a 	and	r3,r3,r4
1000bbf0:	800d883a 	mov	r6,r16
1000bbf4:	003fe906 	br	1000bb9c <__alt_data_end+0xf800bb9c>
1000bbf8:	000d883a 	mov	r6,zero
1000bbfc:	000b883a 	mov	r5,zero
1000bc00:	0007883a 	mov	r3,zero
1000bc04:	0005883a 	mov	r2,zero
1000bc08:	003fe406 	br	1000bb9c <__alt_data_end+0xf800bb9c>
1000bc0c:	0123c83a 	sub	r17,zero,r4
1000bc10:	003fd106 	br	1000bb58 <__alt_data_end+0xf800bb58>

1000bc14 <__extendsfdf2>:
1000bc14:	200ad5fa 	srli	r5,r4,23
1000bc18:	defffd04 	addi	sp,sp,-12
1000bc1c:	dc400115 	stw	r17,4(sp)
1000bc20:	29403fcc 	andi	r5,r5,255
1000bc24:	29800044 	addi	r6,r5,1
1000bc28:	04402034 	movhi	r17,128
1000bc2c:	dc000015 	stw	r16,0(sp)
1000bc30:	8c7fffc4 	addi	r17,r17,-1
1000bc34:	dfc00215 	stw	ra,8(sp)
1000bc38:	31803fcc 	andi	r6,r6,255
1000bc3c:	00800044 	movi	r2,1
1000bc40:	8922703a 	and	r17,r17,r4
1000bc44:	2020d7fa 	srli	r16,r4,31
1000bc48:	1180110e 	bge	r2,r6,1000bc90 <__extendsfdf2+0x7c>
1000bc4c:	880cd0fa 	srli	r6,r17,3
1000bc50:	8822977a 	slli	r17,r17,29
1000bc54:	2940e004 	addi	r5,r5,896
1000bc58:	2941ffcc 	andi	r5,r5,2047
1000bc5c:	2804953a 	slli	r2,r5,20
1000bc60:	01400434 	movhi	r5,16
1000bc64:	800697fa 	slli	r3,r16,31
1000bc68:	297fffc4 	addi	r5,r5,-1
1000bc6c:	314a703a 	and	r5,r6,r5
1000bc70:	288ab03a 	or	r5,r5,r2
1000bc74:	28c6b03a 	or	r3,r5,r3
1000bc78:	8805883a 	mov	r2,r17
1000bc7c:	dfc00217 	ldw	ra,8(sp)
1000bc80:	dc400117 	ldw	r17,4(sp)
1000bc84:	dc000017 	ldw	r16,0(sp)
1000bc88:	dec00304 	addi	sp,sp,12
1000bc8c:	f800283a 	ret
1000bc90:	2800111e 	bne	r5,zero,1000bcd8 <__extendsfdf2+0xc4>
1000bc94:	88001c26 	beq	r17,zero,1000bd08 <__extendsfdf2+0xf4>
1000bc98:	8809883a 	mov	r4,r17
1000bc9c:	000becc0 	call	1000becc <__clzsi2>
1000bca0:	00c00284 	movi	r3,10
1000bca4:	18801b16 	blt	r3,r2,1000bd14 <__extendsfdf2+0x100>
1000bca8:	018002c4 	movi	r6,11
1000bcac:	308dc83a 	sub	r6,r6,r2
1000bcb0:	11000544 	addi	r4,r2,21
1000bcb4:	8986d83a 	srl	r3,r17,r6
1000bcb8:	8922983a 	sll	r17,r17,r4
1000bcbc:	0180e244 	movi	r6,905
1000bcc0:	01400434 	movhi	r5,16
1000bcc4:	3085c83a 	sub	r2,r6,r2
1000bcc8:	297fffc4 	addi	r5,r5,-1
1000bccc:	194c703a 	and	r6,r3,r5
1000bcd0:	1141ffcc 	andi	r5,r2,2047
1000bcd4:	003fe006 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bcd8:	88000826 	beq	r17,zero,1000bcfc <__extendsfdf2+0xe8>
1000bcdc:	880cd0fa 	srli	r6,r17,3
1000bce0:	00800434 	movhi	r2,16
1000bce4:	10bfffc4 	addi	r2,r2,-1
1000bce8:	31800234 	orhi	r6,r6,8
1000bcec:	8822977a 	slli	r17,r17,29
1000bcf0:	308c703a 	and	r6,r6,r2
1000bcf4:	0141ffc4 	movi	r5,2047
1000bcf8:	003fd706 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bcfc:	0141ffc4 	movi	r5,2047
1000bd00:	000d883a 	mov	r6,zero
1000bd04:	003fd406 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bd08:	000b883a 	mov	r5,zero
1000bd0c:	000d883a 	mov	r6,zero
1000bd10:	003fd106 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bd14:	11bffd44 	addi	r6,r2,-11
1000bd18:	8986983a 	sll	r3,r17,r6
1000bd1c:	0023883a 	mov	r17,zero
1000bd20:	003fe606 	br	1000bcbc <__alt_data_end+0xf800bcbc>

1000bd24 <__truncdfsf2>:
1000bd24:	2810d53a 	srli	r8,r5,20
1000bd28:	01c00434 	movhi	r7,16
1000bd2c:	39ffffc4 	addi	r7,r7,-1
1000bd30:	29ce703a 	and	r7,r5,r7
1000bd34:	4201ffcc 	andi	r8,r8,2047
1000bd38:	380e90fa 	slli	r7,r7,3
1000bd3c:	200cd77a 	srli	r6,r4,29
1000bd40:	42400044 	addi	r9,r8,1
1000bd44:	4a41ffcc 	andi	r9,r9,2047
1000bd48:	00c00044 	movi	r3,1
1000bd4c:	280ad7fa 	srli	r5,r5,31
1000bd50:	31ceb03a 	or	r7,r6,r7
1000bd54:	200490fa 	slli	r2,r4,3
1000bd58:	1a40230e 	bge	r3,r9,1000bde8 <__truncdfsf2+0xc4>
1000bd5c:	40ff2004 	addi	r3,r8,-896
1000bd60:	01803f84 	movi	r6,254
1000bd64:	30c01516 	blt	r6,r3,1000bdbc <__truncdfsf2+0x98>
1000bd68:	00c0380e 	bge	zero,r3,1000be4c <__truncdfsf2+0x128>
1000bd6c:	200c91ba 	slli	r6,r4,6
1000bd70:	380e90fa 	slli	r7,r7,3
1000bd74:	1004d77a 	srli	r2,r2,29
1000bd78:	300cc03a 	cmpne	r6,r6,zero
1000bd7c:	31ccb03a 	or	r6,r6,r7
1000bd80:	308cb03a 	or	r6,r6,r2
1000bd84:	308001cc 	andi	r2,r6,7
1000bd88:	10000426 	beq	r2,zero,1000bd9c <__truncdfsf2+0x78>
1000bd8c:	308003cc 	andi	r2,r6,15
1000bd90:	01000104 	movi	r4,4
1000bd94:	11000126 	beq	r2,r4,1000bd9c <__truncdfsf2+0x78>
1000bd98:	31800104 	addi	r6,r6,4
1000bd9c:	3081002c 	andhi	r2,r6,1024
1000bda0:	10001626 	beq	r2,zero,1000bdfc <__truncdfsf2+0xd8>
1000bda4:	18c00044 	addi	r3,r3,1
1000bda8:	00803fc4 	movi	r2,255
1000bdac:	18800326 	beq	r3,r2,1000bdbc <__truncdfsf2+0x98>
1000bdb0:	300c91ba 	slli	r6,r6,6
1000bdb4:	300cd27a 	srli	r6,r6,9
1000bdb8:	00000206 	br	1000bdc4 <__truncdfsf2+0xa0>
1000bdbc:	00ffffc4 	movi	r3,-1
1000bdc0:	000d883a 	mov	r6,zero
1000bdc4:	18c03fcc 	andi	r3,r3,255
1000bdc8:	180895fa 	slli	r4,r3,23
1000bdcc:	00c02034 	movhi	r3,128
1000bdd0:	280a97fa 	slli	r5,r5,31
1000bdd4:	18ffffc4 	addi	r3,r3,-1
1000bdd8:	30c6703a 	and	r3,r6,r3
1000bddc:	1906b03a 	or	r3,r3,r4
1000bde0:	1944b03a 	or	r2,r3,r5
1000bde4:	f800283a 	ret
1000bde8:	40000b1e 	bne	r8,zero,1000be18 <__truncdfsf2+0xf4>
1000bdec:	388cb03a 	or	r6,r7,r2
1000bdf0:	0007883a 	mov	r3,zero
1000bdf4:	30000426 	beq	r6,zero,1000be08 <__truncdfsf2+0xe4>
1000bdf8:	01800144 	movi	r6,5
1000bdfc:	00803fc4 	movi	r2,255
1000be00:	300cd0fa 	srli	r6,r6,3
1000be04:	18800a26 	beq	r3,r2,1000be30 <__truncdfsf2+0x10c>
1000be08:	00802034 	movhi	r2,128
1000be0c:	10bfffc4 	addi	r2,r2,-1
1000be10:	308c703a 	and	r6,r6,r2
1000be14:	003feb06 	br	1000bdc4 <__alt_data_end+0xf800bdc4>
1000be18:	3888b03a 	or	r4,r7,r2
1000be1c:	203fe726 	beq	r4,zero,1000bdbc <__alt_data_end+0xf800bdbc>
1000be20:	380c90fa 	slli	r6,r7,3
1000be24:	00c03fc4 	movi	r3,255
1000be28:	31808034 	orhi	r6,r6,512
1000be2c:	003fd506 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000be30:	303fe226 	beq	r6,zero,1000bdbc <__alt_data_end+0xf800bdbc>
1000be34:	00802034 	movhi	r2,128
1000be38:	31801034 	orhi	r6,r6,64
1000be3c:	10bfffc4 	addi	r2,r2,-1
1000be40:	00ffffc4 	movi	r3,-1
1000be44:	308c703a 	and	r6,r6,r2
1000be48:	003fde06 	br	1000bdc4 <__alt_data_end+0xf800bdc4>
1000be4c:	013ffa44 	movi	r4,-23
1000be50:	19000e16 	blt	r3,r4,1000be8c <__truncdfsf2+0x168>
1000be54:	01000784 	movi	r4,30
1000be58:	20c9c83a 	sub	r4,r4,r3
1000be5c:	018007c4 	movi	r6,31
1000be60:	39c02034 	orhi	r7,r7,128
1000be64:	31000b16 	blt	r6,r4,1000be94 <__truncdfsf2+0x170>
1000be68:	423f2084 	addi	r8,r8,-894
1000be6c:	120c983a 	sll	r6,r2,r8
1000be70:	3a0e983a 	sll	r7,r7,r8
1000be74:	1104d83a 	srl	r2,r2,r4
1000be78:	300cc03a 	cmpne	r6,r6,zero
1000be7c:	31ceb03a 	or	r7,r6,r7
1000be80:	388cb03a 	or	r6,r7,r2
1000be84:	0007883a 	mov	r3,zero
1000be88:	003fbe06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000be8c:	0007883a 	mov	r3,zero
1000be90:	003fd906 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000be94:	01bfff84 	movi	r6,-2
1000be98:	30cdc83a 	sub	r6,r6,r3
1000be9c:	00c00804 	movi	r3,32
1000bea0:	398cd83a 	srl	r6,r7,r6
1000bea4:	20c00726 	beq	r4,r3,1000bec4 <__truncdfsf2+0x1a0>
1000bea8:	423f2884 	addi	r8,r8,-862
1000beac:	3a0e983a 	sll	r7,r7,r8
1000beb0:	3884b03a 	or	r2,r7,r2
1000beb4:	1004c03a 	cmpne	r2,r2,zero
1000beb8:	118cb03a 	or	r6,r2,r6
1000bebc:	0007883a 	mov	r3,zero
1000bec0:	003fb006 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000bec4:	000f883a 	mov	r7,zero
1000bec8:	003ff906 	br	1000beb0 <__alt_data_end+0xf800beb0>

1000becc <__clzsi2>:
1000becc:	00bfffd4 	movui	r2,65535
1000bed0:	11000536 	bltu	r2,r4,1000bee8 <__clzsi2+0x1c>
1000bed4:	00803fc4 	movi	r2,255
1000bed8:	11000f36 	bltu	r2,r4,1000bf18 <__clzsi2+0x4c>
1000bedc:	00800804 	movi	r2,32
1000bee0:	0007883a 	mov	r3,zero
1000bee4:	00000506 	br	1000befc <__clzsi2+0x30>
1000bee8:	00804034 	movhi	r2,256
1000beec:	10bfffc4 	addi	r2,r2,-1
1000bef0:	11000c2e 	bgeu	r2,r4,1000bf24 <__clzsi2+0x58>
1000bef4:	00800204 	movi	r2,8
1000bef8:	00c00604 	movi	r3,24
1000befc:	20c8d83a 	srl	r4,r4,r3
1000bf00:	00c400b4 	movhi	r3,4098
1000bf04:	18e71504 	addi	r3,r3,-25516
1000bf08:	1909883a 	add	r4,r3,r4
1000bf0c:	20c00003 	ldbu	r3,0(r4)
1000bf10:	10c5c83a 	sub	r2,r2,r3
1000bf14:	f800283a 	ret
1000bf18:	00800604 	movi	r2,24
1000bf1c:	00c00204 	movi	r3,8
1000bf20:	003ff606 	br	1000befc <__alt_data_end+0xf800befc>
1000bf24:	00800404 	movi	r2,16
1000bf28:	1007883a 	mov	r3,r2
1000bf2c:	003ff306 	br	1000befc <__alt_data_end+0xf800befc>

1000bf30 <clock>:
1000bf30:	008400b4 	movhi	r2,4098
1000bf34:	10af4504 	addi	r2,r2,-17132
1000bf38:	11000017 	ldw	r4,0(r2)
1000bf3c:	defffb04 	addi	sp,sp,-20
1000bf40:	d80b883a 	mov	r5,sp
1000bf44:	dfc00415 	stw	ra,16(sp)
1000bf48:	000c2200 	call	1000c220 <_times_r>
1000bf4c:	00ffffc4 	movi	r3,-1
1000bf50:	10c00726 	beq	r2,r3,1000bf70 <clock+0x40>
1000bf54:	d8c00017 	ldw	r3,0(sp)
1000bf58:	d8800117 	ldw	r2,4(sp)
1000bf5c:	1885883a 	add	r2,r3,r2
1000bf60:	d8c00217 	ldw	r3,8(sp)
1000bf64:	10c7883a 	add	r3,r2,r3
1000bf68:	d8800317 	ldw	r2,12(sp)
1000bf6c:	1885883a 	add	r2,r3,r2
1000bf70:	dfc00417 	ldw	ra,16(sp)
1000bf74:	dec00504 	addi	sp,sp,20
1000bf78:	f800283a 	ret

1000bf7c <_printf_r>:
1000bf7c:	defffd04 	addi	sp,sp,-12
1000bf80:	2805883a 	mov	r2,r5
1000bf84:	dfc00015 	stw	ra,0(sp)
1000bf88:	d9800115 	stw	r6,4(sp)
1000bf8c:	d9c00215 	stw	r7,8(sp)
1000bf90:	21400217 	ldw	r5,8(r4)
1000bf94:	d9c00104 	addi	r7,sp,4
1000bf98:	100d883a 	mov	r6,r2
1000bf9c:	000c2280 	call	1000c228 <___vfprintf_internal_r>
1000bfa0:	dfc00017 	ldw	ra,0(sp)
1000bfa4:	dec00304 	addi	sp,sp,12
1000bfa8:	f800283a 	ret

1000bfac <printf>:
1000bfac:	defffc04 	addi	sp,sp,-16
1000bfb0:	dfc00015 	stw	ra,0(sp)
1000bfb4:	d9400115 	stw	r5,4(sp)
1000bfb8:	d9800215 	stw	r6,8(sp)
1000bfbc:	d9c00315 	stw	r7,12(sp)
1000bfc0:	008400b4 	movhi	r2,4098
1000bfc4:	10af4504 	addi	r2,r2,-17132
1000bfc8:	10800017 	ldw	r2,0(r2)
1000bfcc:	200b883a 	mov	r5,r4
1000bfd0:	d9800104 	addi	r6,sp,4
1000bfd4:	11000217 	ldw	r4,8(r2)
1000bfd8:	000e5040 	call	1000e504 <__vfprintf_internal>
1000bfdc:	dfc00017 	ldw	ra,0(sp)
1000bfe0:	dec00404 	addi	sp,sp,16
1000bfe4:	f800283a 	ret

1000bfe8 <_puts_r>:
1000bfe8:	defff604 	addi	sp,sp,-40
1000bfec:	dc000715 	stw	r16,28(sp)
1000bff0:	2021883a 	mov	r16,r4
1000bff4:	2809883a 	mov	r4,r5
1000bff8:	dc400815 	stw	r17,32(sp)
1000bffc:	dfc00915 	stw	ra,36(sp)
1000c000:	2823883a 	mov	r17,r5
1000c004:	000c1380 	call	1000c138 <strlen>
1000c008:	10c00044 	addi	r3,r2,1
1000c00c:	d8800115 	stw	r2,4(sp)
1000c010:	008400b4 	movhi	r2,4098
1000c014:	10a75604 	addi	r2,r2,-25256
1000c018:	d8800215 	stw	r2,8(sp)
1000c01c:	00800044 	movi	r2,1
1000c020:	d8800315 	stw	r2,12(sp)
1000c024:	00800084 	movi	r2,2
1000c028:	dc400015 	stw	r17,0(sp)
1000c02c:	d8c00615 	stw	r3,24(sp)
1000c030:	dec00415 	stw	sp,16(sp)
1000c034:	d8800515 	stw	r2,20(sp)
1000c038:	80000226 	beq	r16,zero,1000c044 <_puts_r+0x5c>
1000c03c:	80800e17 	ldw	r2,56(r16)
1000c040:	10001426 	beq	r2,zero,1000c094 <_puts_r+0xac>
1000c044:	81400217 	ldw	r5,8(r16)
1000c048:	2880030b 	ldhu	r2,12(r5)
1000c04c:	10c8000c 	andi	r3,r2,8192
1000c050:	1800061e 	bne	r3,zero,1000c06c <_puts_r+0x84>
1000c054:	29001917 	ldw	r4,100(r5)
1000c058:	00f7ffc4 	movi	r3,-8193
1000c05c:	10880014 	ori	r2,r2,8192
1000c060:	20c6703a 	and	r3,r4,r3
1000c064:	2880030d 	sth	r2,12(r5)
1000c068:	28c01915 	stw	r3,100(r5)
1000c06c:	d9800404 	addi	r6,sp,16
1000c070:	8009883a 	mov	r4,r16
1000c074:	0010a6c0 	call	10010a6c <__sfvwrite_r>
1000c078:	1000091e 	bne	r2,zero,1000c0a0 <_puts_r+0xb8>
1000c07c:	00800284 	movi	r2,10
1000c080:	dfc00917 	ldw	ra,36(sp)
1000c084:	dc400817 	ldw	r17,32(sp)
1000c088:	dc000717 	ldw	r16,28(sp)
1000c08c:	dec00a04 	addi	sp,sp,40
1000c090:	f800283a 	ret
1000c094:	8009883a 	mov	r4,r16
1000c098:	00105e80 	call	100105e8 <__sinit>
1000c09c:	003fe906 	br	1000c044 <__alt_data_end+0xf800c044>
1000c0a0:	00bfffc4 	movi	r2,-1
1000c0a4:	003ff606 	br	1000c080 <__alt_data_end+0xf800c080>

1000c0a8 <puts>:
1000c0a8:	008400b4 	movhi	r2,4098
1000c0ac:	10af4504 	addi	r2,r2,-17132
1000c0b0:	200b883a 	mov	r5,r4
1000c0b4:	11000017 	ldw	r4,0(r2)
1000c0b8:	000bfe81 	jmpi	1000bfe8 <_puts_r>

1000c0bc <srand>:
1000c0bc:	008400b4 	movhi	r2,4098
1000c0c0:	10af4504 	addi	r2,r2,-17132
1000c0c4:	10800017 	ldw	r2,0(r2)
1000c0c8:	11002915 	stw	r4,164(r2)
1000c0cc:	10002a15 	stw	zero,168(r2)
1000c0d0:	f800283a 	ret

1000c0d4 <rand>:
1000c0d4:	008400b4 	movhi	r2,4098
1000c0d8:	defffe04 	addi	sp,sp,-8
1000c0dc:	10af4504 	addi	r2,r2,-17132
1000c0e0:	dc000015 	stw	r16,0(sp)
1000c0e4:	14000017 	ldw	r16,0(r2)
1000c0e8:	dfc00115 	stw	ra,4(sp)
1000c0ec:	01932574 	movhi	r6,19605
1000c0f0:	81002917 	ldw	r4,164(r16)
1000c0f4:	81402a17 	ldw	r5,168(r16)
1000c0f8:	01d614b4 	movhi	r7,22610
1000c0fc:	319fcb44 	addi	r6,r6,32557
1000c100:	39fd0b44 	addi	r7,r7,-3027
1000c104:	00082c00 	call	100082c0 <__muldi3>
1000c108:	11000044 	addi	r4,r2,1
1000c10c:	2085803a 	cmpltu	r2,r4,r2
1000c110:	10c7883a 	add	r3,r2,r3
1000c114:	00a00034 	movhi	r2,32768
1000c118:	10bfffc4 	addi	r2,r2,-1
1000c11c:	1884703a 	and	r2,r3,r2
1000c120:	81002915 	stw	r4,164(r16)
1000c124:	80c02a15 	stw	r3,168(r16)
1000c128:	dfc00117 	ldw	ra,4(sp)
1000c12c:	dc000017 	ldw	r16,0(sp)
1000c130:	dec00204 	addi	sp,sp,8
1000c134:	f800283a 	ret

1000c138 <strlen>:
1000c138:	208000cc 	andi	r2,r4,3
1000c13c:	10002026 	beq	r2,zero,1000c1c0 <strlen+0x88>
1000c140:	20800007 	ldb	r2,0(r4)
1000c144:	10002026 	beq	r2,zero,1000c1c8 <strlen+0x90>
1000c148:	2005883a 	mov	r2,r4
1000c14c:	00000206 	br	1000c158 <strlen+0x20>
1000c150:	10c00007 	ldb	r3,0(r2)
1000c154:	18001826 	beq	r3,zero,1000c1b8 <strlen+0x80>
1000c158:	10800044 	addi	r2,r2,1
1000c15c:	10c000cc 	andi	r3,r2,3
1000c160:	183ffb1e 	bne	r3,zero,1000c150 <__alt_data_end+0xf800c150>
1000c164:	10c00017 	ldw	r3,0(r2)
1000c168:	01ffbff4 	movhi	r7,65279
1000c16c:	39ffbfc4 	addi	r7,r7,-257
1000c170:	00ca303a 	nor	r5,zero,r3
1000c174:	01a02074 	movhi	r6,32897
1000c178:	19c7883a 	add	r3,r3,r7
1000c17c:	31a02004 	addi	r6,r6,-32640
1000c180:	1946703a 	and	r3,r3,r5
1000c184:	1986703a 	and	r3,r3,r6
1000c188:	1800091e 	bne	r3,zero,1000c1b0 <strlen+0x78>
1000c18c:	10800104 	addi	r2,r2,4
1000c190:	10c00017 	ldw	r3,0(r2)
1000c194:	19cb883a 	add	r5,r3,r7
1000c198:	00c6303a 	nor	r3,zero,r3
1000c19c:	28c6703a 	and	r3,r5,r3
1000c1a0:	1986703a 	and	r3,r3,r6
1000c1a4:	183ff926 	beq	r3,zero,1000c18c <__alt_data_end+0xf800c18c>
1000c1a8:	00000106 	br	1000c1b0 <strlen+0x78>
1000c1ac:	10800044 	addi	r2,r2,1
1000c1b0:	10c00007 	ldb	r3,0(r2)
1000c1b4:	183ffd1e 	bne	r3,zero,1000c1ac <__alt_data_end+0xf800c1ac>
1000c1b8:	1105c83a 	sub	r2,r2,r4
1000c1bc:	f800283a 	ret
1000c1c0:	2005883a 	mov	r2,r4
1000c1c4:	003fe706 	br	1000c164 <__alt_data_end+0xf800c164>
1000c1c8:	0005883a 	mov	r2,zero
1000c1cc:	f800283a 	ret

1000c1d0 <time>:
1000c1d0:	008400b4 	movhi	r2,4098
1000c1d4:	defffc04 	addi	sp,sp,-16
1000c1d8:	10af4504 	addi	r2,r2,-17132
1000c1dc:	dc000215 	stw	r16,8(sp)
1000c1e0:	2021883a 	mov	r16,r4
1000c1e4:	11000017 	ldw	r4,0(r2)
1000c1e8:	000d883a 	mov	r6,zero
1000c1ec:	d80b883a 	mov	r5,sp
1000c1f0:	dfc00315 	stw	ra,12(sp)
1000c1f4:	00110bc0 	call	100110bc <_gettimeofday_r>
1000c1f8:	10000716 	blt	r2,zero,1000c218 <time+0x48>
1000c1fc:	d8800017 	ldw	r2,0(sp)
1000c200:	80000126 	beq	r16,zero,1000c208 <time+0x38>
1000c204:	80800015 	stw	r2,0(r16)
1000c208:	dfc00317 	ldw	ra,12(sp)
1000c20c:	dc000217 	ldw	r16,8(sp)
1000c210:	dec00404 	addi	sp,sp,16
1000c214:	f800283a 	ret
1000c218:	00bfffc4 	movi	r2,-1
1000c21c:	003ffa06 	br	1000c208 <__alt_data_end+0xf800c208>

1000c220 <_times_r>:
1000c220:	2809883a 	mov	r4,r5
1000c224:	00173341 	jmpi	10017334 <times>

1000c228 <___vfprintf_internal_r>:
1000c228:	deffb804 	addi	sp,sp,-288
1000c22c:	dfc04715 	stw	ra,284(sp)
1000c230:	ddc04515 	stw	r23,276(sp)
1000c234:	dd404315 	stw	r21,268(sp)
1000c238:	d9002d15 	stw	r4,180(sp)
1000c23c:	282f883a 	mov	r23,r5
1000c240:	302b883a 	mov	r21,r6
1000c244:	d9c02e15 	stw	r7,184(sp)
1000c248:	df004615 	stw	fp,280(sp)
1000c24c:	dd804415 	stw	r22,272(sp)
1000c250:	dd004215 	stw	r20,264(sp)
1000c254:	dcc04115 	stw	r19,260(sp)
1000c258:	dc804015 	stw	r18,256(sp)
1000c25c:	dc403f15 	stw	r17,252(sp)
1000c260:	dc003e15 	stw	r16,248(sp)
1000c264:	00111c40 	call	100111c4 <_localeconv_r>
1000c268:	10800017 	ldw	r2,0(r2)
1000c26c:	1009883a 	mov	r4,r2
1000c270:	d8803415 	stw	r2,208(sp)
1000c274:	000c1380 	call	1000c138 <strlen>
1000c278:	d8803715 	stw	r2,220(sp)
1000c27c:	d8802d17 	ldw	r2,180(sp)
1000c280:	10000226 	beq	r2,zero,1000c28c <___vfprintf_internal_r+0x64>
1000c284:	10800e17 	ldw	r2,56(r2)
1000c288:	1000fb26 	beq	r2,zero,1000c678 <___vfprintf_internal_r+0x450>
1000c28c:	b880030b 	ldhu	r2,12(r23)
1000c290:	10c8000c 	andi	r3,r2,8192
1000c294:	1800061e 	bne	r3,zero,1000c2b0 <___vfprintf_internal_r+0x88>
1000c298:	b9001917 	ldw	r4,100(r23)
1000c29c:	00f7ffc4 	movi	r3,-8193
1000c2a0:	10880014 	ori	r2,r2,8192
1000c2a4:	20c6703a 	and	r3,r4,r3
1000c2a8:	b880030d 	sth	r2,12(r23)
1000c2ac:	b8c01915 	stw	r3,100(r23)
1000c2b0:	10c0020c 	andi	r3,r2,8
1000c2b4:	1800c326 	beq	r3,zero,1000c5c4 <___vfprintf_internal_r+0x39c>
1000c2b8:	b8c00417 	ldw	r3,16(r23)
1000c2bc:	1800c126 	beq	r3,zero,1000c5c4 <___vfprintf_internal_r+0x39c>
1000c2c0:	1080068c 	andi	r2,r2,26
1000c2c4:	00c00284 	movi	r3,10
1000c2c8:	10c0c626 	beq	r2,r3,1000c5e4 <___vfprintf_internal_r+0x3bc>
1000c2cc:	d8c00404 	addi	r3,sp,16
1000c2d0:	050400b4 	movhi	r20,4098
1000c2d4:	d9001e04 	addi	r4,sp,120
1000c2d8:	a5276784 	addi	r20,r20,-25186
1000c2dc:	d8c01e15 	stw	r3,120(sp)
1000c2e0:	d8002015 	stw	zero,128(sp)
1000c2e4:	d8001f15 	stw	zero,124(sp)
1000c2e8:	d8003315 	stw	zero,204(sp)
1000c2ec:	d8003615 	stw	zero,216(sp)
1000c2f0:	d8003815 	stw	zero,224(sp)
1000c2f4:	1811883a 	mov	r8,r3
1000c2f8:	d8003915 	stw	zero,228(sp)
1000c2fc:	d8003a15 	stw	zero,232(sp)
1000c300:	d8002f15 	stw	zero,188(sp)
1000c304:	d9002815 	stw	r4,160(sp)
1000c308:	a8800007 	ldb	r2,0(r21)
1000c30c:	10028b26 	beq	r2,zero,1000cd3c <___vfprintf_internal_r+0xb14>
1000c310:	00c00944 	movi	r3,37
1000c314:	a823883a 	mov	r17,r21
1000c318:	10c0021e 	bne	r2,r3,1000c324 <___vfprintf_internal_r+0xfc>
1000c31c:	00001406 	br	1000c370 <___vfprintf_internal_r+0x148>
1000c320:	10c00326 	beq	r2,r3,1000c330 <___vfprintf_internal_r+0x108>
1000c324:	8c400044 	addi	r17,r17,1
1000c328:	88800007 	ldb	r2,0(r17)
1000c32c:	103ffc1e 	bne	r2,zero,1000c320 <__alt_data_end+0xf800c320>
1000c330:	8d61c83a 	sub	r16,r17,r21
1000c334:	80000e26 	beq	r16,zero,1000c370 <___vfprintf_internal_r+0x148>
1000c338:	d8c02017 	ldw	r3,128(sp)
1000c33c:	d8801f17 	ldw	r2,124(sp)
1000c340:	45400015 	stw	r21,0(r8)
1000c344:	1c07883a 	add	r3,r3,r16
1000c348:	10800044 	addi	r2,r2,1
1000c34c:	d8c02015 	stw	r3,128(sp)
1000c350:	44000115 	stw	r16,4(r8)
1000c354:	d8801f15 	stw	r2,124(sp)
1000c358:	00c001c4 	movi	r3,7
1000c35c:	1880a916 	blt	r3,r2,1000c604 <___vfprintf_internal_r+0x3dc>
1000c360:	42000204 	addi	r8,r8,8
1000c364:	d9402f17 	ldw	r5,188(sp)
1000c368:	2c0b883a 	add	r5,r5,r16
1000c36c:	d9402f15 	stw	r5,188(sp)
1000c370:	88800007 	ldb	r2,0(r17)
1000c374:	1000aa26 	beq	r2,zero,1000c620 <___vfprintf_internal_r+0x3f8>
1000c378:	8d400044 	addi	r21,r17,1
1000c37c:	8c400047 	ldb	r17,1(r17)
1000c380:	0021883a 	mov	r16,zero
1000c384:	00bfffc4 	movi	r2,-1
1000c388:	0025883a 	mov	r18,zero
1000c38c:	dc002905 	stb	r16,164(sp)
1000c390:	d8002785 	stb	zero,158(sp)
1000c394:	d8002b05 	stb	zero,172(sp)
1000c398:	d8802a15 	stw	r2,168(sp)
1000c39c:	d8003115 	stw	zero,196(sp)
1000c3a0:	04c01604 	movi	r19,88
1000c3a4:	05800244 	movi	r22,9
1000c3a8:	9021883a 	mov	r16,r18
1000c3ac:	4039883a 	mov	fp,r8
1000c3b0:	ad400044 	addi	r21,r21,1
1000c3b4:	88bff804 	addi	r2,r17,-32
1000c3b8:	98833236 	bltu	r19,r2,1000d084 <___vfprintf_internal_r+0xe5c>
1000c3bc:	100490ba 	slli	r2,r2,2
1000c3c0:	00c40074 	movhi	r3,4097
1000c3c4:	18f0f504 	addi	r3,r3,-15404
1000c3c8:	10c5883a 	add	r2,r2,r3
1000c3cc:	10800017 	ldw	r2,0(r2)
1000c3d0:	1000683a 	jmp	r2
1000c3d4:	1000cf7c 	xorhi	zero,r2,829
1000c3d8:	1000d084 	addi	zero,r2,834
1000c3dc:	1000d084 	addi	zero,r2,834
1000c3e0:	1000cf9c 	xori	zero,r2,830
1000c3e4:	1000d084 	addi	zero,r2,834
1000c3e8:	1000d084 	addi	zero,r2,834
1000c3ec:	1000d084 	addi	zero,r2,834
1000c3f0:	1000d084 	addi	zero,r2,834
1000c3f4:	1000d084 	addi	zero,r2,834
1000c3f8:	1000d084 	addi	zero,r2,834
1000c3fc:	1000c684 	addi	zero,r2,794
1000c400:	1000ce8c 	andi	zero,r2,826
1000c404:	1000d084 	addi	zero,r2,834
1000c408:	1000c548 	cmpgei	zero,r2,789
1000c40c:	1000c6a8 	cmpgeui	zero,r2,794
1000c410:	1000d084 	addi	zero,r2,834
1000c414:	1000c6f8 	rdprs	zero,r2,795
1000c418:	1000c704 	addi	zero,r2,796
1000c41c:	1000c704 	addi	zero,r2,796
1000c420:	1000c704 	addi	zero,r2,796
1000c424:	1000c704 	addi	zero,r2,796
1000c428:	1000c704 	addi	zero,r2,796
1000c42c:	1000c704 	addi	zero,r2,796
1000c430:	1000c704 	addi	zero,r2,796
1000c434:	1000c704 	addi	zero,r2,796
1000c438:	1000c704 	addi	zero,r2,796
1000c43c:	1000d084 	addi	zero,r2,834
1000c440:	1000d084 	addi	zero,r2,834
1000c444:	1000d084 	addi	zero,r2,834
1000c448:	1000d084 	addi	zero,r2,834
1000c44c:	1000d084 	addi	zero,r2,834
1000c450:	1000d084 	addi	zero,r2,834
1000c454:	1000d084 	addi	zero,r2,834
1000c458:	1000d084 	addi	zero,r2,834
1000c45c:	1000d084 	addi	zero,r2,834
1000c460:	1000d084 	addi	zero,r2,834
1000c464:	1000c740 	call	11000c74 <_gp+0xfdcf7c>
1000c468:	1000c808 	cmpgei	zero,r2,800
1000c46c:	1000d084 	addi	zero,r2,834
1000c470:	1000c808 	cmpgei	zero,r2,800
1000c474:	1000d084 	addi	zero,r2,834
1000c478:	1000d084 	addi	zero,r2,834
1000c47c:	1000d084 	addi	zero,r2,834
1000c480:	1000d084 	addi	zero,r2,834
1000c484:	1000c8b4 	orhi	zero,r2,802
1000c488:	1000d084 	addi	zero,r2,834
1000c48c:	1000d084 	addi	zero,r2,834
1000c490:	1000c8c0 	call	11000c8c <_gp+0xfdcf94>
1000c494:	1000d084 	addi	zero,r2,834
1000c498:	1000d084 	addi	zero,r2,834
1000c49c:	1000d084 	addi	zero,r2,834
1000c4a0:	1000d084 	addi	zero,r2,834
1000c4a4:	1000d084 	addi	zero,r2,834
1000c4a8:	1000cd44 	addi	zero,r2,821
1000c4ac:	1000d084 	addi	zero,r2,834
1000c4b0:	1000d084 	addi	zero,r2,834
1000c4b4:	1000cdb0 	cmpltui	zero,r2,822
1000c4b8:	1000d084 	addi	zero,r2,834
1000c4bc:	1000d084 	addi	zero,r2,834
1000c4c0:	1000d084 	addi	zero,r2,834
1000c4c4:	1000d084 	addi	zero,r2,834
1000c4c8:	1000d084 	addi	zero,r2,834
1000c4cc:	1000d084 	addi	zero,r2,834
1000c4d0:	1000d084 	addi	zero,r2,834
1000c4d4:	1000d084 	addi	zero,r2,834
1000c4d8:	1000d084 	addi	zero,r2,834
1000c4dc:	1000d084 	addi	zero,r2,834
1000c4e0:	1000d028 	cmpgeui	zero,r2,832
1000c4e4:	1000cfa8 	cmpgeui	zero,r2,830
1000c4e8:	1000c808 	cmpgei	zero,r2,800
1000c4ec:	1000c808 	cmpgei	zero,r2,800
1000c4f0:	1000c808 	cmpgei	zero,r2,800
1000c4f4:	1000cfc8 	cmpgei	zero,r2,831
1000c4f8:	1000cfa8 	cmpgeui	zero,r2,830
1000c4fc:	1000d084 	addi	zero,r2,834
1000c500:	1000d084 	addi	zero,r2,834
1000c504:	1000cfd4 	ori	zero,r2,831
1000c508:	1000d084 	addi	zero,r2,834
1000c50c:	1000cfe8 	cmpgeui	zero,r2,831
1000c510:	1000ce6c 	andhi	zero,r2,825
1000c514:	1000c554 	ori	zero,r2,789
1000c518:	1000cea4 	muli	zero,r2,826
1000c51c:	1000d084 	addi	zero,r2,834
1000c520:	1000ceb0 	cmpltui	zero,r2,826
1000c524:	1000d084 	addi	zero,r2,834
1000c528:	1000cf14 	ori	zero,r2,828
1000c52c:	1000d084 	addi	zero,r2,834
1000c530:	1000d084 	addi	zero,r2,834
1000c534:	1000cf34 	orhi	zero,r2,828
1000c538:	d8c03117 	ldw	r3,196(sp)
1000c53c:	d8802e15 	stw	r2,184(sp)
1000c540:	00c7c83a 	sub	r3,zero,r3
1000c544:	d8c03115 	stw	r3,196(sp)
1000c548:	84000114 	ori	r16,r16,4
1000c54c:	ac400007 	ldb	r17,0(r21)
1000c550:	003f9706 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000c554:	00800c04 	movi	r2,48
1000c558:	d8802705 	stb	r2,156(sp)
1000c55c:	00801e04 	movi	r2,120
1000c560:	d8802745 	stb	r2,157(sp)
1000c564:	d9002a17 	ldw	r4,168(sp)
1000c568:	d8802e17 	ldw	r2,184(sp)
1000c56c:	d8002785 	stb	zero,158(sp)
1000c570:	e011883a 	mov	r8,fp
1000c574:	10c00104 	addi	r3,r2,4
1000c578:	14c00017 	ldw	r19,0(r2)
1000c57c:	002d883a 	mov	r22,zero
1000c580:	80800094 	ori	r2,r16,2
1000c584:	2002ca16 	blt	r4,zero,1000d0b0 <___vfprintf_internal_r+0xe88>
1000c588:	00bfdfc4 	movi	r2,-129
1000c58c:	80a4703a 	and	r18,r16,r2
1000c590:	d8c02e15 	stw	r3,184(sp)
1000c594:	94800094 	ori	r18,r18,2
1000c598:	9802b41e 	bne	r19,zero,1000d06c <___vfprintf_internal_r+0xe44>
1000c59c:	014400b4 	movhi	r5,4098
1000c5a0:	29676004 	addi	r5,r5,-25216
1000c5a4:	d9403915 	stw	r5,228(sp)
1000c5a8:	04401e04 	movi	r17,120
1000c5ac:	d8802a17 	ldw	r2,168(sp)
1000c5b0:	0039883a 	mov	fp,zero
1000c5b4:	1001fa26 	beq	r2,zero,1000cda0 <___vfprintf_internal_r+0xb78>
1000c5b8:	0027883a 	mov	r19,zero
1000c5bc:	002d883a 	mov	r22,zero
1000c5c0:	00021906 	br	1000ce28 <___vfprintf_internal_r+0xc00>
1000c5c4:	d9002d17 	ldw	r4,180(sp)
1000c5c8:	b80b883a 	mov	r5,r23
1000c5cc:	000e5dc0 	call	1000e5dc <__swsetup_r>
1000c5d0:	1005dc1e 	bne	r2,zero,1000dd44 <___vfprintf_internal_r+0x1b1c>
1000c5d4:	b880030b 	ldhu	r2,12(r23)
1000c5d8:	00c00284 	movi	r3,10
1000c5dc:	1080068c 	andi	r2,r2,26
1000c5e0:	10ff3a1e 	bne	r2,r3,1000c2cc <__alt_data_end+0xf800c2cc>
1000c5e4:	b880038f 	ldh	r2,14(r23)
1000c5e8:	103f3816 	blt	r2,zero,1000c2cc <__alt_data_end+0xf800c2cc>
1000c5ec:	d9c02e17 	ldw	r7,184(sp)
1000c5f0:	d9002d17 	ldw	r4,180(sp)
1000c5f4:	a80d883a 	mov	r6,r21
1000c5f8:	b80b883a 	mov	r5,r23
1000c5fc:	000e5200 	call	1000e520 <__sbprintf>
1000c600:	00001106 	br	1000c648 <___vfprintf_internal_r+0x420>
1000c604:	d9002d17 	ldw	r4,180(sp)
1000c608:	d9801e04 	addi	r6,sp,120
1000c60c:	b80b883a 	mov	r5,r23
1000c610:	0013a640 	call	10013a64 <__sprint_r>
1000c614:	1000081e 	bne	r2,zero,1000c638 <___vfprintf_internal_r+0x410>
1000c618:	da000404 	addi	r8,sp,16
1000c61c:	003f5106 	br	1000c364 <__alt_data_end+0xf800c364>
1000c620:	d8802017 	ldw	r2,128(sp)
1000c624:	10000426 	beq	r2,zero,1000c638 <___vfprintf_internal_r+0x410>
1000c628:	d9002d17 	ldw	r4,180(sp)
1000c62c:	d9801e04 	addi	r6,sp,120
1000c630:	b80b883a 	mov	r5,r23
1000c634:	0013a640 	call	10013a64 <__sprint_r>
1000c638:	b880030b 	ldhu	r2,12(r23)
1000c63c:	1080100c 	andi	r2,r2,64
1000c640:	1005c01e 	bne	r2,zero,1000dd44 <___vfprintf_internal_r+0x1b1c>
1000c644:	d8802f17 	ldw	r2,188(sp)
1000c648:	dfc04717 	ldw	ra,284(sp)
1000c64c:	df004617 	ldw	fp,280(sp)
1000c650:	ddc04517 	ldw	r23,276(sp)
1000c654:	dd804417 	ldw	r22,272(sp)
1000c658:	dd404317 	ldw	r21,268(sp)
1000c65c:	dd004217 	ldw	r20,264(sp)
1000c660:	dcc04117 	ldw	r19,260(sp)
1000c664:	dc804017 	ldw	r18,256(sp)
1000c668:	dc403f17 	ldw	r17,252(sp)
1000c66c:	dc003e17 	ldw	r16,248(sp)
1000c670:	dec04804 	addi	sp,sp,288
1000c674:	f800283a 	ret
1000c678:	d9002d17 	ldw	r4,180(sp)
1000c67c:	00105e80 	call	100105e8 <__sinit>
1000c680:	003f0206 	br	1000c28c <__alt_data_end+0xf800c28c>
1000c684:	d9002e17 	ldw	r4,184(sp)
1000c688:	d9402e17 	ldw	r5,184(sp)
1000c68c:	21000017 	ldw	r4,0(r4)
1000c690:	28800104 	addi	r2,r5,4
1000c694:	d9003115 	stw	r4,196(sp)
1000c698:	203fa716 	blt	r4,zero,1000c538 <__alt_data_end+0xf800c538>
1000c69c:	d8802e15 	stw	r2,184(sp)
1000c6a0:	ac400007 	ldb	r17,0(r21)
1000c6a4:	003f4206 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000c6a8:	ac400007 	ldb	r17,0(r21)
1000c6ac:	01000a84 	movi	r4,42
1000c6b0:	a8c00044 	addi	r3,r21,1
1000c6b4:	89075826 	beq	r17,r4,1000e418 <___vfprintf_internal_r+0x21f0>
1000c6b8:	8cbff404 	addi	r18,r17,-48
1000c6bc:	b486ae36 	bltu	r22,r18,1000e178 <___vfprintf_internal_r+0x1f50>
1000c6c0:	0009883a 	mov	r4,zero
1000c6c4:	1823883a 	mov	r17,r3
1000c6c8:	01400284 	movi	r5,10
1000c6cc:	00085800 	call	10008580 <__mulsi3>
1000c6d0:	88c00007 	ldb	r3,0(r17)
1000c6d4:	1489883a 	add	r4,r2,r18
1000c6d8:	8d400044 	addi	r21,r17,1
1000c6dc:	1cbff404 	addi	r18,r3,-48
1000c6e0:	a823883a 	mov	r17,r21
1000c6e4:	b4bff82e 	bgeu	r22,r18,1000c6c8 <__alt_data_end+0xf800c6c8>
1000c6e8:	1823883a 	mov	r17,r3
1000c6ec:	2005f616 	blt	r4,zero,1000dec8 <___vfprintf_internal_r+0x1ca0>
1000c6f0:	d9002a15 	stw	r4,168(sp)
1000c6f4:	003f2f06 	br	1000c3b4 <__alt_data_end+0xf800c3b4>
1000c6f8:	84002014 	ori	r16,r16,128
1000c6fc:	ac400007 	ldb	r17,0(r21)
1000c700:	003f2b06 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000c704:	8cbff404 	addi	r18,r17,-48
1000c708:	d8003115 	stw	zero,196(sp)
1000c70c:	0009883a 	mov	r4,zero
1000c710:	a823883a 	mov	r17,r21
1000c714:	01400284 	movi	r5,10
1000c718:	00085800 	call	10008580 <__mulsi3>
1000c71c:	88c00007 	ldb	r3,0(r17)
1000c720:	9089883a 	add	r4,r18,r2
1000c724:	ad400044 	addi	r21,r21,1
1000c728:	1cbff404 	addi	r18,r3,-48
1000c72c:	a823883a 	mov	r17,r21
1000c730:	b4bff82e 	bgeu	r22,r18,1000c714 <__alt_data_end+0xf800c714>
1000c734:	1823883a 	mov	r17,r3
1000c738:	d9003115 	stw	r4,196(sp)
1000c73c:	003f1d06 	br	1000c3b4 <__alt_data_end+0xf800c3b4>
1000c740:	8025883a 	mov	r18,r16
1000c744:	dc002903 	ldbu	r16,164(sp)
1000c748:	e011883a 	mov	r8,fp
1000c74c:	84003fcc 	andi	r16,r16,255
1000c750:	8007531e 	bne	r16,zero,1000e4a0 <___vfprintf_internal_r+0x2278>
1000c754:	94800414 	ori	r18,r18,16
1000c758:	9080080c 	andi	r2,r18,32
1000c75c:	1003a326 	beq	r2,zero,1000d5ec <___vfprintf_internal_r+0x13c4>
1000c760:	d9002e17 	ldw	r4,184(sp)
1000c764:	20800117 	ldw	r2,4(r4)
1000c768:	24c00017 	ldw	r19,0(r4)
1000c76c:	21000204 	addi	r4,r4,8
1000c770:	d9002e15 	stw	r4,184(sp)
1000c774:	102d883a 	mov	r22,r2
1000c778:	10047316 	blt	r2,zero,1000d948 <___vfprintf_internal_r+0x1720>
1000c77c:	d9002a17 	ldw	r4,168(sp)
1000c780:	df002783 	ldbu	fp,158(sp)
1000c784:	2003e416 	blt	r4,zero,1000d718 <___vfprintf_internal_r+0x14f0>
1000c788:	00ffdfc4 	movi	r3,-129
1000c78c:	9d84b03a 	or	r2,r19,r22
1000c790:	90e4703a 	and	r18,r18,r3
1000c794:	10018026 	beq	r2,zero,1000cd98 <___vfprintf_internal_r+0xb70>
1000c798:	b003ab26 	beq	r22,zero,1000d648 <___vfprintf_internal_r+0x1420>
1000c79c:	dc402915 	stw	r17,164(sp)
1000c7a0:	dc001e04 	addi	r16,sp,120
1000c7a4:	b023883a 	mov	r17,r22
1000c7a8:	402d883a 	mov	r22,r8
1000c7ac:	9809883a 	mov	r4,r19
1000c7b0:	880b883a 	mov	r5,r17
1000c7b4:	01800284 	movi	r6,10
1000c7b8:	000f883a 	mov	r7,zero
1000c7bc:	0015fa80 	call	10015fa8 <__umoddi3>
1000c7c0:	10800c04 	addi	r2,r2,48
1000c7c4:	843fffc4 	addi	r16,r16,-1
1000c7c8:	9809883a 	mov	r4,r19
1000c7cc:	880b883a 	mov	r5,r17
1000c7d0:	80800005 	stb	r2,0(r16)
1000c7d4:	01800284 	movi	r6,10
1000c7d8:	000f883a 	mov	r7,zero
1000c7dc:	00159ac0 	call	100159ac <__udivdi3>
1000c7e0:	1027883a 	mov	r19,r2
1000c7e4:	10c4b03a 	or	r2,r2,r3
1000c7e8:	1823883a 	mov	r17,r3
1000c7ec:	103fef1e 	bne	r2,zero,1000c7ac <__alt_data_end+0xf800c7ac>
1000c7f0:	d8c02817 	ldw	r3,160(sp)
1000c7f4:	dc402917 	ldw	r17,164(sp)
1000c7f8:	b011883a 	mov	r8,r22
1000c7fc:	1c07c83a 	sub	r3,r3,r16
1000c800:	d8c02b15 	stw	r3,172(sp)
1000c804:	00005f06 	br	1000c984 <___vfprintf_internal_r+0x75c>
1000c808:	8025883a 	mov	r18,r16
1000c80c:	dc002903 	ldbu	r16,164(sp)
1000c810:	e011883a 	mov	r8,fp
1000c814:	84003fcc 	andi	r16,r16,255
1000c818:	80071e1e 	bne	r16,zero,1000e494 <___vfprintf_internal_r+0x226c>
1000c81c:	9080020c 	andi	r2,r18,8
1000c820:	1004af26 	beq	r2,zero,1000dae0 <___vfprintf_internal_r+0x18b8>
1000c824:	d9002e17 	ldw	r4,184(sp)
1000c828:	d9402e17 	ldw	r5,184(sp)
1000c82c:	d8802e17 	ldw	r2,184(sp)
1000c830:	21000017 	ldw	r4,0(r4)
1000c834:	29400117 	ldw	r5,4(r5)
1000c838:	10800204 	addi	r2,r2,8
1000c83c:	d9003615 	stw	r4,216(sp)
1000c840:	d9403815 	stw	r5,224(sp)
1000c844:	d8802e15 	stw	r2,184(sp)
1000c848:	d9003617 	ldw	r4,216(sp)
1000c84c:	d9403817 	ldw	r5,224(sp)
1000c850:	da003d15 	stw	r8,244(sp)
1000c854:	04000044 	movi	r16,1
1000c858:	00136880 	call	10013688 <__fpclassifyd>
1000c85c:	da003d17 	ldw	r8,244(sp)
1000c860:	1404441e 	bne	r2,r16,1000d974 <___vfprintf_internal_r+0x174c>
1000c864:	d9003617 	ldw	r4,216(sp)
1000c868:	d9403817 	ldw	r5,224(sp)
1000c86c:	000d883a 	mov	r6,zero
1000c870:	000f883a 	mov	r7,zero
1000c874:	001656c0 	call	1001656c <__ledf2>
1000c878:	da003d17 	ldw	r8,244(sp)
1000c87c:	1005e316 	blt	r2,zero,1000e00c <___vfprintf_internal_r+0x1de4>
1000c880:	df002783 	ldbu	fp,158(sp)
1000c884:	008011c4 	movi	r2,71
1000c888:	1445580e 	bge	r2,r17,1000ddec <___vfprintf_internal_r+0x1bc4>
1000c88c:	040400b4 	movhi	r16,4098
1000c890:	84275804 	addi	r16,r16,-25248
1000c894:	00c000c4 	movi	r3,3
1000c898:	00bfdfc4 	movi	r2,-129
1000c89c:	d8c02915 	stw	r3,164(sp)
1000c8a0:	90a4703a 	and	r18,r18,r2
1000c8a4:	d8c02b15 	stw	r3,172(sp)
1000c8a8:	d8002a15 	stw	zero,168(sp)
1000c8ac:	d8003215 	stw	zero,200(sp)
1000c8b0:	00003a06 	br	1000c99c <___vfprintf_internal_r+0x774>
1000c8b4:	84000214 	ori	r16,r16,8
1000c8b8:	ac400007 	ldb	r17,0(r21)
1000c8bc:	003ebc06 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000c8c0:	8025883a 	mov	r18,r16
1000c8c4:	dc002903 	ldbu	r16,164(sp)
1000c8c8:	e011883a 	mov	r8,fp
1000c8cc:	84003fcc 	andi	r16,r16,255
1000c8d0:	8007001e 	bne	r16,zero,1000e4d4 <___vfprintf_internal_r+0x22ac>
1000c8d4:	94800414 	ori	r18,r18,16
1000c8d8:	9080080c 	andi	r2,r18,32
1000c8dc:	1002fa26 	beq	r2,zero,1000d4c8 <___vfprintf_internal_r+0x12a0>
1000c8e0:	d9002e17 	ldw	r4,184(sp)
1000c8e4:	d9402a17 	ldw	r5,168(sp)
1000c8e8:	d8002785 	stb	zero,158(sp)
1000c8ec:	20800204 	addi	r2,r4,8
1000c8f0:	24c00017 	ldw	r19,0(r4)
1000c8f4:	25800117 	ldw	r22,4(r4)
1000c8f8:	2804b116 	blt	r5,zero,1000dbc0 <___vfprintf_internal_r+0x1998>
1000c8fc:	013fdfc4 	movi	r4,-129
1000c900:	9d86b03a 	or	r3,r19,r22
1000c904:	d8802e15 	stw	r2,184(sp)
1000c908:	9124703a 	and	r18,r18,r4
1000c90c:	1802fb1e 	bne	r3,zero,1000d4fc <___vfprintf_internal_r+0x12d4>
1000c910:	d8c02a17 	ldw	r3,168(sp)
1000c914:	0039883a 	mov	fp,zero
1000c918:	1805e526 	beq	r3,zero,1000e0b0 <___vfprintf_internal_r+0x1e88>
1000c91c:	0027883a 	mov	r19,zero
1000c920:	002d883a 	mov	r22,zero
1000c924:	dc001e04 	addi	r16,sp,120
1000c928:	9806d0fa 	srli	r3,r19,3
1000c92c:	b008977a 	slli	r4,r22,29
1000c930:	b02cd0fa 	srli	r22,r22,3
1000c934:	9cc001cc 	andi	r19,r19,7
1000c938:	98800c04 	addi	r2,r19,48
1000c93c:	843fffc4 	addi	r16,r16,-1
1000c940:	20e6b03a 	or	r19,r4,r3
1000c944:	80800005 	stb	r2,0(r16)
1000c948:	9d86b03a 	or	r3,r19,r22
1000c94c:	183ff61e 	bne	r3,zero,1000c928 <__alt_data_end+0xf800c928>
1000c950:	90c0004c 	andi	r3,r18,1
1000c954:	18014126 	beq	r3,zero,1000ce5c <___vfprintf_internal_r+0xc34>
1000c958:	10803fcc 	andi	r2,r2,255
1000c95c:	1080201c 	xori	r2,r2,128
1000c960:	10bfe004 	addi	r2,r2,-128
1000c964:	00c00c04 	movi	r3,48
1000c968:	10c13c26 	beq	r2,r3,1000ce5c <___vfprintf_internal_r+0xc34>
1000c96c:	80ffffc5 	stb	r3,-1(r16)
1000c970:	d8c02817 	ldw	r3,160(sp)
1000c974:	80bfffc4 	addi	r2,r16,-1
1000c978:	1021883a 	mov	r16,r2
1000c97c:	1887c83a 	sub	r3,r3,r2
1000c980:	d8c02b15 	stw	r3,172(sp)
1000c984:	d8802b17 	ldw	r2,172(sp)
1000c988:	d9002a17 	ldw	r4,168(sp)
1000c98c:	1100010e 	bge	r2,r4,1000c994 <___vfprintf_internal_r+0x76c>
1000c990:	2005883a 	mov	r2,r4
1000c994:	d8802915 	stw	r2,164(sp)
1000c998:	d8003215 	stw	zero,200(sp)
1000c99c:	e7003fcc 	andi	fp,fp,255
1000c9a0:	e700201c 	xori	fp,fp,128
1000c9a4:	e73fe004 	addi	fp,fp,-128
1000c9a8:	e0000326 	beq	fp,zero,1000c9b8 <___vfprintf_internal_r+0x790>
1000c9ac:	d8c02917 	ldw	r3,164(sp)
1000c9b0:	18c00044 	addi	r3,r3,1
1000c9b4:	d8c02915 	stw	r3,164(sp)
1000c9b8:	90c0008c 	andi	r3,r18,2
1000c9bc:	d8c02c15 	stw	r3,176(sp)
1000c9c0:	18000326 	beq	r3,zero,1000c9d0 <___vfprintf_internal_r+0x7a8>
1000c9c4:	d8c02917 	ldw	r3,164(sp)
1000c9c8:	18c00084 	addi	r3,r3,2
1000c9cc:	d8c02915 	stw	r3,164(sp)
1000c9d0:	90c0210c 	andi	r3,r18,132
1000c9d4:	d8c03015 	stw	r3,192(sp)
1000c9d8:	1801c51e 	bne	r3,zero,1000d0f0 <___vfprintf_internal_r+0xec8>
1000c9dc:	d9003117 	ldw	r4,196(sp)
1000c9e0:	d8c02917 	ldw	r3,164(sp)
1000c9e4:	20e7c83a 	sub	r19,r4,r3
1000c9e8:	04c1c10e 	bge	zero,r19,1000d0f0 <___vfprintf_internal_r+0xec8>
1000c9ec:	02400404 	movi	r9,16
1000c9f0:	d8c02017 	ldw	r3,128(sp)
1000c9f4:	d8801f17 	ldw	r2,124(sp)
1000c9f8:	4cc52f0e 	bge	r9,r19,1000deb8 <___vfprintf_internal_r+0x1c90>
1000c9fc:	014400b4 	movhi	r5,4098
1000ca00:	29676b84 	addi	r5,r5,-25170
1000ca04:	dc403b15 	stw	r17,236(sp)
1000ca08:	d9403515 	stw	r5,212(sp)
1000ca0c:	9823883a 	mov	r17,r19
1000ca10:	482d883a 	mov	r22,r9
1000ca14:	9027883a 	mov	r19,r18
1000ca18:	070001c4 	movi	fp,7
1000ca1c:	8025883a 	mov	r18,r16
1000ca20:	dc002d17 	ldw	r16,180(sp)
1000ca24:	00000306 	br	1000ca34 <___vfprintf_internal_r+0x80c>
1000ca28:	8c7ffc04 	addi	r17,r17,-16
1000ca2c:	42000204 	addi	r8,r8,8
1000ca30:	b440130e 	bge	r22,r17,1000ca80 <___vfprintf_internal_r+0x858>
1000ca34:	010400b4 	movhi	r4,4098
1000ca38:	18c00404 	addi	r3,r3,16
1000ca3c:	10800044 	addi	r2,r2,1
1000ca40:	21276b84 	addi	r4,r4,-25170
1000ca44:	41000015 	stw	r4,0(r8)
1000ca48:	45800115 	stw	r22,4(r8)
1000ca4c:	d8c02015 	stw	r3,128(sp)
1000ca50:	d8801f15 	stw	r2,124(sp)
1000ca54:	e0bff40e 	bge	fp,r2,1000ca28 <__alt_data_end+0xf800ca28>
1000ca58:	d9801e04 	addi	r6,sp,120
1000ca5c:	b80b883a 	mov	r5,r23
1000ca60:	8009883a 	mov	r4,r16
1000ca64:	0013a640 	call	10013a64 <__sprint_r>
1000ca68:	103ef31e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000ca6c:	8c7ffc04 	addi	r17,r17,-16
1000ca70:	d8c02017 	ldw	r3,128(sp)
1000ca74:	d8801f17 	ldw	r2,124(sp)
1000ca78:	da000404 	addi	r8,sp,16
1000ca7c:	b47fed16 	blt	r22,r17,1000ca34 <__alt_data_end+0xf800ca34>
1000ca80:	9021883a 	mov	r16,r18
1000ca84:	9825883a 	mov	r18,r19
1000ca88:	8827883a 	mov	r19,r17
1000ca8c:	dc403b17 	ldw	r17,236(sp)
1000ca90:	d9403517 	ldw	r5,212(sp)
1000ca94:	98c7883a 	add	r3,r19,r3
1000ca98:	10800044 	addi	r2,r2,1
1000ca9c:	41400015 	stw	r5,0(r8)
1000caa0:	44c00115 	stw	r19,4(r8)
1000caa4:	d8c02015 	stw	r3,128(sp)
1000caa8:	d8801f15 	stw	r2,124(sp)
1000caac:	010001c4 	movi	r4,7
1000cab0:	2082c516 	blt	r4,r2,1000d5c8 <___vfprintf_internal_r+0x13a0>
1000cab4:	df002787 	ldb	fp,158(sp)
1000cab8:	42000204 	addi	r8,r8,8
1000cabc:	e0000c26 	beq	fp,zero,1000caf0 <___vfprintf_internal_r+0x8c8>
1000cac0:	d8801f17 	ldw	r2,124(sp)
1000cac4:	d9002784 	addi	r4,sp,158
1000cac8:	18c00044 	addi	r3,r3,1
1000cacc:	10800044 	addi	r2,r2,1
1000cad0:	41000015 	stw	r4,0(r8)
1000cad4:	01000044 	movi	r4,1
1000cad8:	41000115 	stw	r4,4(r8)
1000cadc:	d8c02015 	stw	r3,128(sp)
1000cae0:	d8801f15 	stw	r2,124(sp)
1000cae4:	010001c4 	movi	r4,7
1000cae8:	20825e16 	blt	r4,r2,1000d464 <___vfprintf_internal_r+0x123c>
1000caec:	42000204 	addi	r8,r8,8
1000caf0:	d8802c17 	ldw	r2,176(sp)
1000caf4:	10000c26 	beq	r2,zero,1000cb28 <___vfprintf_internal_r+0x900>
1000caf8:	d8801f17 	ldw	r2,124(sp)
1000cafc:	d9002704 	addi	r4,sp,156
1000cb00:	18c00084 	addi	r3,r3,2
1000cb04:	10800044 	addi	r2,r2,1
1000cb08:	41000015 	stw	r4,0(r8)
1000cb0c:	01000084 	movi	r4,2
1000cb10:	41000115 	stw	r4,4(r8)
1000cb14:	d8c02015 	stw	r3,128(sp)
1000cb18:	d8801f15 	stw	r2,124(sp)
1000cb1c:	010001c4 	movi	r4,7
1000cb20:	20825816 	blt	r4,r2,1000d484 <___vfprintf_internal_r+0x125c>
1000cb24:	42000204 	addi	r8,r8,8
1000cb28:	d9003017 	ldw	r4,192(sp)
1000cb2c:	00802004 	movi	r2,128
1000cb30:	2081bb26 	beq	r4,r2,1000d220 <___vfprintf_internal_r+0xff8>
1000cb34:	d9402a17 	ldw	r5,168(sp)
1000cb38:	d8802b17 	ldw	r2,172(sp)
1000cb3c:	28adc83a 	sub	r22,r5,r2
1000cb40:	0580310e 	bge	zero,r22,1000cc08 <___vfprintf_internal_r+0x9e0>
1000cb44:	07000404 	movi	fp,16
1000cb48:	d8801f17 	ldw	r2,124(sp)
1000cb4c:	e584360e 	bge	fp,r22,1000dc28 <___vfprintf_internal_r+0x1a00>
1000cb50:	014400b4 	movhi	r5,4098
1000cb54:	29676784 	addi	r5,r5,-25186
1000cb58:	dc402a15 	stw	r17,168(sp)
1000cb5c:	d9402c15 	stw	r5,176(sp)
1000cb60:	b023883a 	mov	r17,r22
1000cb64:	04c001c4 	movi	r19,7
1000cb68:	a82d883a 	mov	r22,r21
1000cb6c:	902b883a 	mov	r21,r18
1000cb70:	8025883a 	mov	r18,r16
1000cb74:	dc002d17 	ldw	r16,180(sp)
1000cb78:	00000306 	br	1000cb88 <___vfprintf_internal_r+0x960>
1000cb7c:	8c7ffc04 	addi	r17,r17,-16
1000cb80:	42000204 	addi	r8,r8,8
1000cb84:	e440110e 	bge	fp,r17,1000cbcc <___vfprintf_internal_r+0x9a4>
1000cb88:	18c00404 	addi	r3,r3,16
1000cb8c:	10800044 	addi	r2,r2,1
1000cb90:	45000015 	stw	r20,0(r8)
1000cb94:	47000115 	stw	fp,4(r8)
1000cb98:	d8c02015 	stw	r3,128(sp)
1000cb9c:	d8801f15 	stw	r2,124(sp)
1000cba0:	98bff60e 	bge	r19,r2,1000cb7c <__alt_data_end+0xf800cb7c>
1000cba4:	d9801e04 	addi	r6,sp,120
1000cba8:	b80b883a 	mov	r5,r23
1000cbac:	8009883a 	mov	r4,r16
1000cbb0:	0013a640 	call	10013a64 <__sprint_r>
1000cbb4:	103ea01e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000cbb8:	8c7ffc04 	addi	r17,r17,-16
1000cbbc:	d8c02017 	ldw	r3,128(sp)
1000cbc0:	d8801f17 	ldw	r2,124(sp)
1000cbc4:	da000404 	addi	r8,sp,16
1000cbc8:	e47fef16 	blt	fp,r17,1000cb88 <__alt_data_end+0xf800cb88>
1000cbcc:	9021883a 	mov	r16,r18
1000cbd0:	a825883a 	mov	r18,r21
1000cbd4:	b02b883a 	mov	r21,r22
1000cbd8:	882d883a 	mov	r22,r17
1000cbdc:	dc402a17 	ldw	r17,168(sp)
1000cbe0:	d9002c17 	ldw	r4,176(sp)
1000cbe4:	1d87883a 	add	r3,r3,r22
1000cbe8:	10800044 	addi	r2,r2,1
1000cbec:	41000015 	stw	r4,0(r8)
1000cbf0:	45800115 	stw	r22,4(r8)
1000cbf4:	d8c02015 	stw	r3,128(sp)
1000cbf8:	d8801f15 	stw	r2,124(sp)
1000cbfc:	010001c4 	movi	r4,7
1000cc00:	20821016 	blt	r4,r2,1000d444 <___vfprintf_internal_r+0x121c>
1000cc04:	42000204 	addi	r8,r8,8
1000cc08:	9080400c 	andi	r2,r18,256
1000cc0c:	10013a1e 	bne	r2,zero,1000d0f8 <___vfprintf_internal_r+0xed0>
1000cc10:	d9402b17 	ldw	r5,172(sp)
1000cc14:	d8801f17 	ldw	r2,124(sp)
1000cc18:	44000015 	stw	r16,0(r8)
1000cc1c:	1947883a 	add	r3,r3,r5
1000cc20:	10800044 	addi	r2,r2,1
1000cc24:	41400115 	stw	r5,4(r8)
1000cc28:	d8c02015 	stw	r3,128(sp)
1000cc2c:	d8801f15 	stw	r2,124(sp)
1000cc30:	010001c4 	movi	r4,7
1000cc34:	2081f516 	blt	r4,r2,1000d40c <___vfprintf_internal_r+0x11e4>
1000cc38:	42000204 	addi	r8,r8,8
1000cc3c:	9480010c 	andi	r18,r18,4
1000cc40:	90003226 	beq	r18,zero,1000cd0c <___vfprintf_internal_r+0xae4>
1000cc44:	d9403117 	ldw	r5,196(sp)
1000cc48:	d8802917 	ldw	r2,164(sp)
1000cc4c:	28a1c83a 	sub	r16,r5,r2
1000cc50:	04002e0e 	bge	zero,r16,1000cd0c <___vfprintf_internal_r+0xae4>
1000cc54:	04400404 	movi	r17,16
1000cc58:	d8801f17 	ldw	r2,124(sp)
1000cc5c:	8c04c40e 	bge	r17,r16,1000df70 <___vfprintf_internal_r+0x1d48>
1000cc60:	014400b4 	movhi	r5,4098
1000cc64:	29676b84 	addi	r5,r5,-25170
1000cc68:	d9403515 	stw	r5,212(sp)
1000cc6c:	048001c4 	movi	r18,7
1000cc70:	dcc02d17 	ldw	r19,180(sp)
1000cc74:	00000306 	br	1000cc84 <___vfprintf_internal_r+0xa5c>
1000cc78:	843ffc04 	addi	r16,r16,-16
1000cc7c:	42000204 	addi	r8,r8,8
1000cc80:	8c00130e 	bge	r17,r16,1000ccd0 <___vfprintf_internal_r+0xaa8>
1000cc84:	010400b4 	movhi	r4,4098
1000cc88:	18c00404 	addi	r3,r3,16
1000cc8c:	10800044 	addi	r2,r2,1
1000cc90:	21276b84 	addi	r4,r4,-25170
1000cc94:	41000015 	stw	r4,0(r8)
1000cc98:	44400115 	stw	r17,4(r8)
1000cc9c:	d8c02015 	stw	r3,128(sp)
1000cca0:	d8801f15 	stw	r2,124(sp)
1000cca4:	90bff40e 	bge	r18,r2,1000cc78 <__alt_data_end+0xf800cc78>
1000cca8:	d9801e04 	addi	r6,sp,120
1000ccac:	b80b883a 	mov	r5,r23
1000ccb0:	9809883a 	mov	r4,r19
1000ccb4:	0013a640 	call	10013a64 <__sprint_r>
1000ccb8:	103e5f1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000ccbc:	843ffc04 	addi	r16,r16,-16
1000ccc0:	d8c02017 	ldw	r3,128(sp)
1000ccc4:	d8801f17 	ldw	r2,124(sp)
1000ccc8:	da000404 	addi	r8,sp,16
1000cccc:	8c3fed16 	blt	r17,r16,1000cc84 <__alt_data_end+0xf800cc84>
1000ccd0:	d9403517 	ldw	r5,212(sp)
1000ccd4:	1c07883a 	add	r3,r3,r16
1000ccd8:	10800044 	addi	r2,r2,1
1000ccdc:	41400015 	stw	r5,0(r8)
1000cce0:	44000115 	stw	r16,4(r8)
1000cce4:	d8c02015 	stw	r3,128(sp)
1000cce8:	d8801f15 	stw	r2,124(sp)
1000ccec:	010001c4 	movi	r4,7
1000ccf0:	2080060e 	bge	r4,r2,1000cd0c <___vfprintf_internal_r+0xae4>
1000ccf4:	d9002d17 	ldw	r4,180(sp)
1000ccf8:	d9801e04 	addi	r6,sp,120
1000ccfc:	b80b883a 	mov	r5,r23
1000cd00:	0013a640 	call	10013a64 <__sprint_r>
1000cd04:	103e4c1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000cd08:	d8c02017 	ldw	r3,128(sp)
1000cd0c:	d8803117 	ldw	r2,196(sp)
1000cd10:	d9002917 	ldw	r4,164(sp)
1000cd14:	1100010e 	bge	r2,r4,1000cd1c <___vfprintf_internal_r+0xaf4>
1000cd18:	2005883a 	mov	r2,r4
1000cd1c:	d9402f17 	ldw	r5,188(sp)
1000cd20:	288b883a 	add	r5,r5,r2
1000cd24:	d9402f15 	stw	r5,188(sp)
1000cd28:	1801c01e 	bne	r3,zero,1000d42c <___vfprintf_internal_r+0x1204>
1000cd2c:	a8800007 	ldb	r2,0(r21)
1000cd30:	d8001f15 	stw	zero,124(sp)
1000cd34:	da000404 	addi	r8,sp,16
1000cd38:	103d751e 	bne	r2,zero,1000c310 <__alt_data_end+0xf800c310>
1000cd3c:	a823883a 	mov	r17,r21
1000cd40:	003d8b06 	br	1000c370 <__alt_data_end+0xf800c370>
1000cd44:	8025883a 	mov	r18,r16
1000cd48:	dc002903 	ldbu	r16,164(sp)
1000cd4c:	e011883a 	mov	r8,fp
1000cd50:	84003fcc 	andi	r16,r16,255
1000cd54:	8005e51e 	bne	r16,zero,1000e4ec <___vfprintf_internal_r+0x22c4>
1000cd58:	94800414 	ori	r18,r18,16
1000cd5c:	9080080c 	andi	r2,r18,32
1000cd60:	10022b26 	beq	r2,zero,1000d610 <___vfprintf_internal_r+0x13e8>
1000cd64:	d9002e17 	ldw	r4,184(sp)
1000cd68:	d9402a17 	ldw	r5,168(sp)
1000cd6c:	d8002785 	stb	zero,158(sp)
1000cd70:	20c00204 	addi	r3,r4,8
1000cd74:	24c00017 	ldw	r19,0(r4)
1000cd78:	25800117 	ldw	r22,4(r4)
1000cd7c:	28042e16 	blt	r5,zero,1000de38 <___vfprintf_internal_r+0x1c10>
1000cd80:	013fdfc4 	movi	r4,-129
1000cd84:	9d84b03a 	or	r2,r19,r22
1000cd88:	d8c02e15 	stw	r3,184(sp)
1000cd8c:	9124703a 	and	r18,r18,r4
1000cd90:	0039883a 	mov	fp,zero
1000cd94:	103e801e 	bne	r2,zero,1000c798 <__alt_data_end+0xf800c798>
1000cd98:	d9002a17 	ldw	r4,168(sp)
1000cd9c:	2002e01e 	bne	r4,zero,1000d920 <___vfprintf_internal_r+0x16f8>
1000cda0:	d8002a15 	stw	zero,168(sp)
1000cda4:	d8002b15 	stw	zero,172(sp)
1000cda8:	dc001e04 	addi	r16,sp,120
1000cdac:	003ef506 	br	1000c984 <__alt_data_end+0xf800c984>
1000cdb0:	8025883a 	mov	r18,r16
1000cdb4:	dc002903 	ldbu	r16,164(sp)
1000cdb8:	e011883a 	mov	r8,fp
1000cdbc:	84003fcc 	andi	r16,r16,255
1000cdc0:	8005ba1e 	bne	r16,zero,1000e4ac <___vfprintf_internal_r+0x2284>
1000cdc4:	010400b4 	movhi	r4,4098
1000cdc8:	21275b04 	addi	r4,r4,-25236
1000cdcc:	d9003915 	stw	r4,228(sp)
1000cdd0:	9080080c 	andi	r2,r18,32
1000cdd4:	10006126 	beq	r2,zero,1000cf5c <___vfprintf_internal_r+0xd34>
1000cdd8:	d9402e17 	ldw	r5,184(sp)
1000cddc:	2cc00017 	ldw	r19,0(r5)
1000cde0:	2d800117 	ldw	r22,4(r5)
1000cde4:	29400204 	addi	r5,r5,8
1000cde8:	d9402e15 	stw	r5,184(sp)
1000cdec:	9080004c 	andi	r2,r18,1
1000cdf0:	1001ac26 	beq	r2,zero,1000d4a4 <___vfprintf_internal_r+0x127c>
1000cdf4:	9d84b03a 	or	r2,r19,r22
1000cdf8:	10038526 	beq	r2,zero,1000dc10 <___vfprintf_internal_r+0x19e8>
1000cdfc:	d8c02a17 	ldw	r3,168(sp)
1000ce00:	00800c04 	movi	r2,48
1000ce04:	d8802705 	stb	r2,156(sp)
1000ce08:	dc402745 	stb	r17,157(sp)
1000ce0c:	d8002785 	stb	zero,158(sp)
1000ce10:	90800094 	ori	r2,r18,2
1000ce14:	18047916 	blt	r3,zero,1000dffc <___vfprintf_internal_r+0x1dd4>
1000ce18:	00bfdfc4 	movi	r2,-129
1000ce1c:	90a4703a 	and	r18,r18,r2
1000ce20:	94800094 	ori	r18,r18,2
1000ce24:	0039883a 	mov	fp,zero
1000ce28:	d9003917 	ldw	r4,228(sp)
1000ce2c:	dc001e04 	addi	r16,sp,120
1000ce30:	988003cc 	andi	r2,r19,15
1000ce34:	b006973a 	slli	r3,r22,28
1000ce38:	2085883a 	add	r2,r4,r2
1000ce3c:	9826d13a 	srli	r19,r19,4
1000ce40:	10800003 	ldbu	r2,0(r2)
1000ce44:	b02cd13a 	srli	r22,r22,4
1000ce48:	843fffc4 	addi	r16,r16,-1
1000ce4c:	1ce6b03a 	or	r19,r3,r19
1000ce50:	80800005 	stb	r2,0(r16)
1000ce54:	9d84b03a 	or	r2,r19,r22
1000ce58:	103ff51e 	bne	r2,zero,1000ce30 <__alt_data_end+0xf800ce30>
1000ce5c:	d8c02817 	ldw	r3,160(sp)
1000ce60:	1c07c83a 	sub	r3,r3,r16
1000ce64:	d8c02b15 	stw	r3,172(sp)
1000ce68:	003ec606 	br	1000c984 <__alt_data_end+0xf800c984>
1000ce6c:	8025883a 	mov	r18,r16
1000ce70:	dc002903 	ldbu	r16,164(sp)
1000ce74:	e011883a 	mov	r8,fp
1000ce78:	84003fcc 	andi	r16,r16,255
1000ce7c:	803e9626 	beq	r16,zero,1000c8d8 <__alt_data_end+0xf800c8d8>
1000ce80:	d8c02b03 	ldbu	r3,172(sp)
1000ce84:	d8c02785 	stb	r3,158(sp)
1000ce88:	003e9306 	br	1000c8d8 <__alt_data_end+0xf800c8d8>
1000ce8c:	00c00044 	movi	r3,1
1000ce90:	d8c02905 	stb	r3,164(sp)
1000ce94:	00c00ac4 	movi	r3,43
1000ce98:	d8c02b05 	stb	r3,172(sp)
1000ce9c:	ac400007 	ldb	r17,0(r21)
1000cea0:	003d4306 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cea4:	84000814 	ori	r16,r16,32
1000cea8:	ac400007 	ldb	r17,0(r21)
1000ceac:	003d4006 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000ceb0:	d8802e17 	ldw	r2,184(sp)
1000ceb4:	8025883a 	mov	r18,r16
1000ceb8:	d8002785 	stb	zero,158(sp)
1000cebc:	14000017 	ldw	r16,0(r2)
1000cec0:	e011883a 	mov	r8,fp
1000cec4:	14c00104 	addi	r19,r2,4
1000cec8:	80042d26 	beq	r16,zero,1000df80 <___vfprintf_internal_r+0x1d58>
1000cecc:	d8c02a17 	ldw	r3,168(sp)
1000ced0:	1803e416 	blt	r3,zero,1000de64 <___vfprintf_internal_r+0x1c3c>
1000ced4:	180d883a 	mov	r6,r3
1000ced8:	000b883a 	mov	r5,zero
1000cedc:	8009883a 	mov	r4,r16
1000cee0:	df003d15 	stw	fp,244(sp)
1000cee4:	0011bbc0 	call	10011bbc <memchr>
1000cee8:	da003d17 	ldw	r8,244(sp)
1000ceec:	10046826 	beq	r2,zero,1000e090 <___vfprintf_internal_r+0x1e68>
1000cef0:	1405c83a 	sub	r2,r2,r16
1000cef4:	d8802b15 	stw	r2,172(sp)
1000cef8:	1003e016 	blt	r2,zero,1000de7c <___vfprintf_internal_r+0x1c54>
1000cefc:	df002783 	ldbu	fp,158(sp)
1000cf00:	d8802915 	stw	r2,164(sp)
1000cf04:	dcc02e15 	stw	r19,184(sp)
1000cf08:	d8002a15 	stw	zero,168(sp)
1000cf0c:	d8003215 	stw	zero,200(sp)
1000cf10:	003ea206 	br	1000c99c <__alt_data_end+0xf800c99c>
1000cf14:	8025883a 	mov	r18,r16
1000cf18:	dc002903 	ldbu	r16,164(sp)
1000cf1c:	e011883a 	mov	r8,fp
1000cf20:	84003fcc 	andi	r16,r16,255
1000cf24:	803f8d26 	beq	r16,zero,1000cd5c <__alt_data_end+0xf800cd5c>
1000cf28:	d8c02b03 	ldbu	r3,172(sp)
1000cf2c:	d8c02785 	stb	r3,158(sp)
1000cf30:	003f8a06 	br	1000cd5c <__alt_data_end+0xf800cd5c>
1000cf34:	8025883a 	mov	r18,r16
1000cf38:	dc002903 	ldbu	r16,164(sp)
1000cf3c:	e011883a 	mov	r8,fp
1000cf40:	84003fcc 	andi	r16,r16,255
1000cf44:	8005661e 	bne	r16,zero,1000e4e0 <___vfprintf_internal_r+0x22b8>
1000cf48:	010400b4 	movhi	r4,4098
1000cf4c:	21276004 	addi	r4,r4,-25216
1000cf50:	d9003915 	stw	r4,228(sp)
1000cf54:	9080080c 	andi	r2,r18,32
1000cf58:	103f9f1e 	bne	r2,zero,1000cdd8 <__alt_data_end+0xf800cdd8>
1000cf5c:	9080040c 	andi	r2,r18,16
1000cf60:	1002eb26 	beq	r2,zero,1000db10 <___vfprintf_internal_r+0x18e8>
1000cf64:	d8802e17 	ldw	r2,184(sp)
1000cf68:	002d883a 	mov	r22,zero
1000cf6c:	14c00017 	ldw	r19,0(r2)
1000cf70:	10800104 	addi	r2,r2,4
1000cf74:	d8802e15 	stw	r2,184(sp)
1000cf78:	003f9c06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000cf7c:	d8802b07 	ldb	r2,172(sp)
1000cf80:	1002e11e 	bne	r2,zero,1000db08 <___vfprintf_internal_r+0x18e0>
1000cf84:	00c00044 	movi	r3,1
1000cf88:	d8c02905 	stb	r3,164(sp)
1000cf8c:	00c00804 	movi	r3,32
1000cf90:	d8c02b05 	stb	r3,172(sp)
1000cf94:	ac400007 	ldb	r17,0(r21)
1000cf98:	003d0506 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cf9c:	84000054 	ori	r16,r16,1
1000cfa0:	ac400007 	ldb	r17,0(r21)
1000cfa4:	003d0206 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cfa8:	8025883a 	mov	r18,r16
1000cfac:	dc002903 	ldbu	r16,164(sp)
1000cfb0:	e011883a 	mov	r8,fp
1000cfb4:	84003fcc 	andi	r16,r16,255
1000cfb8:	803de726 	beq	r16,zero,1000c758 <__alt_data_end+0xf800c758>
1000cfbc:	d8c02b03 	ldbu	r3,172(sp)
1000cfc0:	d8c02785 	stb	r3,158(sp)
1000cfc4:	003de406 	br	1000c758 <__alt_data_end+0xf800c758>
1000cfc8:	84001014 	ori	r16,r16,64
1000cfcc:	ac400007 	ldb	r17,0(r21)
1000cfd0:	003cf706 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cfd4:	ac400007 	ldb	r17,0(r21)
1000cfd8:	00801b04 	movi	r2,108
1000cfdc:	88838f26 	beq	r17,r2,1000de1c <___vfprintf_internal_r+0x1bf4>
1000cfe0:	84000414 	ori	r16,r16,16
1000cfe4:	003cf206 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000cfe8:	8025883a 	mov	r18,r16
1000cfec:	dc002903 	ldbu	r16,164(sp)
1000cff0:	e011883a 	mov	r8,fp
1000cff4:	84003fcc 	andi	r16,r16,255
1000cff8:	80053f1e 	bne	r16,zero,1000e4f8 <___vfprintf_internal_r+0x22d0>
1000cffc:	9080080c 	andi	r2,r18,32
1000d000:	1002d226 	beq	r2,zero,1000db4c <___vfprintf_internal_r+0x1924>
1000d004:	d9002e17 	ldw	r4,184(sp)
1000d008:	d9402f17 	ldw	r5,188(sp)
1000d00c:	20800017 	ldw	r2,0(r4)
1000d010:	2807d7fa 	srai	r3,r5,31
1000d014:	21000104 	addi	r4,r4,4
1000d018:	d9002e15 	stw	r4,184(sp)
1000d01c:	11400015 	stw	r5,0(r2)
1000d020:	10c00115 	stw	r3,4(r2)
1000d024:	003cb806 	br	1000c308 <__alt_data_end+0xf800c308>
1000d028:	d8c02e17 	ldw	r3,184(sp)
1000d02c:	d9002e17 	ldw	r4,184(sp)
1000d030:	8025883a 	mov	r18,r16
1000d034:	18800017 	ldw	r2,0(r3)
1000d038:	21000104 	addi	r4,r4,4
1000d03c:	00c00044 	movi	r3,1
1000d040:	e011883a 	mov	r8,fp
1000d044:	d8c02915 	stw	r3,164(sp)
1000d048:	d8002785 	stb	zero,158(sp)
1000d04c:	d8801405 	stb	r2,80(sp)
1000d050:	d9002e15 	stw	r4,184(sp)
1000d054:	d8c02b15 	stw	r3,172(sp)
1000d058:	d8002a15 	stw	zero,168(sp)
1000d05c:	d8003215 	stw	zero,200(sp)
1000d060:	dc001404 	addi	r16,sp,80
1000d064:	0039883a 	mov	fp,zero
1000d068:	003e5306 	br	1000c9b8 <__alt_data_end+0xf800c9b8>
1000d06c:	010400b4 	movhi	r4,4098
1000d070:	21276004 	addi	r4,r4,-25216
1000d074:	0039883a 	mov	fp,zero
1000d078:	d9003915 	stw	r4,228(sp)
1000d07c:	04401e04 	movi	r17,120
1000d080:	003f6906 	br	1000ce28 <__alt_data_end+0xf800ce28>
1000d084:	8025883a 	mov	r18,r16
1000d088:	dc002903 	ldbu	r16,164(sp)
1000d08c:	e011883a 	mov	r8,fp
1000d090:	84003fcc 	andi	r16,r16,255
1000d094:	8005081e 	bne	r16,zero,1000e4b8 <___vfprintf_internal_r+0x2290>
1000d098:	883d6126 	beq	r17,zero,1000c620 <__alt_data_end+0xf800c620>
1000d09c:	00c00044 	movi	r3,1
1000d0a0:	d8c02915 	stw	r3,164(sp)
1000d0a4:	dc401405 	stb	r17,80(sp)
1000d0a8:	d8002785 	stb	zero,158(sp)
1000d0ac:	003fe906 	br	1000d054 <__alt_data_end+0xf800d054>
1000d0b0:	014400b4 	movhi	r5,4098
1000d0b4:	29676004 	addi	r5,r5,-25216
1000d0b8:	d9403915 	stw	r5,228(sp)
1000d0bc:	d8c02e15 	stw	r3,184(sp)
1000d0c0:	1025883a 	mov	r18,r2
1000d0c4:	04401e04 	movi	r17,120
1000d0c8:	9d84b03a 	or	r2,r19,r22
1000d0cc:	1000fc1e 	bne	r2,zero,1000d4c0 <___vfprintf_internal_r+0x1298>
1000d0d0:	0039883a 	mov	fp,zero
1000d0d4:	00800084 	movi	r2,2
1000d0d8:	10803fcc 	andi	r2,r2,255
1000d0dc:	00c00044 	movi	r3,1
1000d0e0:	10c20f26 	beq	r2,r3,1000d920 <___vfprintf_internal_r+0x16f8>
1000d0e4:	00c00084 	movi	r3,2
1000d0e8:	10fd3326 	beq	r2,r3,1000c5b8 <__alt_data_end+0xf800c5b8>
1000d0ec:	003e0b06 	br	1000c91c <__alt_data_end+0xf800c91c>
1000d0f0:	d8c02017 	ldw	r3,128(sp)
1000d0f4:	003e7106 	br	1000cabc <__alt_data_end+0xf800cabc>
1000d0f8:	00801944 	movi	r2,101
1000d0fc:	14407e0e 	bge	r2,r17,1000d2f8 <___vfprintf_internal_r+0x10d0>
1000d100:	d9003617 	ldw	r4,216(sp)
1000d104:	d9403817 	ldw	r5,224(sp)
1000d108:	000d883a 	mov	r6,zero
1000d10c:	000f883a 	mov	r7,zero
1000d110:	d8c03c15 	stw	r3,240(sp)
1000d114:	da003d15 	stw	r8,244(sp)
1000d118:	000a7ec0 	call	1000a7ec <__eqdf2>
1000d11c:	d8c03c17 	ldw	r3,240(sp)
1000d120:	da003d17 	ldw	r8,244(sp)
1000d124:	1000f71e 	bne	r2,zero,1000d504 <___vfprintf_internal_r+0x12dc>
1000d128:	d8801f17 	ldw	r2,124(sp)
1000d12c:	010400b4 	movhi	r4,4098
1000d130:	21276704 	addi	r4,r4,-25188
1000d134:	18c00044 	addi	r3,r3,1
1000d138:	10800044 	addi	r2,r2,1
1000d13c:	41000015 	stw	r4,0(r8)
1000d140:	01000044 	movi	r4,1
1000d144:	41000115 	stw	r4,4(r8)
1000d148:	d8c02015 	stw	r3,128(sp)
1000d14c:	d8801f15 	stw	r2,124(sp)
1000d150:	010001c4 	movi	r4,7
1000d154:	2082b816 	blt	r4,r2,1000dc38 <___vfprintf_internal_r+0x1a10>
1000d158:	42000204 	addi	r8,r8,8
1000d15c:	d8802617 	ldw	r2,152(sp)
1000d160:	d9403317 	ldw	r5,204(sp)
1000d164:	11400216 	blt	r2,r5,1000d170 <___vfprintf_internal_r+0xf48>
1000d168:	9080004c 	andi	r2,r18,1
1000d16c:	103eb326 	beq	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000d170:	d8803717 	ldw	r2,220(sp)
1000d174:	d9003417 	ldw	r4,208(sp)
1000d178:	d9403717 	ldw	r5,220(sp)
1000d17c:	1887883a 	add	r3,r3,r2
1000d180:	d8801f17 	ldw	r2,124(sp)
1000d184:	41000015 	stw	r4,0(r8)
1000d188:	41400115 	stw	r5,4(r8)
1000d18c:	10800044 	addi	r2,r2,1
1000d190:	d8c02015 	stw	r3,128(sp)
1000d194:	d8801f15 	stw	r2,124(sp)
1000d198:	010001c4 	movi	r4,7
1000d19c:	20832916 	blt	r4,r2,1000de44 <___vfprintf_internal_r+0x1c1c>
1000d1a0:	42000204 	addi	r8,r8,8
1000d1a4:	d8803317 	ldw	r2,204(sp)
1000d1a8:	143fffc4 	addi	r16,r2,-1
1000d1ac:	043ea30e 	bge	zero,r16,1000cc3c <__alt_data_end+0xf800cc3c>
1000d1b0:	04400404 	movi	r17,16
1000d1b4:	d8801f17 	ldw	r2,124(sp)
1000d1b8:	8c00880e 	bge	r17,r16,1000d3dc <___vfprintf_internal_r+0x11b4>
1000d1bc:	014400b4 	movhi	r5,4098
1000d1c0:	29676784 	addi	r5,r5,-25186
1000d1c4:	d9402c15 	stw	r5,176(sp)
1000d1c8:	058001c4 	movi	r22,7
1000d1cc:	dcc02d17 	ldw	r19,180(sp)
1000d1d0:	00000306 	br	1000d1e0 <___vfprintf_internal_r+0xfb8>
1000d1d4:	42000204 	addi	r8,r8,8
1000d1d8:	843ffc04 	addi	r16,r16,-16
1000d1dc:	8c00820e 	bge	r17,r16,1000d3e8 <___vfprintf_internal_r+0x11c0>
1000d1e0:	18c00404 	addi	r3,r3,16
1000d1e4:	10800044 	addi	r2,r2,1
1000d1e8:	45000015 	stw	r20,0(r8)
1000d1ec:	44400115 	stw	r17,4(r8)
1000d1f0:	d8c02015 	stw	r3,128(sp)
1000d1f4:	d8801f15 	stw	r2,124(sp)
1000d1f8:	b0bff60e 	bge	r22,r2,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d1fc:	d9801e04 	addi	r6,sp,120
1000d200:	b80b883a 	mov	r5,r23
1000d204:	9809883a 	mov	r4,r19
1000d208:	0013a640 	call	10013a64 <__sprint_r>
1000d20c:	103d0a1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d210:	d8c02017 	ldw	r3,128(sp)
1000d214:	d8801f17 	ldw	r2,124(sp)
1000d218:	da000404 	addi	r8,sp,16
1000d21c:	003fee06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d220:	d9403117 	ldw	r5,196(sp)
1000d224:	d8802917 	ldw	r2,164(sp)
1000d228:	28adc83a 	sub	r22,r5,r2
1000d22c:	05be410e 	bge	zero,r22,1000cb34 <__alt_data_end+0xf800cb34>
1000d230:	07000404 	movi	fp,16
1000d234:	d8801f17 	ldw	r2,124(sp)
1000d238:	e5838f0e 	bge	fp,r22,1000e078 <___vfprintf_internal_r+0x1e50>
1000d23c:	014400b4 	movhi	r5,4098
1000d240:	29676784 	addi	r5,r5,-25186
1000d244:	dc403015 	stw	r17,192(sp)
1000d248:	d9402c15 	stw	r5,176(sp)
1000d24c:	b023883a 	mov	r17,r22
1000d250:	04c001c4 	movi	r19,7
1000d254:	a82d883a 	mov	r22,r21
1000d258:	902b883a 	mov	r21,r18
1000d25c:	8025883a 	mov	r18,r16
1000d260:	dc002d17 	ldw	r16,180(sp)
1000d264:	00000306 	br	1000d274 <___vfprintf_internal_r+0x104c>
1000d268:	8c7ffc04 	addi	r17,r17,-16
1000d26c:	42000204 	addi	r8,r8,8
1000d270:	e440110e 	bge	fp,r17,1000d2b8 <___vfprintf_internal_r+0x1090>
1000d274:	18c00404 	addi	r3,r3,16
1000d278:	10800044 	addi	r2,r2,1
1000d27c:	45000015 	stw	r20,0(r8)
1000d280:	47000115 	stw	fp,4(r8)
1000d284:	d8c02015 	stw	r3,128(sp)
1000d288:	d8801f15 	stw	r2,124(sp)
1000d28c:	98bff60e 	bge	r19,r2,1000d268 <__alt_data_end+0xf800d268>
1000d290:	d9801e04 	addi	r6,sp,120
1000d294:	b80b883a 	mov	r5,r23
1000d298:	8009883a 	mov	r4,r16
1000d29c:	0013a640 	call	10013a64 <__sprint_r>
1000d2a0:	103ce51e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d2a4:	8c7ffc04 	addi	r17,r17,-16
1000d2a8:	d8c02017 	ldw	r3,128(sp)
1000d2ac:	d8801f17 	ldw	r2,124(sp)
1000d2b0:	da000404 	addi	r8,sp,16
1000d2b4:	e47fef16 	blt	fp,r17,1000d274 <__alt_data_end+0xf800d274>
1000d2b8:	9021883a 	mov	r16,r18
1000d2bc:	a825883a 	mov	r18,r21
1000d2c0:	b02b883a 	mov	r21,r22
1000d2c4:	882d883a 	mov	r22,r17
1000d2c8:	dc403017 	ldw	r17,192(sp)
1000d2cc:	d9002c17 	ldw	r4,176(sp)
1000d2d0:	1d87883a 	add	r3,r3,r22
1000d2d4:	10800044 	addi	r2,r2,1
1000d2d8:	41000015 	stw	r4,0(r8)
1000d2dc:	45800115 	stw	r22,4(r8)
1000d2e0:	d8c02015 	stw	r3,128(sp)
1000d2e4:	d8801f15 	stw	r2,124(sp)
1000d2e8:	010001c4 	movi	r4,7
1000d2ec:	20818e16 	blt	r4,r2,1000d928 <___vfprintf_internal_r+0x1700>
1000d2f0:	42000204 	addi	r8,r8,8
1000d2f4:	003e0f06 	br	1000cb34 <__alt_data_end+0xf800cb34>
1000d2f8:	d9403317 	ldw	r5,204(sp)
1000d2fc:	00800044 	movi	r2,1
1000d300:	18c00044 	addi	r3,r3,1
1000d304:	1141530e 	bge	r2,r5,1000d854 <___vfprintf_internal_r+0x162c>
1000d308:	dc401f17 	ldw	r17,124(sp)
1000d30c:	00800044 	movi	r2,1
1000d310:	40800115 	stw	r2,4(r8)
1000d314:	8c400044 	addi	r17,r17,1
1000d318:	44000015 	stw	r16,0(r8)
1000d31c:	d8c02015 	stw	r3,128(sp)
1000d320:	dc401f15 	stw	r17,124(sp)
1000d324:	008001c4 	movi	r2,7
1000d328:	14416b16 	blt	r2,r17,1000d8d8 <___vfprintf_internal_r+0x16b0>
1000d32c:	42000204 	addi	r8,r8,8
1000d330:	d8803717 	ldw	r2,220(sp)
1000d334:	d9003417 	ldw	r4,208(sp)
1000d338:	8c400044 	addi	r17,r17,1
1000d33c:	10c7883a 	add	r3,r2,r3
1000d340:	40800115 	stw	r2,4(r8)
1000d344:	41000015 	stw	r4,0(r8)
1000d348:	d8c02015 	stw	r3,128(sp)
1000d34c:	dc401f15 	stw	r17,124(sp)
1000d350:	008001c4 	movi	r2,7
1000d354:	14416916 	blt	r2,r17,1000d8fc <___vfprintf_internal_r+0x16d4>
1000d358:	45800204 	addi	r22,r8,8
1000d35c:	d9003617 	ldw	r4,216(sp)
1000d360:	d9403817 	ldw	r5,224(sp)
1000d364:	000d883a 	mov	r6,zero
1000d368:	000f883a 	mov	r7,zero
1000d36c:	d8c03c15 	stw	r3,240(sp)
1000d370:	000a7ec0 	call	1000a7ec <__eqdf2>
1000d374:	d8c03c17 	ldw	r3,240(sp)
1000d378:	1000bc26 	beq	r2,zero,1000d66c <___vfprintf_internal_r+0x1444>
1000d37c:	d9403317 	ldw	r5,204(sp)
1000d380:	84000044 	addi	r16,r16,1
1000d384:	8c400044 	addi	r17,r17,1
1000d388:	28bfffc4 	addi	r2,r5,-1
1000d38c:	1887883a 	add	r3,r3,r2
1000d390:	b0800115 	stw	r2,4(r22)
1000d394:	b4000015 	stw	r16,0(r22)
1000d398:	d8c02015 	stw	r3,128(sp)
1000d39c:	dc401f15 	stw	r17,124(sp)
1000d3a0:	008001c4 	movi	r2,7
1000d3a4:	14414316 	blt	r2,r17,1000d8b4 <___vfprintf_internal_r+0x168c>
1000d3a8:	b5800204 	addi	r22,r22,8
1000d3ac:	d9003a17 	ldw	r4,232(sp)
1000d3b0:	df0022c4 	addi	fp,sp,139
1000d3b4:	8c400044 	addi	r17,r17,1
1000d3b8:	20c7883a 	add	r3,r4,r3
1000d3bc:	b7000015 	stw	fp,0(r22)
1000d3c0:	b1000115 	stw	r4,4(r22)
1000d3c4:	d8c02015 	stw	r3,128(sp)
1000d3c8:	dc401f15 	stw	r17,124(sp)
1000d3cc:	008001c4 	movi	r2,7
1000d3d0:	14400e16 	blt	r2,r17,1000d40c <___vfprintf_internal_r+0x11e4>
1000d3d4:	b2000204 	addi	r8,r22,8
1000d3d8:	003e1806 	br	1000cc3c <__alt_data_end+0xf800cc3c>
1000d3dc:	010400b4 	movhi	r4,4098
1000d3e0:	21276784 	addi	r4,r4,-25186
1000d3e4:	d9002c15 	stw	r4,176(sp)
1000d3e8:	d9002c17 	ldw	r4,176(sp)
1000d3ec:	1c07883a 	add	r3,r3,r16
1000d3f0:	44000115 	stw	r16,4(r8)
1000d3f4:	41000015 	stw	r4,0(r8)
1000d3f8:	10800044 	addi	r2,r2,1
1000d3fc:	d8c02015 	stw	r3,128(sp)
1000d400:	d8801f15 	stw	r2,124(sp)
1000d404:	010001c4 	movi	r4,7
1000d408:	20be0b0e 	bge	r4,r2,1000cc38 <__alt_data_end+0xf800cc38>
1000d40c:	d9002d17 	ldw	r4,180(sp)
1000d410:	d9801e04 	addi	r6,sp,120
1000d414:	b80b883a 	mov	r5,r23
1000d418:	0013a640 	call	10013a64 <__sprint_r>
1000d41c:	103c861e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d420:	d8c02017 	ldw	r3,128(sp)
1000d424:	da000404 	addi	r8,sp,16
1000d428:	003e0406 	br	1000cc3c <__alt_data_end+0xf800cc3c>
1000d42c:	d9002d17 	ldw	r4,180(sp)
1000d430:	d9801e04 	addi	r6,sp,120
1000d434:	b80b883a 	mov	r5,r23
1000d438:	0013a640 	call	10013a64 <__sprint_r>
1000d43c:	103e3b26 	beq	r2,zero,1000cd2c <__alt_data_end+0xf800cd2c>
1000d440:	003c7d06 	br	1000c638 <__alt_data_end+0xf800c638>
1000d444:	d9002d17 	ldw	r4,180(sp)
1000d448:	d9801e04 	addi	r6,sp,120
1000d44c:	b80b883a 	mov	r5,r23
1000d450:	0013a640 	call	10013a64 <__sprint_r>
1000d454:	103c781e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d458:	d8c02017 	ldw	r3,128(sp)
1000d45c:	da000404 	addi	r8,sp,16
1000d460:	003de906 	br	1000cc08 <__alt_data_end+0xf800cc08>
1000d464:	d9002d17 	ldw	r4,180(sp)
1000d468:	d9801e04 	addi	r6,sp,120
1000d46c:	b80b883a 	mov	r5,r23
1000d470:	0013a640 	call	10013a64 <__sprint_r>
1000d474:	103c701e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d478:	d8c02017 	ldw	r3,128(sp)
1000d47c:	da000404 	addi	r8,sp,16
1000d480:	003d9b06 	br	1000caf0 <__alt_data_end+0xf800caf0>
1000d484:	d9002d17 	ldw	r4,180(sp)
1000d488:	d9801e04 	addi	r6,sp,120
1000d48c:	b80b883a 	mov	r5,r23
1000d490:	0013a640 	call	10013a64 <__sprint_r>
1000d494:	103c681e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d498:	d8c02017 	ldw	r3,128(sp)
1000d49c:	da000404 	addi	r8,sp,16
1000d4a0:	003da106 	br	1000cb28 <__alt_data_end+0xf800cb28>
1000d4a4:	d9402a17 	ldw	r5,168(sp)
1000d4a8:	d8002785 	stb	zero,158(sp)
1000d4ac:	283f0616 	blt	r5,zero,1000d0c8 <__alt_data_end+0xf800d0c8>
1000d4b0:	00ffdfc4 	movi	r3,-129
1000d4b4:	9d84b03a 	or	r2,r19,r22
1000d4b8:	90e4703a 	and	r18,r18,r3
1000d4bc:	103c3b26 	beq	r2,zero,1000c5ac <__alt_data_end+0xf800c5ac>
1000d4c0:	0039883a 	mov	fp,zero
1000d4c4:	003e5806 	br	1000ce28 <__alt_data_end+0xf800ce28>
1000d4c8:	9080040c 	andi	r2,r18,16
1000d4cc:	1001b326 	beq	r2,zero,1000db9c <___vfprintf_internal_r+0x1974>
1000d4d0:	d8c02e17 	ldw	r3,184(sp)
1000d4d4:	d9002a17 	ldw	r4,168(sp)
1000d4d8:	d8002785 	stb	zero,158(sp)
1000d4dc:	18800104 	addi	r2,r3,4
1000d4e0:	1cc00017 	ldw	r19,0(r3)
1000d4e4:	002d883a 	mov	r22,zero
1000d4e8:	2001b516 	blt	r4,zero,1000dbc0 <___vfprintf_internal_r+0x1998>
1000d4ec:	00ffdfc4 	movi	r3,-129
1000d4f0:	d8802e15 	stw	r2,184(sp)
1000d4f4:	90e4703a 	and	r18,r18,r3
1000d4f8:	983d0526 	beq	r19,zero,1000c910 <__alt_data_end+0xf800c910>
1000d4fc:	0039883a 	mov	fp,zero
1000d500:	003d0806 	br	1000c924 <__alt_data_end+0xf800c924>
1000d504:	dc402617 	ldw	r17,152(sp)
1000d508:	0441d30e 	bge	zero,r17,1000dc58 <___vfprintf_internal_r+0x1a30>
1000d50c:	dc403217 	ldw	r17,200(sp)
1000d510:	d8803317 	ldw	r2,204(sp)
1000d514:	1440010e 	bge	r2,r17,1000d51c <___vfprintf_internal_r+0x12f4>
1000d518:	1023883a 	mov	r17,r2
1000d51c:	04400a0e 	bge	zero,r17,1000d548 <___vfprintf_internal_r+0x1320>
1000d520:	d8801f17 	ldw	r2,124(sp)
1000d524:	1c47883a 	add	r3,r3,r17
1000d528:	44000015 	stw	r16,0(r8)
1000d52c:	10800044 	addi	r2,r2,1
1000d530:	44400115 	stw	r17,4(r8)
1000d534:	d8c02015 	stw	r3,128(sp)
1000d538:	d8801f15 	stw	r2,124(sp)
1000d53c:	010001c4 	movi	r4,7
1000d540:	20826516 	blt	r4,r2,1000ded8 <___vfprintf_internal_r+0x1cb0>
1000d544:	42000204 	addi	r8,r8,8
1000d548:	88026116 	blt	r17,zero,1000ded0 <___vfprintf_internal_r+0x1ca8>
1000d54c:	d9003217 	ldw	r4,200(sp)
1000d550:	2463c83a 	sub	r17,r4,r17
1000d554:	04407b0e 	bge	zero,r17,1000d744 <___vfprintf_internal_r+0x151c>
1000d558:	05800404 	movi	r22,16
1000d55c:	d8801f17 	ldw	r2,124(sp)
1000d560:	b4419d0e 	bge	r22,r17,1000dbd8 <___vfprintf_internal_r+0x19b0>
1000d564:	010400b4 	movhi	r4,4098
1000d568:	21276784 	addi	r4,r4,-25186
1000d56c:	d9002c15 	stw	r4,176(sp)
1000d570:	070001c4 	movi	fp,7
1000d574:	dcc02d17 	ldw	r19,180(sp)
1000d578:	00000306 	br	1000d588 <___vfprintf_internal_r+0x1360>
1000d57c:	42000204 	addi	r8,r8,8
1000d580:	8c7ffc04 	addi	r17,r17,-16
1000d584:	b441970e 	bge	r22,r17,1000dbe4 <___vfprintf_internal_r+0x19bc>
1000d588:	18c00404 	addi	r3,r3,16
1000d58c:	10800044 	addi	r2,r2,1
1000d590:	45000015 	stw	r20,0(r8)
1000d594:	45800115 	stw	r22,4(r8)
1000d598:	d8c02015 	stw	r3,128(sp)
1000d59c:	d8801f15 	stw	r2,124(sp)
1000d5a0:	e0bff60e 	bge	fp,r2,1000d57c <__alt_data_end+0xf800d57c>
1000d5a4:	d9801e04 	addi	r6,sp,120
1000d5a8:	b80b883a 	mov	r5,r23
1000d5ac:	9809883a 	mov	r4,r19
1000d5b0:	0013a640 	call	10013a64 <__sprint_r>
1000d5b4:	103c201e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d5b8:	d8c02017 	ldw	r3,128(sp)
1000d5bc:	d8801f17 	ldw	r2,124(sp)
1000d5c0:	da000404 	addi	r8,sp,16
1000d5c4:	003fee06 	br	1000d580 <__alt_data_end+0xf800d580>
1000d5c8:	d9002d17 	ldw	r4,180(sp)
1000d5cc:	d9801e04 	addi	r6,sp,120
1000d5d0:	b80b883a 	mov	r5,r23
1000d5d4:	0013a640 	call	10013a64 <__sprint_r>
1000d5d8:	103c171e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d5dc:	d8c02017 	ldw	r3,128(sp)
1000d5e0:	df002787 	ldb	fp,158(sp)
1000d5e4:	da000404 	addi	r8,sp,16
1000d5e8:	003d3406 	br	1000cabc <__alt_data_end+0xf800cabc>
1000d5ec:	9080040c 	andi	r2,r18,16
1000d5f0:	10016126 	beq	r2,zero,1000db78 <___vfprintf_internal_r+0x1950>
1000d5f4:	d9402e17 	ldw	r5,184(sp)
1000d5f8:	2cc00017 	ldw	r19,0(r5)
1000d5fc:	29400104 	addi	r5,r5,4
1000d600:	d9402e15 	stw	r5,184(sp)
1000d604:	982dd7fa 	srai	r22,r19,31
1000d608:	b005883a 	mov	r2,r22
1000d60c:	003c5a06 	br	1000c778 <__alt_data_end+0xf800c778>
1000d610:	9080040c 	andi	r2,r18,16
1000d614:	10003526 	beq	r2,zero,1000d6ec <___vfprintf_internal_r+0x14c4>
1000d618:	d8c02e17 	ldw	r3,184(sp)
1000d61c:	d9002a17 	ldw	r4,168(sp)
1000d620:	d8002785 	stb	zero,158(sp)
1000d624:	18800104 	addi	r2,r3,4
1000d628:	1cc00017 	ldw	r19,0(r3)
1000d62c:	002d883a 	mov	r22,zero
1000d630:	20003716 	blt	r4,zero,1000d710 <___vfprintf_internal_r+0x14e8>
1000d634:	00ffdfc4 	movi	r3,-129
1000d638:	d8802e15 	stw	r2,184(sp)
1000d63c:	90e4703a 	and	r18,r18,r3
1000d640:	0039883a 	mov	fp,zero
1000d644:	983dd426 	beq	r19,zero,1000cd98 <__alt_data_end+0xf800cd98>
1000d648:	00800244 	movi	r2,9
1000d64c:	14fc5336 	bltu	r2,r19,1000c79c <__alt_data_end+0xf800c79c>
1000d650:	d8c02817 	ldw	r3,160(sp)
1000d654:	dc001dc4 	addi	r16,sp,119
1000d658:	9cc00c04 	addi	r19,r19,48
1000d65c:	1c07c83a 	sub	r3,r3,r16
1000d660:	dcc01dc5 	stb	r19,119(sp)
1000d664:	d8c02b15 	stw	r3,172(sp)
1000d668:	003cc606 	br	1000c984 <__alt_data_end+0xf800c984>
1000d66c:	d8803317 	ldw	r2,204(sp)
1000d670:	143fffc4 	addi	r16,r2,-1
1000d674:	043f4d0e 	bge	zero,r16,1000d3ac <__alt_data_end+0xf800d3ac>
1000d678:	07000404 	movi	fp,16
1000d67c:	e400810e 	bge	fp,r16,1000d884 <___vfprintf_internal_r+0x165c>
1000d680:	014400b4 	movhi	r5,4098
1000d684:	29676784 	addi	r5,r5,-25186
1000d688:	d9402c15 	stw	r5,176(sp)
1000d68c:	01c001c4 	movi	r7,7
1000d690:	dcc02d17 	ldw	r19,180(sp)
1000d694:	00000306 	br	1000d6a4 <___vfprintf_internal_r+0x147c>
1000d698:	b5800204 	addi	r22,r22,8
1000d69c:	843ffc04 	addi	r16,r16,-16
1000d6a0:	e4007b0e 	bge	fp,r16,1000d890 <___vfprintf_internal_r+0x1668>
1000d6a4:	18c00404 	addi	r3,r3,16
1000d6a8:	8c400044 	addi	r17,r17,1
1000d6ac:	b5000015 	stw	r20,0(r22)
1000d6b0:	b7000115 	stw	fp,4(r22)
1000d6b4:	d8c02015 	stw	r3,128(sp)
1000d6b8:	dc401f15 	stw	r17,124(sp)
1000d6bc:	3c7ff60e 	bge	r7,r17,1000d698 <__alt_data_end+0xf800d698>
1000d6c0:	d9801e04 	addi	r6,sp,120
1000d6c4:	b80b883a 	mov	r5,r23
1000d6c8:	9809883a 	mov	r4,r19
1000d6cc:	d9c03c15 	stw	r7,240(sp)
1000d6d0:	0013a640 	call	10013a64 <__sprint_r>
1000d6d4:	d9c03c17 	ldw	r7,240(sp)
1000d6d8:	103bd71e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d6dc:	d8c02017 	ldw	r3,128(sp)
1000d6e0:	dc401f17 	ldw	r17,124(sp)
1000d6e4:	dd800404 	addi	r22,sp,16
1000d6e8:	003fec06 	br	1000d69c <__alt_data_end+0xf800d69c>
1000d6ec:	9080100c 	andi	r2,r18,64
1000d6f0:	d8002785 	stb	zero,158(sp)
1000d6f4:	10010e26 	beq	r2,zero,1000db30 <___vfprintf_internal_r+0x1908>
1000d6f8:	d9402e17 	ldw	r5,184(sp)
1000d6fc:	d8c02a17 	ldw	r3,168(sp)
1000d700:	002d883a 	mov	r22,zero
1000d704:	28800104 	addi	r2,r5,4
1000d708:	2cc0000b 	ldhu	r19,0(r5)
1000d70c:	183fc90e 	bge	r3,zero,1000d634 <__alt_data_end+0xf800d634>
1000d710:	d8802e15 	stw	r2,184(sp)
1000d714:	0039883a 	mov	fp,zero
1000d718:	9d84b03a 	or	r2,r19,r22
1000d71c:	103c1e1e 	bne	r2,zero,1000c798 <__alt_data_end+0xf800c798>
1000d720:	00800044 	movi	r2,1
1000d724:	003e6c06 	br	1000d0d8 <__alt_data_end+0xf800d0d8>
1000d728:	d9002d17 	ldw	r4,180(sp)
1000d72c:	d9801e04 	addi	r6,sp,120
1000d730:	b80b883a 	mov	r5,r23
1000d734:	0013a640 	call	10013a64 <__sprint_r>
1000d738:	103bbf1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d73c:	d8c02017 	ldw	r3,128(sp)
1000d740:	da000404 	addi	r8,sp,16
1000d744:	d9003217 	ldw	r4,200(sp)
1000d748:	d8802617 	ldw	r2,152(sp)
1000d74c:	d9403317 	ldw	r5,204(sp)
1000d750:	8123883a 	add	r17,r16,r4
1000d754:	11400216 	blt	r2,r5,1000d760 <___vfprintf_internal_r+0x1538>
1000d758:	9100004c 	andi	r4,r18,1
1000d75c:	20000d26 	beq	r4,zero,1000d794 <___vfprintf_internal_r+0x156c>
1000d760:	d9003717 	ldw	r4,220(sp)
1000d764:	d9403417 	ldw	r5,208(sp)
1000d768:	1907883a 	add	r3,r3,r4
1000d76c:	d9001f17 	ldw	r4,124(sp)
1000d770:	41400015 	stw	r5,0(r8)
1000d774:	d9403717 	ldw	r5,220(sp)
1000d778:	21000044 	addi	r4,r4,1
1000d77c:	d8c02015 	stw	r3,128(sp)
1000d780:	41400115 	stw	r5,4(r8)
1000d784:	d9001f15 	stw	r4,124(sp)
1000d788:	014001c4 	movi	r5,7
1000d78c:	2901e816 	blt	r5,r4,1000df30 <___vfprintf_internal_r+0x1d08>
1000d790:	42000204 	addi	r8,r8,8
1000d794:	d9003317 	ldw	r4,204(sp)
1000d798:	8121883a 	add	r16,r16,r4
1000d79c:	2085c83a 	sub	r2,r4,r2
1000d7a0:	8461c83a 	sub	r16,r16,r17
1000d7a4:	1400010e 	bge	r2,r16,1000d7ac <___vfprintf_internal_r+0x1584>
1000d7a8:	1021883a 	mov	r16,r2
1000d7ac:	04000a0e 	bge	zero,r16,1000d7d8 <___vfprintf_internal_r+0x15b0>
1000d7b0:	d9001f17 	ldw	r4,124(sp)
1000d7b4:	1c07883a 	add	r3,r3,r16
1000d7b8:	44400015 	stw	r17,0(r8)
1000d7bc:	21000044 	addi	r4,r4,1
1000d7c0:	44000115 	stw	r16,4(r8)
1000d7c4:	d8c02015 	stw	r3,128(sp)
1000d7c8:	d9001f15 	stw	r4,124(sp)
1000d7cc:	014001c4 	movi	r5,7
1000d7d0:	2901fb16 	blt	r5,r4,1000dfc0 <___vfprintf_internal_r+0x1d98>
1000d7d4:	42000204 	addi	r8,r8,8
1000d7d8:	8001f716 	blt	r16,zero,1000dfb8 <___vfprintf_internal_r+0x1d90>
1000d7dc:	1421c83a 	sub	r16,r2,r16
1000d7e0:	043d160e 	bge	zero,r16,1000cc3c <__alt_data_end+0xf800cc3c>
1000d7e4:	04400404 	movi	r17,16
1000d7e8:	d8801f17 	ldw	r2,124(sp)
1000d7ec:	8c3efb0e 	bge	r17,r16,1000d3dc <__alt_data_end+0xf800d3dc>
1000d7f0:	014400b4 	movhi	r5,4098
1000d7f4:	29676784 	addi	r5,r5,-25186
1000d7f8:	d9402c15 	stw	r5,176(sp)
1000d7fc:	058001c4 	movi	r22,7
1000d800:	dcc02d17 	ldw	r19,180(sp)
1000d804:	00000306 	br	1000d814 <___vfprintf_internal_r+0x15ec>
1000d808:	42000204 	addi	r8,r8,8
1000d80c:	843ffc04 	addi	r16,r16,-16
1000d810:	8c3ef50e 	bge	r17,r16,1000d3e8 <__alt_data_end+0xf800d3e8>
1000d814:	18c00404 	addi	r3,r3,16
1000d818:	10800044 	addi	r2,r2,1
1000d81c:	45000015 	stw	r20,0(r8)
1000d820:	44400115 	stw	r17,4(r8)
1000d824:	d8c02015 	stw	r3,128(sp)
1000d828:	d8801f15 	stw	r2,124(sp)
1000d82c:	b0bff60e 	bge	r22,r2,1000d808 <__alt_data_end+0xf800d808>
1000d830:	d9801e04 	addi	r6,sp,120
1000d834:	b80b883a 	mov	r5,r23
1000d838:	9809883a 	mov	r4,r19
1000d83c:	0013a640 	call	10013a64 <__sprint_r>
1000d840:	103b7d1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d844:	d8c02017 	ldw	r3,128(sp)
1000d848:	d8801f17 	ldw	r2,124(sp)
1000d84c:	da000404 	addi	r8,sp,16
1000d850:	003fee06 	br	1000d80c <__alt_data_end+0xf800d80c>
1000d854:	9088703a 	and	r4,r18,r2
1000d858:	203eab1e 	bne	r4,zero,1000d308 <__alt_data_end+0xf800d308>
1000d85c:	dc401f17 	ldw	r17,124(sp)
1000d860:	40800115 	stw	r2,4(r8)
1000d864:	44000015 	stw	r16,0(r8)
1000d868:	8c400044 	addi	r17,r17,1
1000d86c:	d8c02015 	stw	r3,128(sp)
1000d870:	dc401f15 	stw	r17,124(sp)
1000d874:	008001c4 	movi	r2,7
1000d878:	14400e16 	blt	r2,r17,1000d8b4 <___vfprintf_internal_r+0x168c>
1000d87c:	45800204 	addi	r22,r8,8
1000d880:	003eca06 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000d884:	010400b4 	movhi	r4,4098
1000d888:	21276784 	addi	r4,r4,-25186
1000d88c:	d9002c15 	stw	r4,176(sp)
1000d890:	d8802c17 	ldw	r2,176(sp)
1000d894:	1c07883a 	add	r3,r3,r16
1000d898:	8c400044 	addi	r17,r17,1
1000d89c:	b0800015 	stw	r2,0(r22)
1000d8a0:	b4000115 	stw	r16,4(r22)
1000d8a4:	d8c02015 	stw	r3,128(sp)
1000d8a8:	dc401f15 	stw	r17,124(sp)
1000d8ac:	008001c4 	movi	r2,7
1000d8b0:	147ebd0e 	bge	r2,r17,1000d3a8 <__alt_data_end+0xf800d3a8>
1000d8b4:	d9002d17 	ldw	r4,180(sp)
1000d8b8:	d9801e04 	addi	r6,sp,120
1000d8bc:	b80b883a 	mov	r5,r23
1000d8c0:	0013a640 	call	10013a64 <__sprint_r>
1000d8c4:	103b5c1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d8c8:	d8c02017 	ldw	r3,128(sp)
1000d8cc:	dc401f17 	ldw	r17,124(sp)
1000d8d0:	dd800404 	addi	r22,sp,16
1000d8d4:	003eb506 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000d8d8:	d9002d17 	ldw	r4,180(sp)
1000d8dc:	d9801e04 	addi	r6,sp,120
1000d8e0:	b80b883a 	mov	r5,r23
1000d8e4:	0013a640 	call	10013a64 <__sprint_r>
1000d8e8:	103b531e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d8ec:	d8c02017 	ldw	r3,128(sp)
1000d8f0:	dc401f17 	ldw	r17,124(sp)
1000d8f4:	da000404 	addi	r8,sp,16
1000d8f8:	003e8d06 	br	1000d330 <__alt_data_end+0xf800d330>
1000d8fc:	d9002d17 	ldw	r4,180(sp)
1000d900:	d9801e04 	addi	r6,sp,120
1000d904:	b80b883a 	mov	r5,r23
1000d908:	0013a640 	call	10013a64 <__sprint_r>
1000d90c:	103b4a1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d910:	d8c02017 	ldw	r3,128(sp)
1000d914:	dc401f17 	ldw	r17,124(sp)
1000d918:	dd800404 	addi	r22,sp,16
1000d91c:	003e8f06 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d920:	0027883a 	mov	r19,zero
1000d924:	003f4a06 	br	1000d650 <__alt_data_end+0xf800d650>
1000d928:	d9002d17 	ldw	r4,180(sp)
1000d92c:	d9801e04 	addi	r6,sp,120
1000d930:	b80b883a 	mov	r5,r23
1000d934:	0013a640 	call	10013a64 <__sprint_r>
1000d938:	103b3f1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000d93c:	d8c02017 	ldw	r3,128(sp)
1000d940:	da000404 	addi	r8,sp,16
1000d944:	003c7b06 	br	1000cb34 <__alt_data_end+0xf800cb34>
1000d948:	d9402a17 	ldw	r5,168(sp)
1000d94c:	04e7c83a 	sub	r19,zero,r19
1000d950:	07000b44 	movi	fp,45
1000d954:	9804c03a 	cmpne	r2,r19,zero
1000d958:	05adc83a 	sub	r22,zero,r22
1000d95c:	df002785 	stb	fp,158(sp)
1000d960:	b0adc83a 	sub	r22,r22,r2
1000d964:	28017b16 	blt	r5,zero,1000df54 <___vfprintf_internal_r+0x1d2c>
1000d968:	00bfdfc4 	movi	r2,-129
1000d96c:	90a4703a 	and	r18,r18,r2
1000d970:	003b8906 	br	1000c798 <__alt_data_end+0xf800c798>
1000d974:	d9003617 	ldw	r4,216(sp)
1000d978:	d9403817 	ldw	r5,224(sp)
1000d97c:	da003d15 	stw	r8,244(sp)
1000d980:	00136880 	call	10013688 <__fpclassifyd>
1000d984:	da003d17 	ldw	r8,244(sp)
1000d988:	1000f026 	beq	r2,zero,1000dd4c <___vfprintf_internal_r+0x1b24>
1000d98c:	d9002a17 	ldw	r4,168(sp)
1000d990:	05bff7c4 	movi	r22,-33
1000d994:	00bfffc4 	movi	r2,-1
1000d998:	8dac703a 	and	r22,r17,r22
1000d99c:	20820026 	beq	r4,r2,1000e1a0 <___vfprintf_internal_r+0x1f78>
1000d9a0:	008011c4 	movi	r2,71
1000d9a4:	b081f726 	beq	r22,r2,1000e184 <___vfprintf_internal_r+0x1f5c>
1000d9a8:	d9003817 	ldw	r4,224(sp)
1000d9ac:	90c04014 	ori	r3,r18,256
1000d9b0:	d8c02c15 	stw	r3,176(sp)
1000d9b4:	20021516 	blt	r4,zero,1000e20c <___vfprintf_internal_r+0x1fe4>
1000d9b8:	dcc03817 	ldw	r19,224(sp)
1000d9bc:	d8002905 	stb	zero,164(sp)
1000d9c0:	00801984 	movi	r2,102
1000d9c4:	8881f926 	beq	r17,r2,1000e1ac <___vfprintf_internal_r+0x1f84>
1000d9c8:	00801184 	movi	r2,70
1000d9cc:	88821c26 	beq	r17,r2,1000e240 <___vfprintf_internal_r+0x2018>
1000d9d0:	00801144 	movi	r2,69
1000d9d4:	b081ef26 	beq	r22,r2,1000e194 <___vfprintf_internal_r+0x1f6c>
1000d9d8:	d8c02a17 	ldw	r3,168(sp)
1000d9dc:	d8802104 	addi	r2,sp,132
1000d9e0:	d8800315 	stw	r2,12(sp)
1000d9e4:	d9403617 	ldw	r5,216(sp)
1000d9e8:	d8802504 	addi	r2,sp,148
1000d9ec:	d9002d17 	ldw	r4,180(sp)
1000d9f0:	d8800215 	stw	r2,8(sp)
1000d9f4:	d8802604 	addi	r2,sp,152
1000d9f8:	d8c00015 	stw	r3,0(sp)
1000d9fc:	d8800115 	stw	r2,4(sp)
1000da00:	01c00084 	movi	r7,2
1000da04:	980d883a 	mov	r6,r19
1000da08:	d8c03c15 	stw	r3,240(sp)
1000da0c:	da003d15 	stw	r8,244(sp)
1000da10:	000e9580 	call	1000e958 <_dtoa_r>
1000da14:	1021883a 	mov	r16,r2
1000da18:	008019c4 	movi	r2,103
1000da1c:	d8c03c17 	ldw	r3,240(sp)
1000da20:	da003d17 	ldw	r8,244(sp)
1000da24:	88817126 	beq	r17,r2,1000dfec <___vfprintf_internal_r+0x1dc4>
1000da28:	008011c4 	movi	r2,71
1000da2c:	88829126 	beq	r17,r2,1000e474 <___vfprintf_internal_r+0x224c>
1000da30:	80f9883a 	add	fp,r16,r3
1000da34:	d9003617 	ldw	r4,216(sp)
1000da38:	000d883a 	mov	r6,zero
1000da3c:	000f883a 	mov	r7,zero
1000da40:	980b883a 	mov	r5,r19
1000da44:	da003d15 	stw	r8,244(sp)
1000da48:	000a7ec0 	call	1000a7ec <__eqdf2>
1000da4c:	da003d17 	ldw	r8,244(sp)
1000da50:	10018d26 	beq	r2,zero,1000e088 <___vfprintf_internal_r+0x1e60>
1000da54:	d8802117 	ldw	r2,132(sp)
1000da58:	1700062e 	bgeu	r2,fp,1000da74 <___vfprintf_internal_r+0x184c>
1000da5c:	01000c04 	movi	r4,48
1000da60:	10c00044 	addi	r3,r2,1
1000da64:	d8c02115 	stw	r3,132(sp)
1000da68:	11000005 	stb	r4,0(r2)
1000da6c:	d8802117 	ldw	r2,132(sp)
1000da70:	173ffb36 	bltu	r2,fp,1000da60 <__alt_data_end+0xf800da60>
1000da74:	1405c83a 	sub	r2,r2,r16
1000da78:	d8803315 	stw	r2,204(sp)
1000da7c:	008011c4 	movi	r2,71
1000da80:	b0817626 	beq	r22,r2,1000e05c <___vfprintf_internal_r+0x1e34>
1000da84:	00801944 	movi	r2,101
1000da88:	1442800e 	bge	r2,r17,1000e48c <___vfprintf_internal_r+0x2264>
1000da8c:	d8c02617 	ldw	r3,152(sp)
1000da90:	00801984 	movi	r2,102
1000da94:	d8c03215 	stw	r3,200(sp)
1000da98:	8881fe26 	beq	r17,r2,1000e294 <___vfprintf_internal_r+0x206c>
1000da9c:	d8c03217 	ldw	r3,200(sp)
1000daa0:	d9003317 	ldw	r4,204(sp)
1000daa4:	1901dd16 	blt	r3,r4,1000e21c <___vfprintf_internal_r+0x1ff4>
1000daa8:	9480004c 	andi	r18,r18,1
1000daac:	90022b1e 	bne	r18,zero,1000e35c <___vfprintf_internal_r+0x2134>
1000dab0:	1805883a 	mov	r2,r3
1000dab4:	18028316 	blt	r3,zero,1000e4c4 <___vfprintf_internal_r+0x229c>
1000dab8:	d8c03217 	ldw	r3,200(sp)
1000dabc:	044019c4 	movi	r17,103
1000dac0:	d8c02b15 	stw	r3,172(sp)
1000dac4:	df002907 	ldb	fp,164(sp)
1000dac8:	e001531e 	bne	fp,zero,1000e018 <___vfprintf_internal_r+0x1df0>
1000dacc:	df002783 	ldbu	fp,158(sp)
1000dad0:	d8802915 	stw	r2,164(sp)
1000dad4:	dc802c17 	ldw	r18,176(sp)
1000dad8:	d8002a15 	stw	zero,168(sp)
1000dadc:	003baf06 	br	1000c99c <__alt_data_end+0xf800c99c>
1000dae0:	d8c02e17 	ldw	r3,184(sp)
1000dae4:	d9002e17 	ldw	r4,184(sp)
1000dae8:	d9402e17 	ldw	r5,184(sp)
1000daec:	18c00017 	ldw	r3,0(r3)
1000daf0:	21000117 	ldw	r4,4(r4)
1000daf4:	29400204 	addi	r5,r5,8
1000daf8:	d8c03615 	stw	r3,216(sp)
1000dafc:	d9003815 	stw	r4,224(sp)
1000db00:	d9402e15 	stw	r5,184(sp)
1000db04:	003b5006 	br	1000c848 <__alt_data_end+0xf800c848>
1000db08:	ac400007 	ldb	r17,0(r21)
1000db0c:	003a2806 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000db10:	9080100c 	andi	r2,r18,64
1000db14:	1000a826 	beq	r2,zero,1000ddb8 <___vfprintf_internal_r+0x1b90>
1000db18:	d8c02e17 	ldw	r3,184(sp)
1000db1c:	002d883a 	mov	r22,zero
1000db20:	1cc0000b 	ldhu	r19,0(r3)
1000db24:	18c00104 	addi	r3,r3,4
1000db28:	d8c02e15 	stw	r3,184(sp)
1000db2c:	003caf06 	br	1000cdec <__alt_data_end+0xf800cdec>
1000db30:	d9002e17 	ldw	r4,184(sp)
1000db34:	d9402a17 	ldw	r5,168(sp)
1000db38:	002d883a 	mov	r22,zero
1000db3c:	20800104 	addi	r2,r4,4
1000db40:	24c00017 	ldw	r19,0(r4)
1000db44:	283ebb0e 	bge	r5,zero,1000d634 <__alt_data_end+0xf800d634>
1000db48:	003ef106 	br	1000d710 <__alt_data_end+0xf800d710>
1000db4c:	9080040c 	andi	r2,r18,16
1000db50:	1000921e 	bne	r2,zero,1000dd9c <___vfprintf_internal_r+0x1b74>
1000db54:	9480100c 	andi	r18,r18,64
1000db58:	90013926 	beq	r18,zero,1000e040 <___vfprintf_internal_r+0x1e18>
1000db5c:	d9402e17 	ldw	r5,184(sp)
1000db60:	d8c02f17 	ldw	r3,188(sp)
1000db64:	28800017 	ldw	r2,0(r5)
1000db68:	29400104 	addi	r5,r5,4
1000db6c:	d9402e15 	stw	r5,184(sp)
1000db70:	10c0000d 	sth	r3,0(r2)
1000db74:	0039e406 	br	1000c308 <__alt_data_end+0xf800c308>
1000db78:	9080100c 	andi	r2,r18,64
1000db7c:	10008026 	beq	r2,zero,1000dd80 <___vfprintf_internal_r+0x1b58>
1000db80:	d8802e17 	ldw	r2,184(sp)
1000db84:	14c0000f 	ldh	r19,0(r2)
1000db88:	10800104 	addi	r2,r2,4
1000db8c:	d8802e15 	stw	r2,184(sp)
1000db90:	982dd7fa 	srai	r22,r19,31
1000db94:	b005883a 	mov	r2,r22
1000db98:	003af706 	br	1000c778 <__alt_data_end+0xf800c778>
1000db9c:	9080100c 	andi	r2,r18,64
1000dba0:	d8002785 	stb	zero,158(sp)
1000dba4:	10008a1e 	bne	r2,zero,1000ddd0 <___vfprintf_internal_r+0x1ba8>
1000dba8:	d9002e17 	ldw	r4,184(sp)
1000dbac:	d9402a17 	ldw	r5,168(sp)
1000dbb0:	002d883a 	mov	r22,zero
1000dbb4:	20800104 	addi	r2,r4,4
1000dbb8:	24c00017 	ldw	r19,0(r4)
1000dbbc:	283e4b0e 	bge	r5,zero,1000d4ec <__alt_data_end+0xf800d4ec>
1000dbc0:	9d86b03a 	or	r3,r19,r22
1000dbc4:	d8802e15 	stw	r2,184(sp)
1000dbc8:	183e4c1e 	bne	r3,zero,1000d4fc <__alt_data_end+0xf800d4fc>
1000dbcc:	0039883a 	mov	fp,zero
1000dbd0:	0005883a 	mov	r2,zero
1000dbd4:	003d4006 	br	1000d0d8 <__alt_data_end+0xf800d0d8>
1000dbd8:	014400b4 	movhi	r5,4098
1000dbdc:	29676784 	addi	r5,r5,-25186
1000dbe0:	d9402c15 	stw	r5,176(sp)
1000dbe4:	d9402c17 	ldw	r5,176(sp)
1000dbe8:	1c47883a 	add	r3,r3,r17
1000dbec:	10800044 	addi	r2,r2,1
1000dbf0:	41400015 	stw	r5,0(r8)
1000dbf4:	44400115 	stw	r17,4(r8)
1000dbf8:	d8c02015 	stw	r3,128(sp)
1000dbfc:	d8801f15 	stw	r2,124(sp)
1000dc00:	010001c4 	movi	r4,7
1000dc04:	20bec816 	blt	r4,r2,1000d728 <__alt_data_end+0xf800d728>
1000dc08:	42000204 	addi	r8,r8,8
1000dc0c:	003ecd06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dc10:	d9002a17 	ldw	r4,168(sp)
1000dc14:	d8002785 	stb	zero,158(sp)
1000dc18:	203d2d16 	blt	r4,zero,1000d0d0 <__alt_data_end+0xf800d0d0>
1000dc1c:	00bfdfc4 	movi	r2,-129
1000dc20:	90a4703a 	and	r18,r18,r2
1000dc24:	003a6106 	br	1000c5ac <__alt_data_end+0xf800c5ac>
1000dc28:	010400b4 	movhi	r4,4098
1000dc2c:	21276784 	addi	r4,r4,-25186
1000dc30:	d9002c15 	stw	r4,176(sp)
1000dc34:	003bea06 	br	1000cbe0 <__alt_data_end+0xf800cbe0>
1000dc38:	d9002d17 	ldw	r4,180(sp)
1000dc3c:	d9801e04 	addi	r6,sp,120
1000dc40:	b80b883a 	mov	r5,r23
1000dc44:	0013a640 	call	10013a64 <__sprint_r>
1000dc48:	103a7b1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000dc4c:	d8c02017 	ldw	r3,128(sp)
1000dc50:	da000404 	addi	r8,sp,16
1000dc54:	003d4106 	br	1000d15c <__alt_data_end+0xf800d15c>
1000dc58:	d8801f17 	ldw	r2,124(sp)
1000dc5c:	014400b4 	movhi	r5,4098
1000dc60:	01000044 	movi	r4,1
1000dc64:	18c00044 	addi	r3,r3,1
1000dc68:	10800044 	addi	r2,r2,1
1000dc6c:	29676704 	addi	r5,r5,-25188
1000dc70:	41000115 	stw	r4,4(r8)
1000dc74:	41400015 	stw	r5,0(r8)
1000dc78:	d8c02015 	stw	r3,128(sp)
1000dc7c:	d8801f15 	stw	r2,124(sp)
1000dc80:	010001c4 	movi	r4,7
1000dc84:	20805c16 	blt	r4,r2,1000ddf8 <___vfprintf_internal_r+0x1bd0>
1000dc88:	42000204 	addi	r8,r8,8
1000dc8c:	8800041e 	bne	r17,zero,1000dca0 <___vfprintf_internal_r+0x1a78>
1000dc90:	d8803317 	ldw	r2,204(sp)
1000dc94:	1000021e 	bne	r2,zero,1000dca0 <___vfprintf_internal_r+0x1a78>
1000dc98:	9080004c 	andi	r2,r18,1
1000dc9c:	103be726 	beq	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000dca0:	d9003717 	ldw	r4,220(sp)
1000dca4:	d8801f17 	ldw	r2,124(sp)
1000dca8:	d9403417 	ldw	r5,208(sp)
1000dcac:	20c7883a 	add	r3,r4,r3
1000dcb0:	10800044 	addi	r2,r2,1
1000dcb4:	41000115 	stw	r4,4(r8)
1000dcb8:	41400015 	stw	r5,0(r8)
1000dcbc:	d8c02015 	stw	r3,128(sp)
1000dcc0:	d8801f15 	stw	r2,124(sp)
1000dcc4:	010001c4 	movi	r4,7
1000dcc8:	20812116 	blt	r4,r2,1000e150 <___vfprintf_internal_r+0x1f28>
1000dccc:	42000204 	addi	r8,r8,8
1000dcd0:	0463c83a 	sub	r17,zero,r17
1000dcd4:	0440730e 	bge	zero,r17,1000dea4 <___vfprintf_internal_r+0x1c7c>
1000dcd8:	05800404 	movi	r22,16
1000dcdc:	b440860e 	bge	r22,r17,1000def8 <___vfprintf_internal_r+0x1cd0>
1000dce0:	014400b4 	movhi	r5,4098
1000dce4:	29676784 	addi	r5,r5,-25186
1000dce8:	d9402c15 	stw	r5,176(sp)
1000dcec:	070001c4 	movi	fp,7
1000dcf0:	dcc02d17 	ldw	r19,180(sp)
1000dcf4:	00000306 	br	1000dd04 <___vfprintf_internal_r+0x1adc>
1000dcf8:	42000204 	addi	r8,r8,8
1000dcfc:	8c7ffc04 	addi	r17,r17,-16
1000dd00:	b440800e 	bge	r22,r17,1000df04 <___vfprintf_internal_r+0x1cdc>
1000dd04:	18c00404 	addi	r3,r3,16
1000dd08:	10800044 	addi	r2,r2,1
1000dd0c:	45000015 	stw	r20,0(r8)
1000dd10:	45800115 	stw	r22,4(r8)
1000dd14:	d8c02015 	stw	r3,128(sp)
1000dd18:	d8801f15 	stw	r2,124(sp)
1000dd1c:	e0bff60e 	bge	fp,r2,1000dcf8 <__alt_data_end+0xf800dcf8>
1000dd20:	d9801e04 	addi	r6,sp,120
1000dd24:	b80b883a 	mov	r5,r23
1000dd28:	9809883a 	mov	r4,r19
1000dd2c:	0013a640 	call	10013a64 <__sprint_r>
1000dd30:	103a411e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000dd34:	d8c02017 	ldw	r3,128(sp)
1000dd38:	d8801f17 	ldw	r2,124(sp)
1000dd3c:	da000404 	addi	r8,sp,16
1000dd40:	003fee06 	br	1000dcfc <__alt_data_end+0xf800dcfc>
1000dd44:	00bfffc4 	movi	r2,-1
1000dd48:	003a3f06 	br	1000c648 <__alt_data_end+0xf800c648>
1000dd4c:	008011c4 	movi	r2,71
1000dd50:	1440b816 	blt	r2,r17,1000e034 <___vfprintf_internal_r+0x1e0c>
1000dd54:	040400b4 	movhi	r16,4098
1000dd58:	84275904 	addi	r16,r16,-25244
1000dd5c:	00c000c4 	movi	r3,3
1000dd60:	00bfdfc4 	movi	r2,-129
1000dd64:	d8c02915 	stw	r3,164(sp)
1000dd68:	90a4703a 	and	r18,r18,r2
1000dd6c:	df002783 	ldbu	fp,158(sp)
1000dd70:	d8c02b15 	stw	r3,172(sp)
1000dd74:	d8002a15 	stw	zero,168(sp)
1000dd78:	d8003215 	stw	zero,200(sp)
1000dd7c:	003b0706 	br	1000c99c <__alt_data_end+0xf800c99c>
1000dd80:	d8c02e17 	ldw	r3,184(sp)
1000dd84:	1cc00017 	ldw	r19,0(r3)
1000dd88:	18c00104 	addi	r3,r3,4
1000dd8c:	d8c02e15 	stw	r3,184(sp)
1000dd90:	982dd7fa 	srai	r22,r19,31
1000dd94:	b005883a 	mov	r2,r22
1000dd98:	003a7706 	br	1000c778 <__alt_data_end+0xf800c778>
1000dd9c:	d8c02e17 	ldw	r3,184(sp)
1000dda0:	d9002f17 	ldw	r4,188(sp)
1000dda4:	18800017 	ldw	r2,0(r3)
1000dda8:	18c00104 	addi	r3,r3,4
1000ddac:	d8c02e15 	stw	r3,184(sp)
1000ddb0:	11000015 	stw	r4,0(r2)
1000ddb4:	00395406 	br	1000c308 <__alt_data_end+0xf800c308>
1000ddb8:	d9002e17 	ldw	r4,184(sp)
1000ddbc:	002d883a 	mov	r22,zero
1000ddc0:	24c00017 	ldw	r19,0(r4)
1000ddc4:	21000104 	addi	r4,r4,4
1000ddc8:	d9002e15 	stw	r4,184(sp)
1000ddcc:	003c0706 	br	1000cdec <__alt_data_end+0xf800cdec>
1000ddd0:	d9402e17 	ldw	r5,184(sp)
1000ddd4:	d8c02a17 	ldw	r3,168(sp)
1000ddd8:	002d883a 	mov	r22,zero
1000dddc:	28800104 	addi	r2,r5,4
1000dde0:	2cc0000b 	ldhu	r19,0(r5)
1000dde4:	183dc10e 	bge	r3,zero,1000d4ec <__alt_data_end+0xf800d4ec>
1000dde8:	003f7506 	br	1000dbc0 <__alt_data_end+0xf800dbc0>
1000ddec:	040400b4 	movhi	r16,4098
1000ddf0:	84275704 	addi	r16,r16,-25252
1000ddf4:	003aa706 	br	1000c894 <__alt_data_end+0xf800c894>
1000ddf8:	d9002d17 	ldw	r4,180(sp)
1000ddfc:	d9801e04 	addi	r6,sp,120
1000de00:	b80b883a 	mov	r5,r23
1000de04:	0013a640 	call	10013a64 <__sprint_r>
1000de08:	103a0b1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000de0c:	dc402617 	ldw	r17,152(sp)
1000de10:	d8c02017 	ldw	r3,128(sp)
1000de14:	da000404 	addi	r8,sp,16
1000de18:	003f9c06 	br	1000dc8c <__alt_data_end+0xf800dc8c>
1000de1c:	ac400043 	ldbu	r17,1(r21)
1000de20:	84000814 	ori	r16,r16,32
1000de24:	ad400044 	addi	r21,r21,1
1000de28:	8c403fcc 	andi	r17,r17,255
1000de2c:	8c40201c 	xori	r17,r17,128
1000de30:	8c7fe004 	addi	r17,r17,-128
1000de34:	00395e06 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000de38:	d8c02e15 	stw	r3,184(sp)
1000de3c:	0039883a 	mov	fp,zero
1000de40:	003e3506 	br	1000d718 <__alt_data_end+0xf800d718>
1000de44:	d9002d17 	ldw	r4,180(sp)
1000de48:	d9801e04 	addi	r6,sp,120
1000de4c:	b80b883a 	mov	r5,r23
1000de50:	0013a640 	call	10013a64 <__sprint_r>
1000de54:	1039f81e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000de58:	d8c02017 	ldw	r3,128(sp)
1000de5c:	da000404 	addi	r8,sp,16
1000de60:	003cd006 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000de64:	8009883a 	mov	r4,r16
1000de68:	df003d15 	stw	fp,244(sp)
1000de6c:	000c1380 	call	1000c138 <strlen>
1000de70:	d8802b15 	stw	r2,172(sp)
1000de74:	da003d17 	ldw	r8,244(sp)
1000de78:	103c200e 	bge	r2,zero,1000cefc <__alt_data_end+0xf800cefc>
1000de7c:	0005883a 	mov	r2,zero
1000de80:	003c1e06 	br	1000cefc <__alt_data_end+0xf800cefc>
1000de84:	d9002d17 	ldw	r4,180(sp)
1000de88:	d9801e04 	addi	r6,sp,120
1000de8c:	b80b883a 	mov	r5,r23
1000de90:	0013a640 	call	10013a64 <__sprint_r>
1000de94:	1039e81e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000de98:	d8c02017 	ldw	r3,128(sp)
1000de9c:	d8801f17 	ldw	r2,124(sp)
1000dea0:	da000404 	addi	r8,sp,16
1000dea4:	d9403317 	ldw	r5,204(sp)
1000dea8:	10800044 	addi	r2,r2,1
1000deac:	44000015 	stw	r16,0(r8)
1000deb0:	28c7883a 	add	r3,r5,r3
1000deb4:	003b5b06 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000deb8:	010400b4 	movhi	r4,4098
1000debc:	21276b84 	addi	r4,r4,-25170
1000dec0:	d9003515 	stw	r4,212(sp)
1000dec4:	003af206 	br	1000ca90 <__alt_data_end+0xf800ca90>
1000dec8:	013fffc4 	movi	r4,-1
1000decc:	003a0806 	br	1000c6f0 <__alt_data_end+0xf800c6f0>
1000ded0:	0023883a 	mov	r17,zero
1000ded4:	003d9d06 	br	1000d54c <__alt_data_end+0xf800d54c>
1000ded8:	d9002d17 	ldw	r4,180(sp)
1000dedc:	d9801e04 	addi	r6,sp,120
1000dee0:	b80b883a 	mov	r5,r23
1000dee4:	0013a640 	call	10013a64 <__sprint_r>
1000dee8:	1039d31e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000deec:	d8c02017 	ldw	r3,128(sp)
1000def0:	da000404 	addi	r8,sp,16
1000def4:	003d9406 	br	1000d548 <__alt_data_end+0xf800d548>
1000def8:	010400b4 	movhi	r4,4098
1000defc:	21276784 	addi	r4,r4,-25186
1000df00:	d9002c15 	stw	r4,176(sp)
1000df04:	d9002c17 	ldw	r4,176(sp)
1000df08:	1c47883a 	add	r3,r3,r17
1000df0c:	10800044 	addi	r2,r2,1
1000df10:	41000015 	stw	r4,0(r8)
1000df14:	44400115 	stw	r17,4(r8)
1000df18:	d8c02015 	stw	r3,128(sp)
1000df1c:	d8801f15 	stw	r2,124(sp)
1000df20:	010001c4 	movi	r4,7
1000df24:	20bfd716 	blt	r4,r2,1000de84 <__alt_data_end+0xf800de84>
1000df28:	42000204 	addi	r8,r8,8
1000df2c:	003fdd06 	br	1000dea4 <__alt_data_end+0xf800dea4>
1000df30:	d9002d17 	ldw	r4,180(sp)
1000df34:	d9801e04 	addi	r6,sp,120
1000df38:	b80b883a 	mov	r5,r23
1000df3c:	0013a640 	call	10013a64 <__sprint_r>
1000df40:	1039bd1e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000df44:	d8802617 	ldw	r2,152(sp)
1000df48:	d8c02017 	ldw	r3,128(sp)
1000df4c:	da000404 	addi	r8,sp,16
1000df50:	003e1006 	br	1000d794 <__alt_data_end+0xf800d794>
1000df54:	00800044 	movi	r2,1
1000df58:	10803fcc 	andi	r2,r2,255
1000df5c:	00c00044 	movi	r3,1
1000df60:	10fa0d26 	beq	r2,r3,1000c798 <__alt_data_end+0xf800c798>
1000df64:	00c00084 	movi	r3,2
1000df68:	10fbaf26 	beq	r2,r3,1000ce28 <__alt_data_end+0xf800ce28>
1000df6c:	003a6d06 	br	1000c924 <__alt_data_end+0xf800c924>
1000df70:	010400b4 	movhi	r4,4098
1000df74:	21276b84 	addi	r4,r4,-25170
1000df78:	d9003515 	stw	r4,212(sp)
1000df7c:	003b5406 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000df80:	d8802a17 	ldw	r2,168(sp)
1000df84:	00c00184 	movi	r3,6
1000df88:	1880012e 	bgeu	r3,r2,1000df90 <___vfprintf_internal_r+0x1d68>
1000df8c:	1805883a 	mov	r2,r3
1000df90:	d8802b15 	stw	r2,172(sp)
1000df94:	1000ef16 	blt	r2,zero,1000e354 <___vfprintf_internal_r+0x212c>
1000df98:	040400b4 	movhi	r16,4098
1000df9c:	d8802915 	stw	r2,164(sp)
1000dfa0:	dcc02e15 	stw	r19,184(sp)
1000dfa4:	d8002a15 	stw	zero,168(sp)
1000dfa8:	d8003215 	stw	zero,200(sp)
1000dfac:	84276504 	addi	r16,r16,-25196
1000dfb0:	0039883a 	mov	fp,zero
1000dfb4:	003a8006 	br	1000c9b8 <__alt_data_end+0xf800c9b8>
1000dfb8:	0021883a 	mov	r16,zero
1000dfbc:	003e0706 	br	1000d7dc <__alt_data_end+0xf800d7dc>
1000dfc0:	d9002d17 	ldw	r4,180(sp)
1000dfc4:	d9801e04 	addi	r6,sp,120
1000dfc8:	b80b883a 	mov	r5,r23
1000dfcc:	0013a640 	call	10013a64 <__sprint_r>
1000dfd0:	1039991e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000dfd4:	d8802617 	ldw	r2,152(sp)
1000dfd8:	d9403317 	ldw	r5,204(sp)
1000dfdc:	d8c02017 	ldw	r3,128(sp)
1000dfe0:	da000404 	addi	r8,sp,16
1000dfe4:	2885c83a 	sub	r2,r5,r2
1000dfe8:	003dfb06 	br	1000d7d8 <__alt_data_end+0xf800d7d8>
1000dfec:	9080004c 	andi	r2,r18,1
1000dff0:	103e8f1e 	bne	r2,zero,1000da30 <__alt_data_end+0xf800da30>
1000dff4:	d8802117 	ldw	r2,132(sp)
1000dff8:	003e9e06 	br	1000da74 <__alt_data_end+0xf800da74>
1000dffc:	1025883a 	mov	r18,r2
1000e000:	0039883a 	mov	fp,zero
1000e004:	00800084 	movi	r2,2
1000e008:	003fd306 	br	1000df58 <__alt_data_end+0xf800df58>
1000e00c:	07000b44 	movi	fp,45
1000e010:	df002785 	stb	fp,158(sp)
1000e014:	003a1b06 	br	1000c884 <__alt_data_end+0xf800c884>
1000e018:	00c00b44 	movi	r3,45
1000e01c:	d8c02785 	stb	r3,158(sp)
1000e020:	d8802915 	stw	r2,164(sp)
1000e024:	dc802c17 	ldw	r18,176(sp)
1000e028:	d8002a15 	stw	zero,168(sp)
1000e02c:	07000b44 	movi	fp,45
1000e030:	003a5e06 	br	1000c9ac <__alt_data_end+0xf800c9ac>
1000e034:	040400b4 	movhi	r16,4098
1000e038:	84275a04 	addi	r16,r16,-25240
1000e03c:	003f4706 	br	1000dd5c <__alt_data_end+0xf800dd5c>
1000e040:	d9002e17 	ldw	r4,184(sp)
1000e044:	d9402f17 	ldw	r5,188(sp)
1000e048:	20800017 	ldw	r2,0(r4)
1000e04c:	21000104 	addi	r4,r4,4
1000e050:	d9002e15 	stw	r4,184(sp)
1000e054:	11400015 	stw	r5,0(r2)
1000e058:	0038ab06 	br	1000c308 <__alt_data_end+0xf800c308>
1000e05c:	dd802617 	ldw	r22,152(sp)
1000e060:	00bfff44 	movi	r2,-3
1000e064:	b0801c16 	blt	r22,r2,1000e0d8 <___vfprintf_internal_r+0x1eb0>
1000e068:	d9402a17 	ldw	r5,168(sp)
1000e06c:	2d801a16 	blt	r5,r22,1000e0d8 <___vfprintf_internal_r+0x1eb0>
1000e070:	dd803215 	stw	r22,200(sp)
1000e074:	003e8906 	br	1000da9c <__alt_data_end+0xf800da9c>
1000e078:	010400b4 	movhi	r4,4098
1000e07c:	21276784 	addi	r4,r4,-25186
1000e080:	d9002c15 	stw	r4,176(sp)
1000e084:	003c9106 	br	1000d2cc <__alt_data_end+0xf800d2cc>
1000e088:	e005883a 	mov	r2,fp
1000e08c:	003e7906 	br	1000da74 <__alt_data_end+0xf800da74>
1000e090:	d9002a17 	ldw	r4,168(sp)
1000e094:	df002783 	ldbu	fp,158(sp)
1000e098:	dcc02e15 	stw	r19,184(sp)
1000e09c:	d9002915 	stw	r4,164(sp)
1000e0a0:	d9002b15 	stw	r4,172(sp)
1000e0a4:	d8002a15 	stw	zero,168(sp)
1000e0a8:	d8003215 	stw	zero,200(sp)
1000e0ac:	003a3b06 	br	1000c99c <__alt_data_end+0xf800c99c>
1000e0b0:	9080004c 	andi	r2,r18,1
1000e0b4:	0039883a 	mov	fp,zero
1000e0b8:	10000426 	beq	r2,zero,1000e0cc <___vfprintf_internal_r+0x1ea4>
1000e0bc:	00800c04 	movi	r2,48
1000e0c0:	dc001dc4 	addi	r16,sp,119
1000e0c4:	d8801dc5 	stb	r2,119(sp)
1000e0c8:	003b6406 	br	1000ce5c <__alt_data_end+0xf800ce5c>
1000e0cc:	d8002b15 	stw	zero,172(sp)
1000e0d0:	dc001e04 	addi	r16,sp,120
1000e0d4:	003a2b06 	br	1000c984 <__alt_data_end+0xf800c984>
1000e0d8:	8c7fff84 	addi	r17,r17,-2
1000e0dc:	b5bfffc4 	addi	r22,r22,-1
1000e0e0:	dd802615 	stw	r22,152(sp)
1000e0e4:	dc4022c5 	stb	r17,139(sp)
1000e0e8:	b000bf16 	blt	r22,zero,1000e3e8 <___vfprintf_internal_r+0x21c0>
1000e0ec:	00800ac4 	movi	r2,43
1000e0f0:	d8802305 	stb	r2,140(sp)
1000e0f4:	00800244 	movi	r2,9
1000e0f8:	15807016 	blt	r2,r22,1000e2bc <___vfprintf_internal_r+0x2094>
1000e0fc:	00800c04 	movi	r2,48
1000e100:	b5800c04 	addi	r22,r22,48
1000e104:	d8802345 	stb	r2,141(sp)
1000e108:	dd802385 	stb	r22,142(sp)
1000e10c:	d88023c4 	addi	r2,sp,143
1000e110:	df0022c4 	addi	fp,sp,139
1000e114:	d8c03317 	ldw	r3,204(sp)
1000e118:	1739c83a 	sub	fp,r2,fp
1000e11c:	d9003317 	ldw	r4,204(sp)
1000e120:	e0c7883a 	add	r3,fp,r3
1000e124:	df003a15 	stw	fp,232(sp)
1000e128:	d8c02b15 	stw	r3,172(sp)
1000e12c:	00800044 	movi	r2,1
1000e130:	1100b30e 	bge	r2,r4,1000e400 <___vfprintf_internal_r+0x21d8>
1000e134:	d8c02b17 	ldw	r3,172(sp)
1000e138:	18c00044 	addi	r3,r3,1
1000e13c:	d8c02b15 	stw	r3,172(sp)
1000e140:	1805883a 	mov	r2,r3
1000e144:	1800ac16 	blt	r3,zero,1000e3f8 <___vfprintf_internal_r+0x21d0>
1000e148:	d8003215 	stw	zero,200(sp)
1000e14c:	003e5d06 	br	1000dac4 <__alt_data_end+0xf800dac4>
1000e150:	d9002d17 	ldw	r4,180(sp)
1000e154:	d9801e04 	addi	r6,sp,120
1000e158:	b80b883a 	mov	r5,r23
1000e15c:	0013a640 	call	10013a64 <__sprint_r>
1000e160:	1039351e 	bne	r2,zero,1000c638 <__alt_data_end+0xf800c638>
1000e164:	dc402617 	ldw	r17,152(sp)
1000e168:	d8c02017 	ldw	r3,128(sp)
1000e16c:	d8801f17 	ldw	r2,124(sp)
1000e170:	da000404 	addi	r8,sp,16
1000e174:	003ed606 	br	1000dcd0 <__alt_data_end+0xf800dcd0>
1000e178:	182b883a 	mov	r21,r3
1000e17c:	d8002a15 	stw	zero,168(sp)
1000e180:	00388c06 	br	1000c3b4 <__alt_data_end+0xf800c3b4>
1000e184:	d8802a17 	ldw	r2,168(sp)
1000e188:	103e071e 	bne	r2,zero,1000d9a8 <__alt_data_end+0xf800d9a8>
1000e18c:	dc002a15 	stw	r16,168(sp)
1000e190:	003e0506 	br	1000d9a8 <__alt_data_end+0xf800d9a8>
1000e194:	d9002a17 	ldw	r4,168(sp)
1000e198:	20c00044 	addi	r3,r4,1
1000e19c:	003e0f06 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000e1a0:	01400184 	movi	r5,6
1000e1a4:	d9402a15 	stw	r5,168(sp)
1000e1a8:	003dff06 	br	1000d9a8 <__alt_data_end+0xf800d9a8>
1000e1ac:	d8802104 	addi	r2,sp,132
1000e1b0:	d8800315 	stw	r2,12(sp)
1000e1b4:	d8802504 	addi	r2,sp,148
1000e1b8:	d8800215 	stw	r2,8(sp)
1000e1bc:	d8802604 	addi	r2,sp,152
1000e1c0:	d8800115 	stw	r2,4(sp)
1000e1c4:	d8802a17 	ldw	r2,168(sp)
1000e1c8:	d9403617 	ldw	r5,216(sp)
1000e1cc:	d9002d17 	ldw	r4,180(sp)
1000e1d0:	d8800015 	stw	r2,0(sp)
1000e1d4:	01c000c4 	movi	r7,3
1000e1d8:	980d883a 	mov	r6,r19
1000e1dc:	da003d15 	stw	r8,244(sp)
1000e1e0:	000e9580 	call	1000e958 <_dtoa_r>
1000e1e4:	d8c02a17 	ldw	r3,168(sp)
1000e1e8:	da003d17 	ldw	r8,244(sp)
1000e1ec:	1021883a 	mov	r16,r2
1000e1f0:	10f9883a 	add	fp,r2,r3
1000e1f4:	81000007 	ldb	r4,0(r16)
1000e1f8:	00800c04 	movi	r2,48
1000e1fc:	20805e26 	beq	r4,r2,1000e378 <___vfprintf_internal_r+0x2150>
1000e200:	d8c02617 	ldw	r3,152(sp)
1000e204:	e0f9883a 	add	fp,fp,r3
1000e208:	003e0a06 	br	1000da34 <__alt_data_end+0xf800da34>
1000e20c:	00c00b44 	movi	r3,45
1000e210:	24e0003c 	xorhi	r19,r4,32768
1000e214:	d8c02905 	stb	r3,164(sp)
1000e218:	003de906 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000e21c:	d8c03217 	ldw	r3,200(sp)
1000e220:	00c07a0e 	bge	zero,r3,1000e40c <___vfprintf_internal_r+0x21e4>
1000e224:	00800044 	movi	r2,1
1000e228:	d9003317 	ldw	r4,204(sp)
1000e22c:	1105883a 	add	r2,r2,r4
1000e230:	d8802b15 	stw	r2,172(sp)
1000e234:	10004e16 	blt	r2,zero,1000e370 <___vfprintf_internal_r+0x2148>
1000e238:	044019c4 	movi	r17,103
1000e23c:	003e2106 	br	1000dac4 <__alt_data_end+0xf800dac4>
1000e240:	d9002a17 	ldw	r4,168(sp)
1000e244:	d8802104 	addi	r2,sp,132
1000e248:	d8800315 	stw	r2,12(sp)
1000e24c:	d9000015 	stw	r4,0(sp)
1000e250:	d8802504 	addi	r2,sp,148
1000e254:	d9403617 	ldw	r5,216(sp)
1000e258:	d9002d17 	ldw	r4,180(sp)
1000e25c:	d8800215 	stw	r2,8(sp)
1000e260:	d8802604 	addi	r2,sp,152
1000e264:	d8800115 	stw	r2,4(sp)
1000e268:	01c000c4 	movi	r7,3
1000e26c:	980d883a 	mov	r6,r19
1000e270:	da003d15 	stw	r8,244(sp)
1000e274:	000e9580 	call	1000e958 <_dtoa_r>
1000e278:	d8c02a17 	ldw	r3,168(sp)
1000e27c:	da003d17 	ldw	r8,244(sp)
1000e280:	1021883a 	mov	r16,r2
1000e284:	00801184 	movi	r2,70
1000e288:	80f9883a 	add	fp,r16,r3
1000e28c:	88bfd926 	beq	r17,r2,1000e1f4 <__alt_data_end+0xf800e1f4>
1000e290:	003de806 	br	1000da34 <__alt_data_end+0xf800da34>
1000e294:	d9002a17 	ldw	r4,168(sp)
1000e298:	00c04d0e 	bge	zero,r3,1000e3d0 <___vfprintf_internal_r+0x21a8>
1000e29c:	2000441e 	bne	r4,zero,1000e3b0 <___vfprintf_internal_r+0x2188>
1000e2a0:	9480004c 	andi	r18,r18,1
1000e2a4:	9000421e 	bne	r18,zero,1000e3b0 <___vfprintf_internal_r+0x2188>
1000e2a8:	1805883a 	mov	r2,r3
1000e2ac:	18006f16 	blt	r3,zero,1000e46c <___vfprintf_internal_r+0x2244>
1000e2b0:	d8c03217 	ldw	r3,200(sp)
1000e2b4:	d8c02b15 	stw	r3,172(sp)
1000e2b8:	003e0206 	br	1000dac4 <__alt_data_end+0xf800dac4>
1000e2bc:	df0022c4 	addi	fp,sp,139
1000e2c0:	dc002a15 	stw	r16,168(sp)
1000e2c4:	4027883a 	mov	r19,r8
1000e2c8:	e021883a 	mov	r16,fp
1000e2cc:	b009883a 	mov	r4,r22
1000e2d0:	01400284 	movi	r5,10
1000e2d4:	00084500 	call	10008450 <__modsi3>
1000e2d8:	10800c04 	addi	r2,r2,48
1000e2dc:	843fffc4 	addi	r16,r16,-1
1000e2e0:	b009883a 	mov	r4,r22
1000e2e4:	01400284 	movi	r5,10
1000e2e8:	80800005 	stb	r2,0(r16)
1000e2ec:	00083cc0 	call	100083cc <__divsi3>
1000e2f0:	102d883a 	mov	r22,r2
1000e2f4:	00800244 	movi	r2,9
1000e2f8:	15bff416 	blt	r2,r22,1000e2cc <__alt_data_end+0xf800e2cc>
1000e2fc:	9811883a 	mov	r8,r19
1000e300:	b0800c04 	addi	r2,r22,48
1000e304:	8027883a 	mov	r19,r16
1000e308:	997fffc4 	addi	r5,r19,-1
1000e30c:	98bfffc5 	stb	r2,-1(r19)
1000e310:	dc002a17 	ldw	r16,168(sp)
1000e314:	2f006d2e 	bgeu	r5,fp,1000e4cc <___vfprintf_internal_r+0x22a4>
1000e318:	d9c02384 	addi	r7,sp,142
1000e31c:	3ccfc83a 	sub	r7,r7,r19
1000e320:	d9002344 	addi	r4,sp,141
1000e324:	e1cf883a 	add	r7,fp,r7
1000e328:	00000106 	br	1000e330 <___vfprintf_internal_r+0x2108>
1000e32c:	28800003 	ldbu	r2,0(r5)
1000e330:	20800005 	stb	r2,0(r4)
1000e334:	21000044 	addi	r4,r4,1
1000e338:	29400044 	addi	r5,r5,1
1000e33c:	393ffb1e 	bne	r7,r4,1000e32c <__alt_data_end+0xf800e32c>
1000e340:	d8802304 	addi	r2,sp,140
1000e344:	14c5c83a 	sub	r2,r2,r19
1000e348:	d8c02344 	addi	r3,sp,141
1000e34c:	1885883a 	add	r2,r3,r2
1000e350:	003f7006 	br	1000e114 <__alt_data_end+0xf800e114>
1000e354:	0005883a 	mov	r2,zero
1000e358:	003f0f06 	br	1000df98 <__alt_data_end+0xf800df98>
1000e35c:	d8c03217 	ldw	r3,200(sp)
1000e360:	18c00044 	addi	r3,r3,1
1000e364:	d8c02b15 	stw	r3,172(sp)
1000e368:	1805883a 	mov	r2,r3
1000e36c:	183fb20e 	bge	r3,zero,1000e238 <__alt_data_end+0xf800e238>
1000e370:	0005883a 	mov	r2,zero
1000e374:	003fb006 	br	1000e238 <__alt_data_end+0xf800e238>
1000e378:	d9003617 	ldw	r4,216(sp)
1000e37c:	000d883a 	mov	r6,zero
1000e380:	000f883a 	mov	r7,zero
1000e384:	980b883a 	mov	r5,r19
1000e388:	d8c03c15 	stw	r3,240(sp)
1000e38c:	da003d15 	stw	r8,244(sp)
1000e390:	000a7ec0 	call	1000a7ec <__eqdf2>
1000e394:	d8c03c17 	ldw	r3,240(sp)
1000e398:	da003d17 	ldw	r8,244(sp)
1000e39c:	103f9826 	beq	r2,zero,1000e200 <__alt_data_end+0xf800e200>
1000e3a0:	00800044 	movi	r2,1
1000e3a4:	10c7c83a 	sub	r3,r2,r3
1000e3a8:	d8c02615 	stw	r3,152(sp)
1000e3ac:	003f9506 	br	1000e204 <__alt_data_end+0xf800e204>
1000e3b0:	d9002a17 	ldw	r4,168(sp)
1000e3b4:	d8c03217 	ldw	r3,200(sp)
1000e3b8:	20800044 	addi	r2,r4,1
1000e3bc:	1885883a 	add	r2,r3,r2
1000e3c0:	d8802b15 	stw	r2,172(sp)
1000e3c4:	103dbf0e 	bge	r2,zero,1000dac4 <__alt_data_end+0xf800dac4>
1000e3c8:	0005883a 	mov	r2,zero
1000e3cc:	003dbd06 	br	1000dac4 <__alt_data_end+0xf800dac4>
1000e3d0:	2000201e 	bne	r4,zero,1000e454 <___vfprintf_internal_r+0x222c>
1000e3d4:	9480004c 	andi	r18,r18,1
1000e3d8:	90001e1e 	bne	r18,zero,1000e454 <___vfprintf_internal_r+0x222c>
1000e3dc:	00800044 	movi	r2,1
1000e3e0:	d8802b15 	stw	r2,172(sp)
1000e3e4:	003db706 	br	1000dac4 <__alt_data_end+0xf800dac4>
1000e3e8:	00800b44 	movi	r2,45
1000e3ec:	05adc83a 	sub	r22,zero,r22
1000e3f0:	d8802305 	stb	r2,140(sp)
1000e3f4:	003f3f06 	br	1000e0f4 <__alt_data_end+0xf800e0f4>
1000e3f8:	0005883a 	mov	r2,zero
1000e3fc:	003f5206 	br	1000e148 <__alt_data_end+0xf800e148>
1000e400:	90a4703a 	and	r18,r18,r2
1000e404:	903f4e26 	beq	r18,zero,1000e140 <__alt_data_end+0xf800e140>
1000e408:	003f4a06 	br	1000e134 <__alt_data_end+0xf800e134>
1000e40c:	00800084 	movi	r2,2
1000e410:	10c5c83a 	sub	r2,r2,r3
1000e414:	003f8406 	br	1000e228 <__alt_data_end+0xf800e228>
1000e418:	d9402e17 	ldw	r5,184(sp)
1000e41c:	d9002e17 	ldw	r4,184(sp)
1000e420:	ac400043 	ldbu	r17,1(r21)
1000e424:	29400017 	ldw	r5,0(r5)
1000e428:	20800104 	addi	r2,r4,4
1000e42c:	d8802e15 	stw	r2,184(sp)
1000e430:	d9402a15 	stw	r5,168(sp)
1000e434:	182b883a 	mov	r21,r3
1000e438:	283e7b0e 	bge	r5,zero,1000de28 <__alt_data_end+0xf800de28>
1000e43c:	8c403fcc 	andi	r17,r17,255
1000e440:	017fffc4 	movi	r5,-1
1000e444:	8c40201c 	xori	r17,r17,128
1000e448:	d9402a15 	stw	r5,168(sp)
1000e44c:	8c7fe004 	addi	r17,r17,-128
1000e450:	0037d706 	br	1000c3b0 <__alt_data_end+0xf800c3b0>
1000e454:	d8c02a17 	ldw	r3,168(sp)
1000e458:	18c00084 	addi	r3,r3,2
1000e45c:	d8c02b15 	stw	r3,172(sp)
1000e460:	1805883a 	mov	r2,r3
1000e464:	183d970e 	bge	r3,zero,1000dac4 <__alt_data_end+0xf800dac4>
1000e468:	003fd706 	br	1000e3c8 <__alt_data_end+0xf800e3c8>
1000e46c:	0005883a 	mov	r2,zero
1000e470:	003f8f06 	br	1000e2b0 <__alt_data_end+0xf800e2b0>
1000e474:	9080004c 	andi	r2,r18,1
1000e478:	103f821e 	bne	r2,zero,1000e284 <__alt_data_end+0xf800e284>
1000e47c:	d8802117 	ldw	r2,132(sp)
1000e480:	1405c83a 	sub	r2,r2,r16
1000e484:	d8803315 	stw	r2,204(sp)
1000e488:	b47ef426 	beq	r22,r17,1000e05c <__alt_data_end+0xf800e05c>
1000e48c:	dd802617 	ldw	r22,152(sp)
1000e490:	003f1206 	br	1000e0dc <__alt_data_end+0xf800e0dc>
1000e494:	d8c02b03 	ldbu	r3,172(sp)
1000e498:	d8c02785 	stb	r3,158(sp)
1000e49c:	0038df06 	br	1000c81c <__alt_data_end+0xf800c81c>
1000e4a0:	d8c02b03 	ldbu	r3,172(sp)
1000e4a4:	d8c02785 	stb	r3,158(sp)
1000e4a8:	0038aa06 	br	1000c754 <__alt_data_end+0xf800c754>
1000e4ac:	d8c02b03 	ldbu	r3,172(sp)
1000e4b0:	d8c02785 	stb	r3,158(sp)
1000e4b4:	003a4306 	br	1000cdc4 <__alt_data_end+0xf800cdc4>
1000e4b8:	d8c02b03 	ldbu	r3,172(sp)
1000e4bc:	d8c02785 	stb	r3,158(sp)
1000e4c0:	003af506 	br	1000d098 <__alt_data_end+0xf800d098>
1000e4c4:	0005883a 	mov	r2,zero
1000e4c8:	003d7b06 	br	1000dab8 <__alt_data_end+0xf800dab8>
1000e4cc:	d8802344 	addi	r2,sp,141
1000e4d0:	003f1006 	br	1000e114 <__alt_data_end+0xf800e114>
1000e4d4:	d8c02b03 	ldbu	r3,172(sp)
1000e4d8:	d8c02785 	stb	r3,158(sp)
1000e4dc:	0038fd06 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000e4e0:	d8c02b03 	ldbu	r3,172(sp)
1000e4e4:	d8c02785 	stb	r3,158(sp)
1000e4e8:	003a9706 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000e4ec:	d8c02b03 	ldbu	r3,172(sp)
1000e4f0:	d8c02785 	stb	r3,158(sp)
1000e4f4:	003a1806 	br	1000cd58 <__alt_data_end+0xf800cd58>
1000e4f8:	d8c02b03 	ldbu	r3,172(sp)
1000e4fc:	d8c02785 	stb	r3,158(sp)
1000e500:	003abe06 	br	1000cffc <__alt_data_end+0xf800cffc>

1000e504 <__vfprintf_internal>:
1000e504:	008400b4 	movhi	r2,4098
1000e508:	10af4504 	addi	r2,r2,-17132
1000e50c:	300f883a 	mov	r7,r6
1000e510:	280d883a 	mov	r6,r5
1000e514:	200b883a 	mov	r5,r4
1000e518:	11000017 	ldw	r4,0(r2)
1000e51c:	000c2281 	jmpi	1000c228 <___vfprintf_internal_r>

1000e520 <__sbprintf>:
1000e520:	2880030b 	ldhu	r2,12(r5)
1000e524:	2ac01917 	ldw	r11,100(r5)
1000e528:	2a80038b 	ldhu	r10,14(r5)
1000e52c:	2a400717 	ldw	r9,28(r5)
1000e530:	2a000917 	ldw	r8,36(r5)
1000e534:	defee204 	addi	sp,sp,-1144
1000e538:	00c10004 	movi	r3,1024
1000e53c:	dc011a15 	stw	r16,1128(sp)
1000e540:	10bfff4c 	andi	r2,r2,65533
1000e544:	2821883a 	mov	r16,r5
1000e548:	d8cb883a 	add	r5,sp,r3
1000e54c:	dc811c15 	stw	r18,1136(sp)
1000e550:	dc411b15 	stw	r17,1132(sp)
1000e554:	dfc11d15 	stw	ra,1140(sp)
1000e558:	2025883a 	mov	r18,r4
1000e55c:	d881030d 	sth	r2,1036(sp)
1000e560:	dac11915 	stw	r11,1124(sp)
1000e564:	da81038d 	sth	r10,1038(sp)
1000e568:	da410715 	stw	r9,1052(sp)
1000e56c:	da010915 	stw	r8,1060(sp)
1000e570:	dec10015 	stw	sp,1024(sp)
1000e574:	dec10415 	stw	sp,1040(sp)
1000e578:	d8c10215 	stw	r3,1032(sp)
1000e57c:	d8c10515 	stw	r3,1044(sp)
1000e580:	d8010615 	stw	zero,1048(sp)
1000e584:	000c2280 	call	1000c228 <___vfprintf_internal_r>
1000e588:	1023883a 	mov	r17,r2
1000e58c:	10000416 	blt	r2,zero,1000e5a0 <__sbprintf+0x80>
1000e590:	d9410004 	addi	r5,sp,1024
1000e594:	9009883a 	mov	r4,r18
1000e598:	00101fc0 	call	100101fc <_fflush_r>
1000e59c:	10000d1e 	bne	r2,zero,1000e5d4 <__sbprintf+0xb4>
1000e5a0:	d881030b 	ldhu	r2,1036(sp)
1000e5a4:	1080100c 	andi	r2,r2,64
1000e5a8:	10000326 	beq	r2,zero,1000e5b8 <__sbprintf+0x98>
1000e5ac:	8080030b 	ldhu	r2,12(r16)
1000e5b0:	10801014 	ori	r2,r2,64
1000e5b4:	8080030d 	sth	r2,12(r16)
1000e5b8:	8805883a 	mov	r2,r17
1000e5bc:	dfc11d17 	ldw	ra,1140(sp)
1000e5c0:	dc811c17 	ldw	r18,1136(sp)
1000e5c4:	dc411b17 	ldw	r17,1132(sp)
1000e5c8:	dc011a17 	ldw	r16,1128(sp)
1000e5cc:	dec11e04 	addi	sp,sp,1144
1000e5d0:	f800283a 	ret
1000e5d4:	047fffc4 	movi	r17,-1
1000e5d8:	003ff106 	br	1000e5a0 <__alt_data_end+0xf800e5a0>

1000e5dc <__swsetup_r>:
1000e5dc:	008400b4 	movhi	r2,4098
1000e5e0:	defffd04 	addi	sp,sp,-12
1000e5e4:	10af4504 	addi	r2,r2,-17132
1000e5e8:	dc400115 	stw	r17,4(sp)
1000e5ec:	2023883a 	mov	r17,r4
1000e5f0:	11000017 	ldw	r4,0(r2)
1000e5f4:	dc000015 	stw	r16,0(sp)
1000e5f8:	dfc00215 	stw	ra,8(sp)
1000e5fc:	2821883a 	mov	r16,r5
1000e600:	20000226 	beq	r4,zero,1000e60c <__swsetup_r+0x30>
1000e604:	20800e17 	ldw	r2,56(r4)
1000e608:	10003126 	beq	r2,zero,1000e6d0 <__swsetup_r+0xf4>
1000e60c:	8080030b 	ldhu	r2,12(r16)
1000e610:	10c0020c 	andi	r3,r2,8
1000e614:	1009883a 	mov	r4,r2
1000e618:	18000f26 	beq	r3,zero,1000e658 <__swsetup_r+0x7c>
1000e61c:	80c00417 	ldw	r3,16(r16)
1000e620:	18001526 	beq	r3,zero,1000e678 <__swsetup_r+0x9c>
1000e624:	1100004c 	andi	r4,r2,1
1000e628:	20001c1e 	bne	r4,zero,1000e69c <__swsetup_r+0xc0>
1000e62c:	1080008c 	andi	r2,r2,2
1000e630:	1000291e 	bne	r2,zero,1000e6d8 <__swsetup_r+0xfc>
1000e634:	80800517 	ldw	r2,20(r16)
1000e638:	80800215 	stw	r2,8(r16)
1000e63c:	18001c26 	beq	r3,zero,1000e6b0 <__swsetup_r+0xd4>
1000e640:	0005883a 	mov	r2,zero
1000e644:	dfc00217 	ldw	ra,8(sp)
1000e648:	dc400117 	ldw	r17,4(sp)
1000e64c:	dc000017 	ldw	r16,0(sp)
1000e650:	dec00304 	addi	sp,sp,12
1000e654:	f800283a 	ret
1000e658:	2080040c 	andi	r2,r4,16
1000e65c:	10002e26 	beq	r2,zero,1000e718 <__swsetup_r+0x13c>
1000e660:	2080010c 	andi	r2,r4,4
1000e664:	10001e1e 	bne	r2,zero,1000e6e0 <__swsetup_r+0x104>
1000e668:	80c00417 	ldw	r3,16(r16)
1000e66c:	20800214 	ori	r2,r4,8
1000e670:	8080030d 	sth	r2,12(r16)
1000e674:	183feb1e 	bne	r3,zero,1000e624 <__alt_data_end+0xf800e624>
1000e678:	1100a00c 	andi	r4,r2,640
1000e67c:	01408004 	movi	r5,512
1000e680:	217fe826 	beq	r4,r5,1000e624 <__alt_data_end+0xf800e624>
1000e684:	800b883a 	mov	r5,r16
1000e688:	8809883a 	mov	r4,r17
1000e68c:	00111f40 	call	100111f4 <__smakebuf_r>
1000e690:	8080030b 	ldhu	r2,12(r16)
1000e694:	80c00417 	ldw	r3,16(r16)
1000e698:	003fe206 	br	1000e624 <__alt_data_end+0xf800e624>
1000e69c:	80800517 	ldw	r2,20(r16)
1000e6a0:	80000215 	stw	zero,8(r16)
1000e6a4:	0085c83a 	sub	r2,zero,r2
1000e6a8:	80800615 	stw	r2,24(r16)
1000e6ac:	183fe41e 	bne	r3,zero,1000e640 <__alt_data_end+0xf800e640>
1000e6b0:	80c0030b 	ldhu	r3,12(r16)
1000e6b4:	0005883a 	mov	r2,zero
1000e6b8:	1900200c 	andi	r4,r3,128
1000e6bc:	203fe126 	beq	r4,zero,1000e644 <__alt_data_end+0xf800e644>
1000e6c0:	18c01014 	ori	r3,r3,64
1000e6c4:	80c0030d 	sth	r3,12(r16)
1000e6c8:	00bfffc4 	movi	r2,-1
1000e6cc:	003fdd06 	br	1000e644 <__alt_data_end+0xf800e644>
1000e6d0:	00105e80 	call	100105e8 <__sinit>
1000e6d4:	003fcd06 	br	1000e60c <__alt_data_end+0xf800e60c>
1000e6d8:	0005883a 	mov	r2,zero
1000e6dc:	003fd606 	br	1000e638 <__alt_data_end+0xf800e638>
1000e6e0:	81400c17 	ldw	r5,48(r16)
1000e6e4:	28000626 	beq	r5,zero,1000e700 <__swsetup_r+0x124>
1000e6e8:	80801004 	addi	r2,r16,64
1000e6ec:	28800326 	beq	r5,r2,1000e6fc <__swsetup_r+0x120>
1000e6f0:	8809883a 	mov	r4,r17
1000e6f4:	001075c0 	call	1001075c <_free_r>
1000e6f8:	8100030b 	ldhu	r4,12(r16)
1000e6fc:	80000c15 	stw	zero,48(r16)
1000e700:	80c00417 	ldw	r3,16(r16)
1000e704:	00bff6c4 	movi	r2,-37
1000e708:	1108703a 	and	r4,r2,r4
1000e70c:	80000115 	stw	zero,4(r16)
1000e710:	80c00015 	stw	r3,0(r16)
1000e714:	003fd506 	br	1000e66c <__alt_data_end+0xf800e66c>
1000e718:	00800244 	movi	r2,9
1000e71c:	88800015 	stw	r2,0(r17)
1000e720:	20801014 	ori	r2,r4,64
1000e724:	8080030d 	sth	r2,12(r16)
1000e728:	00bfffc4 	movi	r2,-1
1000e72c:	003fc506 	br	1000e644 <__alt_data_end+0xf800e644>

1000e730 <quorem>:
1000e730:	defff204 	addi	sp,sp,-56
1000e734:	ddc00b15 	stw	r23,44(sp)
1000e738:	20800417 	ldw	r2,16(r4)
1000e73c:	2dc00417 	ldw	r23,16(r5)
1000e740:	dfc00d15 	stw	ra,52(sp)
1000e744:	df000c15 	stw	fp,48(sp)
1000e748:	dd800a15 	stw	r22,40(sp)
1000e74c:	dd400915 	stw	r21,36(sp)
1000e750:	dd000815 	stw	r20,32(sp)
1000e754:	dcc00715 	stw	r19,28(sp)
1000e758:	dc800615 	stw	r18,24(sp)
1000e75c:	dc400515 	stw	r17,20(sp)
1000e760:	dc000415 	stw	r16,16(sp)
1000e764:	15c07a16 	blt	r2,r23,1000e950 <quorem+0x220>
1000e768:	bdffffc4 	addi	r23,r23,-1
1000e76c:	bde9883a 	add	r20,r23,r23
1000e770:	28c00504 	addi	r3,r5,20
1000e774:	a529883a 	add	r20,r20,r20
1000e778:	1d39883a 	add	fp,r3,r20
1000e77c:	24c00504 	addi	r19,r4,20
1000e780:	d9400215 	stw	r5,8(sp)
1000e784:	9d29883a 	add	r20,r19,r20
1000e788:	e1400017 	ldw	r5,0(fp)
1000e78c:	d9000015 	stw	r4,0(sp)
1000e790:	a1000017 	ldw	r4,0(r20)
1000e794:	29400044 	addi	r5,r5,1
1000e798:	d8c00115 	stw	r3,4(sp)
1000e79c:	dd000315 	stw	r20,12(sp)
1000e7a0:	00084c40 	call	100084c4 <__udivsi3>
1000e7a4:	1025883a 	mov	r18,r2
1000e7a8:	10003026 	beq	r2,zero,1000e86c <quorem+0x13c>
1000e7ac:	dc400117 	ldw	r17,4(sp)
1000e7b0:	9829883a 	mov	r20,r19
1000e7b4:	002d883a 	mov	r22,zero
1000e7b8:	0021883a 	mov	r16,zero
1000e7bc:	8d400017 	ldw	r21,0(r17)
1000e7c0:	900b883a 	mov	r5,r18
1000e7c4:	8c400104 	addi	r17,r17,4
1000e7c8:	a93fffcc 	andi	r4,r21,65535
1000e7cc:	00085800 	call	10008580 <__mulsi3>
1000e7d0:	a808d43a 	srli	r4,r21,16
1000e7d4:	900b883a 	mov	r5,r18
1000e7d8:	15ad883a 	add	r22,r2,r22
1000e7dc:	00085800 	call	10008580 <__mulsi3>
1000e7e0:	a1000017 	ldw	r4,0(r20)
1000e7e4:	b00cd43a 	srli	r6,r22,16
1000e7e8:	b0ffffcc 	andi	r3,r22,65535
1000e7ec:	217fffcc 	andi	r5,r4,65535
1000e7f0:	2c21883a 	add	r16,r5,r16
1000e7f4:	80c7c83a 	sub	r3,r16,r3
1000e7f8:	2008d43a 	srli	r4,r4,16
1000e7fc:	1185883a 	add	r2,r2,r6
1000e800:	1821d43a 	srai	r16,r3,16
1000e804:	117fffcc 	andi	r5,r2,65535
1000e808:	2149c83a 	sub	r4,r4,r5
1000e80c:	2421883a 	add	r16,r4,r16
1000e810:	8008943a 	slli	r4,r16,16
1000e814:	18ffffcc 	andi	r3,r3,65535
1000e818:	102cd43a 	srli	r22,r2,16
1000e81c:	20c8b03a 	or	r4,r4,r3
1000e820:	a1000015 	stw	r4,0(r20)
1000e824:	8021d43a 	srai	r16,r16,16
1000e828:	a5000104 	addi	r20,r20,4
1000e82c:	e47fe32e 	bgeu	fp,r17,1000e7bc <__alt_data_end+0xf800e7bc>
1000e830:	d8c00317 	ldw	r3,12(sp)
1000e834:	18800017 	ldw	r2,0(r3)
1000e838:	10000c1e 	bne	r2,zero,1000e86c <quorem+0x13c>
1000e83c:	18bfff04 	addi	r2,r3,-4
1000e840:	9880082e 	bgeu	r19,r2,1000e864 <quorem+0x134>
1000e844:	18ffff17 	ldw	r3,-4(r3)
1000e848:	18000326 	beq	r3,zero,1000e858 <quorem+0x128>
1000e84c:	00000506 	br	1000e864 <quorem+0x134>
1000e850:	10c00017 	ldw	r3,0(r2)
1000e854:	1800031e 	bne	r3,zero,1000e864 <quorem+0x134>
1000e858:	10bfff04 	addi	r2,r2,-4
1000e85c:	bdffffc4 	addi	r23,r23,-1
1000e860:	98bffb36 	bltu	r19,r2,1000e850 <__alt_data_end+0xf800e850>
1000e864:	d8c00017 	ldw	r3,0(sp)
1000e868:	1dc00415 	stw	r23,16(r3)
1000e86c:	d9400217 	ldw	r5,8(sp)
1000e870:	d9000017 	ldw	r4,0(sp)
1000e874:	00129f00 	call	100129f0 <__mcmp>
1000e878:	10002816 	blt	r2,zero,1000e91c <quorem+0x1ec>
1000e87c:	dc400117 	ldw	r17,4(sp)
1000e880:	94800044 	addi	r18,r18,1
1000e884:	980d883a 	mov	r6,r19
1000e888:	0007883a 	mov	r3,zero
1000e88c:	31000017 	ldw	r4,0(r6)
1000e890:	89400017 	ldw	r5,0(r17)
1000e894:	31800104 	addi	r6,r6,4
1000e898:	20bfffcc 	andi	r2,r4,65535
1000e89c:	10c7883a 	add	r3,r2,r3
1000e8a0:	28bfffcc 	andi	r2,r5,65535
1000e8a4:	1885c83a 	sub	r2,r3,r2
1000e8a8:	280ad43a 	srli	r5,r5,16
1000e8ac:	2008d43a 	srli	r4,r4,16
1000e8b0:	1007d43a 	srai	r3,r2,16
1000e8b4:	10bfffcc 	andi	r2,r2,65535
1000e8b8:	2149c83a 	sub	r4,r4,r5
1000e8bc:	20c9883a 	add	r4,r4,r3
1000e8c0:	200a943a 	slli	r5,r4,16
1000e8c4:	8c400104 	addi	r17,r17,4
1000e8c8:	2007d43a 	srai	r3,r4,16
1000e8cc:	2884b03a 	or	r2,r5,r2
1000e8d0:	30bfff15 	stw	r2,-4(r6)
1000e8d4:	e47fed2e 	bgeu	fp,r17,1000e88c <__alt_data_end+0xf800e88c>
1000e8d8:	bdc5883a 	add	r2,r23,r23
1000e8dc:	1085883a 	add	r2,r2,r2
1000e8e0:	9887883a 	add	r3,r19,r2
1000e8e4:	18800017 	ldw	r2,0(r3)
1000e8e8:	10000c1e 	bne	r2,zero,1000e91c <quorem+0x1ec>
1000e8ec:	18bfff04 	addi	r2,r3,-4
1000e8f0:	9880082e 	bgeu	r19,r2,1000e914 <quorem+0x1e4>
1000e8f4:	18ffff17 	ldw	r3,-4(r3)
1000e8f8:	18000326 	beq	r3,zero,1000e908 <quorem+0x1d8>
1000e8fc:	00000506 	br	1000e914 <quorem+0x1e4>
1000e900:	10c00017 	ldw	r3,0(r2)
1000e904:	1800031e 	bne	r3,zero,1000e914 <quorem+0x1e4>
1000e908:	10bfff04 	addi	r2,r2,-4
1000e90c:	bdffffc4 	addi	r23,r23,-1
1000e910:	98bffb36 	bltu	r19,r2,1000e900 <__alt_data_end+0xf800e900>
1000e914:	d8c00017 	ldw	r3,0(sp)
1000e918:	1dc00415 	stw	r23,16(r3)
1000e91c:	9005883a 	mov	r2,r18
1000e920:	dfc00d17 	ldw	ra,52(sp)
1000e924:	df000c17 	ldw	fp,48(sp)
1000e928:	ddc00b17 	ldw	r23,44(sp)
1000e92c:	dd800a17 	ldw	r22,40(sp)
1000e930:	dd400917 	ldw	r21,36(sp)
1000e934:	dd000817 	ldw	r20,32(sp)
1000e938:	dcc00717 	ldw	r19,28(sp)
1000e93c:	dc800617 	ldw	r18,24(sp)
1000e940:	dc400517 	ldw	r17,20(sp)
1000e944:	dc000417 	ldw	r16,16(sp)
1000e948:	dec00e04 	addi	sp,sp,56
1000e94c:	f800283a 	ret
1000e950:	0005883a 	mov	r2,zero
1000e954:	003ff206 	br	1000e920 <__alt_data_end+0xf800e920>

1000e958 <_dtoa_r>:
1000e958:	20801017 	ldw	r2,64(r4)
1000e95c:	deffde04 	addi	sp,sp,-136
1000e960:	df002015 	stw	fp,128(sp)
1000e964:	dcc01b15 	stw	r19,108(sp)
1000e968:	dc801a15 	stw	r18,104(sp)
1000e96c:	dc401915 	stw	r17,100(sp)
1000e970:	dc001815 	stw	r16,96(sp)
1000e974:	dfc02115 	stw	ra,132(sp)
1000e978:	ddc01f15 	stw	r23,124(sp)
1000e97c:	dd801e15 	stw	r22,120(sp)
1000e980:	dd401d15 	stw	r21,116(sp)
1000e984:	dd001c15 	stw	r20,112(sp)
1000e988:	d9c00315 	stw	r7,12(sp)
1000e98c:	2039883a 	mov	fp,r4
1000e990:	3023883a 	mov	r17,r6
1000e994:	2825883a 	mov	r18,r5
1000e998:	dc002417 	ldw	r16,144(sp)
1000e99c:	3027883a 	mov	r19,r6
1000e9a0:	10000826 	beq	r2,zero,1000e9c4 <_dtoa_r+0x6c>
1000e9a4:	21801117 	ldw	r6,68(r4)
1000e9a8:	00c00044 	movi	r3,1
1000e9ac:	100b883a 	mov	r5,r2
1000e9b0:	1986983a 	sll	r3,r3,r6
1000e9b4:	11800115 	stw	r6,4(r2)
1000e9b8:	10c00215 	stw	r3,8(r2)
1000e9bc:	00121140 	call	10012114 <_Bfree>
1000e9c0:	e0001015 	stw	zero,64(fp)
1000e9c4:	88002e16 	blt	r17,zero,1000ea80 <_dtoa_r+0x128>
1000e9c8:	80000015 	stw	zero,0(r16)
1000e9cc:	889ffc2c 	andhi	r2,r17,32752
1000e9d0:	00dffc34 	movhi	r3,32752
1000e9d4:	10c01c26 	beq	r2,r3,1000ea48 <_dtoa_r+0xf0>
1000e9d8:	000d883a 	mov	r6,zero
1000e9dc:	000f883a 	mov	r7,zero
1000e9e0:	9009883a 	mov	r4,r18
1000e9e4:	980b883a 	mov	r5,r19
1000e9e8:	000a7ec0 	call	1000a7ec <__eqdf2>
1000e9ec:	10002b1e 	bne	r2,zero,1000ea9c <_dtoa_r+0x144>
1000e9f0:	d9c02317 	ldw	r7,140(sp)
1000e9f4:	00800044 	movi	r2,1
1000e9f8:	38800015 	stw	r2,0(r7)
1000e9fc:	d8802517 	ldw	r2,148(sp)
1000ea00:	10019e26 	beq	r2,zero,1000f07c <_dtoa_r+0x724>
1000ea04:	d8c02517 	ldw	r3,148(sp)
1000ea08:	008400b4 	movhi	r2,4098
1000ea0c:	10a76744 	addi	r2,r2,-25187
1000ea10:	18800015 	stw	r2,0(r3)
1000ea14:	10bfffc4 	addi	r2,r2,-1
1000ea18:	dfc02117 	ldw	ra,132(sp)
1000ea1c:	df002017 	ldw	fp,128(sp)
1000ea20:	ddc01f17 	ldw	r23,124(sp)
1000ea24:	dd801e17 	ldw	r22,120(sp)
1000ea28:	dd401d17 	ldw	r21,116(sp)
1000ea2c:	dd001c17 	ldw	r20,112(sp)
1000ea30:	dcc01b17 	ldw	r19,108(sp)
1000ea34:	dc801a17 	ldw	r18,104(sp)
1000ea38:	dc401917 	ldw	r17,100(sp)
1000ea3c:	dc001817 	ldw	r16,96(sp)
1000ea40:	dec02204 	addi	sp,sp,136
1000ea44:	f800283a 	ret
1000ea48:	d8c02317 	ldw	r3,140(sp)
1000ea4c:	0089c3c4 	movi	r2,9999
1000ea50:	18800015 	stw	r2,0(r3)
1000ea54:	90017726 	beq	r18,zero,1000f034 <_dtoa_r+0x6dc>
1000ea58:	008400b4 	movhi	r2,4098
1000ea5c:	10a77304 	addi	r2,r2,-25140
1000ea60:	d9002517 	ldw	r4,148(sp)
1000ea64:	203fec26 	beq	r4,zero,1000ea18 <__alt_data_end+0xf800ea18>
1000ea68:	10c000c7 	ldb	r3,3(r2)
1000ea6c:	1801781e 	bne	r3,zero,1000f050 <_dtoa_r+0x6f8>
1000ea70:	10c000c4 	addi	r3,r2,3
1000ea74:	d9802517 	ldw	r6,148(sp)
1000ea78:	30c00015 	stw	r3,0(r6)
1000ea7c:	003fe606 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000ea80:	04e00034 	movhi	r19,32768
1000ea84:	9cffffc4 	addi	r19,r19,-1
1000ea88:	00800044 	movi	r2,1
1000ea8c:	8ce6703a 	and	r19,r17,r19
1000ea90:	80800015 	stw	r2,0(r16)
1000ea94:	9823883a 	mov	r17,r19
1000ea98:	003fcc06 	br	1000e9cc <__alt_data_end+0xf800e9cc>
1000ea9c:	d8800204 	addi	r2,sp,8
1000eaa0:	d8800015 	stw	r2,0(sp)
1000eaa4:	d9c00104 	addi	r7,sp,4
1000eaa8:	900b883a 	mov	r5,r18
1000eaac:	980d883a 	mov	r6,r19
1000eab0:	e009883a 	mov	r4,fp
1000eab4:	8820d53a 	srli	r16,r17,20
1000eab8:	0012dbc0 	call	10012dbc <__d2b>
1000eabc:	d8800915 	stw	r2,36(sp)
1000eac0:	8001651e 	bne	r16,zero,1000f058 <_dtoa_r+0x700>
1000eac4:	dd800217 	ldw	r22,8(sp)
1000eac8:	dc000117 	ldw	r16,4(sp)
1000eacc:	00800804 	movi	r2,32
1000ead0:	b421883a 	add	r16,r22,r16
1000ead4:	80c10c84 	addi	r3,r16,1074
1000ead8:	10c2d10e 	bge	r2,r3,1000f620 <_dtoa_r+0xcc8>
1000eadc:	00801004 	movi	r2,64
1000eae0:	81010484 	addi	r4,r16,1042
1000eae4:	10c7c83a 	sub	r3,r2,r3
1000eae8:	9108d83a 	srl	r4,r18,r4
1000eaec:	88e2983a 	sll	r17,r17,r3
1000eaf0:	2448b03a 	or	r4,r4,r17
1000eaf4:	00166600 	call	10016660 <__floatunsidf>
1000eaf8:	017f8434 	movhi	r5,65040
1000eafc:	01800044 	movi	r6,1
1000eb00:	1009883a 	mov	r4,r2
1000eb04:	194b883a 	add	r5,r3,r5
1000eb08:	843fffc4 	addi	r16,r16,-1
1000eb0c:	d9801115 	stw	r6,68(sp)
1000eb10:	000d883a 	mov	r6,zero
1000eb14:	01cffe34 	movhi	r7,16376
1000eb18:	000b1bc0 	call	1000b1bc <__subdf3>
1000eb1c:	0198dbf4 	movhi	r6,25455
1000eb20:	01cff4f4 	movhi	r7,16339
1000eb24:	3190d844 	addi	r6,r6,17249
1000eb28:	39e1e9c4 	addi	r7,r7,-30809
1000eb2c:	1009883a 	mov	r4,r2
1000eb30:	180b883a 	mov	r5,r3
1000eb34:	000a9500 	call	1000a950 <__muldf3>
1000eb38:	01a2d874 	movhi	r6,35681
1000eb3c:	01cff1f4 	movhi	r7,16327
1000eb40:	31b22cc4 	addi	r6,r6,-14157
1000eb44:	39e28a04 	addi	r7,r7,-30168
1000eb48:	180b883a 	mov	r5,r3
1000eb4c:	1009883a 	mov	r4,r2
1000eb50:	00095700 	call	10009570 <__adddf3>
1000eb54:	8009883a 	mov	r4,r16
1000eb58:	1029883a 	mov	r20,r2
1000eb5c:	1823883a 	mov	r17,r3
1000eb60:	000bb380 	call	1000bb38 <__floatsidf>
1000eb64:	019427f4 	movhi	r6,20639
1000eb68:	01cff4f4 	movhi	r7,16339
1000eb6c:	319e7ec4 	addi	r6,r6,31227
1000eb70:	39d104c4 	addi	r7,r7,17427
1000eb74:	1009883a 	mov	r4,r2
1000eb78:	180b883a 	mov	r5,r3
1000eb7c:	000a9500 	call	1000a950 <__muldf3>
1000eb80:	100d883a 	mov	r6,r2
1000eb84:	180f883a 	mov	r7,r3
1000eb88:	a009883a 	mov	r4,r20
1000eb8c:	880b883a 	mov	r5,r17
1000eb90:	00095700 	call	10009570 <__adddf3>
1000eb94:	1009883a 	mov	r4,r2
1000eb98:	180b883a 	mov	r5,r3
1000eb9c:	1029883a 	mov	r20,r2
1000eba0:	1823883a 	mov	r17,r3
1000eba4:	000bab80 	call	1000bab8 <__fixdfsi>
1000eba8:	000d883a 	mov	r6,zero
1000ebac:	000f883a 	mov	r7,zero
1000ebb0:	a009883a 	mov	r4,r20
1000ebb4:	880b883a 	mov	r5,r17
1000ebb8:	d8800515 	stw	r2,20(sp)
1000ebbc:	001656c0 	call	1001656c <__ledf2>
1000ebc0:	10028716 	blt	r2,zero,1000f5e0 <_dtoa_r+0xc88>
1000ebc4:	d8c00517 	ldw	r3,20(sp)
1000ebc8:	00800584 	movi	r2,22
1000ebcc:	10c27536 	bltu	r2,r3,1000f5a4 <_dtoa_r+0xc4c>
1000ebd0:	180490fa 	slli	r2,r3,3
1000ebd4:	00c400b4 	movhi	r3,4098
1000ebd8:	18e78e04 	addi	r3,r3,-25032
1000ebdc:	1885883a 	add	r2,r3,r2
1000ebe0:	11000017 	ldw	r4,0(r2)
1000ebe4:	11400117 	ldw	r5,4(r2)
1000ebe8:	900d883a 	mov	r6,r18
1000ebec:	980f883a 	mov	r7,r19
1000ebf0:	000a8740 	call	1000a874 <__gedf2>
1000ebf4:	00828d0e 	bge	zero,r2,1000f62c <_dtoa_r+0xcd4>
1000ebf8:	d9000517 	ldw	r4,20(sp)
1000ebfc:	d8000e15 	stw	zero,56(sp)
1000ec00:	213fffc4 	addi	r4,r4,-1
1000ec04:	d9000515 	stw	r4,20(sp)
1000ec08:	b42dc83a 	sub	r22,r22,r16
1000ec0c:	b5bfffc4 	addi	r22,r22,-1
1000ec10:	b0026f16 	blt	r22,zero,1000f5d0 <_dtoa_r+0xc78>
1000ec14:	d8000815 	stw	zero,32(sp)
1000ec18:	d9c00517 	ldw	r7,20(sp)
1000ec1c:	38026416 	blt	r7,zero,1000f5b0 <_dtoa_r+0xc58>
1000ec20:	b1ed883a 	add	r22,r22,r7
1000ec24:	d9c00d15 	stw	r7,52(sp)
1000ec28:	d8000a15 	stw	zero,40(sp)
1000ec2c:	d9800317 	ldw	r6,12(sp)
1000ec30:	00800244 	movi	r2,9
1000ec34:	11811436 	bltu	r2,r6,1000f088 <_dtoa_r+0x730>
1000ec38:	00800144 	movi	r2,5
1000ec3c:	1184e10e 	bge	r2,r6,1000ffc4 <_dtoa_r+0x166c>
1000ec40:	31bfff04 	addi	r6,r6,-4
1000ec44:	d9800315 	stw	r6,12(sp)
1000ec48:	0023883a 	mov	r17,zero
1000ec4c:	d9800317 	ldw	r6,12(sp)
1000ec50:	008000c4 	movi	r2,3
1000ec54:	30836726 	beq	r6,r2,1000f9f4 <_dtoa_r+0x109c>
1000ec58:	1183410e 	bge	r2,r6,1000f960 <_dtoa_r+0x1008>
1000ec5c:	d9c00317 	ldw	r7,12(sp)
1000ec60:	00800104 	movi	r2,4
1000ec64:	38827c26 	beq	r7,r2,1000f658 <_dtoa_r+0xd00>
1000ec68:	00800144 	movi	r2,5
1000ec6c:	3884c41e 	bne	r7,r2,1000ff80 <_dtoa_r+0x1628>
1000ec70:	00800044 	movi	r2,1
1000ec74:	d8800b15 	stw	r2,44(sp)
1000ec78:	d8c00517 	ldw	r3,20(sp)
1000ec7c:	d9002217 	ldw	r4,136(sp)
1000ec80:	1907883a 	add	r3,r3,r4
1000ec84:	19800044 	addi	r6,r3,1
1000ec88:	d8c00c15 	stw	r3,48(sp)
1000ec8c:	d9800615 	stw	r6,24(sp)
1000ec90:	0183a40e 	bge	zero,r6,1000fb24 <_dtoa_r+0x11cc>
1000ec94:	d9800617 	ldw	r6,24(sp)
1000ec98:	3021883a 	mov	r16,r6
1000ec9c:	e0001115 	stw	zero,68(fp)
1000eca0:	008005c4 	movi	r2,23
1000eca4:	1184c92e 	bgeu	r2,r6,1000ffcc <_dtoa_r+0x1674>
1000eca8:	00c00044 	movi	r3,1
1000ecac:	00800104 	movi	r2,4
1000ecb0:	1085883a 	add	r2,r2,r2
1000ecb4:	11000504 	addi	r4,r2,20
1000ecb8:	180b883a 	mov	r5,r3
1000ecbc:	18c00044 	addi	r3,r3,1
1000ecc0:	313ffb2e 	bgeu	r6,r4,1000ecb0 <__alt_data_end+0xf800ecb0>
1000ecc4:	e1401115 	stw	r5,68(fp)
1000ecc8:	e009883a 	mov	r4,fp
1000eccc:	001206c0 	call	1001206c <_Balloc>
1000ecd0:	d8800715 	stw	r2,28(sp)
1000ecd4:	e0801015 	stw	r2,64(fp)
1000ecd8:	00800384 	movi	r2,14
1000ecdc:	1400f736 	bltu	r2,r16,1000f0bc <_dtoa_r+0x764>
1000ece0:	8800f626 	beq	r17,zero,1000f0bc <_dtoa_r+0x764>
1000ece4:	d9c00517 	ldw	r7,20(sp)
1000ece8:	01c39a0e 	bge	zero,r7,1000fb54 <_dtoa_r+0x11fc>
1000ecec:	388003cc 	andi	r2,r7,15
1000ecf0:	100490fa 	slli	r2,r2,3
1000ecf4:	382bd13a 	srai	r21,r7,4
1000ecf8:	00c400b4 	movhi	r3,4098
1000ecfc:	18e78e04 	addi	r3,r3,-25032
1000ed00:	1885883a 	add	r2,r3,r2
1000ed04:	a8c0040c 	andi	r3,r21,16
1000ed08:	12400017 	ldw	r9,0(r2)
1000ed0c:	12000117 	ldw	r8,4(r2)
1000ed10:	18037926 	beq	r3,zero,1000faf8 <_dtoa_r+0x11a0>
1000ed14:	008400b4 	movhi	r2,4098
1000ed18:	10a78404 	addi	r2,r2,-25072
1000ed1c:	11800817 	ldw	r6,32(r2)
1000ed20:	11c00917 	ldw	r7,36(r2)
1000ed24:	9009883a 	mov	r4,r18
1000ed28:	980b883a 	mov	r5,r19
1000ed2c:	da001715 	stw	r8,92(sp)
1000ed30:	da401615 	stw	r9,88(sp)
1000ed34:	0009e1c0 	call	10009e1c <__divdf3>
1000ed38:	da001717 	ldw	r8,92(sp)
1000ed3c:	da401617 	ldw	r9,88(sp)
1000ed40:	ad4003cc 	andi	r21,r21,15
1000ed44:	040000c4 	movi	r16,3
1000ed48:	1023883a 	mov	r17,r2
1000ed4c:	1829883a 	mov	r20,r3
1000ed50:	a8001126 	beq	r21,zero,1000ed98 <_dtoa_r+0x440>
1000ed54:	05c400b4 	movhi	r23,4098
1000ed58:	bde78404 	addi	r23,r23,-25072
1000ed5c:	4805883a 	mov	r2,r9
1000ed60:	4007883a 	mov	r3,r8
1000ed64:	a980004c 	andi	r6,r21,1
1000ed68:	1009883a 	mov	r4,r2
1000ed6c:	a82bd07a 	srai	r21,r21,1
1000ed70:	180b883a 	mov	r5,r3
1000ed74:	30000426 	beq	r6,zero,1000ed88 <_dtoa_r+0x430>
1000ed78:	b9800017 	ldw	r6,0(r23)
1000ed7c:	b9c00117 	ldw	r7,4(r23)
1000ed80:	84000044 	addi	r16,r16,1
1000ed84:	000a9500 	call	1000a950 <__muldf3>
1000ed88:	bdc00204 	addi	r23,r23,8
1000ed8c:	a83ff51e 	bne	r21,zero,1000ed64 <__alt_data_end+0xf800ed64>
1000ed90:	1013883a 	mov	r9,r2
1000ed94:	1811883a 	mov	r8,r3
1000ed98:	480d883a 	mov	r6,r9
1000ed9c:	400f883a 	mov	r7,r8
1000eda0:	8809883a 	mov	r4,r17
1000eda4:	a00b883a 	mov	r5,r20
1000eda8:	0009e1c0 	call	10009e1c <__divdf3>
1000edac:	d8800f15 	stw	r2,60(sp)
1000edb0:	d8c01015 	stw	r3,64(sp)
1000edb4:	d8c00e17 	ldw	r3,56(sp)
1000edb8:	18000626 	beq	r3,zero,1000edd4 <_dtoa_r+0x47c>
1000edbc:	d9000f17 	ldw	r4,60(sp)
1000edc0:	d9401017 	ldw	r5,64(sp)
1000edc4:	000d883a 	mov	r6,zero
1000edc8:	01cffc34 	movhi	r7,16368
1000edcc:	001656c0 	call	1001656c <__ledf2>
1000edd0:	10040b16 	blt	r2,zero,1000fe00 <_dtoa_r+0x14a8>
1000edd4:	8009883a 	mov	r4,r16
1000edd8:	000bb380 	call	1000bb38 <__floatsidf>
1000eddc:	d9800f17 	ldw	r6,60(sp)
1000ede0:	d9c01017 	ldw	r7,64(sp)
1000ede4:	1009883a 	mov	r4,r2
1000ede8:	180b883a 	mov	r5,r3
1000edec:	000a9500 	call	1000a950 <__muldf3>
1000edf0:	000d883a 	mov	r6,zero
1000edf4:	01d00734 	movhi	r7,16412
1000edf8:	1009883a 	mov	r4,r2
1000edfc:	180b883a 	mov	r5,r3
1000ee00:	00095700 	call	10009570 <__adddf3>
1000ee04:	1021883a 	mov	r16,r2
1000ee08:	d8800617 	ldw	r2,24(sp)
1000ee0c:	047f3034 	movhi	r17,64704
1000ee10:	1c63883a 	add	r17,r3,r17
1000ee14:	10031826 	beq	r2,zero,1000fa78 <_dtoa_r+0x1120>
1000ee18:	d8c00517 	ldw	r3,20(sp)
1000ee1c:	db000617 	ldw	r12,24(sp)
1000ee20:	d8c01315 	stw	r3,76(sp)
1000ee24:	d9000b17 	ldw	r4,44(sp)
1000ee28:	20038f26 	beq	r4,zero,1000fc68 <_dtoa_r+0x1310>
1000ee2c:	60bfffc4 	addi	r2,r12,-1
1000ee30:	100490fa 	slli	r2,r2,3
1000ee34:	00c400b4 	movhi	r3,4098
1000ee38:	18e78e04 	addi	r3,r3,-25032
1000ee3c:	1885883a 	add	r2,r3,r2
1000ee40:	11800017 	ldw	r6,0(r2)
1000ee44:	11c00117 	ldw	r7,4(r2)
1000ee48:	d8800717 	ldw	r2,28(sp)
1000ee4c:	0009883a 	mov	r4,zero
1000ee50:	014ff834 	movhi	r5,16352
1000ee54:	db001615 	stw	r12,88(sp)
1000ee58:	15c00044 	addi	r23,r2,1
1000ee5c:	0009e1c0 	call	10009e1c <__divdf3>
1000ee60:	800d883a 	mov	r6,r16
1000ee64:	880f883a 	mov	r7,r17
1000ee68:	1009883a 	mov	r4,r2
1000ee6c:	180b883a 	mov	r5,r3
1000ee70:	000b1bc0 	call	1000b1bc <__subdf3>
1000ee74:	d9401017 	ldw	r5,64(sp)
1000ee78:	d9000f17 	ldw	r4,60(sp)
1000ee7c:	102b883a 	mov	r21,r2
1000ee80:	d8c01215 	stw	r3,72(sp)
1000ee84:	000bab80 	call	1000bab8 <__fixdfsi>
1000ee88:	1009883a 	mov	r4,r2
1000ee8c:	1029883a 	mov	r20,r2
1000ee90:	000bb380 	call	1000bb38 <__floatsidf>
1000ee94:	d9000f17 	ldw	r4,60(sp)
1000ee98:	d9401017 	ldw	r5,64(sp)
1000ee9c:	100d883a 	mov	r6,r2
1000eea0:	180f883a 	mov	r7,r3
1000eea4:	000b1bc0 	call	1000b1bc <__subdf3>
1000eea8:	1823883a 	mov	r17,r3
1000eeac:	d8c00717 	ldw	r3,28(sp)
1000eeb0:	d9401217 	ldw	r5,72(sp)
1000eeb4:	a2000c04 	addi	r8,r20,48
1000eeb8:	1021883a 	mov	r16,r2
1000eebc:	1a000005 	stb	r8,0(r3)
1000eec0:	800d883a 	mov	r6,r16
1000eec4:	880f883a 	mov	r7,r17
1000eec8:	a809883a 	mov	r4,r21
1000eecc:	4029883a 	mov	r20,r8
1000eed0:	000a8740 	call	1000a874 <__gedf2>
1000eed4:	00841d16 	blt	zero,r2,1000ff4c <_dtoa_r+0x15f4>
1000eed8:	800d883a 	mov	r6,r16
1000eedc:	880f883a 	mov	r7,r17
1000eee0:	0009883a 	mov	r4,zero
1000eee4:	014ffc34 	movhi	r5,16368
1000eee8:	000b1bc0 	call	1000b1bc <__subdf3>
1000eeec:	d9401217 	ldw	r5,72(sp)
1000eef0:	100d883a 	mov	r6,r2
1000eef4:	180f883a 	mov	r7,r3
1000eef8:	a809883a 	mov	r4,r21
1000eefc:	000a8740 	call	1000a874 <__gedf2>
1000ef00:	db001617 	ldw	r12,88(sp)
1000ef04:	00840e16 	blt	zero,r2,1000ff40 <_dtoa_r+0x15e8>
1000ef08:	00800044 	movi	r2,1
1000ef0c:	13006b0e 	bge	r2,r12,1000f0bc <_dtoa_r+0x764>
1000ef10:	d9000717 	ldw	r4,28(sp)
1000ef14:	dd800f15 	stw	r22,60(sp)
1000ef18:	dcc01015 	stw	r19,64(sp)
1000ef1c:	2319883a 	add	r12,r4,r12
1000ef20:	dcc01217 	ldw	r19,72(sp)
1000ef24:	602d883a 	mov	r22,r12
1000ef28:	dc801215 	stw	r18,72(sp)
1000ef2c:	b825883a 	mov	r18,r23
1000ef30:	00000906 	br	1000ef58 <_dtoa_r+0x600>
1000ef34:	000b1bc0 	call	1000b1bc <__subdf3>
1000ef38:	a80d883a 	mov	r6,r21
1000ef3c:	980f883a 	mov	r7,r19
1000ef40:	1009883a 	mov	r4,r2
1000ef44:	180b883a 	mov	r5,r3
1000ef48:	001656c0 	call	1001656c <__ledf2>
1000ef4c:	1003e816 	blt	r2,zero,1000fef0 <_dtoa_r+0x1598>
1000ef50:	b825883a 	mov	r18,r23
1000ef54:	bd83e926 	beq	r23,r22,1000fefc <_dtoa_r+0x15a4>
1000ef58:	a809883a 	mov	r4,r21
1000ef5c:	980b883a 	mov	r5,r19
1000ef60:	000d883a 	mov	r6,zero
1000ef64:	01d00934 	movhi	r7,16420
1000ef68:	000a9500 	call	1000a950 <__muldf3>
1000ef6c:	000d883a 	mov	r6,zero
1000ef70:	01d00934 	movhi	r7,16420
1000ef74:	8009883a 	mov	r4,r16
1000ef78:	880b883a 	mov	r5,r17
1000ef7c:	102b883a 	mov	r21,r2
1000ef80:	1827883a 	mov	r19,r3
1000ef84:	000a9500 	call	1000a950 <__muldf3>
1000ef88:	180b883a 	mov	r5,r3
1000ef8c:	1009883a 	mov	r4,r2
1000ef90:	1821883a 	mov	r16,r3
1000ef94:	1023883a 	mov	r17,r2
1000ef98:	000bab80 	call	1000bab8 <__fixdfsi>
1000ef9c:	1009883a 	mov	r4,r2
1000efa0:	1029883a 	mov	r20,r2
1000efa4:	000bb380 	call	1000bb38 <__floatsidf>
1000efa8:	8809883a 	mov	r4,r17
1000efac:	800b883a 	mov	r5,r16
1000efb0:	100d883a 	mov	r6,r2
1000efb4:	180f883a 	mov	r7,r3
1000efb8:	000b1bc0 	call	1000b1bc <__subdf3>
1000efbc:	a5000c04 	addi	r20,r20,48
1000efc0:	a80d883a 	mov	r6,r21
1000efc4:	980f883a 	mov	r7,r19
1000efc8:	1009883a 	mov	r4,r2
1000efcc:	180b883a 	mov	r5,r3
1000efd0:	95000005 	stb	r20,0(r18)
1000efd4:	1021883a 	mov	r16,r2
1000efd8:	1823883a 	mov	r17,r3
1000efdc:	001656c0 	call	1001656c <__ledf2>
1000efe0:	bdc00044 	addi	r23,r23,1
1000efe4:	800d883a 	mov	r6,r16
1000efe8:	880f883a 	mov	r7,r17
1000efec:	0009883a 	mov	r4,zero
1000eff0:	014ffc34 	movhi	r5,16368
1000eff4:	103fcf0e 	bge	r2,zero,1000ef34 <__alt_data_end+0xf800ef34>
1000eff8:	d8c01317 	ldw	r3,76(sp)
1000effc:	d8c00515 	stw	r3,20(sp)
1000f000:	d9400917 	ldw	r5,36(sp)
1000f004:	e009883a 	mov	r4,fp
1000f008:	00121140 	call	10012114 <_Bfree>
1000f00c:	d9000517 	ldw	r4,20(sp)
1000f010:	d9802317 	ldw	r6,140(sp)
1000f014:	d9c02517 	ldw	r7,148(sp)
1000f018:	b8000005 	stb	zero,0(r23)
1000f01c:	20800044 	addi	r2,r4,1
1000f020:	30800015 	stw	r2,0(r6)
1000f024:	3802aa26 	beq	r7,zero,1000fad0 <_dtoa_r+0x1178>
1000f028:	3dc00015 	stw	r23,0(r7)
1000f02c:	d8800717 	ldw	r2,28(sp)
1000f030:	003e7906 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000f034:	00800434 	movhi	r2,16
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	88a2703a 	and	r17,r17,r2
1000f040:	883e851e 	bne	r17,zero,1000ea58 <__alt_data_end+0xf800ea58>
1000f044:	008400b4 	movhi	r2,4098
1000f048:	10a77004 	addi	r2,r2,-25152
1000f04c:	003e8406 	br	1000ea60 <__alt_data_end+0xf800ea60>
1000f050:	10c00204 	addi	r3,r2,8
1000f054:	003e8706 	br	1000ea74 <__alt_data_end+0xf800ea74>
1000f058:	01400434 	movhi	r5,16
1000f05c:	297fffc4 	addi	r5,r5,-1
1000f060:	994a703a 	and	r5,r19,r5
1000f064:	9009883a 	mov	r4,r18
1000f068:	843f0044 	addi	r16,r16,-1023
1000f06c:	294ffc34 	orhi	r5,r5,16368
1000f070:	dd800217 	ldw	r22,8(sp)
1000f074:	d8001115 	stw	zero,68(sp)
1000f078:	003ea506 	br	1000eb10 <__alt_data_end+0xf800eb10>
1000f07c:	008400b4 	movhi	r2,4098
1000f080:	10a76704 	addi	r2,r2,-25188
1000f084:	003e6406 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000f088:	e0001115 	stw	zero,68(fp)
1000f08c:	000b883a 	mov	r5,zero
1000f090:	e009883a 	mov	r4,fp
1000f094:	001206c0 	call	1001206c <_Balloc>
1000f098:	01bfffc4 	movi	r6,-1
1000f09c:	01c00044 	movi	r7,1
1000f0a0:	d8800715 	stw	r2,28(sp)
1000f0a4:	d9800c15 	stw	r6,48(sp)
1000f0a8:	e0801015 	stw	r2,64(fp)
1000f0ac:	d8000315 	stw	zero,12(sp)
1000f0b0:	d9c00b15 	stw	r7,44(sp)
1000f0b4:	d9800615 	stw	r6,24(sp)
1000f0b8:	d8002215 	stw	zero,136(sp)
1000f0bc:	d8800117 	ldw	r2,4(sp)
1000f0c0:	10008916 	blt	r2,zero,1000f2e8 <_dtoa_r+0x990>
1000f0c4:	d9000517 	ldw	r4,20(sp)
1000f0c8:	00c00384 	movi	r3,14
1000f0cc:	19008616 	blt	r3,r4,1000f2e8 <_dtoa_r+0x990>
1000f0d0:	200490fa 	slli	r2,r4,3
1000f0d4:	00c400b4 	movhi	r3,4098
1000f0d8:	d9802217 	ldw	r6,136(sp)
1000f0dc:	18e78e04 	addi	r3,r3,-25032
1000f0e0:	1885883a 	add	r2,r3,r2
1000f0e4:	14000017 	ldw	r16,0(r2)
1000f0e8:	14400117 	ldw	r17,4(r2)
1000f0ec:	30016316 	blt	r6,zero,1000f67c <_dtoa_r+0xd24>
1000f0f0:	800d883a 	mov	r6,r16
1000f0f4:	880f883a 	mov	r7,r17
1000f0f8:	9009883a 	mov	r4,r18
1000f0fc:	980b883a 	mov	r5,r19
1000f100:	0009e1c0 	call	10009e1c <__divdf3>
1000f104:	180b883a 	mov	r5,r3
1000f108:	1009883a 	mov	r4,r2
1000f10c:	000bab80 	call	1000bab8 <__fixdfsi>
1000f110:	1009883a 	mov	r4,r2
1000f114:	102b883a 	mov	r21,r2
1000f118:	000bb380 	call	1000bb38 <__floatsidf>
1000f11c:	800d883a 	mov	r6,r16
1000f120:	880f883a 	mov	r7,r17
1000f124:	1009883a 	mov	r4,r2
1000f128:	180b883a 	mov	r5,r3
1000f12c:	000a9500 	call	1000a950 <__muldf3>
1000f130:	100d883a 	mov	r6,r2
1000f134:	180f883a 	mov	r7,r3
1000f138:	9009883a 	mov	r4,r18
1000f13c:	980b883a 	mov	r5,r19
1000f140:	000b1bc0 	call	1000b1bc <__subdf3>
1000f144:	d9c00717 	ldw	r7,28(sp)
1000f148:	1009883a 	mov	r4,r2
1000f14c:	a8800c04 	addi	r2,r21,48
1000f150:	38800005 	stb	r2,0(r7)
1000f154:	3dc00044 	addi	r23,r7,1
1000f158:	d9c00617 	ldw	r7,24(sp)
1000f15c:	01800044 	movi	r6,1
1000f160:	180b883a 	mov	r5,r3
1000f164:	2005883a 	mov	r2,r4
1000f168:	39803826 	beq	r7,r6,1000f24c <_dtoa_r+0x8f4>
1000f16c:	000d883a 	mov	r6,zero
1000f170:	01d00934 	movhi	r7,16420
1000f174:	000a9500 	call	1000a950 <__muldf3>
1000f178:	000d883a 	mov	r6,zero
1000f17c:	000f883a 	mov	r7,zero
1000f180:	1009883a 	mov	r4,r2
1000f184:	180b883a 	mov	r5,r3
1000f188:	1025883a 	mov	r18,r2
1000f18c:	1827883a 	mov	r19,r3
1000f190:	000a7ec0 	call	1000a7ec <__eqdf2>
1000f194:	103f9a26 	beq	r2,zero,1000f000 <__alt_data_end+0xf800f000>
1000f198:	d9c00617 	ldw	r7,24(sp)
1000f19c:	d8c00717 	ldw	r3,28(sp)
1000f1a0:	b829883a 	mov	r20,r23
1000f1a4:	38bfffc4 	addi	r2,r7,-1
1000f1a8:	18ad883a 	add	r22,r3,r2
1000f1ac:	00000a06 	br	1000f1d8 <_dtoa_r+0x880>
1000f1b0:	000a9500 	call	1000a950 <__muldf3>
1000f1b4:	000d883a 	mov	r6,zero
1000f1b8:	000f883a 	mov	r7,zero
1000f1bc:	1009883a 	mov	r4,r2
1000f1c0:	180b883a 	mov	r5,r3
1000f1c4:	1025883a 	mov	r18,r2
1000f1c8:	1827883a 	mov	r19,r3
1000f1cc:	b829883a 	mov	r20,r23
1000f1d0:	000a7ec0 	call	1000a7ec <__eqdf2>
1000f1d4:	103f8a26 	beq	r2,zero,1000f000 <__alt_data_end+0xf800f000>
1000f1d8:	800d883a 	mov	r6,r16
1000f1dc:	880f883a 	mov	r7,r17
1000f1e0:	9009883a 	mov	r4,r18
1000f1e4:	980b883a 	mov	r5,r19
1000f1e8:	0009e1c0 	call	10009e1c <__divdf3>
1000f1ec:	180b883a 	mov	r5,r3
1000f1f0:	1009883a 	mov	r4,r2
1000f1f4:	000bab80 	call	1000bab8 <__fixdfsi>
1000f1f8:	1009883a 	mov	r4,r2
1000f1fc:	102b883a 	mov	r21,r2
1000f200:	000bb380 	call	1000bb38 <__floatsidf>
1000f204:	800d883a 	mov	r6,r16
1000f208:	880f883a 	mov	r7,r17
1000f20c:	1009883a 	mov	r4,r2
1000f210:	180b883a 	mov	r5,r3
1000f214:	000a9500 	call	1000a950 <__muldf3>
1000f218:	100d883a 	mov	r6,r2
1000f21c:	180f883a 	mov	r7,r3
1000f220:	9009883a 	mov	r4,r18
1000f224:	980b883a 	mov	r5,r19
1000f228:	000b1bc0 	call	1000b1bc <__subdf3>
1000f22c:	aa000c04 	addi	r8,r21,48
1000f230:	a2000005 	stb	r8,0(r20)
1000f234:	000d883a 	mov	r6,zero
1000f238:	01d00934 	movhi	r7,16420
1000f23c:	1009883a 	mov	r4,r2
1000f240:	180b883a 	mov	r5,r3
1000f244:	a5c00044 	addi	r23,r20,1
1000f248:	b53fd91e 	bne	r22,r20,1000f1b0 <__alt_data_end+0xf800f1b0>
1000f24c:	100d883a 	mov	r6,r2
1000f250:	180f883a 	mov	r7,r3
1000f254:	1009883a 	mov	r4,r2
1000f258:	180b883a 	mov	r5,r3
1000f25c:	00095700 	call	10009570 <__adddf3>
1000f260:	100d883a 	mov	r6,r2
1000f264:	180f883a 	mov	r7,r3
1000f268:	8009883a 	mov	r4,r16
1000f26c:	880b883a 	mov	r5,r17
1000f270:	1027883a 	mov	r19,r2
1000f274:	1825883a 	mov	r18,r3
1000f278:	001656c0 	call	1001656c <__ledf2>
1000f27c:	10000816 	blt	r2,zero,1000f2a0 <_dtoa_r+0x948>
1000f280:	980d883a 	mov	r6,r19
1000f284:	900f883a 	mov	r7,r18
1000f288:	8009883a 	mov	r4,r16
1000f28c:	880b883a 	mov	r5,r17
1000f290:	000a7ec0 	call	1000a7ec <__eqdf2>
1000f294:	103f5a1e 	bne	r2,zero,1000f000 <__alt_data_end+0xf800f000>
1000f298:	ad40004c 	andi	r21,r21,1
1000f29c:	a83f5826 	beq	r21,zero,1000f000 <__alt_data_end+0xf800f000>
1000f2a0:	bd3fffc3 	ldbu	r20,-1(r23)
1000f2a4:	b8bfffc4 	addi	r2,r23,-1
1000f2a8:	1007883a 	mov	r3,r2
1000f2ac:	01400e44 	movi	r5,57
1000f2b0:	d9800717 	ldw	r6,28(sp)
1000f2b4:	00000506 	br	1000f2cc <_dtoa_r+0x974>
1000f2b8:	18ffffc4 	addi	r3,r3,-1
1000f2bc:	11824726 	beq	r2,r6,1000fbdc <_dtoa_r+0x1284>
1000f2c0:	1d000003 	ldbu	r20,0(r3)
1000f2c4:	102f883a 	mov	r23,r2
1000f2c8:	10bfffc4 	addi	r2,r2,-1
1000f2cc:	a1003fcc 	andi	r4,r20,255
1000f2d0:	2100201c 	xori	r4,r4,128
1000f2d4:	213fe004 	addi	r4,r4,-128
1000f2d8:	217ff726 	beq	r4,r5,1000f2b8 <__alt_data_end+0xf800f2b8>
1000f2dc:	a2000044 	addi	r8,r20,1
1000f2e0:	12000005 	stb	r8,0(r2)
1000f2e4:	003f4606 	br	1000f000 <__alt_data_end+0xf800f000>
1000f2e8:	d9000b17 	ldw	r4,44(sp)
1000f2ec:	2000c826 	beq	r4,zero,1000f610 <_dtoa_r+0xcb8>
1000f2f0:	d9800317 	ldw	r6,12(sp)
1000f2f4:	00c00044 	movi	r3,1
1000f2f8:	1980f90e 	bge	r3,r6,1000f6e0 <_dtoa_r+0xd88>
1000f2fc:	d8800617 	ldw	r2,24(sp)
1000f300:	d8c00a17 	ldw	r3,40(sp)
1000f304:	157fffc4 	addi	r21,r2,-1
1000f308:	1d41f316 	blt	r3,r21,1000fad8 <_dtoa_r+0x1180>
1000f30c:	1d6bc83a 	sub	r21,r3,r21
1000f310:	d9c00617 	ldw	r7,24(sp)
1000f314:	3802aa16 	blt	r7,zero,1000fdc0 <_dtoa_r+0x1468>
1000f318:	dd000817 	ldw	r20,32(sp)
1000f31c:	d8800617 	ldw	r2,24(sp)
1000f320:	d8c00817 	ldw	r3,32(sp)
1000f324:	01400044 	movi	r5,1
1000f328:	e009883a 	mov	r4,fp
1000f32c:	1887883a 	add	r3,r3,r2
1000f330:	d8c00815 	stw	r3,32(sp)
1000f334:	b0ad883a 	add	r22,r22,r2
1000f338:	00124a00 	call	100124a0 <__i2b>
1000f33c:	1023883a 	mov	r17,r2
1000f340:	a0000826 	beq	r20,zero,1000f364 <_dtoa_r+0xa0c>
1000f344:	0580070e 	bge	zero,r22,1000f364 <_dtoa_r+0xa0c>
1000f348:	a005883a 	mov	r2,r20
1000f34c:	b500b916 	blt	r22,r20,1000f634 <_dtoa_r+0xcdc>
1000f350:	d9000817 	ldw	r4,32(sp)
1000f354:	a0a9c83a 	sub	r20,r20,r2
1000f358:	b0adc83a 	sub	r22,r22,r2
1000f35c:	2089c83a 	sub	r4,r4,r2
1000f360:	d9000815 	stw	r4,32(sp)
1000f364:	d9800a17 	ldw	r6,40(sp)
1000f368:	0181810e 	bge	zero,r6,1000f970 <_dtoa_r+0x1018>
1000f36c:	d9c00b17 	ldw	r7,44(sp)
1000f370:	3800b326 	beq	r7,zero,1000f640 <_dtoa_r+0xce8>
1000f374:	a800b226 	beq	r21,zero,1000f640 <_dtoa_r+0xce8>
1000f378:	880b883a 	mov	r5,r17
1000f37c:	a80d883a 	mov	r6,r21
1000f380:	e009883a 	mov	r4,fp
1000f384:	00127680 	call	10012768 <__pow5mult>
1000f388:	d9800917 	ldw	r6,36(sp)
1000f38c:	100b883a 	mov	r5,r2
1000f390:	e009883a 	mov	r4,fp
1000f394:	1023883a 	mov	r17,r2
1000f398:	00124dc0 	call	100124dc <__multiply>
1000f39c:	1021883a 	mov	r16,r2
1000f3a0:	d8800a17 	ldw	r2,40(sp)
1000f3a4:	d9400917 	ldw	r5,36(sp)
1000f3a8:	e009883a 	mov	r4,fp
1000f3ac:	1545c83a 	sub	r2,r2,r21
1000f3b0:	d8800a15 	stw	r2,40(sp)
1000f3b4:	00121140 	call	10012114 <_Bfree>
1000f3b8:	d8c00a17 	ldw	r3,40(sp)
1000f3bc:	18009f1e 	bne	r3,zero,1000f63c <_dtoa_r+0xce4>
1000f3c0:	05c00044 	movi	r23,1
1000f3c4:	e009883a 	mov	r4,fp
1000f3c8:	b80b883a 	mov	r5,r23
1000f3cc:	00124a00 	call	100124a0 <__i2b>
1000f3d0:	d9000d17 	ldw	r4,52(sp)
1000f3d4:	102b883a 	mov	r21,r2
1000f3d8:	2000ce26 	beq	r4,zero,1000f714 <_dtoa_r+0xdbc>
1000f3dc:	200d883a 	mov	r6,r4
1000f3e0:	100b883a 	mov	r5,r2
1000f3e4:	e009883a 	mov	r4,fp
1000f3e8:	00127680 	call	10012768 <__pow5mult>
1000f3ec:	d9800317 	ldw	r6,12(sp)
1000f3f0:	102b883a 	mov	r21,r2
1000f3f4:	b981810e 	bge	r23,r6,1000f9fc <_dtoa_r+0x10a4>
1000f3f8:	0027883a 	mov	r19,zero
1000f3fc:	a8800417 	ldw	r2,16(r21)
1000f400:	05c00804 	movi	r23,32
1000f404:	10800104 	addi	r2,r2,4
1000f408:	1085883a 	add	r2,r2,r2
1000f40c:	1085883a 	add	r2,r2,r2
1000f410:	a885883a 	add	r2,r21,r2
1000f414:	11000017 	ldw	r4,0(r2)
1000f418:	00123880 	call	10012388 <__hi0bits>
1000f41c:	b885c83a 	sub	r2,r23,r2
1000f420:	1585883a 	add	r2,r2,r22
1000f424:	108007cc 	andi	r2,r2,31
1000f428:	1000b326 	beq	r2,zero,1000f6f8 <_dtoa_r+0xda0>
1000f42c:	00c00804 	movi	r3,32
1000f430:	1887c83a 	sub	r3,r3,r2
1000f434:	01000104 	movi	r4,4
1000f438:	20c2cd0e 	bge	r4,r3,1000ff70 <_dtoa_r+0x1618>
1000f43c:	00c00704 	movi	r3,28
1000f440:	1885c83a 	sub	r2,r3,r2
1000f444:	d8c00817 	ldw	r3,32(sp)
1000f448:	a0a9883a 	add	r20,r20,r2
1000f44c:	b0ad883a 	add	r22,r22,r2
1000f450:	1887883a 	add	r3,r3,r2
1000f454:	d8c00815 	stw	r3,32(sp)
1000f458:	d9800817 	ldw	r6,32(sp)
1000f45c:	0180040e 	bge	zero,r6,1000f470 <_dtoa_r+0xb18>
1000f460:	800b883a 	mov	r5,r16
1000f464:	e009883a 	mov	r4,fp
1000f468:	00128a80 	call	100128a8 <__lshift>
1000f46c:	1021883a 	mov	r16,r2
1000f470:	0580050e 	bge	zero,r22,1000f488 <_dtoa_r+0xb30>
1000f474:	a80b883a 	mov	r5,r21
1000f478:	b00d883a 	mov	r6,r22
1000f47c:	e009883a 	mov	r4,fp
1000f480:	00128a80 	call	100128a8 <__lshift>
1000f484:	102b883a 	mov	r21,r2
1000f488:	d9c00e17 	ldw	r7,56(sp)
1000f48c:	3801211e 	bne	r7,zero,1000f914 <_dtoa_r+0xfbc>
1000f490:	d9800617 	ldw	r6,24(sp)
1000f494:	0181380e 	bge	zero,r6,1000f978 <_dtoa_r+0x1020>
1000f498:	d8c00b17 	ldw	r3,44(sp)
1000f49c:	1800ab1e 	bne	r3,zero,1000f74c <_dtoa_r+0xdf4>
1000f4a0:	dc800717 	ldw	r18,28(sp)
1000f4a4:	dcc00617 	ldw	r19,24(sp)
1000f4a8:	9029883a 	mov	r20,r18
1000f4ac:	00000206 	br	1000f4b8 <_dtoa_r+0xb60>
1000f4b0:	001213c0 	call	1001213c <__multadd>
1000f4b4:	1021883a 	mov	r16,r2
1000f4b8:	a80b883a 	mov	r5,r21
1000f4bc:	8009883a 	mov	r4,r16
1000f4c0:	000e7300 	call	1000e730 <quorem>
1000f4c4:	10800c04 	addi	r2,r2,48
1000f4c8:	90800005 	stb	r2,0(r18)
1000f4cc:	94800044 	addi	r18,r18,1
1000f4d0:	9507c83a 	sub	r3,r18,r20
1000f4d4:	000f883a 	mov	r7,zero
1000f4d8:	01800284 	movi	r6,10
1000f4dc:	800b883a 	mov	r5,r16
1000f4e0:	e009883a 	mov	r4,fp
1000f4e4:	1cfff216 	blt	r3,r19,1000f4b0 <__alt_data_end+0xf800f4b0>
1000f4e8:	1011883a 	mov	r8,r2
1000f4ec:	d8800617 	ldw	r2,24(sp)
1000f4f0:	0082370e 	bge	zero,r2,1000fdd0 <_dtoa_r+0x1478>
1000f4f4:	d9000717 	ldw	r4,28(sp)
1000f4f8:	0025883a 	mov	r18,zero
1000f4fc:	20af883a 	add	r23,r4,r2
1000f500:	01800044 	movi	r6,1
1000f504:	800b883a 	mov	r5,r16
1000f508:	e009883a 	mov	r4,fp
1000f50c:	da001715 	stw	r8,92(sp)
1000f510:	00128a80 	call	100128a8 <__lshift>
1000f514:	a80b883a 	mov	r5,r21
1000f518:	1009883a 	mov	r4,r2
1000f51c:	d8800915 	stw	r2,36(sp)
1000f520:	00129f00 	call	100129f0 <__mcmp>
1000f524:	da001717 	ldw	r8,92(sp)
1000f528:	0081800e 	bge	zero,r2,1000fb2c <_dtoa_r+0x11d4>
1000f52c:	b93fffc3 	ldbu	r4,-1(r23)
1000f530:	b8bfffc4 	addi	r2,r23,-1
1000f534:	1007883a 	mov	r3,r2
1000f538:	01800e44 	movi	r6,57
1000f53c:	d9c00717 	ldw	r7,28(sp)
1000f540:	00000506 	br	1000f558 <_dtoa_r+0xc00>
1000f544:	18ffffc4 	addi	r3,r3,-1
1000f548:	11c12326 	beq	r2,r7,1000f9d8 <_dtoa_r+0x1080>
1000f54c:	19000003 	ldbu	r4,0(r3)
1000f550:	102f883a 	mov	r23,r2
1000f554:	10bfffc4 	addi	r2,r2,-1
1000f558:	21403fcc 	andi	r5,r4,255
1000f55c:	2940201c 	xori	r5,r5,128
1000f560:	297fe004 	addi	r5,r5,-128
1000f564:	29bff726 	beq	r5,r6,1000f544 <__alt_data_end+0xf800f544>
1000f568:	21000044 	addi	r4,r4,1
1000f56c:	11000005 	stb	r4,0(r2)
1000f570:	a80b883a 	mov	r5,r21
1000f574:	e009883a 	mov	r4,fp
1000f578:	00121140 	call	10012114 <_Bfree>
1000f57c:	883ea026 	beq	r17,zero,1000f000 <__alt_data_end+0xf800f000>
1000f580:	90000426 	beq	r18,zero,1000f594 <_dtoa_r+0xc3c>
1000f584:	94400326 	beq	r18,r17,1000f594 <_dtoa_r+0xc3c>
1000f588:	900b883a 	mov	r5,r18
1000f58c:	e009883a 	mov	r4,fp
1000f590:	00121140 	call	10012114 <_Bfree>
1000f594:	880b883a 	mov	r5,r17
1000f598:	e009883a 	mov	r4,fp
1000f59c:	00121140 	call	10012114 <_Bfree>
1000f5a0:	003e9706 	br	1000f000 <__alt_data_end+0xf800f000>
1000f5a4:	01800044 	movi	r6,1
1000f5a8:	d9800e15 	stw	r6,56(sp)
1000f5ac:	003d9606 	br	1000ec08 <__alt_data_end+0xf800ec08>
1000f5b0:	d8800817 	ldw	r2,32(sp)
1000f5b4:	d8c00517 	ldw	r3,20(sp)
1000f5b8:	d8000d15 	stw	zero,52(sp)
1000f5bc:	10c5c83a 	sub	r2,r2,r3
1000f5c0:	00c9c83a 	sub	r4,zero,r3
1000f5c4:	d8800815 	stw	r2,32(sp)
1000f5c8:	d9000a15 	stw	r4,40(sp)
1000f5cc:	003d9706 	br	1000ec2c <__alt_data_end+0xf800ec2c>
1000f5d0:	05adc83a 	sub	r22,zero,r22
1000f5d4:	dd800815 	stw	r22,32(sp)
1000f5d8:	002d883a 	mov	r22,zero
1000f5dc:	003d8e06 	br	1000ec18 <__alt_data_end+0xf800ec18>
1000f5e0:	d9000517 	ldw	r4,20(sp)
1000f5e4:	000bb380 	call	1000bb38 <__floatsidf>
1000f5e8:	100d883a 	mov	r6,r2
1000f5ec:	180f883a 	mov	r7,r3
1000f5f0:	a009883a 	mov	r4,r20
1000f5f4:	880b883a 	mov	r5,r17
1000f5f8:	000a7ec0 	call	1000a7ec <__eqdf2>
1000f5fc:	103d7126 	beq	r2,zero,1000ebc4 <__alt_data_end+0xf800ebc4>
1000f600:	d9c00517 	ldw	r7,20(sp)
1000f604:	39ffffc4 	addi	r7,r7,-1
1000f608:	d9c00515 	stw	r7,20(sp)
1000f60c:	003d6d06 	br	1000ebc4 <__alt_data_end+0xf800ebc4>
1000f610:	dd400a17 	ldw	r21,40(sp)
1000f614:	dd000817 	ldw	r20,32(sp)
1000f618:	0023883a 	mov	r17,zero
1000f61c:	003f4806 	br	1000f340 <__alt_data_end+0xf800f340>
1000f620:	10e3c83a 	sub	r17,r2,r3
1000f624:	9448983a 	sll	r4,r18,r17
1000f628:	003d3206 	br	1000eaf4 <__alt_data_end+0xf800eaf4>
1000f62c:	d8000e15 	stw	zero,56(sp)
1000f630:	003d7506 	br	1000ec08 <__alt_data_end+0xf800ec08>
1000f634:	b005883a 	mov	r2,r22
1000f638:	003f4506 	br	1000f350 <__alt_data_end+0xf800f350>
1000f63c:	dc000915 	stw	r16,36(sp)
1000f640:	d9800a17 	ldw	r6,40(sp)
1000f644:	d9400917 	ldw	r5,36(sp)
1000f648:	e009883a 	mov	r4,fp
1000f64c:	00127680 	call	10012768 <__pow5mult>
1000f650:	1021883a 	mov	r16,r2
1000f654:	003f5a06 	br	1000f3c0 <__alt_data_end+0xf800f3c0>
1000f658:	01c00044 	movi	r7,1
1000f65c:	d9c00b15 	stw	r7,44(sp)
1000f660:	d8802217 	ldw	r2,136(sp)
1000f664:	0081280e 	bge	zero,r2,1000fb08 <_dtoa_r+0x11b0>
1000f668:	100d883a 	mov	r6,r2
1000f66c:	1021883a 	mov	r16,r2
1000f670:	d8800c15 	stw	r2,48(sp)
1000f674:	d8800615 	stw	r2,24(sp)
1000f678:	003d8806 	br	1000ec9c <__alt_data_end+0xf800ec9c>
1000f67c:	d8800617 	ldw	r2,24(sp)
1000f680:	00be9b16 	blt	zero,r2,1000f0f0 <__alt_data_end+0xf800f0f0>
1000f684:	10010f1e 	bne	r2,zero,1000fac4 <_dtoa_r+0x116c>
1000f688:	880b883a 	mov	r5,r17
1000f68c:	000d883a 	mov	r6,zero
1000f690:	01d00534 	movhi	r7,16404
1000f694:	8009883a 	mov	r4,r16
1000f698:	000a9500 	call	1000a950 <__muldf3>
1000f69c:	900d883a 	mov	r6,r18
1000f6a0:	980f883a 	mov	r7,r19
1000f6a4:	1009883a 	mov	r4,r2
1000f6a8:	180b883a 	mov	r5,r3
1000f6ac:	000a8740 	call	1000a874 <__gedf2>
1000f6b0:	002b883a 	mov	r21,zero
1000f6b4:	0023883a 	mov	r17,zero
1000f6b8:	1000bf16 	blt	r2,zero,1000f9b8 <_dtoa_r+0x1060>
1000f6bc:	d9802217 	ldw	r6,136(sp)
1000f6c0:	ddc00717 	ldw	r23,28(sp)
1000f6c4:	018c303a 	nor	r6,zero,r6
1000f6c8:	d9800515 	stw	r6,20(sp)
1000f6cc:	a80b883a 	mov	r5,r21
1000f6d0:	e009883a 	mov	r4,fp
1000f6d4:	00121140 	call	10012114 <_Bfree>
1000f6d8:	883e4926 	beq	r17,zero,1000f000 <__alt_data_end+0xf800f000>
1000f6dc:	003fad06 	br	1000f594 <__alt_data_end+0xf800f594>
1000f6e0:	d9c01117 	ldw	r7,68(sp)
1000f6e4:	3801bc26 	beq	r7,zero,1000fdd8 <_dtoa_r+0x1480>
1000f6e8:	10810cc4 	addi	r2,r2,1075
1000f6ec:	dd400a17 	ldw	r21,40(sp)
1000f6f0:	dd000817 	ldw	r20,32(sp)
1000f6f4:	003f0a06 	br	1000f320 <__alt_data_end+0xf800f320>
1000f6f8:	00800704 	movi	r2,28
1000f6fc:	d9000817 	ldw	r4,32(sp)
1000f700:	a0a9883a 	add	r20,r20,r2
1000f704:	b0ad883a 	add	r22,r22,r2
1000f708:	2089883a 	add	r4,r4,r2
1000f70c:	d9000815 	stw	r4,32(sp)
1000f710:	003f5106 	br	1000f458 <__alt_data_end+0xf800f458>
1000f714:	d8c00317 	ldw	r3,12(sp)
1000f718:	b8c1fc0e 	bge	r23,r3,1000ff0c <_dtoa_r+0x15b4>
1000f71c:	0027883a 	mov	r19,zero
1000f720:	b805883a 	mov	r2,r23
1000f724:	003f3e06 	br	1000f420 <__alt_data_end+0xf800f420>
1000f728:	880b883a 	mov	r5,r17
1000f72c:	e009883a 	mov	r4,fp
1000f730:	000f883a 	mov	r7,zero
1000f734:	01800284 	movi	r6,10
1000f738:	001213c0 	call	1001213c <__multadd>
1000f73c:	d9000c17 	ldw	r4,48(sp)
1000f740:	1023883a 	mov	r17,r2
1000f744:	0102040e 	bge	zero,r4,1000ff58 <_dtoa_r+0x1600>
1000f748:	d9000615 	stw	r4,24(sp)
1000f74c:	0500050e 	bge	zero,r20,1000f764 <_dtoa_r+0xe0c>
1000f750:	880b883a 	mov	r5,r17
1000f754:	a00d883a 	mov	r6,r20
1000f758:	e009883a 	mov	r4,fp
1000f75c:	00128a80 	call	100128a8 <__lshift>
1000f760:	1023883a 	mov	r17,r2
1000f764:	9801241e 	bne	r19,zero,1000fbf8 <_dtoa_r+0x12a0>
1000f768:	8829883a 	mov	r20,r17
1000f76c:	d9000617 	ldw	r4,24(sp)
1000f770:	dcc00717 	ldw	r19,28(sp)
1000f774:	9480004c 	andi	r18,r18,1
1000f778:	20bfffc4 	addi	r2,r4,-1
1000f77c:	9885883a 	add	r2,r19,r2
1000f780:	d8800415 	stw	r2,16(sp)
1000f784:	dc800615 	stw	r18,24(sp)
1000f788:	a80b883a 	mov	r5,r21
1000f78c:	8009883a 	mov	r4,r16
1000f790:	000e7300 	call	1000e730 <quorem>
1000f794:	880b883a 	mov	r5,r17
1000f798:	8009883a 	mov	r4,r16
1000f79c:	102f883a 	mov	r23,r2
1000f7a0:	00129f00 	call	100129f0 <__mcmp>
1000f7a4:	a80b883a 	mov	r5,r21
1000f7a8:	a00d883a 	mov	r6,r20
1000f7ac:	e009883a 	mov	r4,fp
1000f7b0:	102d883a 	mov	r22,r2
1000f7b4:	0012a500 	call	10012a50 <__mdiff>
1000f7b8:	1007883a 	mov	r3,r2
1000f7bc:	10800317 	ldw	r2,12(r2)
1000f7c0:	bc800c04 	addi	r18,r23,48
1000f7c4:	180b883a 	mov	r5,r3
1000f7c8:	10004e1e 	bne	r2,zero,1000f904 <_dtoa_r+0xfac>
1000f7cc:	8009883a 	mov	r4,r16
1000f7d0:	d8c01615 	stw	r3,88(sp)
1000f7d4:	00129f00 	call	100129f0 <__mcmp>
1000f7d8:	d8c01617 	ldw	r3,88(sp)
1000f7dc:	e009883a 	mov	r4,fp
1000f7e0:	d8801615 	stw	r2,88(sp)
1000f7e4:	180b883a 	mov	r5,r3
1000f7e8:	00121140 	call	10012114 <_Bfree>
1000f7ec:	d8801617 	ldw	r2,88(sp)
1000f7f0:	1000041e 	bne	r2,zero,1000f804 <_dtoa_r+0xeac>
1000f7f4:	d9800317 	ldw	r6,12(sp)
1000f7f8:	3000021e 	bne	r6,zero,1000f804 <_dtoa_r+0xeac>
1000f7fc:	d8c00617 	ldw	r3,24(sp)
1000f800:	18003726 	beq	r3,zero,1000f8e0 <_dtoa_r+0xf88>
1000f804:	b0002016 	blt	r22,zero,1000f888 <_dtoa_r+0xf30>
1000f808:	b000041e 	bne	r22,zero,1000f81c <_dtoa_r+0xec4>
1000f80c:	d9000317 	ldw	r4,12(sp)
1000f810:	2000021e 	bne	r4,zero,1000f81c <_dtoa_r+0xec4>
1000f814:	d8c00617 	ldw	r3,24(sp)
1000f818:	18001b26 	beq	r3,zero,1000f888 <_dtoa_r+0xf30>
1000f81c:	00810716 	blt	zero,r2,1000fc3c <_dtoa_r+0x12e4>
1000f820:	d8c00417 	ldw	r3,16(sp)
1000f824:	9d800044 	addi	r22,r19,1
1000f828:	9c800005 	stb	r18,0(r19)
1000f82c:	b02f883a 	mov	r23,r22
1000f830:	98c10626 	beq	r19,r3,1000fc4c <_dtoa_r+0x12f4>
1000f834:	800b883a 	mov	r5,r16
1000f838:	000f883a 	mov	r7,zero
1000f83c:	01800284 	movi	r6,10
1000f840:	e009883a 	mov	r4,fp
1000f844:	001213c0 	call	1001213c <__multadd>
1000f848:	1021883a 	mov	r16,r2
1000f84c:	000f883a 	mov	r7,zero
1000f850:	01800284 	movi	r6,10
1000f854:	880b883a 	mov	r5,r17
1000f858:	e009883a 	mov	r4,fp
1000f85c:	8d002526 	beq	r17,r20,1000f8f4 <_dtoa_r+0xf9c>
1000f860:	001213c0 	call	1001213c <__multadd>
1000f864:	a00b883a 	mov	r5,r20
1000f868:	000f883a 	mov	r7,zero
1000f86c:	01800284 	movi	r6,10
1000f870:	e009883a 	mov	r4,fp
1000f874:	1023883a 	mov	r17,r2
1000f878:	001213c0 	call	1001213c <__multadd>
1000f87c:	1029883a 	mov	r20,r2
1000f880:	b027883a 	mov	r19,r22
1000f884:	003fc006 	br	1000f788 <__alt_data_end+0xf800f788>
1000f888:	9011883a 	mov	r8,r18
1000f88c:	00800e0e 	bge	zero,r2,1000f8c8 <_dtoa_r+0xf70>
1000f890:	800b883a 	mov	r5,r16
1000f894:	01800044 	movi	r6,1
1000f898:	e009883a 	mov	r4,fp
1000f89c:	da001715 	stw	r8,92(sp)
1000f8a0:	00128a80 	call	100128a8 <__lshift>
1000f8a4:	a80b883a 	mov	r5,r21
1000f8a8:	1009883a 	mov	r4,r2
1000f8ac:	1021883a 	mov	r16,r2
1000f8b0:	00129f00 	call	100129f0 <__mcmp>
1000f8b4:	da001717 	ldw	r8,92(sp)
1000f8b8:	0081960e 	bge	zero,r2,1000ff14 <_dtoa_r+0x15bc>
1000f8bc:	00800e44 	movi	r2,57
1000f8c0:	40817026 	beq	r8,r2,1000fe84 <_dtoa_r+0x152c>
1000f8c4:	ba000c44 	addi	r8,r23,49
1000f8c8:	8825883a 	mov	r18,r17
1000f8cc:	9dc00044 	addi	r23,r19,1
1000f8d0:	9a000005 	stb	r8,0(r19)
1000f8d4:	a023883a 	mov	r17,r20
1000f8d8:	dc000915 	stw	r16,36(sp)
1000f8dc:	003f2406 	br	1000f570 <__alt_data_end+0xf800f570>
1000f8e0:	00800e44 	movi	r2,57
1000f8e4:	9011883a 	mov	r8,r18
1000f8e8:	90816626 	beq	r18,r2,1000fe84 <_dtoa_r+0x152c>
1000f8ec:	05bff516 	blt	zero,r22,1000f8c4 <__alt_data_end+0xf800f8c4>
1000f8f0:	003ff506 	br	1000f8c8 <__alt_data_end+0xf800f8c8>
1000f8f4:	001213c0 	call	1001213c <__multadd>
1000f8f8:	1023883a 	mov	r17,r2
1000f8fc:	1029883a 	mov	r20,r2
1000f900:	003fdf06 	br	1000f880 <__alt_data_end+0xf800f880>
1000f904:	e009883a 	mov	r4,fp
1000f908:	00121140 	call	10012114 <_Bfree>
1000f90c:	00800044 	movi	r2,1
1000f910:	003fbc06 	br	1000f804 <__alt_data_end+0xf800f804>
1000f914:	a80b883a 	mov	r5,r21
1000f918:	8009883a 	mov	r4,r16
1000f91c:	00129f00 	call	100129f0 <__mcmp>
1000f920:	103edb0e 	bge	r2,zero,1000f490 <__alt_data_end+0xf800f490>
1000f924:	800b883a 	mov	r5,r16
1000f928:	000f883a 	mov	r7,zero
1000f92c:	01800284 	movi	r6,10
1000f930:	e009883a 	mov	r4,fp
1000f934:	001213c0 	call	1001213c <__multadd>
1000f938:	1021883a 	mov	r16,r2
1000f93c:	d8800517 	ldw	r2,20(sp)
1000f940:	d8c00b17 	ldw	r3,44(sp)
1000f944:	10bfffc4 	addi	r2,r2,-1
1000f948:	d8800515 	stw	r2,20(sp)
1000f94c:	183f761e 	bne	r3,zero,1000f728 <__alt_data_end+0xf800f728>
1000f950:	d9000c17 	ldw	r4,48(sp)
1000f954:	0101730e 	bge	zero,r4,1000ff24 <_dtoa_r+0x15cc>
1000f958:	d9000615 	stw	r4,24(sp)
1000f95c:	003ed006 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f960:	00800084 	movi	r2,2
1000f964:	3081861e 	bne	r6,r2,1000ff80 <_dtoa_r+0x1628>
1000f968:	d8000b15 	stw	zero,44(sp)
1000f96c:	003f3c06 	br	1000f660 <__alt_data_end+0xf800f660>
1000f970:	dc000917 	ldw	r16,36(sp)
1000f974:	003e9206 	br	1000f3c0 <__alt_data_end+0xf800f3c0>
1000f978:	d9c00317 	ldw	r7,12(sp)
1000f97c:	00800084 	movi	r2,2
1000f980:	11fec50e 	bge	r2,r7,1000f498 <__alt_data_end+0xf800f498>
1000f984:	d9000617 	ldw	r4,24(sp)
1000f988:	20013c1e 	bne	r4,zero,1000fe7c <_dtoa_r+0x1524>
1000f98c:	a80b883a 	mov	r5,r21
1000f990:	000f883a 	mov	r7,zero
1000f994:	01800144 	movi	r6,5
1000f998:	e009883a 	mov	r4,fp
1000f99c:	001213c0 	call	1001213c <__multadd>
1000f9a0:	100b883a 	mov	r5,r2
1000f9a4:	8009883a 	mov	r4,r16
1000f9a8:	102b883a 	mov	r21,r2
1000f9ac:	00129f00 	call	100129f0 <__mcmp>
1000f9b0:	dc000915 	stw	r16,36(sp)
1000f9b4:	00bf410e 	bge	zero,r2,1000f6bc <__alt_data_end+0xf800f6bc>
1000f9b8:	d9c00717 	ldw	r7,28(sp)
1000f9bc:	00800c44 	movi	r2,49
1000f9c0:	38800005 	stb	r2,0(r7)
1000f9c4:	d8800517 	ldw	r2,20(sp)
1000f9c8:	3dc00044 	addi	r23,r7,1
1000f9cc:	10800044 	addi	r2,r2,1
1000f9d0:	d8800515 	stw	r2,20(sp)
1000f9d4:	003f3d06 	br	1000f6cc <__alt_data_end+0xf800f6cc>
1000f9d8:	d9800517 	ldw	r6,20(sp)
1000f9dc:	d9c00717 	ldw	r7,28(sp)
1000f9e0:	00800c44 	movi	r2,49
1000f9e4:	31800044 	addi	r6,r6,1
1000f9e8:	d9800515 	stw	r6,20(sp)
1000f9ec:	38800005 	stb	r2,0(r7)
1000f9f0:	003edf06 	br	1000f570 <__alt_data_end+0xf800f570>
1000f9f4:	d8000b15 	stw	zero,44(sp)
1000f9f8:	003c9f06 	br	1000ec78 <__alt_data_end+0xf800ec78>
1000f9fc:	903e7e1e 	bne	r18,zero,1000f3f8 <__alt_data_end+0xf800f3f8>
1000fa00:	00800434 	movhi	r2,16
1000fa04:	10bfffc4 	addi	r2,r2,-1
1000fa08:	9884703a 	and	r2,r19,r2
1000fa0c:	1000ea1e 	bne	r2,zero,1000fdb8 <_dtoa_r+0x1460>
1000fa10:	9cdffc2c 	andhi	r19,r19,32752
1000fa14:	9800e826 	beq	r19,zero,1000fdb8 <_dtoa_r+0x1460>
1000fa18:	d9c00817 	ldw	r7,32(sp)
1000fa1c:	b5800044 	addi	r22,r22,1
1000fa20:	04c00044 	movi	r19,1
1000fa24:	39c00044 	addi	r7,r7,1
1000fa28:	d9c00815 	stw	r7,32(sp)
1000fa2c:	d8800d17 	ldw	r2,52(sp)
1000fa30:	103e721e 	bne	r2,zero,1000f3fc <__alt_data_end+0xf800f3fc>
1000fa34:	00800044 	movi	r2,1
1000fa38:	003e7906 	br	1000f420 <__alt_data_end+0xf800f420>
1000fa3c:	8009883a 	mov	r4,r16
1000fa40:	000bb380 	call	1000bb38 <__floatsidf>
1000fa44:	d9800f17 	ldw	r6,60(sp)
1000fa48:	d9c01017 	ldw	r7,64(sp)
1000fa4c:	1009883a 	mov	r4,r2
1000fa50:	180b883a 	mov	r5,r3
1000fa54:	000a9500 	call	1000a950 <__muldf3>
1000fa58:	000d883a 	mov	r6,zero
1000fa5c:	01d00734 	movhi	r7,16412
1000fa60:	1009883a 	mov	r4,r2
1000fa64:	180b883a 	mov	r5,r3
1000fa68:	00095700 	call	10009570 <__adddf3>
1000fa6c:	047f3034 	movhi	r17,64704
1000fa70:	1021883a 	mov	r16,r2
1000fa74:	1c63883a 	add	r17,r3,r17
1000fa78:	d9000f17 	ldw	r4,60(sp)
1000fa7c:	d9401017 	ldw	r5,64(sp)
1000fa80:	000d883a 	mov	r6,zero
1000fa84:	01d00534 	movhi	r7,16404
1000fa88:	000b1bc0 	call	1000b1bc <__subdf3>
1000fa8c:	800d883a 	mov	r6,r16
1000fa90:	880f883a 	mov	r7,r17
1000fa94:	1009883a 	mov	r4,r2
1000fa98:	180b883a 	mov	r5,r3
1000fa9c:	102b883a 	mov	r21,r2
1000faa0:	1829883a 	mov	r20,r3
1000faa4:	000a8740 	call	1000a874 <__gedf2>
1000faa8:	00806c16 	blt	zero,r2,1000fc5c <_dtoa_r+0x1304>
1000faac:	89e0003c 	xorhi	r7,r17,32768
1000fab0:	800d883a 	mov	r6,r16
1000fab4:	a809883a 	mov	r4,r21
1000fab8:	a00b883a 	mov	r5,r20
1000fabc:	001656c0 	call	1001656c <__ledf2>
1000fac0:	103d7e0e 	bge	r2,zero,1000f0bc <__alt_data_end+0xf800f0bc>
1000fac4:	002b883a 	mov	r21,zero
1000fac8:	0023883a 	mov	r17,zero
1000facc:	003efb06 	br	1000f6bc <__alt_data_end+0xf800f6bc>
1000fad0:	d8800717 	ldw	r2,28(sp)
1000fad4:	003bd006 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000fad8:	d9000a17 	ldw	r4,40(sp)
1000fadc:	d9800d17 	ldw	r6,52(sp)
1000fae0:	dd400a15 	stw	r21,40(sp)
1000fae4:	a905c83a 	sub	r2,r21,r4
1000fae8:	308d883a 	add	r6,r6,r2
1000faec:	d9800d15 	stw	r6,52(sp)
1000faf0:	002b883a 	mov	r21,zero
1000faf4:	003e0606 	br	1000f310 <__alt_data_end+0xf800f310>
1000faf8:	9023883a 	mov	r17,r18
1000fafc:	9829883a 	mov	r20,r19
1000fb00:	04000084 	movi	r16,2
1000fb04:	003c9206 	br	1000ed50 <__alt_data_end+0xf800ed50>
1000fb08:	04000044 	movi	r16,1
1000fb0c:	dc000c15 	stw	r16,48(sp)
1000fb10:	dc000615 	stw	r16,24(sp)
1000fb14:	dc002215 	stw	r16,136(sp)
1000fb18:	e0001115 	stw	zero,68(fp)
1000fb1c:	000b883a 	mov	r5,zero
1000fb20:	003c6906 	br	1000ecc8 <__alt_data_end+0xf800ecc8>
1000fb24:	3021883a 	mov	r16,r6
1000fb28:	003ffb06 	br	1000fb18 <__alt_data_end+0xf800fb18>
1000fb2c:	1000021e 	bne	r2,zero,1000fb38 <_dtoa_r+0x11e0>
1000fb30:	4200004c 	andi	r8,r8,1
1000fb34:	403e7d1e 	bne	r8,zero,1000f52c <__alt_data_end+0xf800f52c>
1000fb38:	01000c04 	movi	r4,48
1000fb3c:	00000106 	br	1000fb44 <_dtoa_r+0x11ec>
1000fb40:	102f883a 	mov	r23,r2
1000fb44:	b8bfffc4 	addi	r2,r23,-1
1000fb48:	10c00007 	ldb	r3,0(r2)
1000fb4c:	193ffc26 	beq	r3,r4,1000fb40 <__alt_data_end+0xf800fb40>
1000fb50:	003e8706 	br	1000f570 <__alt_data_end+0xf800f570>
1000fb54:	d8800517 	ldw	r2,20(sp)
1000fb58:	00a3c83a 	sub	r17,zero,r2
1000fb5c:	8800a426 	beq	r17,zero,1000fdf0 <_dtoa_r+0x1498>
1000fb60:	888003cc 	andi	r2,r17,15
1000fb64:	100490fa 	slli	r2,r2,3
1000fb68:	00c400b4 	movhi	r3,4098
1000fb6c:	18e78e04 	addi	r3,r3,-25032
1000fb70:	1885883a 	add	r2,r3,r2
1000fb74:	11800017 	ldw	r6,0(r2)
1000fb78:	11c00117 	ldw	r7,4(r2)
1000fb7c:	9009883a 	mov	r4,r18
1000fb80:	980b883a 	mov	r5,r19
1000fb84:	8823d13a 	srai	r17,r17,4
1000fb88:	000a9500 	call	1000a950 <__muldf3>
1000fb8c:	d8800f15 	stw	r2,60(sp)
1000fb90:	d8c01015 	stw	r3,64(sp)
1000fb94:	8800e826 	beq	r17,zero,1000ff38 <_dtoa_r+0x15e0>
1000fb98:	050400b4 	movhi	r20,4098
1000fb9c:	a5278404 	addi	r20,r20,-25072
1000fba0:	04000084 	movi	r16,2
1000fba4:	8980004c 	andi	r6,r17,1
1000fba8:	1009883a 	mov	r4,r2
1000fbac:	8823d07a 	srai	r17,r17,1
1000fbb0:	180b883a 	mov	r5,r3
1000fbb4:	30000426 	beq	r6,zero,1000fbc8 <_dtoa_r+0x1270>
1000fbb8:	a1800017 	ldw	r6,0(r20)
1000fbbc:	a1c00117 	ldw	r7,4(r20)
1000fbc0:	84000044 	addi	r16,r16,1
1000fbc4:	000a9500 	call	1000a950 <__muldf3>
1000fbc8:	a5000204 	addi	r20,r20,8
1000fbcc:	883ff51e 	bne	r17,zero,1000fba4 <__alt_data_end+0xf800fba4>
1000fbd0:	d8800f15 	stw	r2,60(sp)
1000fbd4:	d8c01015 	stw	r3,64(sp)
1000fbd8:	003c7606 	br	1000edb4 <__alt_data_end+0xf800edb4>
1000fbdc:	00c00c04 	movi	r3,48
1000fbe0:	10c00005 	stb	r3,0(r2)
1000fbe4:	d8c00517 	ldw	r3,20(sp)
1000fbe8:	bd3fffc3 	ldbu	r20,-1(r23)
1000fbec:	18c00044 	addi	r3,r3,1
1000fbf0:	d8c00515 	stw	r3,20(sp)
1000fbf4:	003db906 	br	1000f2dc <__alt_data_end+0xf800f2dc>
1000fbf8:	89400117 	ldw	r5,4(r17)
1000fbfc:	e009883a 	mov	r4,fp
1000fc00:	001206c0 	call	1001206c <_Balloc>
1000fc04:	89800417 	ldw	r6,16(r17)
1000fc08:	89400304 	addi	r5,r17,12
1000fc0c:	11000304 	addi	r4,r2,12
1000fc10:	31800084 	addi	r6,r6,2
1000fc14:	318d883a 	add	r6,r6,r6
1000fc18:	318d883a 	add	r6,r6,r6
1000fc1c:	1027883a 	mov	r19,r2
1000fc20:	0011ca00 	call	10011ca0 <memcpy>
1000fc24:	01800044 	movi	r6,1
1000fc28:	980b883a 	mov	r5,r19
1000fc2c:	e009883a 	mov	r4,fp
1000fc30:	00128a80 	call	100128a8 <__lshift>
1000fc34:	1029883a 	mov	r20,r2
1000fc38:	003ecc06 	br	1000f76c <__alt_data_end+0xf800f76c>
1000fc3c:	00800e44 	movi	r2,57
1000fc40:	90809026 	beq	r18,r2,1000fe84 <_dtoa_r+0x152c>
1000fc44:	92000044 	addi	r8,r18,1
1000fc48:	003f1f06 	br	1000f8c8 <__alt_data_end+0xf800f8c8>
1000fc4c:	9011883a 	mov	r8,r18
1000fc50:	8825883a 	mov	r18,r17
1000fc54:	a023883a 	mov	r17,r20
1000fc58:	003e2906 	br	1000f500 <__alt_data_end+0xf800f500>
1000fc5c:	002b883a 	mov	r21,zero
1000fc60:	0023883a 	mov	r17,zero
1000fc64:	003f5406 	br	1000f9b8 <__alt_data_end+0xf800f9b8>
1000fc68:	61bfffc4 	addi	r6,r12,-1
1000fc6c:	300490fa 	slli	r2,r6,3
1000fc70:	00c400b4 	movhi	r3,4098
1000fc74:	18e78e04 	addi	r3,r3,-25032
1000fc78:	1885883a 	add	r2,r3,r2
1000fc7c:	11000017 	ldw	r4,0(r2)
1000fc80:	11400117 	ldw	r5,4(r2)
1000fc84:	d8800717 	ldw	r2,28(sp)
1000fc88:	880f883a 	mov	r7,r17
1000fc8c:	d9801215 	stw	r6,72(sp)
1000fc90:	800d883a 	mov	r6,r16
1000fc94:	db001615 	stw	r12,88(sp)
1000fc98:	15c00044 	addi	r23,r2,1
1000fc9c:	000a9500 	call	1000a950 <__muldf3>
1000fca0:	d9401017 	ldw	r5,64(sp)
1000fca4:	d9000f17 	ldw	r4,60(sp)
1000fca8:	d8c01515 	stw	r3,84(sp)
1000fcac:	d8801415 	stw	r2,80(sp)
1000fcb0:	000bab80 	call	1000bab8 <__fixdfsi>
1000fcb4:	1009883a 	mov	r4,r2
1000fcb8:	1021883a 	mov	r16,r2
1000fcbc:	000bb380 	call	1000bb38 <__floatsidf>
1000fcc0:	d9000f17 	ldw	r4,60(sp)
1000fcc4:	d9401017 	ldw	r5,64(sp)
1000fcc8:	100d883a 	mov	r6,r2
1000fccc:	180f883a 	mov	r7,r3
1000fcd0:	000b1bc0 	call	1000b1bc <__subdf3>
1000fcd4:	1829883a 	mov	r20,r3
1000fcd8:	d8c00717 	ldw	r3,28(sp)
1000fcdc:	84000c04 	addi	r16,r16,48
1000fce0:	1023883a 	mov	r17,r2
1000fce4:	1c000005 	stb	r16,0(r3)
1000fce8:	db001617 	ldw	r12,88(sp)
1000fcec:	00800044 	movi	r2,1
1000fcf0:	60802226 	beq	r12,r2,1000fd7c <_dtoa_r+0x1424>
1000fcf4:	d9c00717 	ldw	r7,28(sp)
1000fcf8:	8805883a 	mov	r2,r17
1000fcfc:	b82b883a 	mov	r21,r23
1000fd00:	3b19883a 	add	r12,r7,r12
1000fd04:	6023883a 	mov	r17,r12
1000fd08:	a007883a 	mov	r3,r20
1000fd0c:	dc800f15 	stw	r18,60(sp)
1000fd10:	000d883a 	mov	r6,zero
1000fd14:	01d00934 	movhi	r7,16420
1000fd18:	1009883a 	mov	r4,r2
1000fd1c:	180b883a 	mov	r5,r3
1000fd20:	000a9500 	call	1000a950 <__muldf3>
1000fd24:	180b883a 	mov	r5,r3
1000fd28:	1009883a 	mov	r4,r2
1000fd2c:	1829883a 	mov	r20,r3
1000fd30:	1025883a 	mov	r18,r2
1000fd34:	000bab80 	call	1000bab8 <__fixdfsi>
1000fd38:	1009883a 	mov	r4,r2
1000fd3c:	1021883a 	mov	r16,r2
1000fd40:	000bb380 	call	1000bb38 <__floatsidf>
1000fd44:	100d883a 	mov	r6,r2
1000fd48:	180f883a 	mov	r7,r3
1000fd4c:	9009883a 	mov	r4,r18
1000fd50:	a00b883a 	mov	r5,r20
1000fd54:	84000c04 	addi	r16,r16,48
1000fd58:	000b1bc0 	call	1000b1bc <__subdf3>
1000fd5c:	ad400044 	addi	r21,r21,1
1000fd60:	ac3fffc5 	stb	r16,-1(r21)
1000fd64:	ac7fea1e 	bne	r21,r17,1000fd10 <__alt_data_end+0xf800fd10>
1000fd68:	1023883a 	mov	r17,r2
1000fd6c:	d8801217 	ldw	r2,72(sp)
1000fd70:	dc800f17 	ldw	r18,60(sp)
1000fd74:	1829883a 	mov	r20,r3
1000fd78:	b8af883a 	add	r23,r23,r2
1000fd7c:	d9001417 	ldw	r4,80(sp)
1000fd80:	d9401517 	ldw	r5,84(sp)
1000fd84:	000d883a 	mov	r6,zero
1000fd88:	01cff834 	movhi	r7,16352
1000fd8c:	00095700 	call	10009570 <__adddf3>
1000fd90:	880d883a 	mov	r6,r17
1000fd94:	a00f883a 	mov	r7,r20
1000fd98:	1009883a 	mov	r4,r2
1000fd9c:	180b883a 	mov	r5,r3
1000fda0:	001656c0 	call	1001656c <__ledf2>
1000fda4:	10003e0e 	bge	r2,zero,1000fea0 <_dtoa_r+0x1548>
1000fda8:	d9001317 	ldw	r4,76(sp)
1000fdac:	bd3fffc3 	ldbu	r20,-1(r23)
1000fdb0:	d9000515 	stw	r4,20(sp)
1000fdb4:	003d3b06 	br	1000f2a4 <__alt_data_end+0xf800f2a4>
1000fdb8:	0027883a 	mov	r19,zero
1000fdbc:	003f1b06 	br	1000fa2c <__alt_data_end+0xf800fa2c>
1000fdc0:	d8800817 	ldw	r2,32(sp)
1000fdc4:	11e9c83a 	sub	r20,r2,r7
1000fdc8:	0005883a 	mov	r2,zero
1000fdcc:	003d5406 	br	1000f320 <__alt_data_end+0xf800f320>
1000fdd0:	00800044 	movi	r2,1
1000fdd4:	003dc706 	br	1000f4f4 <__alt_data_end+0xf800f4f4>
1000fdd8:	d8c00217 	ldw	r3,8(sp)
1000fddc:	00800d84 	movi	r2,54
1000fde0:	dd400a17 	ldw	r21,40(sp)
1000fde4:	10c5c83a 	sub	r2,r2,r3
1000fde8:	dd000817 	ldw	r20,32(sp)
1000fdec:	003d4c06 	br	1000f320 <__alt_data_end+0xf800f320>
1000fdf0:	dc800f15 	stw	r18,60(sp)
1000fdf4:	dcc01015 	stw	r19,64(sp)
1000fdf8:	04000084 	movi	r16,2
1000fdfc:	003bed06 	br	1000edb4 <__alt_data_end+0xf800edb4>
1000fe00:	d9000617 	ldw	r4,24(sp)
1000fe04:	203f0d26 	beq	r4,zero,1000fa3c <__alt_data_end+0xf800fa3c>
1000fe08:	d9800c17 	ldw	r6,48(sp)
1000fe0c:	01bcab0e 	bge	zero,r6,1000f0bc <__alt_data_end+0xf800f0bc>
1000fe10:	d9401017 	ldw	r5,64(sp)
1000fe14:	d9000f17 	ldw	r4,60(sp)
1000fe18:	000d883a 	mov	r6,zero
1000fe1c:	01d00934 	movhi	r7,16420
1000fe20:	000a9500 	call	1000a950 <__muldf3>
1000fe24:	81000044 	addi	r4,r16,1
1000fe28:	d8800f15 	stw	r2,60(sp)
1000fe2c:	d8c01015 	stw	r3,64(sp)
1000fe30:	000bb380 	call	1000bb38 <__floatsidf>
1000fe34:	d9800f17 	ldw	r6,60(sp)
1000fe38:	d9c01017 	ldw	r7,64(sp)
1000fe3c:	1009883a 	mov	r4,r2
1000fe40:	180b883a 	mov	r5,r3
1000fe44:	000a9500 	call	1000a950 <__muldf3>
1000fe48:	01d00734 	movhi	r7,16412
1000fe4c:	000d883a 	mov	r6,zero
1000fe50:	1009883a 	mov	r4,r2
1000fe54:	180b883a 	mov	r5,r3
1000fe58:	00095700 	call	10009570 <__adddf3>
1000fe5c:	d9c00517 	ldw	r7,20(sp)
1000fe60:	047f3034 	movhi	r17,64704
1000fe64:	1021883a 	mov	r16,r2
1000fe68:	39ffffc4 	addi	r7,r7,-1
1000fe6c:	d9c01315 	stw	r7,76(sp)
1000fe70:	1c63883a 	add	r17,r3,r17
1000fe74:	db000c17 	ldw	r12,48(sp)
1000fe78:	003bea06 	br	1000ee24 <__alt_data_end+0xf800ee24>
1000fe7c:	dc000915 	stw	r16,36(sp)
1000fe80:	003e0e06 	br	1000f6bc <__alt_data_end+0xf800f6bc>
1000fe84:	01000e44 	movi	r4,57
1000fe88:	8825883a 	mov	r18,r17
1000fe8c:	9dc00044 	addi	r23,r19,1
1000fe90:	99000005 	stb	r4,0(r19)
1000fe94:	a023883a 	mov	r17,r20
1000fe98:	dc000915 	stw	r16,36(sp)
1000fe9c:	003da406 	br	1000f530 <__alt_data_end+0xf800f530>
1000fea0:	d9801417 	ldw	r6,80(sp)
1000fea4:	d9c01517 	ldw	r7,84(sp)
1000fea8:	0009883a 	mov	r4,zero
1000feac:	014ff834 	movhi	r5,16352
1000feb0:	000b1bc0 	call	1000b1bc <__subdf3>
1000feb4:	880d883a 	mov	r6,r17
1000feb8:	a00f883a 	mov	r7,r20
1000febc:	1009883a 	mov	r4,r2
1000fec0:	180b883a 	mov	r5,r3
1000fec4:	000a8740 	call	1000a874 <__gedf2>
1000fec8:	00bc7c0e 	bge	zero,r2,1000f0bc <__alt_data_end+0xf800f0bc>
1000fecc:	01000c04 	movi	r4,48
1000fed0:	00000106 	br	1000fed8 <_dtoa_r+0x1580>
1000fed4:	102f883a 	mov	r23,r2
1000fed8:	b8bfffc4 	addi	r2,r23,-1
1000fedc:	10c00007 	ldb	r3,0(r2)
1000fee0:	193ffc26 	beq	r3,r4,1000fed4 <__alt_data_end+0xf800fed4>
1000fee4:	d9801317 	ldw	r6,76(sp)
1000fee8:	d9800515 	stw	r6,20(sp)
1000feec:	003c4406 	br	1000f000 <__alt_data_end+0xf800f000>
1000fef0:	d9801317 	ldw	r6,76(sp)
1000fef4:	d9800515 	stw	r6,20(sp)
1000fef8:	003cea06 	br	1000f2a4 <__alt_data_end+0xf800f2a4>
1000fefc:	dd800f17 	ldw	r22,60(sp)
1000ff00:	dcc01017 	ldw	r19,64(sp)
1000ff04:	dc801217 	ldw	r18,72(sp)
1000ff08:	003c6c06 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000ff0c:	903e031e 	bne	r18,zero,1000f71c <__alt_data_end+0xf800f71c>
1000ff10:	003ebb06 	br	1000fa00 <__alt_data_end+0xf800fa00>
1000ff14:	103e6c1e 	bne	r2,zero,1000f8c8 <__alt_data_end+0xf800f8c8>
1000ff18:	4080004c 	andi	r2,r8,1
1000ff1c:	103e6a26 	beq	r2,zero,1000f8c8 <__alt_data_end+0xf800f8c8>
1000ff20:	003e6606 	br	1000f8bc <__alt_data_end+0xf800f8bc>
1000ff24:	d8c00317 	ldw	r3,12(sp)
1000ff28:	00800084 	movi	r2,2
1000ff2c:	10c02916 	blt	r2,r3,1000ffd4 <_dtoa_r+0x167c>
1000ff30:	d9000c17 	ldw	r4,48(sp)
1000ff34:	003e8806 	br	1000f958 <__alt_data_end+0xf800f958>
1000ff38:	04000084 	movi	r16,2
1000ff3c:	003b9d06 	br	1000edb4 <__alt_data_end+0xf800edb4>
1000ff40:	d9001317 	ldw	r4,76(sp)
1000ff44:	d9000515 	stw	r4,20(sp)
1000ff48:	003cd606 	br	1000f2a4 <__alt_data_end+0xf800f2a4>
1000ff4c:	d8801317 	ldw	r2,76(sp)
1000ff50:	d8800515 	stw	r2,20(sp)
1000ff54:	003c2a06 	br	1000f000 <__alt_data_end+0xf800f000>
1000ff58:	d9800317 	ldw	r6,12(sp)
1000ff5c:	00800084 	movi	r2,2
1000ff60:	11801516 	blt	r2,r6,1000ffb8 <_dtoa_r+0x1660>
1000ff64:	d9c00c17 	ldw	r7,48(sp)
1000ff68:	d9c00615 	stw	r7,24(sp)
1000ff6c:	003df706 	br	1000f74c <__alt_data_end+0xf800f74c>
1000ff70:	193d3926 	beq	r3,r4,1000f458 <__alt_data_end+0xf800f458>
1000ff74:	00c00f04 	movi	r3,60
1000ff78:	1885c83a 	sub	r2,r3,r2
1000ff7c:	003ddf06 	br	1000f6fc <__alt_data_end+0xf800f6fc>
1000ff80:	e009883a 	mov	r4,fp
1000ff84:	e0001115 	stw	zero,68(fp)
1000ff88:	000b883a 	mov	r5,zero
1000ff8c:	001206c0 	call	1001206c <_Balloc>
1000ff90:	d8800715 	stw	r2,28(sp)
1000ff94:	d8c00717 	ldw	r3,28(sp)
1000ff98:	00bfffc4 	movi	r2,-1
1000ff9c:	01000044 	movi	r4,1
1000ffa0:	d8800c15 	stw	r2,48(sp)
1000ffa4:	e0c01015 	stw	r3,64(fp)
1000ffa8:	d9000b15 	stw	r4,44(sp)
1000ffac:	d8800615 	stw	r2,24(sp)
1000ffb0:	d8002215 	stw	zero,136(sp)
1000ffb4:	003c4106 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000ffb8:	d8c00c17 	ldw	r3,48(sp)
1000ffbc:	d8c00615 	stw	r3,24(sp)
1000ffc0:	003e7006 	br	1000f984 <__alt_data_end+0xf800f984>
1000ffc4:	04400044 	movi	r17,1
1000ffc8:	003b2006 	br	1000ec4c <__alt_data_end+0xf800ec4c>
1000ffcc:	000b883a 	mov	r5,zero
1000ffd0:	003b3d06 	br	1000ecc8 <__alt_data_end+0xf800ecc8>
1000ffd4:	d8800c17 	ldw	r2,48(sp)
1000ffd8:	d8800615 	stw	r2,24(sp)
1000ffdc:	003e6906 	br	1000f984 <__alt_data_end+0xf800f984>

1000ffe0 <__sflush_r>:
1000ffe0:	2880030b 	ldhu	r2,12(r5)
1000ffe4:	defffb04 	addi	sp,sp,-20
1000ffe8:	dcc00315 	stw	r19,12(sp)
1000ffec:	dc400115 	stw	r17,4(sp)
1000fff0:	dfc00415 	stw	ra,16(sp)
1000fff4:	dc800215 	stw	r18,8(sp)
1000fff8:	dc000015 	stw	r16,0(sp)
1000fffc:	10c0020c 	andi	r3,r2,8
10010000:	2823883a 	mov	r17,r5
10010004:	2027883a 	mov	r19,r4
10010008:	1800311e 	bne	r3,zero,100100d0 <__sflush_r+0xf0>
1001000c:	28c00117 	ldw	r3,4(r5)
10010010:	10820014 	ori	r2,r2,2048
10010014:	2880030d 	sth	r2,12(r5)
10010018:	00c04b0e 	bge	zero,r3,10010148 <__sflush_r+0x168>
1001001c:	8a000a17 	ldw	r8,40(r17)
10010020:	40002326 	beq	r8,zero,100100b0 <__sflush_r+0xd0>
10010024:	9c000017 	ldw	r16,0(r19)
10010028:	10c4000c 	andi	r3,r2,4096
1001002c:	98000015 	stw	zero,0(r19)
10010030:	18004826 	beq	r3,zero,10010154 <__sflush_r+0x174>
10010034:	89801417 	ldw	r6,80(r17)
10010038:	10c0010c 	andi	r3,r2,4
1001003c:	18000626 	beq	r3,zero,10010058 <__sflush_r+0x78>
10010040:	88c00117 	ldw	r3,4(r17)
10010044:	88800c17 	ldw	r2,48(r17)
10010048:	30cdc83a 	sub	r6,r6,r3
1001004c:	10000226 	beq	r2,zero,10010058 <__sflush_r+0x78>
10010050:	88800f17 	ldw	r2,60(r17)
10010054:	308dc83a 	sub	r6,r6,r2
10010058:	89400717 	ldw	r5,28(r17)
1001005c:	000f883a 	mov	r7,zero
10010060:	9809883a 	mov	r4,r19
10010064:	403ee83a 	callr	r8
10010068:	00ffffc4 	movi	r3,-1
1001006c:	10c04426 	beq	r2,r3,10010180 <__sflush_r+0x1a0>
10010070:	88c0030b 	ldhu	r3,12(r17)
10010074:	89000417 	ldw	r4,16(r17)
10010078:	88000115 	stw	zero,4(r17)
1001007c:	197dffcc 	andi	r5,r3,63487
10010080:	8940030d 	sth	r5,12(r17)
10010084:	89000015 	stw	r4,0(r17)
10010088:	18c4000c 	andi	r3,r3,4096
1001008c:	18002c1e 	bne	r3,zero,10010140 <__sflush_r+0x160>
10010090:	89400c17 	ldw	r5,48(r17)
10010094:	9c000015 	stw	r16,0(r19)
10010098:	28000526 	beq	r5,zero,100100b0 <__sflush_r+0xd0>
1001009c:	88801004 	addi	r2,r17,64
100100a0:	28800226 	beq	r5,r2,100100ac <__sflush_r+0xcc>
100100a4:	9809883a 	mov	r4,r19
100100a8:	001075c0 	call	1001075c <_free_r>
100100ac:	88000c15 	stw	zero,48(r17)
100100b0:	0005883a 	mov	r2,zero
100100b4:	dfc00417 	ldw	ra,16(sp)
100100b8:	dcc00317 	ldw	r19,12(sp)
100100bc:	dc800217 	ldw	r18,8(sp)
100100c0:	dc400117 	ldw	r17,4(sp)
100100c4:	dc000017 	ldw	r16,0(sp)
100100c8:	dec00504 	addi	sp,sp,20
100100cc:	f800283a 	ret
100100d0:	2c800417 	ldw	r18,16(r5)
100100d4:	903ff626 	beq	r18,zero,100100b0 <__alt_data_end+0xf80100b0>
100100d8:	2c000017 	ldw	r16,0(r5)
100100dc:	108000cc 	andi	r2,r2,3
100100e0:	2c800015 	stw	r18,0(r5)
100100e4:	84a1c83a 	sub	r16,r16,r18
100100e8:	1000131e 	bne	r2,zero,10010138 <__sflush_r+0x158>
100100ec:	28800517 	ldw	r2,20(r5)
100100f0:	88800215 	stw	r2,8(r17)
100100f4:	04000316 	blt	zero,r16,10010104 <__sflush_r+0x124>
100100f8:	003fed06 	br	100100b0 <__alt_data_end+0xf80100b0>
100100fc:	90a5883a 	add	r18,r18,r2
10010100:	043feb0e 	bge	zero,r16,100100b0 <__alt_data_end+0xf80100b0>
10010104:	88800917 	ldw	r2,36(r17)
10010108:	89400717 	ldw	r5,28(r17)
1001010c:	800f883a 	mov	r7,r16
10010110:	900d883a 	mov	r6,r18
10010114:	9809883a 	mov	r4,r19
10010118:	103ee83a 	callr	r2
1001011c:	80a1c83a 	sub	r16,r16,r2
10010120:	00bff616 	blt	zero,r2,100100fc <__alt_data_end+0xf80100fc>
10010124:	88c0030b 	ldhu	r3,12(r17)
10010128:	00bfffc4 	movi	r2,-1
1001012c:	18c01014 	ori	r3,r3,64
10010130:	88c0030d 	sth	r3,12(r17)
10010134:	003fdf06 	br	100100b4 <__alt_data_end+0xf80100b4>
10010138:	0005883a 	mov	r2,zero
1001013c:	003fec06 	br	100100f0 <__alt_data_end+0xf80100f0>
10010140:	88801415 	stw	r2,80(r17)
10010144:	003fd206 	br	10010090 <__alt_data_end+0xf8010090>
10010148:	28c00f17 	ldw	r3,60(r5)
1001014c:	00ffb316 	blt	zero,r3,1001001c <__alt_data_end+0xf801001c>
10010150:	003fd706 	br	100100b0 <__alt_data_end+0xf80100b0>
10010154:	89400717 	ldw	r5,28(r17)
10010158:	000d883a 	mov	r6,zero
1001015c:	01c00044 	movi	r7,1
10010160:	9809883a 	mov	r4,r19
10010164:	403ee83a 	callr	r8
10010168:	100d883a 	mov	r6,r2
1001016c:	00bfffc4 	movi	r2,-1
10010170:	30801426 	beq	r6,r2,100101c4 <__sflush_r+0x1e4>
10010174:	8880030b 	ldhu	r2,12(r17)
10010178:	8a000a17 	ldw	r8,40(r17)
1001017c:	003fae06 	br	10010038 <__alt_data_end+0xf8010038>
10010180:	98c00017 	ldw	r3,0(r19)
10010184:	183fba26 	beq	r3,zero,10010070 <__alt_data_end+0xf8010070>
10010188:	01000744 	movi	r4,29
1001018c:	19000626 	beq	r3,r4,100101a8 <__sflush_r+0x1c8>
10010190:	01000584 	movi	r4,22
10010194:	19000426 	beq	r3,r4,100101a8 <__sflush_r+0x1c8>
10010198:	88c0030b 	ldhu	r3,12(r17)
1001019c:	18c01014 	ori	r3,r3,64
100101a0:	88c0030d 	sth	r3,12(r17)
100101a4:	003fc306 	br	100100b4 <__alt_data_end+0xf80100b4>
100101a8:	8880030b 	ldhu	r2,12(r17)
100101ac:	88c00417 	ldw	r3,16(r17)
100101b0:	88000115 	stw	zero,4(r17)
100101b4:	10bdffcc 	andi	r2,r2,63487
100101b8:	8880030d 	sth	r2,12(r17)
100101bc:	88c00015 	stw	r3,0(r17)
100101c0:	003fb306 	br	10010090 <__alt_data_end+0xf8010090>
100101c4:	98800017 	ldw	r2,0(r19)
100101c8:	103fea26 	beq	r2,zero,10010174 <__alt_data_end+0xf8010174>
100101cc:	00c00744 	movi	r3,29
100101d0:	10c00226 	beq	r2,r3,100101dc <__sflush_r+0x1fc>
100101d4:	00c00584 	movi	r3,22
100101d8:	10c0031e 	bne	r2,r3,100101e8 <__sflush_r+0x208>
100101dc:	9c000015 	stw	r16,0(r19)
100101e0:	0005883a 	mov	r2,zero
100101e4:	003fb306 	br	100100b4 <__alt_data_end+0xf80100b4>
100101e8:	88c0030b 	ldhu	r3,12(r17)
100101ec:	3005883a 	mov	r2,r6
100101f0:	18c01014 	ori	r3,r3,64
100101f4:	88c0030d 	sth	r3,12(r17)
100101f8:	003fae06 	br	100100b4 <__alt_data_end+0xf80100b4>

100101fc <_fflush_r>:
100101fc:	defffd04 	addi	sp,sp,-12
10010200:	dc000115 	stw	r16,4(sp)
10010204:	dfc00215 	stw	ra,8(sp)
10010208:	2021883a 	mov	r16,r4
1001020c:	20000226 	beq	r4,zero,10010218 <_fflush_r+0x1c>
10010210:	20800e17 	ldw	r2,56(r4)
10010214:	10000c26 	beq	r2,zero,10010248 <_fflush_r+0x4c>
10010218:	2880030f 	ldh	r2,12(r5)
1001021c:	1000051e 	bne	r2,zero,10010234 <_fflush_r+0x38>
10010220:	0005883a 	mov	r2,zero
10010224:	dfc00217 	ldw	ra,8(sp)
10010228:	dc000117 	ldw	r16,4(sp)
1001022c:	dec00304 	addi	sp,sp,12
10010230:	f800283a 	ret
10010234:	8009883a 	mov	r4,r16
10010238:	dfc00217 	ldw	ra,8(sp)
1001023c:	dc000117 	ldw	r16,4(sp)
10010240:	dec00304 	addi	sp,sp,12
10010244:	000ffe01 	jmpi	1000ffe0 <__sflush_r>
10010248:	d9400015 	stw	r5,0(sp)
1001024c:	00105e80 	call	100105e8 <__sinit>
10010250:	d9400017 	ldw	r5,0(sp)
10010254:	003ff006 	br	10010218 <__alt_data_end+0xf8010218>

10010258 <fflush>:
10010258:	20000526 	beq	r4,zero,10010270 <fflush+0x18>
1001025c:	008400b4 	movhi	r2,4098
10010260:	10af4504 	addi	r2,r2,-17132
10010264:	200b883a 	mov	r5,r4
10010268:	11000017 	ldw	r4,0(r2)
1001026c:	00101fc1 	jmpi	100101fc <_fflush_r>
10010270:	008400b4 	movhi	r2,4098
10010274:	10af4404 	addi	r2,r2,-17136
10010278:	11000017 	ldw	r4,0(r2)
1001027c:	01440074 	movhi	r5,4097
10010280:	29407f04 	addi	r5,r5,508
10010284:	0010ff81 	jmpi	10010ff8 <_fwalk_reent>

10010288 <__fp_unlock>:
10010288:	0005883a 	mov	r2,zero
1001028c:	f800283a 	ret

10010290 <_cleanup_r>:
10010290:	01440074 	movhi	r5,4097
10010294:	29547c04 	addi	r5,r5,20976
10010298:	0010ff81 	jmpi	10010ff8 <_fwalk_reent>

1001029c <__sinit.part.1>:
1001029c:	defff704 	addi	sp,sp,-36
100102a0:	00c40074 	movhi	r3,4097
100102a4:	dfc00815 	stw	ra,32(sp)
100102a8:	ddc00715 	stw	r23,28(sp)
100102ac:	dd800615 	stw	r22,24(sp)
100102b0:	dd400515 	stw	r21,20(sp)
100102b4:	dd000415 	stw	r20,16(sp)
100102b8:	dcc00315 	stw	r19,12(sp)
100102bc:	dc800215 	stw	r18,8(sp)
100102c0:	dc400115 	stw	r17,4(sp)
100102c4:	dc000015 	stw	r16,0(sp)
100102c8:	18c0a404 	addi	r3,r3,656
100102cc:	24000117 	ldw	r16,4(r4)
100102d0:	20c00f15 	stw	r3,60(r4)
100102d4:	2080bb04 	addi	r2,r4,748
100102d8:	00c000c4 	movi	r3,3
100102dc:	20c0b915 	stw	r3,740(r4)
100102e0:	2080ba15 	stw	r2,744(r4)
100102e4:	2000b815 	stw	zero,736(r4)
100102e8:	05c00204 	movi	r23,8
100102ec:	00800104 	movi	r2,4
100102f0:	2025883a 	mov	r18,r4
100102f4:	b80d883a 	mov	r6,r23
100102f8:	81001704 	addi	r4,r16,92
100102fc:	000b883a 	mov	r5,zero
10010300:	80000015 	stw	zero,0(r16)
10010304:	80000115 	stw	zero,4(r16)
10010308:	80000215 	stw	zero,8(r16)
1001030c:	8080030d 	sth	r2,12(r16)
10010310:	80001915 	stw	zero,100(r16)
10010314:	8000038d 	sth	zero,14(r16)
10010318:	80000415 	stw	zero,16(r16)
1001031c:	80000515 	stw	zero,20(r16)
10010320:	80000615 	stw	zero,24(r16)
10010324:	0011f440 	call	10011f44 <memset>
10010328:	05840074 	movhi	r22,4097
1001032c:	94400217 	ldw	r17,8(r18)
10010330:	05440074 	movhi	r21,4097
10010334:	05040074 	movhi	r20,4097
10010338:	04c40074 	movhi	r19,4097
1001033c:	b58dd404 	addi	r22,r22,14160
10010340:	ad4deb04 	addi	r21,r21,14252
10010344:	a50e0a04 	addi	r20,r20,14376
10010348:	9cce2104 	addi	r19,r19,14468
1001034c:	85800815 	stw	r22,32(r16)
10010350:	85400915 	stw	r21,36(r16)
10010354:	85000a15 	stw	r20,40(r16)
10010358:	84c00b15 	stw	r19,44(r16)
1001035c:	84000715 	stw	r16,28(r16)
10010360:	00800284 	movi	r2,10
10010364:	8880030d 	sth	r2,12(r17)
10010368:	00800044 	movi	r2,1
1001036c:	b80d883a 	mov	r6,r23
10010370:	89001704 	addi	r4,r17,92
10010374:	000b883a 	mov	r5,zero
10010378:	88000015 	stw	zero,0(r17)
1001037c:	88000115 	stw	zero,4(r17)
10010380:	88000215 	stw	zero,8(r17)
10010384:	88001915 	stw	zero,100(r17)
10010388:	8880038d 	sth	r2,14(r17)
1001038c:	88000415 	stw	zero,16(r17)
10010390:	88000515 	stw	zero,20(r17)
10010394:	88000615 	stw	zero,24(r17)
10010398:	0011f440 	call	10011f44 <memset>
1001039c:	94000317 	ldw	r16,12(r18)
100103a0:	00800484 	movi	r2,18
100103a4:	8c400715 	stw	r17,28(r17)
100103a8:	8d800815 	stw	r22,32(r17)
100103ac:	8d400915 	stw	r21,36(r17)
100103b0:	8d000a15 	stw	r20,40(r17)
100103b4:	8cc00b15 	stw	r19,44(r17)
100103b8:	8080030d 	sth	r2,12(r16)
100103bc:	00800084 	movi	r2,2
100103c0:	80000015 	stw	zero,0(r16)
100103c4:	80000115 	stw	zero,4(r16)
100103c8:	80000215 	stw	zero,8(r16)
100103cc:	80001915 	stw	zero,100(r16)
100103d0:	8080038d 	sth	r2,14(r16)
100103d4:	80000415 	stw	zero,16(r16)
100103d8:	80000515 	stw	zero,20(r16)
100103dc:	80000615 	stw	zero,24(r16)
100103e0:	b80d883a 	mov	r6,r23
100103e4:	000b883a 	mov	r5,zero
100103e8:	81001704 	addi	r4,r16,92
100103ec:	0011f440 	call	10011f44 <memset>
100103f0:	00800044 	movi	r2,1
100103f4:	84000715 	stw	r16,28(r16)
100103f8:	85800815 	stw	r22,32(r16)
100103fc:	85400915 	stw	r21,36(r16)
10010400:	85000a15 	stw	r20,40(r16)
10010404:	84c00b15 	stw	r19,44(r16)
10010408:	90800e15 	stw	r2,56(r18)
1001040c:	dfc00817 	ldw	ra,32(sp)
10010410:	ddc00717 	ldw	r23,28(sp)
10010414:	dd800617 	ldw	r22,24(sp)
10010418:	dd400517 	ldw	r21,20(sp)
1001041c:	dd000417 	ldw	r20,16(sp)
10010420:	dcc00317 	ldw	r19,12(sp)
10010424:	dc800217 	ldw	r18,8(sp)
10010428:	dc400117 	ldw	r17,4(sp)
1001042c:	dc000017 	ldw	r16,0(sp)
10010430:	dec00904 	addi	sp,sp,36
10010434:	f800283a 	ret

10010438 <__fp_lock>:
10010438:	0005883a 	mov	r2,zero
1001043c:	f800283a 	ret

10010440 <__sfmoreglue>:
10010440:	defffc04 	addi	sp,sp,-16
10010444:	dc800215 	stw	r18,8(sp)
10010448:	2825883a 	mov	r18,r5
1001044c:	dc000015 	stw	r16,0(sp)
10010450:	01401a04 	movi	r5,104
10010454:	2021883a 	mov	r16,r4
10010458:	913fffc4 	addi	r4,r18,-1
1001045c:	dfc00315 	stw	ra,12(sp)
10010460:	dc400115 	stw	r17,4(sp)
10010464:	00085800 	call	10008580 <__mulsi3>
10010468:	8009883a 	mov	r4,r16
1001046c:	11401d04 	addi	r5,r2,116
10010470:	1023883a 	mov	r17,r2
10010474:	00113b00 	call	100113b0 <_malloc_r>
10010478:	1021883a 	mov	r16,r2
1001047c:	10000726 	beq	r2,zero,1001049c <__sfmoreglue+0x5c>
10010480:	11000304 	addi	r4,r2,12
10010484:	10000015 	stw	zero,0(r2)
10010488:	14800115 	stw	r18,4(r2)
1001048c:	11000215 	stw	r4,8(r2)
10010490:	89801a04 	addi	r6,r17,104
10010494:	000b883a 	mov	r5,zero
10010498:	0011f440 	call	10011f44 <memset>
1001049c:	8005883a 	mov	r2,r16
100104a0:	dfc00317 	ldw	ra,12(sp)
100104a4:	dc800217 	ldw	r18,8(sp)
100104a8:	dc400117 	ldw	r17,4(sp)
100104ac:	dc000017 	ldw	r16,0(sp)
100104b0:	dec00404 	addi	sp,sp,16
100104b4:	f800283a 	ret

100104b8 <__sfp>:
100104b8:	defffb04 	addi	sp,sp,-20
100104bc:	dc000015 	stw	r16,0(sp)
100104c0:	040400b4 	movhi	r16,4098
100104c4:	842f4404 	addi	r16,r16,-17136
100104c8:	dcc00315 	stw	r19,12(sp)
100104cc:	2027883a 	mov	r19,r4
100104d0:	81000017 	ldw	r4,0(r16)
100104d4:	dfc00415 	stw	ra,16(sp)
100104d8:	dc800215 	stw	r18,8(sp)
100104dc:	20800e17 	ldw	r2,56(r4)
100104e0:	dc400115 	stw	r17,4(sp)
100104e4:	1000021e 	bne	r2,zero,100104f0 <__sfp+0x38>
100104e8:	001029c0 	call	1001029c <__sinit.part.1>
100104ec:	81000017 	ldw	r4,0(r16)
100104f0:	2480b804 	addi	r18,r4,736
100104f4:	047fffc4 	movi	r17,-1
100104f8:	91000117 	ldw	r4,4(r18)
100104fc:	94000217 	ldw	r16,8(r18)
10010500:	213fffc4 	addi	r4,r4,-1
10010504:	20000a16 	blt	r4,zero,10010530 <__sfp+0x78>
10010508:	8080030f 	ldh	r2,12(r16)
1001050c:	10000c26 	beq	r2,zero,10010540 <__sfp+0x88>
10010510:	80c01d04 	addi	r3,r16,116
10010514:	00000206 	br	10010520 <__sfp+0x68>
10010518:	18bfe60f 	ldh	r2,-104(r3)
1001051c:	10000826 	beq	r2,zero,10010540 <__sfp+0x88>
10010520:	213fffc4 	addi	r4,r4,-1
10010524:	1c3ffd04 	addi	r16,r3,-12
10010528:	18c01a04 	addi	r3,r3,104
1001052c:	247ffa1e 	bne	r4,r17,10010518 <__alt_data_end+0xf8010518>
10010530:	90800017 	ldw	r2,0(r18)
10010534:	10001d26 	beq	r2,zero,100105ac <__sfp+0xf4>
10010538:	1025883a 	mov	r18,r2
1001053c:	003fee06 	br	100104f8 <__alt_data_end+0xf80104f8>
10010540:	00bfffc4 	movi	r2,-1
10010544:	8080038d 	sth	r2,14(r16)
10010548:	00800044 	movi	r2,1
1001054c:	8080030d 	sth	r2,12(r16)
10010550:	80001915 	stw	zero,100(r16)
10010554:	80000015 	stw	zero,0(r16)
10010558:	80000215 	stw	zero,8(r16)
1001055c:	80000115 	stw	zero,4(r16)
10010560:	80000415 	stw	zero,16(r16)
10010564:	80000515 	stw	zero,20(r16)
10010568:	80000615 	stw	zero,24(r16)
1001056c:	01800204 	movi	r6,8
10010570:	000b883a 	mov	r5,zero
10010574:	81001704 	addi	r4,r16,92
10010578:	0011f440 	call	10011f44 <memset>
1001057c:	8005883a 	mov	r2,r16
10010580:	80000c15 	stw	zero,48(r16)
10010584:	80000d15 	stw	zero,52(r16)
10010588:	80001115 	stw	zero,68(r16)
1001058c:	80001215 	stw	zero,72(r16)
10010590:	dfc00417 	ldw	ra,16(sp)
10010594:	dcc00317 	ldw	r19,12(sp)
10010598:	dc800217 	ldw	r18,8(sp)
1001059c:	dc400117 	ldw	r17,4(sp)
100105a0:	dc000017 	ldw	r16,0(sp)
100105a4:	dec00504 	addi	sp,sp,20
100105a8:	f800283a 	ret
100105ac:	01400104 	movi	r5,4
100105b0:	9809883a 	mov	r4,r19
100105b4:	00104400 	call	10010440 <__sfmoreglue>
100105b8:	90800015 	stw	r2,0(r18)
100105bc:	103fde1e 	bne	r2,zero,10010538 <__alt_data_end+0xf8010538>
100105c0:	00800304 	movi	r2,12
100105c4:	98800015 	stw	r2,0(r19)
100105c8:	0005883a 	mov	r2,zero
100105cc:	003ff006 	br	10010590 <__alt_data_end+0xf8010590>

100105d0 <_cleanup>:
100105d0:	008400b4 	movhi	r2,4098
100105d4:	10af4404 	addi	r2,r2,-17136
100105d8:	11000017 	ldw	r4,0(r2)
100105dc:	01440074 	movhi	r5,4097
100105e0:	29547c04 	addi	r5,r5,20976
100105e4:	0010ff81 	jmpi	10010ff8 <_fwalk_reent>

100105e8 <__sinit>:
100105e8:	20800e17 	ldw	r2,56(r4)
100105ec:	10000126 	beq	r2,zero,100105f4 <__sinit+0xc>
100105f0:	f800283a 	ret
100105f4:	001029c1 	jmpi	1001029c <__sinit.part.1>

100105f8 <__sfp_lock_acquire>:
100105f8:	f800283a 	ret

100105fc <__sfp_lock_release>:
100105fc:	f800283a 	ret

10010600 <__sinit_lock_acquire>:
10010600:	f800283a 	ret

10010604 <__sinit_lock_release>:
10010604:	f800283a 	ret

10010608 <__fp_lock_all>:
10010608:	008400b4 	movhi	r2,4098
1001060c:	10af4504 	addi	r2,r2,-17132
10010610:	11000017 	ldw	r4,0(r2)
10010614:	01440074 	movhi	r5,4097
10010618:	29410e04 	addi	r5,r5,1080
1001061c:	0010f341 	jmpi	10010f34 <_fwalk>

10010620 <__fp_unlock_all>:
10010620:	008400b4 	movhi	r2,4098
10010624:	10af4504 	addi	r2,r2,-17132
10010628:	11000017 	ldw	r4,0(r2)
1001062c:	01440074 	movhi	r5,4097
10010630:	2940a204 	addi	r5,r5,648
10010634:	0010f341 	jmpi	10010f34 <_fwalk>

10010638 <_malloc_trim_r>:
10010638:	defffb04 	addi	sp,sp,-20
1001063c:	dcc00315 	stw	r19,12(sp)
10010640:	04c400b4 	movhi	r19,4098
10010644:	dc800215 	stw	r18,8(sp)
10010648:	dc400115 	stw	r17,4(sp)
1001064c:	dc000015 	stw	r16,0(sp)
10010650:	dfc00415 	stw	ra,16(sp)
10010654:	2821883a 	mov	r16,r5
10010658:	9ce9ba04 	addi	r19,r19,-22808
1001065c:	2025883a 	mov	r18,r4
10010660:	0016e980 	call	10016e98 <__malloc_lock>
10010664:	98800217 	ldw	r2,8(r19)
10010668:	14400117 	ldw	r17,4(r2)
1001066c:	00bfff04 	movi	r2,-4
10010670:	88a2703a 	and	r17,r17,r2
10010674:	8c21c83a 	sub	r16,r17,r16
10010678:	8403fbc4 	addi	r16,r16,4079
1001067c:	8020d33a 	srli	r16,r16,12
10010680:	0083ffc4 	movi	r2,4095
10010684:	843fffc4 	addi	r16,r16,-1
10010688:	8020933a 	slli	r16,r16,12
1001068c:	1400060e 	bge	r2,r16,100106a8 <_malloc_trim_r+0x70>
10010690:	000b883a 	mov	r5,zero
10010694:	9009883a 	mov	r4,r18
10010698:	00136fc0 	call	100136fc <_sbrk_r>
1001069c:	98c00217 	ldw	r3,8(r19)
100106a0:	1c47883a 	add	r3,r3,r17
100106a4:	10c00a26 	beq	r2,r3,100106d0 <_malloc_trim_r+0x98>
100106a8:	9009883a 	mov	r4,r18
100106ac:	0016ebc0 	call	10016ebc <__malloc_unlock>
100106b0:	0005883a 	mov	r2,zero
100106b4:	dfc00417 	ldw	ra,16(sp)
100106b8:	dcc00317 	ldw	r19,12(sp)
100106bc:	dc800217 	ldw	r18,8(sp)
100106c0:	dc400117 	ldw	r17,4(sp)
100106c4:	dc000017 	ldw	r16,0(sp)
100106c8:	dec00504 	addi	sp,sp,20
100106cc:	f800283a 	ret
100106d0:	040bc83a 	sub	r5,zero,r16
100106d4:	9009883a 	mov	r4,r18
100106d8:	00136fc0 	call	100136fc <_sbrk_r>
100106dc:	00ffffc4 	movi	r3,-1
100106e0:	10c00d26 	beq	r2,r3,10010718 <_malloc_trim_r+0xe0>
100106e4:	00c400b4 	movhi	r3,4098
100106e8:	18f6eb04 	addi	r3,r3,-9300
100106ec:	18800017 	ldw	r2,0(r3)
100106f0:	99000217 	ldw	r4,8(r19)
100106f4:	8c23c83a 	sub	r17,r17,r16
100106f8:	8c400054 	ori	r17,r17,1
100106fc:	1421c83a 	sub	r16,r2,r16
10010700:	24400115 	stw	r17,4(r4)
10010704:	9009883a 	mov	r4,r18
10010708:	1c000015 	stw	r16,0(r3)
1001070c:	0016ebc0 	call	10016ebc <__malloc_unlock>
10010710:	00800044 	movi	r2,1
10010714:	003fe706 	br	100106b4 <__alt_data_end+0xf80106b4>
10010718:	000b883a 	mov	r5,zero
1001071c:	9009883a 	mov	r4,r18
10010720:	00136fc0 	call	100136fc <_sbrk_r>
10010724:	99000217 	ldw	r4,8(r19)
10010728:	014003c4 	movi	r5,15
1001072c:	1107c83a 	sub	r3,r2,r4
10010730:	28ffdd0e 	bge	r5,r3,100106a8 <__alt_data_end+0xf80106a8>
10010734:	014400b4 	movhi	r5,4098
10010738:	296f4704 	addi	r5,r5,-17124
1001073c:	29400017 	ldw	r5,0(r5)
10010740:	18c00054 	ori	r3,r3,1
10010744:	20c00115 	stw	r3,4(r4)
10010748:	00c400b4 	movhi	r3,4098
1001074c:	1145c83a 	sub	r2,r2,r5
10010750:	18f6eb04 	addi	r3,r3,-9300
10010754:	18800015 	stw	r2,0(r3)
10010758:	003fd306 	br	100106a8 <__alt_data_end+0xf80106a8>

1001075c <_free_r>:
1001075c:	28004126 	beq	r5,zero,10010864 <_free_r+0x108>
10010760:	defffd04 	addi	sp,sp,-12
10010764:	dc400115 	stw	r17,4(sp)
10010768:	dc000015 	stw	r16,0(sp)
1001076c:	2023883a 	mov	r17,r4
10010770:	2821883a 	mov	r16,r5
10010774:	dfc00215 	stw	ra,8(sp)
10010778:	0016e980 	call	10016e98 <__malloc_lock>
1001077c:	81ffff17 	ldw	r7,-4(r16)
10010780:	00bfff84 	movi	r2,-2
10010784:	010400b4 	movhi	r4,4098
10010788:	81bffe04 	addi	r6,r16,-8
1001078c:	3884703a 	and	r2,r7,r2
10010790:	2129ba04 	addi	r4,r4,-22808
10010794:	308b883a 	add	r5,r6,r2
10010798:	2a400117 	ldw	r9,4(r5)
1001079c:	22000217 	ldw	r8,8(r4)
100107a0:	00ffff04 	movi	r3,-4
100107a4:	48c6703a 	and	r3,r9,r3
100107a8:	2a005726 	beq	r5,r8,10010908 <_free_r+0x1ac>
100107ac:	28c00115 	stw	r3,4(r5)
100107b0:	39c0004c 	andi	r7,r7,1
100107b4:	3800091e 	bne	r7,zero,100107dc <_free_r+0x80>
100107b8:	823ffe17 	ldw	r8,-8(r16)
100107bc:	22400204 	addi	r9,r4,8
100107c0:	320dc83a 	sub	r6,r6,r8
100107c4:	31c00217 	ldw	r7,8(r6)
100107c8:	1205883a 	add	r2,r2,r8
100107cc:	3a406526 	beq	r7,r9,10010964 <_free_r+0x208>
100107d0:	32000317 	ldw	r8,12(r6)
100107d4:	3a000315 	stw	r8,12(r7)
100107d8:	41c00215 	stw	r7,8(r8)
100107dc:	28cf883a 	add	r7,r5,r3
100107e0:	39c00117 	ldw	r7,4(r7)
100107e4:	39c0004c 	andi	r7,r7,1
100107e8:	38003a26 	beq	r7,zero,100108d4 <_free_r+0x178>
100107ec:	10c00054 	ori	r3,r2,1
100107f0:	30c00115 	stw	r3,4(r6)
100107f4:	3087883a 	add	r3,r6,r2
100107f8:	18800015 	stw	r2,0(r3)
100107fc:	00c07fc4 	movi	r3,511
10010800:	18801936 	bltu	r3,r2,10010868 <_free_r+0x10c>
10010804:	1004d0fa 	srli	r2,r2,3
10010808:	01c00044 	movi	r7,1
1001080c:	21400117 	ldw	r5,4(r4)
10010810:	10c00044 	addi	r3,r2,1
10010814:	18c7883a 	add	r3,r3,r3
10010818:	1005d0ba 	srai	r2,r2,2
1001081c:	18c7883a 	add	r3,r3,r3
10010820:	18c7883a 	add	r3,r3,r3
10010824:	1907883a 	add	r3,r3,r4
10010828:	3884983a 	sll	r2,r7,r2
1001082c:	19c00017 	ldw	r7,0(r3)
10010830:	1a3ffe04 	addi	r8,r3,-8
10010834:	1144b03a 	or	r2,r2,r5
10010838:	32000315 	stw	r8,12(r6)
1001083c:	31c00215 	stw	r7,8(r6)
10010840:	20800115 	stw	r2,4(r4)
10010844:	19800015 	stw	r6,0(r3)
10010848:	39800315 	stw	r6,12(r7)
1001084c:	8809883a 	mov	r4,r17
10010850:	dfc00217 	ldw	ra,8(sp)
10010854:	dc400117 	ldw	r17,4(sp)
10010858:	dc000017 	ldw	r16,0(sp)
1001085c:	dec00304 	addi	sp,sp,12
10010860:	0016ebc1 	jmpi	10016ebc <__malloc_unlock>
10010864:	f800283a 	ret
10010868:	100ad27a 	srli	r5,r2,9
1001086c:	00c00104 	movi	r3,4
10010870:	19404a36 	bltu	r3,r5,1001099c <_free_r+0x240>
10010874:	100ad1ba 	srli	r5,r2,6
10010878:	28c00e44 	addi	r3,r5,57
1001087c:	18c7883a 	add	r3,r3,r3
10010880:	29400e04 	addi	r5,r5,56
10010884:	18c7883a 	add	r3,r3,r3
10010888:	18c7883a 	add	r3,r3,r3
1001088c:	1909883a 	add	r4,r3,r4
10010890:	20c00017 	ldw	r3,0(r4)
10010894:	01c400b4 	movhi	r7,4098
10010898:	213ffe04 	addi	r4,r4,-8
1001089c:	39e9ba04 	addi	r7,r7,-22808
100108a0:	20c04426 	beq	r4,r3,100109b4 <_free_r+0x258>
100108a4:	01ffff04 	movi	r7,-4
100108a8:	19400117 	ldw	r5,4(r3)
100108ac:	29ca703a 	and	r5,r5,r7
100108b0:	1140022e 	bgeu	r2,r5,100108bc <_free_r+0x160>
100108b4:	18c00217 	ldw	r3,8(r3)
100108b8:	20fffb1e 	bne	r4,r3,100108a8 <__alt_data_end+0xf80108a8>
100108bc:	19000317 	ldw	r4,12(r3)
100108c0:	31000315 	stw	r4,12(r6)
100108c4:	30c00215 	stw	r3,8(r6)
100108c8:	21800215 	stw	r6,8(r4)
100108cc:	19800315 	stw	r6,12(r3)
100108d0:	003fde06 	br	1001084c <__alt_data_end+0xf801084c>
100108d4:	29c00217 	ldw	r7,8(r5)
100108d8:	10c5883a 	add	r2,r2,r3
100108dc:	00c400b4 	movhi	r3,4098
100108e0:	18e9bc04 	addi	r3,r3,-22800
100108e4:	38c03b26 	beq	r7,r3,100109d4 <_free_r+0x278>
100108e8:	2a000317 	ldw	r8,12(r5)
100108ec:	11400054 	ori	r5,r2,1
100108f0:	3087883a 	add	r3,r6,r2
100108f4:	3a000315 	stw	r8,12(r7)
100108f8:	41c00215 	stw	r7,8(r8)
100108fc:	31400115 	stw	r5,4(r6)
10010900:	18800015 	stw	r2,0(r3)
10010904:	003fbd06 	br	100107fc <__alt_data_end+0xf80107fc>
10010908:	39c0004c 	andi	r7,r7,1
1001090c:	10c5883a 	add	r2,r2,r3
10010910:	3800071e 	bne	r7,zero,10010930 <_free_r+0x1d4>
10010914:	81fffe17 	ldw	r7,-8(r16)
10010918:	31cdc83a 	sub	r6,r6,r7
1001091c:	30c00317 	ldw	r3,12(r6)
10010920:	31400217 	ldw	r5,8(r6)
10010924:	11c5883a 	add	r2,r2,r7
10010928:	28c00315 	stw	r3,12(r5)
1001092c:	19400215 	stw	r5,8(r3)
10010930:	10c00054 	ori	r3,r2,1
10010934:	30c00115 	stw	r3,4(r6)
10010938:	00c400b4 	movhi	r3,4098
1001093c:	18ef4804 	addi	r3,r3,-17120
10010940:	18c00017 	ldw	r3,0(r3)
10010944:	21800215 	stw	r6,8(r4)
10010948:	10ffc036 	bltu	r2,r3,1001084c <__alt_data_end+0xf801084c>
1001094c:	008400b4 	movhi	r2,4098
10010950:	10b6df04 	addi	r2,r2,-9348
10010954:	11400017 	ldw	r5,0(r2)
10010958:	8809883a 	mov	r4,r17
1001095c:	00106380 	call	10010638 <_malloc_trim_r>
10010960:	003fba06 	br	1001084c <__alt_data_end+0xf801084c>
10010964:	28c9883a 	add	r4,r5,r3
10010968:	21000117 	ldw	r4,4(r4)
1001096c:	2100004c 	andi	r4,r4,1
10010970:	2000391e 	bne	r4,zero,10010a58 <_free_r+0x2fc>
10010974:	29c00217 	ldw	r7,8(r5)
10010978:	29000317 	ldw	r4,12(r5)
1001097c:	1885883a 	add	r2,r3,r2
10010980:	10c00054 	ori	r3,r2,1
10010984:	39000315 	stw	r4,12(r7)
10010988:	21c00215 	stw	r7,8(r4)
1001098c:	30c00115 	stw	r3,4(r6)
10010990:	308d883a 	add	r6,r6,r2
10010994:	30800015 	stw	r2,0(r6)
10010998:	003fac06 	br	1001084c <__alt_data_end+0xf801084c>
1001099c:	00c00504 	movi	r3,20
100109a0:	19401536 	bltu	r3,r5,100109f8 <_free_r+0x29c>
100109a4:	28c01704 	addi	r3,r5,92
100109a8:	18c7883a 	add	r3,r3,r3
100109ac:	294016c4 	addi	r5,r5,91
100109b0:	003fb406 	br	10010884 <__alt_data_end+0xf8010884>
100109b4:	280bd0ba 	srai	r5,r5,2
100109b8:	00c00044 	movi	r3,1
100109bc:	38800117 	ldw	r2,4(r7)
100109c0:	194a983a 	sll	r5,r3,r5
100109c4:	2007883a 	mov	r3,r4
100109c8:	2884b03a 	or	r2,r5,r2
100109cc:	38800115 	stw	r2,4(r7)
100109d0:	003fbb06 	br	100108c0 <__alt_data_end+0xf80108c0>
100109d4:	21800515 	stw	r6,20(r4)
100109d8:	21800415 	stw	r6,16(r4)
100109dc:	10c00054 	ori	r3,r2,1
100109e0:	31c00315 	stw	r7,12(r6)
100109e4:	31c00215 	stw	r7,8(r6)
100109e8:	30c00115 	stw	r3,4(r6)
100109ec:	308d883a 	add	r6,r6,r2
100109f0:	30800015 	stw	r2,0(r6)
100109f4:	003f9506 	br	1001084c <__alt_data_end+0xf801084c>
100109f8:	00c01504 	movi	r3,84
100109fc:	19400536 	bltu	r3,r5,10010a14 <_free_r+0x2b8>
10010a00:	100ad33a 	srli	r5,r2,12
10010a04:	28c01bc4 	addi	r3,r5,111
10010a08:	18c7883a 	add	r3,r3,r3
10010a0c:	29401b84 	addi	r5,r5,110
10010a10:	003f9c06 	br	10010884 <__alt_data_end+0xf8010884>
10010a14:	00c05504 	movi	r3,340
10010a18:	19400536 	bltu	r3,r5,10010a30 <_free_r+0x2d4>
10010a1c:	100ad3fa 	srli	r5,r2,15
10010a20:	28c01e04 	addi	r3,r5,120
10010a24:	18c7883a 	add	r3,r3,r3
10010a28:	29401dc4 	addi	r5,r5,119
10010a2c:	003f9506 	br	10010884 <__alt_data_end+0xf8010884>
10010a30:	00c15504 	movi	r3,1364
10010a34:	19400536 	bltu	r3,r5,10010a4c <_free_r+0x2f0>
10010a38:	100ad4ba 	srli	r5,r2,18
10010a3c:	28c01f44 	addi	r3,r5,125
10010a40:	18c7883a 	add	r3,r3,r3
10010a44:	29401f04 	addi	r5,r5,124
10010a48:	003f8e06 	br	10010884 <__alt_data_end+0xf8010884>
10010a4c:	00c03f84 	movi	r3,254
10010a50:	01401f84 	movi	r5,126
10010a54:	003f8b06 	br	10010884 <__alt_data_end+0xf8010884>
10010a58:	10c00054 	ori	r3,r2,1
10010a5c:	30c00115 	stw	r3,4(r6)
10010a60:	308d883a 	add	r6,r6,r2
10010a64:	30800015 	stw	r2,0(r6)
10010a68:	003f7806 	br	1001084c <__alt_data_end+0xf801084c>

10010a6c <__sfvwrite_r>:
10010a6c:	30800217 	ldw	r2,8(r6)
10010a70:	10006726 	beq	r2,zero,10010c10 <__sfvwrite_r+0x1a4>
10010a74:	28c0030b 	ldhu	r3,12(r5)
10010a78:	defff404 	addi	sp,sp,-48
10010a7c:	dd400715 	stw	r21,28(sp)
10010a80:	dd000615 	stw	r20,24(sp)
10010a84:	dc000215 	stw	r16,8(sp)
10010a88:	dfc00b15 	stw	ra,44(sp)
10010a8c:	df000a15 	stw	fp,40(sp)
10010a90:	ddc00915 	stw	r23,36(sp)
10010a94:	dd800815 	stw	r22,32(sp)
10010a98:	dcc00515 	stw	r19,20(sp)
10010a9c:	dc800415 	stw	r18,16(sp)
10010aa0:	dc400315 	stw	r17,12(sp)
10010aa4:	1880020c 	andi	r2,r3,8
10010aa8:	2821883a 	mov	r16,r5
10010aac:	202b883a 	mov	r21,r4
10010ab0:	3029883a 	mov	r20,r6
10010ab4:	10002726 	beq	r2,zero,10010b54 <__sfvwrite_r+0xe8>
10010ab8:	28800417 	ldw	r2,16(r5)
10010abc:	10002526 	beq	r2,zero,10010b54 <__sfvwrite_r+0xe8>
10010ac0:	1880008c 	andi	r2,r3,2
10010ac4:	a4400017 	ldw	r17,0(r20)
10010ac8:	10002a26 	beq	r2,zero,10010b74 <__sfvwrite_r+0x108>
10010acc:	05a00034 	movhi	r22,32768
10010ad0:	0027883a 	mov	r19,zero
10010ad4:	0025883a 	mov	r18,zero
10010ad8:	b5bf0004 	addi	r22,r22,-1024
10010adc:	980d883a 	mov	r6,r19
10010ae0:	a809883a 	mov	r4,r21
10010ae4:	90004626 	beq	r18,zero,10010c00 <__sfvwrite_r+0x194>
10010ae8:	900f883a 	mov	r7,r18
10010aec:	b480022e 	bgeu	r22,r18,10010af8 <__sfvwrite_r+0x8c>
10010af0:	01e00034 	movhi	r7,32768
10010af4:	39ff0004 	addi	r7,r7,-1024
10010af8:	80800917 	ldw	r2,36(r16)
10010afc:	81400717 	ldw	r5,28(r16)
10010b00:	103ee83a 	callr	r2
10010b04:	00805a0e 	bge	zero,r2,10010c70 <__sfvwrite_r+0x204>
10010b08:	a0c00217 	ldw	r3,8(r20)
10010b0c:	98a7883a 	add	r19,r19,r2
10010b10:	90a5c83a 	sub	r18,r18,r2
10010b14:	1885c83a 	sub	r2,r3,r2
10010b18:	a0800215 	stw	r2,8(r20)
10010b1c:	103fef1e 	bne	r2,zero,10010adc <__alt_data_end+0xf8010adc>
10010b20:	0005883a 	mov	r2,zero
10010b24:	dfc00b17 	ldw	ra,44(sp)
10010b28:	df000a17 	ldw	fp,40(sp)
10010b2c:	ddc00917 	ldw	r23,36(sp)
10010b30:	dd800817 	ldw	r22,32(sp)
10010b34:	dd400717 	ldw	r21,28(sp)
10010b38:	dd000617 	ldw	r20,24(sp)
10010b3c:	dcc00517 	ldw	r19,20(sp)
10010b40:	dc800417 	ldw	r18,16(sp)
10010b44:	dc400317 	ldw	r17,12(sp)
10010b48:	dc000217 	ldw	r16,8(sp)
10010b4c:	dec00c04 	addi	sp,sp,48
10010b50:	f800283a 	ret
10010b54:	800b883a 	mov	r5,r16
10010b58:	a809883a 	mov	r4,r21
10010b5c:	000e5dc0 	call	1000e5dc <__swsetup_r>
10010b60:	1000ee1e 	bne	r2,zero,10010f1c <__sfvwrite_r+0x4b0>
10010b64:	80c0030b 	ldhu	r3,12(r16)
10010b68:	a4400017 	ldw	r17,0(r20)
10010b6c:	1880008c 	andi	r2,r3,2
10010b70:	103fd61e 	bne	r2,zero,10010acc <__alt_data_end+0xf8010acc>
10010b74:	1880004c 	andi	r2,r3,1
10010b78:	1000421e 	bne	r2,zero,10010c84 <__sfvwrite_r+0x218>
10010b7c:	0039883a 	mov	fp,zero
10010b80:	0025883a 	mov	r18,zero
10010b84:	90001a26 	beq	r18,zero,10010bf0 <__sfvwrite_r+0x184>
10010b88:	1880800c 	andi	r2,r3,512
10010b8c:	84c00217 	ldw	r19,8(r16)
10010b90:	10002126 	beq	r2,zero,10010c18 <__sfvwrite_r+0x1ac>
10010b94:	982f883a 	mov	r23,r19
10010b98:	94c09636 	bltu	r18,r19,10010df4 <__sfvwrite_r+0x388>
10010b9c:	1881200c 	andi	r2,r3,1152
10010ba0:	1000a11e 	bne	r2,zero,10010e28 <__sfvwrite_r+0x3bc>
10010ba4:	81000017 	ldw	r4,0(r16)
10010ba8:	b80d883a 	mov	r6,r23
10010bac:	e00b883a 	mov	r5,fp
10010bb0:	0011de80 	call	10011de8 <memmove>
10010bb4:	80c00217 	ldw	r3,8(r16)
10010bb8:	81000017 	ldw	r4,0(r16)
10010bbc:	9005883a 	mov	r2,r18
10010bc0:	1ce7c83a 	sub	r19,r3,r19
10010bc4:	25cf883a 	add	r7,r4,r23
10010bc8:	84c00215 	stw	r19,8(r16)
10010bcc:	81c00015 	stw	r7,0(r16)
10010bd0:	a0c00217 	ldw	r3,8(r20)
10010bd4:	e0b9883a 	add	fp,fp,r2
10010bd8:	90a5c83a 	sub	r18,r18,r2
10010bdc:	18a7c83a 	sub	r19,r3,r2
10010be0:	a4c00215 	stw	r19,8(r20)
10010be4:	983fce26 	beq	r19,zero,10010b20 <__alt_data_end+0xf8010b20>
10010be8:	80c0030b 	ldhu	r3,12(r16)
10010bec:	903fe61e 	bne	r18,zero,10010b88 <__alt_data_end+0xf8010b88>
10010bf0:	8f000017 	ldw	fp,0(r17)
10010bf4:	8c800117 	ldw	r18,4(r17)
10010bf8:	8c400204 	addi	r17,r17,8
10010bfc:	003fe106 	br	10010b84 <__alt_data_end+0xf8010b84>
10010c00:	8cc00017 	ldw	r19,0(r17)
10010c04:	8c800117 	ldw	r18,4(r17)
10010c08:	8c400204 	addi	r17,r17,8
10010c0c:	003fb306 	br	10010adc <__alt_data_end+0xf8010adc>
10010c10:	0005883a 	mov	r2,zero
10010c14:	f800283a 	ret
10010c18:	81000017 	ldw	r4,0(r16)
10010c1c:	80800417 	ldw	r2,16(r16)
10010c20:	11005a36 	bltu	r2,r4,10010d8c <__sfvwrite_r+0x320>
10010c24:	85c00517 	ldw	r23,20(r16)
10010c28:	95c05836 	bltu	r18,r23,10010d8c <__sfvwrite_r+0x320>
10010c2c:	00a00034 	movhi	r2,32768
10010c30:	10bfffc4 	addi	r2,r2,-1
10010c34:	9009883a 	mov	r4,r18
10010c38:	1480012e 	bgeu	r2,r18,10010c40 <__sfvwrite_r+0x1d4>
10010c3c:	1009883a 	mov	r4,r2
10010c40:	b80b883a 	mov	r5,r23
10010c44:	00083cc0 	call	100083cc <__divsi3>
10010c48:	b80b883a 	mov	r5,r23
10010c4c:	1009883a 	mov	r4,r2
10010c50:	00085800 	call	10008580 <__mulsi3>
10010c54:	81400717 	ldw	r5,28(r16)
10010c58:	80c00917 	ldw	r3,36(r16)
10010c5c:	100f883a 	mov	r7,r2
10010c60:	e00d883a 	mov	r6,fp
10010c64:	a809883a 	mov	r4,r21
10010c68:	183ee83a 	callr	r3
10010c6c:	00bfd816 	blt	zero,r2,10010bd0 <__alt_data_end+0xf8010bd0>
10010c70:	8080030b 	ldhu	r2,12(r16)
10010c74:	10801014 	ori	r2,r2,64
10010c78:	8080030d 	sth	r2,12(r16)
10010c7c:	00bfffc4 	movi	r2,-1
10010c80:	003fa806 	br	10010b24 <__alt_data_end+0xf8010b24>
10010c84:	0027883a 	mov	r19,zero
10010c88:	0011883a 	mov	r8,zero
10010c8c:	0039883a 	mov	fp,zero
10010c90:	0025883a 	mov	r18,zero
10010c94:	90001f26 	beq	r18,zero,10010d14 <__sfvwrite_r+0x2a8>
10010c98:	40005a26 	beq	r8,zero,10010e04 <__sfvwrite_r+0x398>
10010c9c:	982d883a 	mov	r22,r19
10010ca0:	94c0012e 	bgeu	r18,r19,10010ca8 <__sfvwrite_r+0x23c>
10010ca4:	902d883a 	mov	r22,r18
10010ca8:	81000017 	ldw	r4,0(r16)
10010cac:	80800417 	ldw	r2,16(r16)
10010cb0:	b02f883a 	mov	r23,r22
10010cb4:	81c00517 	ldw	r7,20(r16)
10010cb8:	1100032e 	bgeu	r2,r4,10010cc8 <__sfvwrite_r+0x25c>
10010cbc:	80c00217 	ldw	r3,8(r16)
10010cc0:	38c7883a 	add	r3,r7,r3
10010cc4:	1d801816 	blt	r3,r22,10010d28 <__sfvwrite_r+0x2bc>
10010cc8:	b1c03e16 	blt	r22,r7,10010dc4 <__sfvwrite_r+0x358>
10010ccc:	80800917 	ldw	r2,36(r16)
10010cd0:	81400717 	ldw	r5,28(r16)
10010cd4:	e00d883a 	mov	r6,fp
10010cd8:	da000115 	stw	r8,4(sp)
10010cdc:	a809883a 	mov	r4,r21
10010ce0:	103ee83a 	callr	r2
10010ce4:	102f883a 	mov	r23,r2
10010ce8:	da000117 	ldw	r8,4(sp)
10010cec:	00bfe00e 	bge	zero,r2,10010c70 <__alt_data_end+0xf8010c70>
10010cf0:	9de7c83a 	sub	r19,r19,r23
10010cf4:	98001f26 	beq	r19,zero,10010d74 <__sfvwrite_r+0x308>
10010cf8:	a0800217 	ldw	r2,8(r20)
10010cfc:	e5f9883a 	add	fp,fp,r23
10010d00:	95e5c83a 	sub	r18,r18,r23
10010d04:	15efc83a 	sub	r23,r2,r23
10010d08:	a5c00215 	stw	r23,8(r20)
10010d0c:	b83f8426 	beq	r23,zero,10010b20 <__alt_data_end+0xf8010b20>
10010d10:	903fe11e 	bne	r18,zero,10010c98 <__alt_data_end+0xf8010c98>
10010d14:	8f000017 	ldw	fp,0(r17)
10010d18:	8c800117 	ldw	r18,4(r17)
10010d1c:	0011883a 	mov	r8,zero
10010d20:	8c400204 	addi	r17,r17,8
10010d24:	003fdb06 	br	10010c94 <__alt_data_end+0xf8010c94>
10010d28:	180d883a 	mov	r6,r3
10010d2c:	e00b883a 	mov	r5,fp
10010d30:	da000115 	stw	r8,4(sp)
10010d34:	d8c00015 	stw	r3,0(sp)
10010d38:	0011de80 	call	10011de8 <memmove>
10010d3c:	d8c00017 	ldw	r3,0(sp)
10010d40:	80800017 	ldw	r2,0(r16)
10010d44:	800b883a 	mov	r5,r16
10010d48:	a809883a 	mov	r4,r21
10010d4c:	10c5883a 	add	r2,r2,r3
10010d50:	80800015 	stw	r2,0(r16)
10010d54:	d8c00015 	stw	r3,0(sp)
10010d58:	00101fc0 	call	100101fc <_fflush_r>
10010d5c:	d8c00017 	ldw	r3,0(sp)
10010d60:	da000117 	ldw	r8,4(sp)
10010d64:	103fc21e 	bne	r2,zero,10010c70 <__alt_data_end+0xf8010c70>
10010d68:	182f883a 	mov	r23,r3
10010d6c:	9de7c83a 	sub	r19,r19,r23
10010d70:	983fe11e 	bne	r19,zero,10010cf8 <__alt_data_end+0xf8010cf8>
10010d74:	800b883a 	mov	r5,r16
10010d78:	a809883a 	mov	r4,r21
10010d7c:	00101fc0 	call	100101fc <_fflush_r>
10010d80:	103fbb1e 	bne	r2,zero,10010c70 <__alt_data_end+0xf8010c70>
10010d84:	0011883a 	mov	r8,zero
10010d88:	003fdb06 	br	10010cf8 <__alt_data_end+0xf8010cf8>
10010d8c:	94c0012e 	bgeu	r18,r19,10010d94 <__sfvwrite_r+0x328>
10010d90:	9027883a 	mov	r19,r18
10010d94:	980d883a 	mov	r6,r19
10010d98:	e00b883a 	mov	r5,fp
10010d9c:	0011de80 	call	10011de8 <memmove>
10010da0:	80800217 	ldw	r2,8(r16)
10010da4:	80c00017 	ldw	r3,0(r16)
10010da8:	14c5c83a 	sub	r2,r2,r19
10010dac:	1cc7883a 	add	r3,r3,r19
10010db0:	80800215 	stw	r2,8(r16)
10010db4:	80c00015 	stw	r3,0(r16)
10010db8:	10004326 	beq	r2,zero,10010ec8 <__sfvwrite_r+0x45c>
10010dbc:	9805883a 	mov	r2,r19
10010dc0:	003f8306 	br	10010bd0 <__alt_data_end+0xf8010bd0>
10010dc4:	b00d883a 	mov	r6,r22
10010dc8:	e00b883a 	mov	r5,fp
10010dcc:	da000115 	stw	r8,4(sp)
10010dd0:	0011de80 	call	10011de8 <memmove>
10010dd4:	80800217 	ldw	r2,8(r16)
10010dd8:	80c00017 	ldw	r3,0(r16)
10010ddc:	da000117 	ldw	r8,4(sp)
10010de0:	1585c83a 	sub	r2,r2,r22
10010de4:	1dad883a 	add	r22,r3,r22
10010de8:	80800215 	stw	r2,8(r16)
10010dec:	85800015 	stw	r22,0(r16)
10010df0:	003fbf06 	br	10010cf0 <__alt_data_end+0xf8010cf0>
10010df4:	81000017 	ldw	r4,0(r16)
10010df8:	9027883a 	mov	r19,r18
10010dfc:	902f883a 	mov	r23,r18
10010e00:	003f6906 	br	10010ba8 <__alt_data_end+0xf8010ba8>
10010e04:	900d883a 	mov	r6,r18
10010e08:	01400284 	movi	r5,10
10010e0c:	e009883a 	mov	r4,fp
10010e10:	0011bbc0 	call	10011bbc <memchr>
10010e14:	10003e26 	beq	r2,zero,10010f10 <__sfvwrite_r+0x4a4>
10010e18:	10800044 	addi	r2,r2,1
10010e1c:	1727c83a 	sub	r19,r2,fp
10010e20:	02000044 	movi	r8,1
10010e24:	003f9d06 	br	10010c9c <__alt_data_end+0xf8010c9c>
10010e28:	80800517 	ldw	r2,20(r16)
10010e2c:	81400417 	ldw	r5,16(r16)
10010e30:	81c00017 	ldw	r7,0(r16)
10010e34:	10a7883a 	add	r19,r2,r2
10010e38:	9885883a 	add	r2,r19,r2
10010e3c:	1026d7fa 	srli	r19,r2,31
10010e40:	396dc83a 	sub	r22,r7,r5
10010e44:	b1000044 	addi	r4,r22,1
10010e48:	9885883a 	add	r2,r19,r2
10010e4c:	1027d07a 	srai	r19,r2,1
10010e50:	2485883a 	add	r2,r4,r18
10010e54:	980d883a 	mov	r6,r19
10010e58:	9880022e 	bgeu	r19,r2,10010e64 <__sfvwrite_r+0x3f8>
10010e5c:	1027883a 	mov	r19,r2
10010e60:	100d883a 	mov	r6,r2
10010e64:	18c1000c 	andi	r3,r3,1024
10010e68:	18001c26 	beq	r3,zero,10010edc <__sfvwrite_r+0x470>
10010e6c:	300b883a 	mov	r5,r6
10010e70:	a809883a 	mov	r4,r21
10010e74:	00113b00 	call	100113b0 <_malloc_r>
10010e78:	102f883a 	mov	r23,r2
10010e7c:	10002926 	beq	r2,zero,10010f24 <__sfvwrite_r+0x4b8>
10010e80:	81400417 	ldw	r5,16(r16)
10010e84:	b00d883a 	mov	r6,r22
10010e88:	1009883a 	mov	r4,r2
10010e8c:	0011ca00 	call	10011ca0 <memcpy>
10010e90:	8080030b 	ldhu	r2,12(r16)
10010e94:	00fedfc4 	movi	r3,-1153
10010e98:	10c4703a 	and	r2,r2,r3
10010e9c:	10802014 	ori	r2,r2,128
10010ea0:	8080030d 	sth	r2,12(r16)
10010ea4:	bd89883a 	add	r4,r23,r22
10010ea8:	9d8fc83a 	sub	r7,r19,r22
10010eac:	85c00415 	stw	r23,16(r16)
10010eb0:	84c00515 	stw	r19,20(r16)
10010eb4:	81000015 	stw	r4,0(r16)
10010eb8:	9027883a 	mov	r19,r18
10010ebc:	81c00215 	stw	r7,8(r16)
10010ec0:	902f883a 	mov	r23,r18
10010ec4:	003f3806 	br	10010ba8 <__alt_data_end+0xf8010ba8>
10010ec8:	800b883a 	mov	r5,r16
10010ecc:	a809883a 	mov	r4,r21
10010ed0:	00101fc0 	call	100101fc <_fflush_r>
10010ed4:	103fb926 	beq	r2,zero,10010dbc <__alt_data_end+0xf8010dbc>
10010ed8:	003f6506 	br	10010c70 <__alt_data_end+0xf8010c70>
10010edc:	a809883a 	mov	r4,r21
10010ee0:	00131240 	call	10013124 <_realloc_r>
10010ee4:	102f883a 	mov	r23,r2
10010ee8:	103fee1e 	bne	r2,zero,10010ea4 <__alt_data_end+0xf8010ea4>
10010eec:	81400417 	ldw	r5,16(r16)
10010ef0:	a809883a 	mov	r4,r21
10010ef4:	001075c0 	call	1001075c <_free_r>
10010ef8:	8080030b 	ldhu	r2,12(r16)
10010efc:	00ffdfc4 	movi	r3,-129
10010f00:	1884703a 	and	r2,r3,r2
10010f04:	00c00304 	movi	r3,12
10010f08:	a8c00015 	stw	r3,0(r21)
10010f0c:	003f5906 	br	10010c74 <__alt_data_end+0xf8010c74>
10010f10:	94c00044 	addi	r19,r18,1
10010f14:	02000044 	movi	r8,1
10010f18:	003f6006 	br	10010c9c <__alt_data_end+0xf8010c9c>
10010f1c:	00bfffc4 	movi	r2,-1
10010f20:	003f0006 	br	10010b24 <__alt_data_end+0xf8010b24>
10010f24:	00800304 	movi	r2,12
10010f28:	a8800015 	stw	r2,0(r21)
10010f2c:	8080030b 	ldhu	r2,12(r16)
10010f30:	003f5006 	br	10010c74 <__alt_data_end+0xf8010c74>

10010f34 <_fwalk>:
10010f34:	defff704 	addi	sp,sp,-36
10010f38:	dd000415 	stw	r20,16(sp)
10010f3c:	dfc00815 	stw	ra,32(sp)
10010f40:	ddc00715 	stw	r23,28(sp)
10010f44:	dd800615 	stw	r22,24(sp)
10010f48:	dd400515 	stw	r21,20(sp)
10010f4c:	dcc00315 	stw	r19,12(sp)
10010f50:	dc800215 	stw	r18,8(sp)
10010f54:	dc400115 	stw	r17,4(sp)
10010f58:	dc000015 	stw	r16,0(sp)
10010f5c:	2500b804 	addi	r20,r4,736
10010f60:	a0002326 	beq	r20,zero,10010ff0 <_fwalk+0xbc>
10010f64:	282b883a 	mov	r21,r5
10010f68:	002f883a 	mov	r23,zero
10010f6c:	05800044 	movi	r22,1
10010f70:	04ffffc4 	movi	r19,-1
10010f74:	a4400117 	ldw	r17,4(r20)
10010f78:	a4800217 	ldw	r18,8(r20)
10010f7c:	8c7fffc4 	addi	r17,r17,-1
10010f80:	88000d16 	blt	r17,zero,10010fb8 <_fwalk+0x84>
10010f84:	94000304 	addi	r16,r18,12
10010f88:	94800384 	addi	r18,r18,14
10010f8c:	8080000b 	ldhu	r2,0(r16)
10010f90:	8c7fffc4 	addi	r17,r17,-1
10010f94:	813ffd04 	addi	r4,r16,-12
10010f98:	b080042e 	bgeu	r22,r2,10010fac <_fwalk+0x78>
10010f9c:	9080000f 	ldh	r2,0(r18)
10010fa0:	14c00226 	beq	r2,r19,10010fac <_fwalk+0x78>
10010fa4:	a83ee83a 	callr	r21
10010fa8:	b8aeb03a 	or	r23,r23,r2
10010fac:	84001a04 	addi	r16,r16,104
10010fb0:	94801a04 	addi	r18,r18,104
10010fb4:	8cfff51e 	bne	r17,r19,10010f8c <__alt_data_end+0xf8010f8c>
10010fb8:	a5000017 	ldw	r20,0(r20)
10010fbc:	a03fed1e 	bne	r20,zero,10010f74 <__alt_data_end+0xf8010f74>
10010fc0:	b805883a 	mov	r2,r23
10010fc4:	dfc00817 	ldw	ra,32(sp)
10010fc8:	ddc00717 	ldw	r23,28(sp)
10010fcc:	dd800617 	ldw	r22,24(sp)
10010fd0:	dd400517 	ldw	r21,20(sp)
10010fd4:	dd000417 	ldw	r20,16(sp)
10010fd8:	dcc00317 	ldw	r19,12(sp)
10010fdc:	dc800217 	ldw	r18,8(sp)
10010fe0:	dc400117 	ldw	r17,4(sp)
10010fe4:	dc000017 	ldw	r16,0(sp)
10010fe8:	dec00904 	addi	sp,sp,36
10010fec:	f800283a 	ret
10010ff0:	002f883a 	mov	r23,zero
10010ff4:	003ff206 	br	10010fc0 <__alt_data_end+0xf8010fc0>

10010ff8 <_fwalk_reent>:
10010ff8:	defff704 	addi	sp,sp,-36
10010ffc:	dd000415 	stw	r20,16(sp)
10011000:	dfc00815 	stw	ra,32(sp)
10011004:	ddc00715 	stw	r23,28(sp)
10011008:	dd800615 	stw	r22,24(sp)
1001100c:	dd400515 	stw	r21,20(sp)
10011010:	dcc00315 	stw	r19,12(sp)
10011014:	dc800215 	stw	r18,8(sp)
10011018:	dc400115 	stw	r17,4(sp)
1001101c:	dc000015 	stw	r16,0(sp)
10011020:	2500b804 	addi	r20,r4,736
10011024:	a0002326 	beq	r20,zero,100110b4 <_fwalk_reent+0xbc>
10011028:	282b883a 	mov	r21,r5
1001102c:	2027883a 	mov	r19,r4
10011030:	002f883a 	mov	r23,zero
10011034:	05800044 	movi	r22,1
10011038:	04bfffc4 	movi	r18,-1
1001103c:	a4400117 	ldw	r17,4(r20)
10011040:	a4000217 	ldw	r16,8(r20)
10011044:	8c7fffc4 	addi	r17,r17,-1
10011048:	88000c16 	blt	r17,zero,1001107c <_fwalk_reent+0x84>
1001104c:	84000304 	addi	r16,r16,12
10011050:	8080000b 	ldhu	r2,0(r16)
10011054:	8c7fffc4 	addi	r17,r17,-1
10011058:	817ffd04 	addi	r5,r16,-12
1001105c:	b080052e 	bgeu	r22,r2,10011074 <_fwalk_reent+0x7c>
10011060:	8080008f 	ldh	r2,2(r16)
10011064:	9809883a 	mov	r4,r19
10011068:	14800226 	beq	r2,r18,10011074 <_fwalk_reent+0x7c>
1001106c:	a83ee83a 	callr	r21
10011070:	b8aeb03a 	or	r23,r23,r2
10011074:	84001a04 	addi	r16,r16,104
10011078:	8cbff51e 	bne	r17,r18,10011050 <__alt_data_end+0xf8011050>
1001107c:	a5000017 	ldw	r20,0(r20)
10011080:	a03fee1e 	bne	r20,zero,1001103c <__alt_data_end+0xf801103c>
10011084:	b805883a 	mov	r2,r23
10011088:	dfc00817 	ldw	ra,32(sp)
1001108c:	ddc00717 	ldw	r23,28(sp)
10011090:	dd800617 	ldw	r22,24(sp)
10011094:	dd400517 	ldw	r21,20(sp)
10011098:	dd000417 	ldw	r20,16(sp)
1001109c:	dcc00317 	ldw	r19,12(sp)
100110a0:	dc800217 	ldw	r18,8(sp)
100110a4:	dc400117 	ldw	r17,4(sp)
100110a8:	dc000017 	ldw	r16,0(sp)
100110ac:	dec00904 	addi	sp,sp,36
100110b0:	f800283a 	ret
100110b4:	002f883a 	mov	r23,zero
100110b8:	003ff206 	br	10011084 <__alt_data_end+0xf8011084>

100110bc <_gettimeofday_r>:
100110bc:	defffd04 	addi	sp,sp,-12
100110c0:	2805883a 	mov	r2,r5
100110c4:	dc000015 	stw	r16,0(sp)
100110c8:	040400b4 	movhi	r16,4098
100110cc:	dc400115 	stw	r17,4(sp)
100110d0:	8436d904 	addi	r16,r16,-9372
100110d4:	2023883a 	mov	r17,r4
100110d8:	300b883a 	mov	r5,r6
100110dc:	1009883a 	mov	r4,r2
100110e0:	dfc00215 	stw	ra,8(sp)
100110e4:	80000015 	stw	zero,0(r16)
100110e8:	001693c0 	call	1001693c <gettimeofday>
100110ec:	00ffffc4 	movi	r3,-1
100110f0:	10c00526 	beq	r2,r3,10011108 <_gettimeofday_r+0x4c>
100110f4:	dfc00217 	ldw	ra,8(sp)
100110f8:	dc400117 	ldw	r17,4(sp)
100110fc:	dc000017 	ldw	r16,0(sp)
10011100:	dec00304 	addi	sp,sp,12
10011104:	f800283a 	ret
10011108:	80c00017 	ldw	r3,0(r16)
1001110c:	183ff926 	beq	r3,zero,100110f4 <__alt_data_end+0xf80110f4>
10011110:	88c00015 	stw	r3,0(r17)
10011114:	003ff706 	br	100110f4 <__alt_data_end+0xf80110f4>

10011118 <_setlocale_r>:
10011118:	30001b26 	beq	r6,zero,10011188 <_setlocale_r+0x70>
1001111c:	014400b4 	movhi	r5,4098
10011120:	defffe04 	addi	sp,sp,-8
10011124:	29677404 	addi	r5,r5,-25136
10011128:	3009883a 	mov	r4,r6
1001112c:	dc000015 	stw	r16,0(sp)
10011130:	dfc00115 	stw	ra,4(sp)
10011134:	3021883a 	mov	r16,r6
10011138:	001388c0 	call	1001388c <strcmp>
1001113c:	1000061e 	bne	r2,zero,10011158 <_setlocale_r+0x40>
10011140:	008400b4 	movhi	r2,4098
10011144:	10a75504 	addi	r2,r2,-25260
10011148:	dfc00117 	ldw	ra,4(sp)
1001114c:	dc000017 	ldw	r16,0(sp)
10011150:	dec00204 	addi	sp,sp,8
10011154:	f800283a 	ret
10011158:	014400b4 	movhi	r5,4098
1001115c:	29675504 	addi	r5,r5,-25260
10011160:	8009883a 	mov	r4,r16
10011164:	001388c0 	call	1001388c <strcmp>
10011168:	103ff526 	beq	r2,zero,10011140 <__alt_data_end+0xf8011140>
1001116c:	014400b4 	movhi	r5,4098
10011170:	29675f04 	addi	r5,r5,-25220
10011174:	8009883a 	mov	r4,r16
10011178:	001388c0 	call	1001388c <strcmp>
1001117c:	103ff026 	beq	r2,zero,10011140 <__alt_data_end+0xf8011140>
10011180:	0005883a 	mov	r2,zero
10011184:	003ff006 	br	10011148 <__alt_data_end+0xf8011148>
10011188:	008400b4 	movhi	r2,4098
1001118c:	10a75504 	addi	r2,r2,-25260
10011190:	f800283a 	ret

10011194 <__locale_charset>:
10011194:	008400b4 	movhi	r2,4098
10011198:	10a9a404 	addi	r2,r2,-22896
1001119c:	f800283a 	ret

100111a0 <__locale_mb_cur_max>:
100111a0:	008400b4 	movhi	r2,4098
100111a4:	10af4604 	addi	r2,r2,-17128
100111a8:	10800017 	ldw	r2,0(r2)
100111ac:	f800283a 	ret

100111b0 <__locale_msgcharset>:
100111b0:	008400b4 	movhi	r2,4098
100111b4:	10a99c04 	addi	r2,r2,-22928
100111b8:	f800283a 	ret

100111bc <__locale_cjk_lang>:
100111bc:	0005883a 	mov	r2,zero
100111c0:	f800283a 	ret

100111c4 <_localeconv_r>:
100111c4:	008400b4 	movhi	r2,4098
100111c8:	10a9ac04 	addi	r2,r2,-22864
100111cc:	f800283a 	ret

100111d0 <setlocale>:
100111d0:	008400b4 	movhi	r2,4098
100111d4:	10af4504 	addi	r2,r2,-17132
100111d8:	280d883a 	mov	r6,r5
100111dc:	200b883a 	mov	r5,r4
100111e0:	11000017 	ldw	r4,0(r2)
100111e4:	00111181 	jmpi	10011118 <_setlocale_r>

100111e8 <localeconv>:
100111e8:	008400b4 	movhi	r2,4098
100111ec:	10a9ac04 	addi	r2,r2,-22864
100111f0:	f800283a 	ret

100111f4 <__smakebuf_r>:
100111f4:	2880030b 	ldhu	r2,12(r5)
100111f8:	10c0008c 	andi	r3,r2,2
100111fc:	1800411e 	bne	r3,zero,10011304 <__smakebuf_r+0x110>
10011200:	deffec04 	addi	sp,sp,-80
10011204:	dc000f15 	stw	r16,60(sp)
10011208:	2821883a 	mov	r16,r5
1001120c:	2940038f 	ldh	r5,14(r5)
10011210:	dc401015 	stw	r17,64(sp)
10011214:	dfc01315 	stw	ra,76(sp)
10011218:	dcc01215 	stw	r19,72(sp)
1001121c:	dc801115 	stw	r18,68(sp)
10011220:	2023883a 	mov	r17,r4
10011224:	28001c16 	blt	r5,zero,10011298 <__smakebuf_r+0xa4>
10011228:	d80d883a 	mov	r6,sp
1001122c:	00154fc0 	call	100154fc <_fstat_r>
10011230:	10001816 	blt	r2,zero,10011294 <__smakebuf_r+0xa0>
10011234:	d8800117 	ldw	r2,4(sp)
10011238:	00e00014 	movui	r3,32768
1001123c:	10bc000c 	andi	r2,r2,61440
10011240:	14c80020 	cmpeqi	r19,r2,8192
10011244:	10c03726 	beq	r2,r3,10011324 <__smakebuf_r+0x130>
10011248:	80c0030b 	ldhu	r3,12(r16)
1001124c:	18c20014 	ori	r3,r3,2048
10011250:	80c0030d 	sth	r3,12(r16)
10011254:	00c80004 	movi	r3,8192
10011258:	10c0521e 	bne	r2,r3,100113a4 <__smakebuf_r+0x1b0>
1001125c:	8140038f 	ldh	r5,14(r16)
10011260:	8809883a 	mov	r4,r17
10011264:	00155580 	call	10015558 <_isatty_r>
10011268:	10004c26 	beq	r2,zero,1001139c <__smakebuf_r+0x1a8>
1001126c:	8080030b 	ldhu	r2,12(r16)
10011270:	80c010c4 	addi	r3,r16,67
10011274:	80c00015 	stw	r3,0(r16)
10011278:	10800054 	ori	r2,r2,1
1001127c:	8080030d 	sth	r2,12(r16)
10011280:	00800044 	movi	r2,1
10011284:	80c00415 	stw	r3,16(r16)
10011288:	80800515 	stw	r2,20(r16)
1001128c:	04810004 	movi	r18,1024
10011290:	00000706 	br	100112b0 <__smakebuf_r+0xbc>
10011294:	8080030b 	ldhu	r2,12(r16)
10011298:	10c0200c 	andi	r3,r2,128
1001129c:	18001f1e 	bne	r3,zero,1001131c <__smakebuf_r+0x128>
100112a0:	04810004 	movi	r18,1024
100112a4:	10820014 	ori	r2,r2,2048
100112a8:	8080030d 	sth	r2,12(r16)
100112ac:	0027883a 	mov	r19,zero
100112b0:	900b883a 	mov	r5,r18
100112b4:	8809883a 	mov	r4,r17
100112b8:	00113b00 	call	100113b0 <_malloc_r>
100112bc:	10002c26 	beq	r2,zero,10011370 <__smakebuf_r+0x17c>
100112c0:	80c0030b 	ldhu	r3,12(r16)
100112c4:	01040074 	movhi	r4,4097
100112c8:	2100a404 	addi	r4,r4,656
100112cc:	89000f15 	stw	r4,60(r17)
100112d0:	18c02014 	ori	r3,r3,128
100112d4:	80c0030d 	sth	r3,12(r16)
100112d8:	80800015 	stw	r2,0(r16)
100112dc:	80800415 	stw	r2,16(r16)
100112e0:	84800515 	stw	r18,20(r16)
100112e4:	98001a1e 	bne	r19,zero,10011350 <__smakebuf_r+0x15c>
100112e8:	dfc01317 	ldw	ra,76(sp)
100112ec:	dcc01217 	ldw	r19,72(sp)
100112f0:	dc801117 	ldw	r18,68(sp)
100112f4:	dc401017 	ldw	r17,64(sp)
100112f8:	dc000f17 	ldw	r16,60(sp)
100112fc:	dec01404 	addi	sp,sp,80
10011300:	f800283a 	ret
10011304:	288010c4 	addi	r2,r5,67
10011308:	28800015 	stw	r2,0(r5)
1001130c:	28800415 	stw	r2,16(r5)
10011310:	00800044 	movi	r2,1
10011314:	28800515 	stw	r2,20(r5)
10011318:	f800283a 	ret
1001131c:	04801004 	movi	r18,64
10011320:	003fe006 	br	100112a4 <__alt_data_end+0xf80112a4>
10011324:	81000a17 	ldw	r4,40(r16)
10011328:	00c40074 	movhi	r3,4097
1001132c:	18ce0a04 	addi	r3,r3,14376
10011330:	20ffc51e 	bne	r4,r3,10011248 <__alt_data_end+0xf8011248>
10011334:	8080030b 	ldhu	r2,12(r16)
10011338:	04810004 	movi	r18,1024
1001133c:	84801315 	stw	r18,76(r16)
10011340:	1484b03a 	or	r2,r2,r18
10011344:	8080030d 	sth	r2,12(r16)
10011348:	0027883a 	mov	r19,zero
1001134c:	003fd806 	br	100112b0 <__alt_data_end+0xf80112b0>
10011350:	8140038f 	ldh	r5,14(r16)
10011354:	8809883a 	mov	r4,r17
10011358:	00155580 	call	10015558 <_isatty_r>
1001135c:	103fe226 	beq	r2,zero,100112e8 <__alt_data_end+0xf80112e8>
10011360:	8080030b 	ldhu	r2,12(r16)
10011364:	10800054 	ori	r2,r2,1
10011368:	8080030d 	sth	r2,12(r16)
1001136c:	003fde06 	br	100112e8 <__alt_data_end+0xf80112e8>
10011370:	8080030b 	ldhu	r2,12(r16)
10011374:	10c0800c 	andi	r3,r2,512
10011378:	183fdb1e 	bne	r3,zero,100112e8 <__alt_data_end+0xf80112e8>
1001137c:	10800094 	ori	r2,r2,2
10011380:	80c010c4 	addi	r3,r16,67
10011384:	8080030d 	sth	r2,12(r16)
10011388:	00800044 	movi	r2,1
1001138c:	80c00015 	stw	r3,0(r16)
10011390:	80c00415 	stw	r3,16(r16)
10011394:	80800515 	stw	r2,20(r16)
10011398:	003fd306 	br	100112e8 <__alt_data_end+0xf80112e8>
1001139c:	04810004 	movi	r18,1024
100113a0:	003fc306 	br	100112b0 <__alt_data_end+0xf80112b0>
100113a4:	0027883a 	mov	r19,zero
100113a8:	04810004 	movi	r18,1024
100113ac:	003fc006 	br	100112b0 <__alt_data_end+0xf80112b0>

100113b0 <_malloc_r>:
100113b0:	defff504 	addi	sp,sp,-44
100113b4:	dc800315 	stw	r18,12(sp)
100113b8:	dfc00a15 	stw	ra,40(sp)
100113bc:	df000915 	stw	fp,36(sp)
100113c0:	ddc00815 	stw	r23,32(sp)
100113c4:	dd800715 	stw	r22,28(sp)
100113c8:	dd400615 	stw	r21,24(sp)
100113cc:	dd000515 	stw	r20,20(sp)
100113d0:	dcc00415 	stw	r19,16(sp)
100113d4:	dc400215 	stw	r17,8(sp)
100113d8:	dc000115 	stw	r16,4(sp)
100113dc:	288002c4 	addi	r2,r5,11
100113e0:	00c00584 	movi	r3,22
100113e4:	2025883a 	mov	r18,r4
100113e8:	18807f2e 	bgeu	r3,r2,100115e8 <_malloc_r+0x238>
100113ec:	047ffe04 	movi	r17,-8
100113f0:	1462703a 	and	r17,r2,r17
100113f4:	8800a316 	blt	r17,zero,10011684 <_malloc_r+0x2d4>
100113f8:	8940a236 	bltu	r17,r5,10011684 <_malloc_r+0x2d4>
100113fc:	0016e980 	call	10016e98 <__malloc_lock>
10011400:	00807dc4 	movi	r2,503
10011404:	1441e92e 	bgeu	r2,r17,10011bac <_malloc_r+0x7fc>
10011408:	8804d27a 	srli	r2,r17,9
1001140c:	1000a126 	beq	r2,zero,10011694 <_malloc_r+0x2e4>
10011410:	00c00104 	movi	r3,4
10011414:	18811e36 	bltu	r3,r2,10011890 <_malloc_r+0x4e0>
10011418:	8804d1ba 	srli	r2,r17,6
1001141c:	12000e44 	addi	r8,r2,57
10011420:	11c00e04 	addi	r7,r2,56
10011424:	4209883a 	add	r4,r8,r8
10011428:	04c400b4 	movhi	r19,4098
1001142c:	2109883a 	add	r4,r4,r4
10011430:	9ce9ba04 	addi	r19,r19,-22808
10011434:	2109883a 	add	r4,r4,r4
10011438:	9909883a 	add	r4,r19,r4
1001143c:	24000117 	ldw	r16,4(r4)
10011440:	213ffe04 	addi	r4,r4,-8
10011444:	24009726 	beq	r4,r16,100116a4 <_malloc_r+0x2f4>
10011448:	80800117 	ldw	r2,4(r16)
1001144c:	01bfff04 	movi	r6,-4
10011450:	014003c4 	movi	r5,15
10011454:	1184703a 	and	r2,r2,r6
10011458:	1447c83a 	sub	r3,r2,r17
1001145c:	28c00716 	blt	r5,r3,1001147c <_malloc_r+0xcc>
10011460:	1800920e 	bge	r3,zero,100116ac <_malloc_r+0x2fc>
10011464:	84000317 	ldw	r16,12(r16)
10011468:	24008e26 	beq	r4,r16,100116a4 <_malloc_r+0x2f4>
1001146c:	80800117 	ldw	r2,4(r16)
10011470:	1184703a 	and	r2,r2,r6
10011474:	1447c83a 	sub	r3,r2,r17
10011478:	28fff90e 	bge	r5,r3,10011460 <__alt_data_end+0xf8011460>
1001147c:	3809883a 	mov	r4,r7
10011480:	018400b4 	movhi	r6,4098
10011484:	9c000417 	ldw	r16,16(r19)
10011488:	31a9ba04 	addi	r6,r6,-22808
1001148c:	32000204 	addi	r8,r6,8
10011490:	82013426 	beq	r16,r8,10011964 <_malloc_r+0x5b4>
10011494:	80c00117 	ldw	r3,4(r16)
10011498:	00bfff04 	movi	r2,-4
1001149c:	188e703a 	and	r7,r3,r2
100114a0:	3c45c83a 	sub	r2,r7,r17
100114a4:	00c003c4 	movi	r3,15
100114a8:	18811f16 	blt	r3,r2,10011928 <_malloc_r+0x578>
100114ac:	32000515 	stw	r8,20(r6)
100114b0:	32000415 	stw	r8,16(r6)
100114b4:	10007f0e 	bge	r2,zero,100116b4 <_malloc_r+0x304>
100114b8:	00807fc4 	movi	r2,511
100114bc:	11c0fd36 	bltu	r2,r7,100118b4 <_malloc_r+0x504>
100114c0:	3806d0fa 	srli	r3,r7,3
100114c4:	01c00044 	movi	r7,1
100114c8:	30800117 	ldw	r2,4(r6)
100114cc:	19400044 	addi	r5,r3,1
100114d0:	294b883a 	add	r5,r5,r5
100114d4:	1807d0ba 	srai	r3,r3,2
100114d8:	294b883a 	add	r5,r5,r5
100114dc:	294b883a 	add	r5,r5,r5
100114e0:	298b883a 	add	r5,r5,r6
100114e4:	38c6983a 	sll	r3,r7,r3
100114e8:	29c00017 	ldw	r7,0(r5)
100114ec:	2a7ffe04 	addi	r9,r5,-8
100114f0:	1886b03a 	or	r3,r3,r2
100114f4:	82400315 	stw	r9,12(r16)
100114f8:	81c00215 	stw	r7,8(r16)
100114fc:	30c00115 	stw	r3,4(r6)
10011500:	2c000015 	stw	r16,0(r5)
10011504:	3c000315 	stw	r16,12(r7)
10011508:	2005d0ba 	srai	r2,r4,2
1001150c:	01400044 	movi	r5,1
10011510:	288a983a 	sll	r5,r5,r2
10011514:	19406f36 	bltu	r3,r5,100116d4 <_malloc_r+0x324>
10011518:	28c4703a 	and	r2,r5,r3
1001151c:	10000a1e 	bne	r2,zero,10011548 <_malloc_r+0x198>
10011520:	00bfff04 	movi	r2,-4
10011524:	294b883a 	add	r5,r5,r5
10011528:	2088703a 	and	r4,r4,r2
1001152c:	28c4703a 	and	r2,r5,r3
10011530:	21000104 	addi	r4,r4,4
10011534:	1000041e 	bne	r2,zero,10011548 <_malloc_r+0x198>
10011538:	294b883a 	add	r5,r5,r5
1001153c:	28c4703a 	and	r2,r5,r3
10011540:	21000104 	addi	r4,r4,4
10011544:	103ffc26 	beq	r2,zero,10011538 <__alt_data_end+0xf8011538>
10011548:	02bfff04 	movi	r10,-4
1001154c:	024003c4 	movi	r9,15
10011550:	21800044 	addi	r6,r4,1
10011554:	318d883a 	add	r6,r6,r6
10011558:	318d883a 	add	r6,r6,r6
1001155c:	318d883a 	add	r6,r6,r6
10011560:	998d883a 	add	r6,r19,r6
10011564:	333ffe04 	addi	r12,r6,-8
10011568:	2017883a 	mov	r11,r4
1001156c:	31800104 	addi	r6,r6,4
10011570:	34000017 	ldw	r16,0(r6)
10011574:	31fffd04 	addi	r7,r6,-12
10011578:	81c0041e 	bne	r16,r7,1001158c <_malloc_r+0x1dc>
1001157c:	0000fb06 	br	1001196c <_malloc_r+0x5bc>
10011580:	1801030e 	bge	r3,zero,10011990 <_malloc_r+0x5e0>
10011584:	84000317 	ldw	r16,12(r16)
10011588:	81c0f826 	beq	r16,r7,1001196c <_malloc_r+0x5bc>
1001158c:	80800117 	ldw	r2,4(r16)
10011590:	1284703a 	and	r2,r2,r10
10011594:	1447c83a 	sub	r3,r2,r17
10011598:	48fff90e 	bge	r9,r3,10011580 <__alt_data_end+0xf8011580>
1001159c:	80800317 	ldw	r2,12(r16)
100115a0:	81000217 	ldw	r4,8(r16)
100115a4:	89400054 	ori	r5,r17,1
100115a8:	81400115 	stw	r5,4(r16)
100115ac:	20800315 	stw	r2,12(r4)
100115b0:	11000215 	stw	r4,8(r2)
100115b4:	8463883a 	add	r17,r16,r17
100115b8:	9c400515 	stw	r17,20(r19)
100115bc:	9c400415 	stw	r17,16(r19)
100115c0:	18800054 	ori	r2,r3,1
100115c4:	88800115 	stw	r2,4(r17)
100115c8:	8a000315 	stw	r8,12(r17)
100115cc:	8a000215 	stw	r8,8(r17)
100115d0:	88e3883a 	add	r17,r17,r3
100115d4:	88c00015 	stw	r3,0(r17)
100115d8:	9009883a 	mov	r4,r18
100115dc:	0016ebc0 	call	10016ebc <__malloc_unlock>
100115e0:	80800204 	addi	r2,r16,8
100115e4:	00001b06 	br	10011654 <_malloc_r+0x2a4>
100115e8:	04400404 	movi	r17,16
100115ec:	89402536 	bltu	r17,r5,10011684 <_malloc_r+0x2d4>
100115f0:	0016e980 	call	10016e98 <__malloc_lock>
100115f4:	00800184 	movi	r2,6
100115f8:	01000084 	movi	r4,2
100115fc:	04c400b4 	movhi	r19,4098
10011600:	1085883a 	add	r2,r2,r2
10011604:	9ce9ba04 	addi	r19,r19,-22808
10011608:	1085883a 	add	r2,r2,r2
1001160c:	9885883a 	add	r2,r19,r2
10011610:	14000117 	ldw	r16,4(r2)
10011614:	10fffe04 	addi	r3,r2,-8
10011618:	80c0d926 	beq	r16,r3,10011980 <_malloc_r+0x5d0>
1001161c:	80c00117 	ldw	r3,4(r16)
10011620:	81000317 	ldw	r4,12(r16)
10011624:	00bfff04 	movi	r2,-4
10011628:	1884703a 	and	r2,r3,r2
1001162c:	81400217 	ldw	r5,8(r16)
10011630:	8085883a 	add	r2,r16,r2
10011634:	10c00117 	ldw	r3,4(r2)
10011638:	29000315 	stw	r4,12(r5)
1001163c:	21400215 	stw	r5,8(r4)
10011640:	18c00054 	ori	r3,r3,1
10011644:	10c00115 	stw	r3,4(r2)
10011648:	9009883a 	mov	r4,r18
1001164c:	0016ebc0 	call	10016ebc <__malloc_unlock>
10011650:	80800204 	addi	r2,r16,8
10011654:	dfc00a17 	ldw	ra,40(sp)
10011658:	df000917 	ldw	fp,36(sp)
1001165c:	ddc00817 	ldw	r23,32(sp)
10011660:	dd800717 	ldw	r22,28(sp)
10011664:	dd400617 	ldw	r21,24(sp)
10011668:	dd000517 	ldw	r20,20(sp)
1001166c:	dcc00417 	ldw	r19,16(sp)
10011670:	dc800317 	ldw	r18,12(sp)
10011674:	dc400217 	ldw	r17,8(sp)
10011678:	dc000117 	ldw	r16,4(sp)
1001167c:	dec00b04 	addi	sp,sp,44
10011680:	f800283a 	ret
10011684:	00800304 	movi	r2,12
10011688:	90800015 	stw	r2,0(r18)
1001168c:	0005883a 	mov	r2,zero
10011690:	003ff006 	br	10011654 <__alt_data_end+0xf8011654>
10011694:	01002004 	movi	r4,128
10011698:	02001004 	movi	r8,64
1001169c:	01c00fc4 	movi	r7,63
100116a0:	003f6106 	br	10011428 <__alt_data_end+0xf8011428>
100116a4:	4009883a 	mov	r4,r8
100116a8:	003f7506 	br	10011480 <__alt_data_end+0xf8011480>
100116ac:	81000317 	ldw	r4,12(r16)
100116b0:	003fde06 	br	1001162c <__alt_data_end+0xf801162c>
100116b4:	81c5883a 	add	r2,r16,r7
100116b8:	11400117 	ldw	r5,4(r2)
100116bc:	9009883a 	mov	r4,r18
100116c0:	29400054 	ori	r5,r5,1
100116c4:	11400115 	stw	r5,4(r2)
100116c8:	0016ebc0 	call	10016ebc <__malloc_unlock>
100116cc:	80800204 	addi	r2,r16,8
100116d0:	003fe006 	br	10011654 <__alt_data_end+0xf8011654>
100116d4:	9c000217 	ldw	r16,8(r19)
100116d8:	00bfff04 	movi	r2,-4
100116dc:	85800117 	ldw	r22,4(r16)
100116e0:	b0ac703a 	and	r22,r22,r2
100116e4:	b4400336 	bltu	r22,r17,100116f4 <_malloc_r+0x344>
100116e8:	b445c83a 	sub	r2,r22,r17
100116ec:	00c003c4 	movi	r3,15
100116f0:	18805d16 	blt	r3,r2,10011868 <_malloc_r+0x4b8>
100116f4:	05c400b4 	movhi	r23,4098
100116f8:	008400b4 	movhi	r2,4098
100116fc:	10b6df04 	addi	r2,r2,-9348
10011700:	bdef4704 	addi	r23,r23,-17124
10011704:	15400017 	ldw	r21,0(r2)
10011708:	b8c00017 	ldw	r3,0(r23)
1001170c:	00bfffc4 	movi	r2,-1
10011710:	858d883a 	add	r6,r16,r22
10011714:	8d6b883a 	add	r21,r17,r21
10011718:	1880ea26 	beq	r3,r2,10011ac4 <_malloc_r+0x714>
1001171c:	ad4403c4 	addi	r21,r21,4111
10011720:	00bc0004 	movi	r2,-4096
10011724:	a8aa703a 	and	r21,r21,r2
10011728:	a80b883a 	mov	r5,r21
1001172c:	9009883a 	mov	r4,r18
10011730:	d9800015 	stw	r6,0(sp)
10011734:	00136fc0 	call	100136fc <_sbrk_r>
10011738:	1029883a 	mov	r20,r2
1001173c:	00bfffc4 	movi	r2,-1
10011740:	d9800017 	ldw	r6,0(sp)
10011744:	a080e826 	beq	r20,r2,10011ae8 <_malloc_r+0x738>
10011748:	a180a636 	bltu	r20,r6,100119e4 <_malloc_r+0x634>
1001174c:	070400b4 	movhi	fp,4098
10011750:	e736eb04 	addi	fp,fp,-9300
10011754:	e0800017 	ldw	r2,0(fp)
10011758:	a887883a 	add	r3,r21,r2
1001175c:	e0c00015 	stw	r3,0(fp)
10011760:	3500e626 	beq	r6,r20,10011afc <_malloc_r+0x74c>
10011764:	b9000017 	ldw	r4,0(r23)
10011768:	00bfffc4 	movi	r2,-1
1001176c:	2080ee26 	beq	r4,r2,10011b28 <_malloc_r+0x778>
10011770:	a185c83a 	sub	r2,r20,r6
10011774:	10c5883a 	add	r2,r2,r3
10011778:	e0800015 	stw	r2,0(fp)
1001177c:	a0c001cc 	andi	r3,r20,7
10011780:	1800bc26 	beq	r3,zero,10011a74 <_malloc_r+0x6c4>
10011784:	a0e9c83a 	sub	r20,r20,r3
10011788:	00840204 	movi	r2,4104
1001178c:	a5000204 	addi	r20,r20,8
10011790:	10c7c83a 	sub	r3,r2,r3
10011794:	a545883a 	add	r2,r20,r21
10011798:	1083ffcc 	andi	r2,r2,4095
1001179c:	18abc83a 	sub	r21,r3,r2
100117a0:	a80b883a 	mov	r5,r21
100117a4:	9009883a 	mov	r4,r18
100117a8:	00136fc0 	call	100136fc <_sbrk_r>
100117ac:	00ffffc4 	movi	r3,-1
100117b0:	10c0e126 	beq	r2,r3,10011b38 <_malloc_r+0x788>
100117b4:	1505c83a 	sub	r2,r2,r20
100117b8:	1545883a 	add	r2,r2,r21
100117bc:	10800054 	ori	r2,r2,1
100117c0:	e0c00017 	ldw	r3,0(fp)
100117c4:	9d000215 	stw	r20,8(r19)
100117c8:	a0800115 	stw	r2,4(r20)
100117cc:	a8c7883a 	add	r3,r21,r3
100117d0:	e0c00015 	stw	r3,0(fp)
100117d4:	84c00e26 	beq	r16,r19,10011810 <_malloc_r+0x460>
100117d8:	018003c4 	movi	r6,15
100117dc:	3580a72e 	bgeu	r6,r22,10011a7c <_malloc_r+0x6cc>
100117e0:	81400117 	ldw	r5,4(r16)
100117e4:	013ffe04 	movi	r4,-8
100117e8:	b0bffd04 	addi	r2,r22,-12
100117ec:	1104703a 	and	r2,r2,r4
100117f0:	2900004c 	andi	r4,r5,1
100117f4:	2088b03a 	or	r4,r4,r2
100117f8:	81000115 	stw	r4,4(r16)
100117fc:	01400144 	movi	r5,5
10011800:	8089883a 	add	r4,r16,r2
10011804:	21400115 	stw	r5,4(r4)
10011808:	21400215 	stw	r5,8(r4)
1001180c:	3080cd36 	bltu	r6,r2,10011b44 <_malloc_r+0x794>
10011810:	008400b4 	movhi	r2,4098
10011814:	10b6de04 	addi	r2,r2,-9352
10011818:	11000017 	ldw	r4,0(r2)
1001181c:	20c0012e 	bgeu	r4,r3,10011824 <_malloc_r+0x474>
10011820:	10c00015 	stw	r3,0(r2)
10011824:	008400b4 	movhi	r2,4098
10011828:	10b6dd04 	addi	r2,r2,-9356
1001182c:	11000017 	ldw	r4,0(r2)
10011830:	9c000217 	ldw	r16,8(r19)
10011834:	20c0012e 	bgeu	r4,r3,1001183c <_malloc_r+0x48c>
10011838:	10c00015 	stw	r3,0(r2)
1001183c:	80c00117 	ldw	r3,4(r16)
10011840:	00bfff04 	movi	r2,-4
10011844:	1886703a 	and	r3,r3,r2
10011848:	1c45c83a 	sub	r2,r3,r17
1001184c:	1c400236 	bltu	r3,r17,10011858 <_malloc_r+0x4a8>
10011850:	00c003c4 	movi	r3,15
10011854:	18800416 	blt	r3,r2,10011868 <_malloc_r+0x4b8>
10011858:	9009883a 	mov	r4,r18
1001185c:	0016ebc0 	call	10016ebc <__malloc_unlock>
10011860:	0005883a 	mov	r2,zero
10011864:	003f7b06 	br	10011654 <__alt_data_end+0xf8011654>
10011868:	88c00054 	ori	r3,r17,1
1001186c:	80c00115 	stw	r3,4(r16)
10011870:	8463883a 	add	r17,r16,r17
10011874:	10800054 	ori	r2,r2,1
10011878:	9c400215 	stw	r17,8(r19)
1001187c:	88800115 	stw	r2,4(r17)
10011880:	9009883a 	mov	r4,r18
10011884:	0016ebc0 	call	10016ebc <__malloc_unlock>
10011888:	80800204 	addi	r2,r16,8
1001188c:	003f7106 	br	10011654 <__alt_data_end+0xf8011654>
10011890:	00c00504 	movi	r3,20
10011894:	18804a2e 	bgeu	r3,r2,100119c0 <_malloc_r+0x610>
10011898:	00c01504 	movi	r3,84
1001189c:	18806e36 	bltu	r3,r2,10011a58 <_malloc_r+0x6a8>
100118a0:	8804d33a 	srli	r2,r17,12
100118a4:	12001bc4 	addi	r8,r2,111
100118a8:	11c01b84 	addi	r7,r2,110
100118ac:	4209883a 	add	r4,r8,r8
100118b0:	003edd06 	br	10011428 <__alt_data_end+0xf8011428>
100118b4:	3804d27a 	srli	r2,r7,9
100118b8:	00c00104 	movi	r3,4
100118bc:	1880442e 	bgeu	r3,r2,100119d0 <_malloc_r+0x620>
100118c0:	00c00504 	movi	r3,20
100118c4:	18808136 	bltu	r3,r2,10011acc <_malloc_r+0x71c>
100118c8:	11401704 	addi	r5,r2,92
100118cc:	10c016c4 	addi	r3,r2,91
100118d0:	294b883a 	add	r5,r5,r5
100118d4:	294b883a 	add	r5,r5,r5
100118d8:	294b883a 	add	r5,r5,r5
100118dc:	994b883a 	add	r5,r19,r5
100118e0:	28800017 	ldw	r2,0(r5)
100118e4:	018400b4 	movhi	r6,4098
100118e8:	297ffe04 	addi	r5,r5,-8
100118ec:	31a9ba04 	addi	r6,r6,-22808
100118f0:	28806526 	beq	r5,r2,10011a88 <_malloc_r+0x6d8>
100118f4:	01bfff04 	movi	r6,-4
100118f8:	10c00117 	ldw	r3,4(r2)
100118fc:	1986703a 	and	r3,r3,r6
10011900:	38c0022e 	bgeu	r7,r3,1001190c <_malloc_r+0x55c>
10011904:	10800217 	ldw	r2,8(r2)
10011908:	28bffb1e 	bne	r5,r2,100118f8 <__alt_data_end+0xf80118f8>
1001190c:	11400317 	ldw	r5,12(r2)
10011910:	98c00117 	ldw	r3,4(r19)
10011914:	81400315 	stw	r5,12(r16)
10011918:	80800215 	stw	r2,8(r16)
1001191c:	2c000215 	stw	r16,8(r5)
10011920:	14000315 	stw	r16,12(r2)
10011924:	003ef806 	br	10011508 <__alt_data_end+0xf8011508>
10011928:	88c00054 	ori	r3,r17,1
1001192c:	80c00115 	stw	r3,4(r16)
10011930:	8463883a 	add	r17,r16,r17
10011934:	34400515 	stw	r17,20(r6)
10011938:	34400415 	stw	r17,16(r6)
1001193c:	10c00054 	ori	r3,r2,1
10011940:	8a000315 	stw	r8,12(r17)
10011944:	8a000215 	stw	r8,8(r17)
10011948:	88c00115 	stw	r3,4(r17)
1001194c:	88a3883a 	add	r17,r17,r2
10011950:	88800015 	stw	r2,0(r17)
10011954:	9009883a 	mov	r4,r18
10011958:	0016ebc0 	call	10016ebc <__malloc_unlock>
1001195c:	80800204 	addi	r2,r16,8
10011960:	003f3c06 	br	10011654 <__alt_data_end+0xf8011654>
10011964:	30c00117 	ldw	r3,4(r6)
10011968:	003ee706 	br	10011508 <__alt_data_end+0xf8011508>
1001196c:	5ac00044 	addi	r11,r11,1
10011970:	588000cc 	andi	r2,r11,3
10011974:	31800204 	addi	r6,r6,8
10011978:	103efd1e 	bne	r2,zero,10011570 <__alt_data_end+0xf8011570>
1001197c:	00002406 	br	10011a10 <_malloc_r+0x660>
10011980:	14000317 	ldw	r16,12(r2)
10011984:	143f251e 	bne	r2,r16,1001161c <__alt_data_end+0xf801161c>
10011988:	21000084 	addi	r4,r4,2
1001198c:	003ebc06 	br	10011480 <__alt_data_end+0xf8011480>
10011990:	8085883a 	add	r2,r16,r2
10011994:	10c00117 	ldw	r3,4(r2)
10011998:	81000317 	ldw	r4,12(r16)
1001199c:	81400217 	ldw	r5,8(r16)
100119a0:	18c00054 	ori	r3,r3,1
100119a4:	10c00115 	stw	r3,4(r2)
100119a8:	29000315 	stw	r4,12(r5)
100119ac:	21400215 	stw	r5,8(r4)
100119b0:	9009883a 	mov	r4,r18
100119b4:	0016ebc0 	call	10016ebc <__malloc_unlock>
100119b8:	80800204 	addi	r2,r16,8
100119bc:	003f2506 	br	10011654 <__alt_data_end+0xf8011654>
100119c0:	12001704 	addi	r8,r2,92
100119c4:	11c016c4 	addi	r7,r2,91
100119c8:	4209883a 	add	r4,r8,r8
100119cc:	003e9606 	br	10011428 <__alt_data_end+0xf8011428>
100119d0:	3804d1ba 	srli	r2,r7,6
100119d4:	11400e44 	addi	r5,r2,57
100119d8:	10c00e04 	addi	r3,r2,56
100119dc:	294b883a 	add	r5,r5,r5
100119e0:	003fbc06 	br	100118d4 <__alt_data_end+0xf80118d4>
100119e4:	84ff5926 	beq	r16,r19,1001174c <__alt_data_end+0xf801174c>
100119e8:	008400b4 	movhi	r2,4098
100119ec:	10a9ba04 	addi	r2,r2,-22808
100119f0:	14000217 	ldw	r16,8(r2)
100119f4:	00bfff04 	movi	r2,-4
100119f8:	80c00117 	ldw	r3,4(r16)
100119fc:	1886703a 	and	r3,r3,r2
10011a00:	003f9106 	br	10011848 <__alt_data_end+0xf8011848>
10011a04:	60800217 	ldw	r2,8(r12)
10011a08:	213fffc4 	addi	r4,r4,-1
10011a0c:	1300651e 	bne	r2,r12,10011ba4 <_malloc_r+0x7f4>
10011a10:	208000cc 	andi	r2,r4,3
10011a14:	633ffe04 	addi	r12,r12,-8
10011a18:	103ffa1e 	bne	r2,zero,10011a04 <__alt_data_end+0xf8011a04>
10011a1c:	98800117 	ldw	r2,4(r19)
10011a20:	0146303a 	nor	r3,zero,r5
10011a24:	1884703a 	and	r2,r3,r2
10011a28:	98800115 	stw	r2,4(r19)
10011a2c:	294b883a 	add	r5,r5,r5
10011a30:	117f2836 	bltu	r2,r5,100116d4 <__alt_data_end+0xf80116d4>
10011a34:	283f2726 	beq	r5,zero,100116d4 <__alt_data_end+0xf80116d4>
10011a38:	2886703a 	and	r3,r5,r2
10011a3c:	5809883a 	mov	r4,r11
10011a40:	183ec31e 	bne	r3,zero,10011550 <__alt_data_end+0xf8011550>
10011a44:	294b883a 	add	r5,r5,r5
10011a48:	2886703a 	and	r3,r5,r2
10011a4c:	21000104 	addi	r4,r4,4
10011a50:	183ffc26 	beq	r3,zero,10011a44 <__alt_data_end+0xf8011a44>
10011a54:	003ebe06 	br	10011550 <__alt_data_end+0xf8011550>
10011a58:	00c05504 	movi	r3,340
10011a5c:	18801236 	bltu	r3,r2,10011aa8 <_malloc_r+0x6f8>
10011a60:	8804d3fa 	srli	r2,r17,15
10011a64:	12001e04 	addi	r8,r2,120
10011a68:	11c01dc4 	addi	r7,r2,119
10011a6c:	4209883a 	add	r4,r8,r8
10011a70:	003e6d06 	br	10011428 <__alt_data_end+0xf8011428>
10011a74:	00c40004 	movi	r3,4096
10011a78:	003f4606 	br	10011794 <__alt_data_end+0xf8011794>
10011a7c:	00800044 	movi	r2,1
10011a80:	a0800115 	stw	r2,4(r20)
10011a84:	003f7406 	br	10011858 <__alt_data_end+0xf8011858>
10011a88:	1805d0ba 	srai	r2,r3,2
10011a8c:	01c00044 	movi	r7,1
10011a90:	30c00117 	ldw	r3,4(r6)
10011a94:	388e983a 	sll	r7,r7,r2
10011a98:	2805883a 	mov	r2,r5
10011a9c:	38c6b03a 	or	r3,r7,r3
10011aa0:	30c00115 	stw	r3,4(r6)
10011aa4:	003f9b06 	br	10011914 <__alt_data_end+0xf8011914>
10011aa8:	00c15504 	movi	r3,1364
10011aac:	18801a36 	bltu	r3,r2,10011b18 <_malloc_r+0x768>
10011ab0:	8804d4ba 	srli	r2,r17,18
10011ab4:	12001f44 	addi	r8,r2,125
10011ab8:	11c01f04 	addi	r7,r2,124
10011abc:	4209883a 	add	r4,r8,r8
10011ac0:	003e5906 	br	10011428 <__alt_data_end+0xf8011428>
10011ac4:	ad400404 	addi	r21,r21,16
10011ac8:	003f1706 	br	10011728 <__alt_data_end+0xf8011728>
10011acc:	00c01504 	movi	r3,84
10011ad0:	18802336 	bltu	r3,r2,10011b60 <_malloc_r+0x7b0>
10011ad4:	3804d33a 	srli	r2,r7,12
10011ad8:	11401bc4 	addi	r5,r2,111
10011adc:	10c01b84 	addi	r3,r2,110
10011ae0:	294b883a 	add	r5,r5,r5
10011ae4:	003f7b06 	br	100118d4 <__alt_data_end+0xf80118d4>
10011ae8:	9c000217 	ldw	r16,8(r19)
10011aec:	00bfff04 	movi	r2,-4
10011af0:	80c00117 	ldw	r3,4(r16)
10011af4:	1886703a 	and	r3,r3,r2
10011af8:	003f5306 	br	10011848 <__alt_data_end+0xf8011848>
10011afc:	3083ffcc 	andi	r2,r6,4095
10011b00:	103f181e 	bne	r2,zero,10011764 <__alt_data_end+0xf8011764>
10011b04:	99000217 	ldw	r4,8(r19)
10011b08:	b545883a 	add	r2,r22,r21
10011b0c:	10800054 	ori	r2,r2,1
10011b10:	20800115 	stw	r2,4(r4)
10011b14:	003f3e06 	br	10011810 <__alt_data_end+0xf8011810>
10011b18:	01003f84 	movi	r4,254
10011b1c:	02001fc4 	movi	r8,127
10011b20:	01c01f84 	movi	r7,126
10011b24:	003e4006 	br	10011428 <__alt_data_end+0xf8011428>
10011b28:	008400b4 	movhi	r2,4098
10011b2c:	10af4704 	addi	r2,r2,-17124
10011b30:	15000015 	stw	r20,0(r2)
10011b34:	003f1106 	br	1001177c <__alt_data_end+0xf801177c>
10011b38:	00800044 	movi	r2,1
10011b3c:	002b883a 	mov	r21,zero
10011b40:	003f1f06 	br	100117c0 <__alt_data_end+0xf80117c0>
10011b44:	81400204 	addi	r5,r16,8
10011b48:	9009883a 	mov	r4,r18
10011b4c:	001075c0 	call	1001075c <_free_r>
10011b50:	008400b4 	movhi	r2,4098
10011b54:	10b6eb04 	addi	r2,r2,-9300
10011b58:	10c00017 	ldw	r3,0(r2)
10011b5c:	003f2c06 	br	10011810 <__alt_data_end+0xf8011810>
10011b60:	00c05504 	movi	r3,340
10011b64:	18800536 	bltu	r3,r2,10011b7c <_malloc_r+0x7cc>
10011b68:	3804d3fa 	srli	r2,r7,15
10011b6c:	11401e04 	addi	r5,r2,120
10011b70:	10c01dc4 	addi	r3,r2,119
10011b74:	294b883a 	add	r5,r5,r5
10011b78:	003f5606 	br	100118d4 <__alt_data_end+0xf80118d4>
10011b7c:	00c15504 	movi	r3,1364
10011b80:	18800536 	bltu	r3,r2,10011b98 <_malloc_r+0x7e8>
10011b84:	3804d4ba 	srli	r2,r7,18
10011b88:	11401f44 	addi	r5,r2,125
10011b8c:	10c01f04 	addi	r3,r2,124
10011b90:	294b883a 	add	r5,r5,r5
10011b94:	003f4f06 	br	100118d4 <__alt_data_end+0xf80118d4>
10011b98:	01403f84 	movi	r5,254
10011b9c:	00c01f84 	movi	r3,126
10011ba0:	003f4c06 	br	100118d4 <__alt_data_end+0xf80118d4>
10011ba4:	98800117 	ldw	r2,4(r19)
10011ba8:	003fa006 	br	10011a2c <__alt_data_end+0xf8011a2c>
10011bac:	8808d0fa 	srli	r4,r17,3
10011bb0:	20800044 	addi	r2,r4,1
10011bb4:	1085883a 	add	r2,r2,r2
10011bb8:	003e9006 	br	100115fc <__alt_data_end+0xf80115fc>

10011bbc <memchr>:
10011bbc:	208000cc 	andi	r2,r4,3
10011bc0:	280f883a 	mov	r7,r5
10011bc4:	10003426 	beq	r2,zero,10011c98 <memchr+0xdc>
10011bc8:	30bfffc4 	addi	r2,r6,-1
10011bcc:	30001a26 	beq	r6,zero,10011c38 <memchr+0x7c>
10011bd0:	20c00003 	ldbu	r3,0(r4)
10011bd4:	29803fcc 	andi	r6,r5,255
10011bd8:	30c0051e 	bne	r6,r3,10011bf0 <memchr+0x34>
10011bdc:	00001806 	br	10011c40 <memchr+0x84>
10011be0:	10001526 	beq	r2,zero,10011c38 <memchr+0x7c>
10011be4:	20c00003 	ldbu	r3,0(r4)
10011be8:	10bfffc4 	addi	r2,r2,-1
10011bec:	30c01426 	beq	r6,r3,10011c40 <memchr+0x84>
10011bf0:	21000044 	addi	r4,r4,1
10011bf4:	20c000cc 	andi	r3,r4,3
10011bf8:	183ff91e 	bne	r3,zero,10011be0 <__alt_data_end+0xf8011be0>
10011bfc:	020000c4 	movi	r8,3
10011c00:	40801136 	bltu	r8,r2,10011c48 <memchr+0x8c>
10011c04:	10000c26 	beq	r2,zero,10011c38 <memchr+0x7c>
10011c08:	20c00003 	ldbu	r3,0(r4)
10011c0c:	29403fcc 	andi	r5,r5,255
10011c10:	28c00b26 	beq	r5,r3,10011c40 <memchr+0x84>
10011c14:	20c00044 	addi	r3,r4,1
10011c18:	39803fcc 	andi	r6,r7,255
10011c1c:	2089883a 	add	r4,r4,r2
10011c20:	00000306 	br	10011c30 <memchr+0x74>
10011c24:	18c00044 	addi	r3,r3,1
10011c28:	197fffc3 	ldbu	r5,-1(r3)
10011c2c:	31400526 	beq	r6,r5,10011c44 <memchr+0x88>
10011c30:	1805883a 	mov	r2,r3
10011c34:	20fffb1e 	bne	r4,r3,10011c24 <__alt_data_end+0xf8011c24>
10011c38:	0005883a 	mov	r2,zero
10011c3c:	f800283a 	ret
10011c40:	2005883a 	mov	r2,r4
10011c44:	f800283a 	ret
10011c48:	28c03fcc 	andi	r3,r5,255
10011c4c:	1812923a 	slli	r9,r3,8
10011c50:	02ffbff4 	movhi	r11,65279
10011c54:	02a02074 	movhi	r10,32897
10011c58:	48d2b03a 	or	r9,r9,r3
10011c5c:	4806943a 	slli	r3,r9,16
10011c60:	5affbfc4 	addi	r11,r11,-257
10011c64:	52a02004 	addi	r10,r10,-32640
10011c68:	48d2b03a 	or	r9,r9,r3
10011c6c:	20c00017 	ldw	r3,0(r4)
10011c70:	48c6f03a 	xor	r3,r9,r3
10011c74:	1acd883a 	add	r6,r3,r11
10011c78:	00c6303a 	nor	r3,zero,r3
10011c7c:	30c6703a 	and	r3,r6,r3
10011c80:	1a86703a 	and	r3,r3,r10
10011c84:	183fe01e 	bne	r3,zero,10011c08 <__alt_data_end+0xf8011c08>
10011c88:	10bfff04 	addi	r2,r2,-4
10011c8c:	21000104 	addi	r4,r4,4
10011c90:	40bff636 	bltu	r8,r2,10011c6c <__alt_data_end+0xf8011c6c>
10011c94:	003fdb06 	br	10011c04 <__alt_data_end+0xf8011c04>
10011c98:	3005883a 	mov	r2,r6
10011c9c:	003fd706 	br	10011bfc <__alt_data_end+0xf8011bfc>

10011ca0 <memcpy>:
10011ca0:	defffd04 	addi	sp,sp,-12
10011ca4:	dfc00215 	stw	ra,8(sp)
10011ca8:	dc400115 	stw	r17,4(sp)
10011cac:	dc000015 	stw	r16,0(sp)
10011cb0:	00c003c4 	movi	r3,15
10011cb4:	2005883a 	mov	r2,r4
10011cb8:	1980452e 	bgeu	r3,r6,10011dd0 <memcpy+0x130>
10011cbc:	2906b03a 	or	r3,r5,r4
10011cc0:	18c000cc 	andi	r3,r3,3
10011cc4:	1800441e 	bne	r3,zero,10011dd8 <memcpy+0x138>
10011cc8:	347ffc04 	addi	r17,r6,-16
10011ccc:	8822d13a 	srli	r17,r17,4
10011cd0:	28c00104 	addi	r3,r5,4
10011cd4:	23400104 	addi	r13,r4,4
10011cd8:	8820913a 	slli	r16,r17,4
10011cdc:	2b000204 	addi	r12,r5,8
10011ce0:	22c00204 	addi	r11,r4,8
10011ce4:	84000504 	addi	r16,r16,20
10011ce8:	2a800304 	addi	r10,r5,12
10011cec:	22400304 	addi	r9,r4,12
10011cf0:	2c21883a 	add	r16,r5,r16
10011cf4:	2811883a 	mov	r8,r5
10011cf8:	200f883a 	mov	r7,r4
10011cfc:	41000017 	ldw	r4,0(r8)
10011d00:	1fc00017 	ldw	ra,0(r3)
10011d04:	63c00017 	ldw	r15,0(r12)
10011d08:	39000015 	stw	r4,0(r7)
10011d0c:	53800017 	ldw	r14,0(r10)
10011d10:	6fc00015 	stw	ra,0(r13)
10011d14:	5bc00015 	stw	r15,0(r11)
10011d18:	4b800015 	stw	r14,0(r9)
10011d1c:	18c00404 	addi	r3,r3,16
10011d20:	39c00404 	addi	r7,r7,16
10011d24:	42000404 	addi	r8,r8,16
10011d28:	6b400404 	addi	r13,r13,16
10011d2c:	63000404 	addi	r12,r12,16
10011d30:	5ac00404 	addi	r11,r11,16
10011d34:	52800404 	addi	r10,r10,16
10011d38:	4a400404 	addi	r9,r9,16
10011d3c:	1c3fef1e 	bne	r3,r16,10011cfc <__alt_data_end+0xf8011cfc>
10011d40:	89c00044 	addi	r7,r17,1
10011d44:	380e913a 	slli	r7,r7,4
10011d48:	310003cc 	andi	r4,r6,15
10011d4c:	02c000c4 	movi	r11,3
10011d50:	11c7883a 	add	r3,r2,r7
10011d54:	29cb883a 	add	r5,r5,r7
10011d58:	5900212e 	bgeu	r11,r4,10011de0 <memcpy+0x140>
10011d5c:	1813883a 	mov	r9,r3
10011d60:	2811883a 	mov	r8,r5
10011d64:	200f883a 	mov	r7,r4
10011d68:	42800017 	ldw	r10,0(r8)
10011d6c:	4a400104 	addi	r9,r9,4
10011d70:	39ffff04 	addi	r7,r7,-4
10011d74:	4abfff15 	stw	r10,-4(r9)
10011d78:	42000104 	addi	r8,r8,4
10011d7c:	59fffa36 	bltu	r11,r7,10011d68 <__alt_data_end+0xf8011d68>
10011d80:	213fff04 	addi	r4,r4,-4
10011d84:	2008d0ba 	srli	r4,r4,2
10011d88:	318000cc 	andi	r6,r6,3
10011d8c:	21000044 	addi	r4,r4,1
10011d90:	2109883a 	add	r4,r4,r4
10011d94:	2109883a 	add	r4,r4,r4
10011d98:	1907883a 	add	r3,r3,r4
10011d9c:	290b883a 	add	r5,r5,r4
10011da0:	30000626 	beq	r6,zero,10011dbc <memcpy+0x11c>
10011da4:	198d883a 	add	r6,r3,r6
10011da8:	29c00003 	ldbu	r7,0(r5)
10011dac:	18c00044 	addi	r3,r3,1
10011db0:	29400044 	addi	r5,r5,1
10011db4:	19ffffc5 	stb	r7,-1(r3)
10011db8:	19bffb1e 	bne	r3,r6,10011da8 <__alt_data_end+0xf8011da8>
10011dbc:	dfc00217 	ldw	ra,8(sp)
10011dc0:	dc400117 	ldw	r17,4(sp)
10011dc4:	dc000017 	ldw	r16,0(sp)
10011dc8:	dec00304 	addi	sp,sp,12
10011dcc:	f800283a 	ret
10011dd0:	2007883a 	mov	r3,r4
10011dd4:	003ff206 	br	10011da0 <__alt_data_end+0xf8011da0>
10011dd8:	2007883a 	mov	r3,r4
10011ddc:	003ff106 	br	10011da4 <__alt_data_end+0xf8011da4>
10011de0:	200d883a 	mov	r6,r4
10011de4:	003fee06 	br	10011da0 <__alt_data_end+0xf8011da0>

10011de8 <memmove>:
10011de8:	2005883a 	mov	r2,r4
10011dec:	29000b2e 	bgeu	r5,r4,10011e1c <memmove+0x34>
10011df0:	298f883a 	add	r7,r5,r6
10011df4:	21c0092e 	bgeu	r4,r7,10011e1c <memmove+0x34>
10011df8:	2187883a 	add	r3,r4,r6
10011dfc:	198bc83a 	sub	r5,r3,r6
10011e00:	30004826 	beq	r6,zero,10011f24 <memmove+0x13c>
10011e04:	39ffffc4 	addi	r7,r7,-1
10011e08:	39000003 	ldbu	r4,0(r7)
10011e0c:	18ffffc4 	addi	r3,r3,-1
10011e10:	19000005 	stb	r4,0(r3)
10011e14:	28fffb1e 	bne	r5,r3,10011e04 <__alt_data_end+0xf8011e04>
10011e18:	f800283a 	ret
10011e1c:	00c003c4 	movi	r3,15
10011e20:	1980412e 	bgeu	r3,r6,10011f28 <memmove+0x140>
10011e24:	2886b03a 	or	r3,r5,r2
10011e28:	18c000cc 	andi	r3,r3,3
10011e2c:	1800401e 	bne	r3,zero,10011f30 <memmove+0x148>
10011e30:	33fffc04 	addi	r15,r6,-16
10011e34:	781ed13a 	srli	r15,r15,4
10011e38:	28c00104 	addi	r3,r5,4
10011e3c:	13400104 	addi	r13,r2,4
10011e40:	781c913a 	slli	r14,r15,4
10011e44:	2b000204 	addi	r12,r5,8
10011e48:	12c00204 	addi	r11,r2,8
10011e4c:	73800504 	addi	r14,r14,20
10011e50:	2a800304 	addi	r10,r5,12
10011e54:	12400304 	addi	r9,r2,12
10011e58:	2b9d883a 	add	r14,r5,r14
10011e5c:	2811883a 	mov	r8,r5
10011e60:	100f883a 	mov	r7,r2
10011e64:	41000017 	ldw	r4,0(r8)
10011e68:	39c00404 	addi	r7,r7,16
10011e6c:	18c00404 	addi	r3,r3,16
10011e70:	393ffc15 	stw	r4,-16(r7)
10011e74:	193ffc17 	ldw	r4,-16(r3)
10011e78:	6b400404 	addi	r13,r13,16
10011e7c:	5ac00404 	addi	r11,r11,16
10011e80:	693ffc15 	stw	r4,-16(r13)
10011e84:	61000017 	ldw	r4,0(r12)
10011e88:	4a400404 	addi	r9,r9,16
10011e8c:	42000404 	addi	r8,r8,16
10011e90:	593ffc15 	stw	r4,-16(r11)
10011e94:	51000017 	ldw	r4,0(r10)
10011e98:	63000404 	addi	r12,r12,16
10011e9c:	52800404 	addi	r10,r10,16
10011ea0:	493ffc15 	stw	r4,-16(r9)
10011ea4:	1bbfef1e 	bne	r3,r14,10011e64 <__alt_data_end+0xf8011e64>
10011ea8:	79000044 	addi	r4,r15,1
10011eac:	2008913a 	slli	r4,r4,4
10011eb0:	328003cc 	andi	r10,r6,15
10011eb4:	02c000c4 	movi	r11,3
10011eb8:	1107883a 	add	r3,r2,r4
10011ebc:	290b883a 	add	r5,r5,r4
10011ec0:	5a801e2e 	bgeu	r11,r10,10011f3c <memmove+0x154>
10011ec4:	1813883a 	mov	r9,r3
10011ec8:	2811883a 	mov	r8,r5
10011ecc:	500f883a 	mov	r7,r10
10011ed0:	41000017 	ldw	r4,0(r8)
10011ed4:	4a400104 	addi	r9,r9,4
10011ed8:	39ffff04 	addi	r7,r7,-4
10011edc:	493fff15 	stw	r4,-4(r9)
10011ee0:	42000104 	addi	r8,r8,4
10011ee4:	59fffa36 	bltu	r11,r7,10011ed0 <__alt_data_end+0xf8011ed0>
10011ee8:	513fff04 	addi	r4,r10,-4
10011eec:	2008d0ba 	srli	r4,r4,2
10011ef0:	318000cc 	andi	r6,r6,3
10011ef4:	21000044 	addi	r4,r4,1
10011ef8:	2109883a 	add	r4,r4,r4
10011efc:	2109883a 	add	r4,r4,r4
10011f00:	1907883a 	add	r3,r3,r4
10011f04:	290b883a 	add	r5,r5,r4
10011f08:	30000b26 	beq	r6,zero,10011f38 <memmove+0x150>
10011f0c:	198d883a 	add	r6,r3,r6
10011f10:	29c00003 	ldbu	r7,0(r5)
10011f14:	18c00044 	addi	r3,r3,1
10011f18:	29400044 	addi	r5,r5,1
10011f1c:	19ffffc5 	stb	r7,-1(r3)
10011f20:	19bffb1e 	bne	r3,r6,10011f10 <__alt_data_end+0xf8011f10>
10011f24:	f800283a 	ret
10011f28:	1007883a 	mov	r3,r2
10011f2c:	003ff606 	br	10011f08 <__alt_data_end+0xf8011f08>
10011f30:	1007883a 	mov	r3,r2
10011f34:	003ff506 	br	10011f0c <__alt_data_end+0xf8011f0c>
10011f38:	f800283a 	ret
10011f3c:	500d883a 	mov	r6,r10
10011f40:	003ff106 	br	10011f08 <__alt_data_end+0xf8011f08>

10011f44 <memset>:
10011f44:	20c000cc 	andi	r3,r4,3
10011f48:	2005883a 	mov	r2,r4
10011f4c:	18004426 	beq	r3,zero,10012060 <memset+0x11c>
10011f50:	31ffffc4 	addi	r7,r6,-1
10011f54:	30004026 	beq	r6,zero,10012058 <memset+0x114>
10011f58:	2813883a 	mov	r9,r5
10011f5c:	200d883a 	mov	r6,r4
10011f60:	2007883a 	mov	r3,r4
10011f64:	00000406 	br	10011f78 <memset+0x34>
10011f68:	3a3fffc4 	addi	r8,r7,-1
10011f6c:	31800044 	addi	r6,r6,1
10011f70:	38003926 	beq	r7,zero,10012058 <memset+0x114>
10011f74:	400f883a 	mov	r7,r8
10011f78:	18c00044 	addi	r3,r3,1
10011f7c:	32400005 	stb	r9,0(r6)
10011f80:	1a0000cc 	andi	r8,r3,3
10011f84:	403ff81e 	bne	r8,zero,10011f68 <__alt_data_end+0xf8011f68>
10011f88:	010000c4 	movi	r4,3
10011f8c:	21c02d2e 	bgeu	r4,r7,10012044 <memset+0x100>
10011f90:	29003fcc 	andi	r4,r5,255
10011f94:	200c923a 	slli	r6,r4,8
10011f98:	3108b03a 	or	r4,r6,r4
10011f9c:	200c943a 	slli	r6,r4,16
10011fa0:	218cb03a 	or	r6,r4,r6
10011fa4:	010003c4 	movi	r4,15
10011fa8:	21c0182e 	bgeu	r4,r7,1001200c <memset+0xc8>
10011fac:	3b3ffc04 	addi	r12,r7,-16
10011fb0:	6018d13a 	srli	r12,r12,4
10011fb4:	1a000104 	addi	r8,r3,4
10011fb8:	1ac00204 	addi	r11,r3,8
10011fbc:	6008913a 	slli	r4,r12,4
10011fc0:	1a800304 	addi	r10,r3,12
10011fc4:	1813883a 	mov	r9,r3
10011fc8:	21000504 	addi	r4,r4,20
10011fcc:	1909883a 	add	r4,r3,r4
10011fd0:	49800015 	stw	r6,0(r9)
10011fd4:	41800015 	stw	r6,0(r8)
10011fd8:	59800015 	stw	r6,0(r11)
10011fdc:	51800015 	stw	r6,0(r10)
10011fe0:	42000404 	addi	r8,r8,16
10011fe4:	4a400404 	addi	r9,r9,16
10011fe8:	5ac00404 	addi	r11,r11,16
10011fec:	52800404 	addi	r10,r10,16
10011ff0:	413ff71e 	bne	r8,r4,10011fd0 <__alt_data_end+0xf8011fd0>
10011ff4:	63000044 	addi	r12,r12,1
10011ff8:	6018913a 	slli	r12,r12,4
10011ffc:	39c003cc 	andi	r7,r7,15
10012000:	010000c4 	movi	r4,3
10012004:	1b07883a 	add	r3,r3,r12
10012008:	21c00e2e 	bgeu	r4,r7,10012044 <memset+0x100>
1001200c:	1813883a 	mov	r9,r3
10012010:	3811883a 	mov	r8,r7
10012014:	010000c4 	movi	r4,3
10012018:	49800015 	stw	r6,0(r9)
1001201c:	423fff04 	addi	r8,r8,-4
10012020:	4a400104 	addi	r9,r9,4
10012024:	223ffc36 	bltu	r4,r8,10012018 <__alt_data_end+0xf8012018>
10012028:	393fff04 	addi	r4,r7,-4
1001202c:	2008d0ba 	srli	r4,r4,2
10012030:	39c000cc 	andi	r7,r7,3
10012034:	21000044 	addi	r4,r4,1
10012038:	2109883a 	add	r4,r4,r4
1001203c:	2109883a 	add	r4,r4,r4
10012040:	1907883a 	add	r3,r3,r4
10012044:	38000526 	beq	r7,zero,1001205c <memset+0x118>
10012048:	19cf883a 	add	r7,r3,r7
1001204c:	19400005 	stb	r5,0(r3)
10012050:	18c00044 	addi	r3,r3,1
10012054:	38fffd1e 	bne	r7,r3,1001204c <__alt_data_end+0xf801204c>
10012058:	f800283a 	ret
1001205c:	f800283a 	ret
10012060:	2007883a 	mov	r3,r4
10012064:	300f883a 	mov	r7,r6
10012068:	003fc706 	br	10011f88 <__alt_data_end+0xf8011f88>

1001206c <_Balloc>:
1001206c:	20801317 	ldw	r2,76(r4)
10012070:	defffc04 	addi	sp,sp,-16
10012074:	dc400115 	stw	r17,4(sp)
10012078:	dc000015 	stw	r16,0(sp)
1001207c:	dfc00315 	stw	ra,12(sp)
10012080:	dc800215 	stw	r18,8(sp)
10012084:	2023883a 	mov	r17,r4
10012088:	2821883a 	mov	r16,r5
1001208c:	10000f26 	beq	r2,zero,100120cc <_Balloc+0x60>
10012090:	8407883a 	add	r3,r16,r16
10012094:	18c7883a 	add	r3,r3,r3
10012098:	10c7883a 	add	r3,r2,r3
1001209c:	18800017 	ldw	r2,0(r3)
100120a0:	10001126 	beq	r2,zero,100120e8 <_Balloc+0x7c>
100120a4:	11000017 	ldw	r4,0(r2)
100120a8:	19000015 	stw	r4,0(r3)
100120ac:	10000415 	stw	zero,16(r2)
100120b0:	10000315 	stw	zero,12(r2)
100120b4:	dfc00317 	ldw	ra,12(sp)
100120b8:	dc800217 	ldw	r18,8(sp)
100120bc:	dc400117 	ldw	r17,4(sp)
100120c0:	dc000017 	ldw	r16,0(sp)
100120c4:	dec00404 	addi	sp,sp,16
100120c8:	f800283a 	ret
100120cc:	01800844 	movi	r6,33
100120d0:	01400104 	movi	r5,4
100120d4:	00151140 	call	10015114 <_calloc_r>
100120d8:	88801315 	stw	r2,76(r17)
100120dc:	103fec1e 	bne	r2,zero,10012090 <__alt_data_end+0xf8012090>
100120e0:	0005883a 	mov	r2,zero
100120e4:	003ff306 	br	100120b4 <__alt_data_end+0xf80120b4>
100120e8:	01400044 	movi	r5,1
100120ec:	2c24983a 	sll	r18,r5,r16
100120f0:	8809883a 	mov	r4,r17
100120f4:	91800144 	addi	r6,r18,5
100120f8:	318d883a 	add	r6,r6,r6
100120fc:	318d883a 	add	r6,r6,r6
10012100:	00151140 	call	10015114 <_calloc_r>
10012104:	103ff626 	beq	r2,zero,100120e0 <__alt_data_end+0xf80120e0>
10012108:	14000115 	stw	r16,4(r2)
1001210c:	14800215 	stw	r18,8(r2)
10012110:	003fe606 	br	100120ac <__alt_data_end+0xf80120ac>

10012114 <_Bfree>:
10012114:	28000826 	beq	r5,zero,10012138 <_Bfree+0x24>
10012118:	28c00117 	ldw	r3,4(r5)
1001211c:	20801317 	ldw	r2,76(r4)
10012120:	18c7883a 	add	r3,r3,r3
10012124:	18c7883a 	add	r3,r3,r3
10012128:	10c5883a 	add	r2,r2,r3
1001212c:	10c00017 	ldw	r3,0(r2)
10012130:	28c00015 	stw	r3,0(r5)
10012134:	11400015 	stw	r5,0(r2)
10012138:	f800283a 	ret

1001213c <__multadd>:
1001213c:	defff704 	addi	sp,sp,-36
10012140:	dc800215 	stw	r18,8(sp)
10012144:	2c800417 	ldw	r18,16(r5)
10012148:	dd800615 	stw	r22,24(sp)
1001214c:	dd400515 	stw	r21,20(sp)
10012150:	dd000415 	stw	r20,16(sp)
10012154:	dcc00315 	stw	r19,12(sp)
10012158:	dc400115 	stw	r17,4(sp)
1001215c:	dc000015 	stw	r16,0(sp)
10012160:	dfc00815 	stw	ra,32(sp)
10012164:	ddc00715 	stw	r23,28(sp)
10012168:	2827883a 	mov	r19,r5
1001216c:	2029883a 	mov	r20,r4
10012170:	3023883a 	mov	r17,r6
10012174:	3821883a 	mov	r16,r7
10012178:	2d400504 	addi	r21,r5,20
1001217c:	002d883a 	mov	r22,zero
10012180:	adc00017 	ldw	r23,0(r21)
10012184:	880b883a 	mov	r5,r17
10012188:	ad400104 	addi	r21,r21,4
1001218c:	b93fffcc 	andi	r4,r23,65535
10012190:	00085800 	call	10008580 <__mulsi3>
10012194:	b808d43a 	srli	r4,r23,16
10012198:	880b883a 	mov	r5,r17
1001219c:	1421883a 	add	r16,r2,r16
100121a0:	00085800 	call	10008580 <__mulsi3>
100121a4:	800ed43a 	srli	r7,r16,16
100121a8:	80ffffcc 	andi	r3,r16,65535
100121ac:	b5800044 	addi	r22,r22,1
100121b0:	11c5883a 	add	r2,r2,r7
100121b4:	100e943a 	slli	r7,r2,16
100121b8:	1020d43a 	srli	r16,r2,16
100121bc:	38c7883a 	add	r3,r7,r3
100121c0:	a8ffff15 	stw	r3,-4(r21)
100121c4:	b4bfee16 	blt	r22,r18,10012180 <__alt_data_end+0xf8012180>
100121c8:	80000926 	beq	r16,zero,100121f0 <__multadd+0xb4>
100121cc:	98800217 	ldw	r2,8(r19)
100121d0:	9080130e 	bge	r18,r2,10012220 <__multadd+0xe4>
100121d4:	90800144 	addi	r2,r18,5
100121d8:	1085883a 	add	r2,r2,r2
100121dc:	1085883a 	add	r2,r2,r2
100121e0:	9885883a 	add	r2,r19,r2
100121e4:	14000015 	stw	r16,0(r2)
100121e8:	94800044 	addi	r18,r18,1
100121ec:	9c800415 	stw	r18,16(r19)
100121f0:	9805883a 	mov	r2,r19
100121f4:	dfc00817 	ldw	ra,32(sp)
100121f8:	ddc00717 	ldw	r23,28(sp)
100121fc:	dd800617 	ldw	r22,24(sp)
10012200:	dd400517 	ldw	r21,20(sp)
10012204:	dd000417 	ldw	r20,16(sp)
10012208:	dcc00317 	ldw	r19,12(sp)
1001220c:	dc800217 	ldw	r18,8(sp)
10012210:	dc400117 	ldw	r17,4(sp)
10012214:	dc000017 	ldw	r16,0(sp)
10012218:	dec00904 	addi	sp,sp,36
1001221c:	f800283a 	ret
10012220:	99400117 	ldw	r5,4(r19)
10012224:	a009883a 	mov	r4,r20
10012228:	29400044 	addi	r5,r5,1
1001222c:	001206c0 	call	1001206c <_Balloc>
10012230:	99800417 	ldw	r6,16(r19)
10012234:	99400304 	addi	r5,r19,12
10012238:	11000304 	addi	r4,r2,12
1001223c:	31800084 	addi	r6,r6,2
10012240:	318d883a 	add	r6,r6,r6
10012244:	318d883a 	add	r6,r6,r6
10012248:	1023883a 	mov	r17,r2
1001224c:	0011ca00 	call	10011ca0 <memcpy>
10012250:	98000a26 	beq	r19,zero,1001227c <__multadd+0x140>
10012254:	98c00117 	ldw	r3,4(r19)
10012258:	a0801317 	ldw	r2,76(r20)
1001225c:	18c7883a 	add	r3,r3,r3
10012260:	18c7883a 	add	r3,r3,r3
10012264:	10c5883a 	add	r2,r2,r3
10012268:	10c00017 	ldw	r3,0(r2)
1001226c:	98c00015 	stw	r3,0(r19)
10012270:	14c00015 	stw	r19,0(r2)
10012274:	8827883a 	mov	r19,r17
10012278:	003fd606 	br	100121d4 <__alt_data_end+0xf80121d4>
1001227c:	8827883a 	mov	r19,r17
10012280:	003fd406 	br	100121d4 <__alt_data_end+0xf80121d4>

10012284 <__s2b>:
10012284:	defff904 	addi	sp,sp,-28
10012288:	dc400115 	stw	r17,4(sp)
1001228c:	dc000015 	stw	r16,0(sp)
10012290:	2023883a 	mov	r17,r4
10012294:	2821883a 	mov	r16,r5
10012298:	39000204 	addi	r4,r7,8
1001229c:	01400244 	movi	r5,9
100122a0:	dcc00315 	stw	r19,12(sp)
100122a4:	dc800215 	stw	r18,8(sp)
100122a8:	dfc00615 	stw	ra,24(sp)
100122ac:	dd400515 	stw	r21,20(sp)
100122b0:	dd000415 	stw	r20,16(sp)
100122b4:	3825883a 	mov	r18,r7
100122b8:	3027883a 	mov	r19,r6
100122bc:	00083cc0 	call	100083cc <__divsi3>
100122c0:	00c00044 	movi	r3,1
100122c4:	000b883a 	mov	r5,zero
100122c8:	1880030e 	bge	r3,r2,100122d8 <__s2b+0x54>
100122cc:	18c7883a 	add	r3,r3,r3
100122d0:	29400044 	addi	r5,r5,1
100122d4:	18bffd16 	blt	r3,r2,100122cc <__alt_data_end+0xf80122cc>
100122d8:	8809883a 	mov	r4,r17
100122dc:	001206c0 	call	1001206c <_Balloc>
100122e0:	d8c00717 	ldw	r3,28(sp)
100122e4:	10c00515 	stw	r3,20(r2)
100122e8:	00c00044 	movi	r3,1
100122ec:	10c00415 	stw	r3,16(r2)
100122f0:	00c00244 	movi	r3,9
100122f4:	1cc0210e 	bge	r3,r19,1001237c <__s2b+0xf8>
100122f8:	80eb883a 	add	r21,r16,r3
100122fc:	a829883a 	mov	r20,r21
10012300:	84e1883a 	add	r16,r16,r19
10012304:	a1c00007 	ldb	r7,0(r20)
10012308:	01800284 	movi	r6,10
1001230c:	a5000044 	addi	r20,r20,1
10012310:	100b883a 	mov	r5,r2
10012314:	39fff404 	addi	r7,r7,-48
10012318:	8809883a 	mov	r4,r17
1001231c:	001213c0 	call	1001213c <__multadd>
10012320:	a43ff81e 	bne	r20,r16,10012304 <__alt_data_end+0xf8012304>
10012324:	ace1883a 	add	r16,r21,r19
10012328:	843ffe04 	addi	r16,r16,-8
1001232c:	9c800a0e 	bge	r19,r18,10012358 <__s2b+0xd4>
10012330:	94e5c83a 	sub	r18,r18,r19
10012334:	84a5883a 	add	r18,r16,r18
10012338:	81c00007 	ldb	r7,0(r16)
1001233c:	01800284 	movi	r6,10
10012340:	84000044 	addi	r16,r16,1
10012344:	100b883a 	mov	r5,r2
10012348:	39fff404 	addi	r7,r7,-48
1001234c:	8809883a 	mov	r4,r17
10012350:	001213c0 	call	1001213c <__multadd>
10012354:	84bff81e 	bne	r16,r18,10012338 <__alt_data_end+0xf8012338>
10012358:	dfc00617 	ldw	ra,24(sp)
1001235c:	dd400517 	ldw	r21,20(sp)
10012360:	dd000417 	ldw	r20,16(sp)
10012364:	dcc00317 	ldw	r19,12(sp)
10012368:	dc800217 	ldw	r18,8(sp)
1001236c:	dc400117 	ldw	r17,4(sp)
10012370:	dc000017 	ldw	r16,0(sp)
10012374:	dec00704 	addi	sp,sp,28
10012378:	f800283a 	ret
1001237c:	84000284 	addi	r16,r16,10
10012380:	1827883a 	mov	r19,r3
10012384:	003fe906 	br	1001232c <__alt_data_end+0xf801232c>

10012388 <__hi0bits>:
10012388:	20bfffec 	andhi	r2,r4,65535
1001238c:	1000141e 	bne	r2,zero,100123e0 <__hi0bits+0x58>
10012390:	2008943a 	slli	r4,r4,16
10012394:	00800404 	movi	r2,16
10012398:	20ffc02c 	andhi	r3,r4,65280
1001239c:	1800021e 	bne	r3,zero,100123a8 <__hi0bits+0x20>
100123a0:	2008923a 	slli	r4,r4,8
100123a4:	10800204 	addi	r2,r2,8
100123a8:	20fc002c 	andhi	r3,r4,61440
100123ac:	1800021e 	bne	r3,zero,100123b8 <__hi0bits+0x30>
100123b0:	2008913a 	slli	r4,r4,4
100123b4:	10800104 	addi	r2,r2,4
100123b8:	20f0002c 	andhi	r3,r4,49152
100123bc:	1800031e 	bne	r3,zero,100123cc <__hi0bits+0x44>
100123c0:	2109883a 	add	r4,r4,r4
100123c4:	10800084 	addi	r2,r2,2
100123c8:	2109883a 	add	r4,r4,r4
100123cc:	20000316 	blt	r4,zero,100123dc <__hi0bits+0x54>
100123d0:	2110002c 	andhi	r4,r4,16384
100123d4:	2000041e 	bne	r4,zero,100123e8 <__hi0bits+0x60>
100123d8:	00800804 	movi	r2,32
100123dc:	f800283a 	ret
100123e0:	0005883a 	mov	r2,zero
100123e4:	003fec06 	br	10012398 <__alt_data_end+0xf8012398>
100123e8:	10800044 	addi	r2,r2,1
100123ec:	f800283a 	ret

100123f0 <__lo0bits>:
100123f0:	20c00017 	ldw	r3,0(r4)
100123f4:	188001cc 	andi	r2,r3,7
100123f8:	10000826 	beq	r2,zero,1001241c <__lo0bits+0x2c>
100123fc:	1880004c 	andi	r2,r3,1
10012400:	1000211e 	bne	r2,zero,10012488 <__lo0bits+0x98>
10012404:	1880008c 	andi	r2,r3,2
10012408:	1000211e 	bne	r2,zero,10012490 <__lo0bits+0xa0>
1001240c:	1806d0ba 	srli	r3,r3,2
10012410:	00800084 	movi	r2,2
10012414:	20c00015 	stw	r3,0(r4)
10012418:	f800283a 	ret
1001241c:	18bfffcc 	andi	r2,r3,65535
10012420:	10001326 	beq	r2,zero,10012470 <__lo0bits+0x80>
10012424:	0005883a 	mov	r2,zero
10012428:	19403fcc 	andi	r5,r3,255
1001242c:	2800021e 	bne	r5,zero,10012438 <__lo0bits+0x48>
10012430:	1806d23a 	srli	r3,r3,8
10012434:	10800204 	addi	r2,r2,8
10012438:	194003cc 	andi	r5,r3,15
1001243c:	2800021e 	bne	r5,zero,10012448 <__lo0bits+0x58>
10012440:	1806d13a 	srli	r3,r3,4
10012444:	10800104 	addi	r2,r2,4
10012448:	194000cc 	andi	r5,r3,3
1001244c:	2800021e 	bne	r5,zero,10012458 <__lo0bits+0x68>
10012450:	1806d0ba 	srli	r3,r3,2
10012454:	10800084 	addi	r2,r2,2
10012458:	1940004c 	andi	r5,r3,1
1001245c:	2800081e 	bne	r5,zero,10012480 <__lo0bits+0x90>
10012460:	1806d07a 	srli	r3,r3,1
10012464:	1800051e 	bne	r3,zero,1001247c <__lo0bits+0x8c>
10012468:	00800804 	movi	r2,32
1001246c:	f800283a 	ret
10012470:	1806d43a 	srli	r3,r3,16
10012474:	00800404 	movi	r2,16
10012478:	003feb06 	br	10012428 <__alt_data_end+0xf8012428>
1001247c:	10800044 	addi	r2,r2,1
10012480:	20c00015 	stw	r3,0(r4)
10012484:	f800283a 	ret
10012488:	0005883a 	mov	r2,zero
1001248c:	f800283a 	ret
10012490:	1806d07a 	srli	r3,r3,1
10012494:	00800044 	movi	r2,1
10012498:	20c00015 	stw	r3,0(r4)
1001249c:	f800283a 	ret

100124a0 <__i2b>:
100124a0:	defffd04 	addi	sp,sp,-12
100124a4:	dc000015 	stw	r16,0(sp)
100124a8:	04000044 	movi	r16,1
100124ac:	dc400115 	stw	r17,4(sp)
100124b0:	2823883a 	mov	r17,r5
100124b4:	800b883a 	mov	r5,r16
100124b8:	dfc00215 	stw	ra,8(sp)
100124bc:	001206c0 	call	1001206c <_Balloc>
100124c0:	14400515 	stw	r17,20(r2)
100124c4:	14000415 	stw	r16,16(r2)
100124c8:	dfc00217 	ldw	ra,8(sp)
100124cc:	dc400117 	ldw	r17,4(sp)
100124d0:	dc000017 	ldw	r16,0(sp)
100124d4:	dec00304 	addi	sp,sp,12
100124d8:	f800283a 	ret

100124dc <__multiply>:
100124dc:	deffef04 	addi	sp,sp,-68
100124e0:	dc400815 	stw	r17,32(sp)
100124e4:	dc000715 	stw	r16,28(sp)
100124e8:	34400417 	ldw	r17,16(r6)
100124ec:	2c000417 	ldw	r16,16(r5)
100124f0:	dd800d15 	stw	r22,52(sp)
100124f4:	dc800915 	stw	r18,36(sp)
100124f8:	dfc01015 	stw	ra,64(sp)
100124fc:	df000f15 	stw	fp,60(sp)
10012500:	ddc00e15 	stw	r23,56(sp)
10012504:	dd400c15 	stw	r21,48(sp)
10012508:	dd000b15 	stw	r20,44(sp)
1001250c:	dcc00a15 	stw	r19,40(sp)
10012510:	2825883a 	mov	r18,r5
10012514:	302d883a 	mov	r22,r6
10012518:	8440050e 	bge	r16,r17,10012530 <__multiply+0x54>
1001251c:	8007883a 	mov	r3,r16
10012520:	3025883a 	mov	r18,r6
10012524:	8821883a 	mov	r16,r17
10012528:	282d883a 	mov	r22,r5
1001252c:	1823883a 	mov	r17,r3
10012530:	90800217 	ldw	r2,8(r18)
10012534:	8447883a 	add	r3,r16,r17
10012538:	d8c00215 	stw	r3,8(sp)
1001253c:	91400117 	ldw	r5,4(r18)
10012540:	10c0010e 	bge	r2,r3,10012548 <__multiply+0x6c>
10012544:	29400044 	addi	r5,r5,1
10012548:	001206c0 	call	1001206c <_Balloc>
1001254c:	d8c00217 	ldw	r3,8(sp)
10012550:	d8800615 	stw	r2,24(sp)
10012554:	18eb883a 	add	r21,r3,r3
10012558:	ad6b883a 	add	r21,r21,r21
1001255c:	10c00504 	addi	r3,r2,20
10012560:	1d6b883a 	add	r21,r3,r21
10012564:	d8c00115 	stw	r3,4(sp)
10012568:	dd400315 	stw	r21,12(sp)
1001256c:	1805883a 	mov	r2,r3
10012570:	1d40042e 	bgeu	r3,r21,10012584 <__multiply+0xa8>
10012574:	d8c00317 	ldw	r3,12(sp)
10012578:	10000015 	stw	zero,0(r2)
1001257c:	10800104 	addi	r2,r2,4
10012580:	10fffc36 	bltu	r2,r3,10012574 <__alt_data_end+0xf8012574>
10012584:	8c63883a 	add	r17,r17,r17
10012588:	b5800504 	addi	r22,r22,20
1001258c:	8c63883a 	add	r17,r17,r17
10012590:	94800504 	addi	r18,r18,20
10012594:	8421883a 	add	r16,r16,r16
10012598:	b463883a 	add	r17,r22,r17
1001259c:	8421883a 	add	r16,r16,r16
100125a0:	dd800015 	stw	r22,0(sp)
100125a4:	dc800415 	stw	r18,16(sp)
100125a8:	dc400515 	stw	r17,20(sp)
100125ac:	9429883a 	add	r20,r18,r16
100125b0:	b4404f2e 	bgeu	r22,r17,100126f0 <__multiply+0x214>
100125b4:	d8c00017 	ldw	r3,0(sp)
100125b8:	1c800017 	ldw	r18,0(r3)
100125bc:	947fffcc 	andi	r17,r18,65535
100125c0:	88001e26 	beq	r17,zero,1001263c <__multiply+0x160>
100125c4:	dd800117 	ldw	r22,4(sp)
100125c8:	dd400417 	ldw	r21,16(sp)
100125cc:	0027883a 	mov	r19,zero
100125d0:	ac800017 	ldw	r18,0(r21)
100125d4:	b4000017 	ldw	r16,0(r22)
100125d8:	880b883a 	mov	r5,r17
100125dc:	913fffcc 	andi	r4,r18,65535
100125e0:	00085800 	call	10008580 <__mulsi3>
100125e4:	9008d43a 	srli	r4,r18,16
100125e8:	84bfffcc 	andi	r18,r16,65535
100125ec:	1485883a 	add	r2,r2,r18
100125f0:	14e5883a 	add	r18,r2,r19
100125f4:	8020d43a 	srli	r16,r16,16
100125f8:	9026d43a 	srli	r19,r18,16
100125fc:	880b883a 	mov	r5,r17
10012600:	00085800 	call	10008580 <__mulsi3>
10012604:	1405883a 	add	r2,r2,r16
10012608:	14e1883a 	add	r16,r2,r19
1001260c:	90ffffcc 	andi	r3,r18,65535
10012610:	8024943a 	slli	r18,r16,16
10012614:	ad400104 	addi	r21,r21,4
10012618:	b005883a 	mov	r2,r22
1001261c:	90c6b03a 	or	r3,r18,r3
10012620:	b0c00015 	stw	r3,0(r22)
10012624:	8026d43a 	srli	r19,r16,16
10012628:	b5800104 	addi	r22,r22,4
1001262c:	ad3fe836 	bltu	r21,r20,100125d0 <__alt_data_end+0xf80125d0>
10012630:	d8c00017 	ldw	r3,0(sp)
10012634:	14c00115 	stw	r19,4(r2)
10012638:	1c800017 	ldw	r18,0(r3)
1001263c:	9024d43a 	srli	r18,r18,16
10012640:	90002226 	beq	r18,zero,100126cc <__multiply+0x1f0>
10012644:	d8c00117 	ldw	r3,4(sp)
10012648:	dd800417 	ldw	r22,16(sp)
1001264c:	002f883a 	mov	r23,zero
10012650:	1f000017 	ldw	fp,0(r3)
10012654:	1823883a 	mov	r17,r3
10012658:	182b883a 	mov	r21,r3
1001265c:	e021883a 	mov	r16,fp
10012660:	00000106 	br	10012668 <__multiply+0x18c>
10012664:	982b883a 	mov	r21,r19
10012668:	b100000b 	ldhu	r4,0(r22)
1001266c:	8020d43a 	srli	r16,r16,16
10012670:	900b883a 	mov	r5,r18
10012674:	00085800 	call	10008580 <__mulsi3>
10012678:	1405883a 	add	r2,r2,r16
1001267c:	15ef883a 	add	r23,r2,r23
10012680:	b804943a 	slli	r2,r23,16
10012684:	e0ffffcc 	andi	r3,fp,65535
10012688:	8c400104 	addi	r17,r17,4
1001268c:	10c6b03a 	or	r3,r2,r3
10012690:	88ffff15 	stw	r3,-4(r17)
10012694:	b5800104 	addi	r22,r22,4
10012698:	b13fff17 	ldw	r4,-4(r22)
1001269c:	acc00104 	addi	r19,r21,4
100126a0:	900b883a 	mov	r5,r18
100126a4:	2008d43a 	srli	r4,r4,16
100126a8:	9c000017 	ldw	r16,0(r19)
100126ac:	00085800 	call	10008580 <__mulsi3>
100126b0:	b806d43a 	srli	r3,r23,16
100126b4:	813fffcc 	andi	r4,r16,65535
100126b8:	1105883a 	add	r2,r2,r4
100126bc:	10f9883a 	add	fp,r2,r3
100126c0:	e02ed43a 	srli	r23,fp,16
100126c4:	b53fe736 	bltu	r22,r20,10012664 <__alt_data_end+0xf8012664>
100126c8:	af000115 	stw	fp,4(r21)
100126cc:	d8c00017 	ldw	r3,0(sp)
100126d0:	d9000517 	ldw	r4,20(sp)
100126d4:	18c00104 	addi	r3,r3,4
100126d8:	d8c00015 	stw	r3,0(sp)
100126dc:	d8c00117 	ldw	r3,4(sp)
100126e0:	18c00104 	addi	r3,r3,4
100126e4:	d8c00115 	stw	r3,4(sp)
100126e8:	d8c00017 	ldw	r3,0(sp)
100126ec:	193fb136 	bltu	r3,r4,100125b4 <__alt_data_end+0xf80125b4>
100126f0:	d8c00217 	ldw	r3,8(sp)
100126f4:	00c00c0e 	bge	zero,r3,10012728 <__multiply+0x24c>
100126f8:	d8c00317 	ldw	r3,12(sp)
100126fc:	18bfff17 	ldw	r2,-4(r3)
10012700:	1d7fff04 	addi	r21,r3,-4
10012704:	10000326 	beq	r2,zero,10012714 <__multiply+0x238>
10012708:	00000706 	br	10012728 <__multiply+0x24c>
1001270c:	a8800017 	ldw	r2,0(r21)
10012710:	1000051e 	bne	r2,zero,10012728 <__multiply+0x24c>
10012714:	d8c00217 	ldw	r3,8(sp)
10012718:	ad7fff04 	addi	r21,r21,-4
1001271c:	18ffffc4 	addi	r3,r3,-1
10012720:	d8c00215 	stw	r3,8(sp)
10012724:	183ff91e 	bne	r3,zero,1001270c <__alt_data_end+0xf801270c>
10012728:	d8c00617 	ldw	r3,24(sp)
1001272c:	d9000217 	ldw	r4,8(sp)
10012730:	1805883a 	mov	r2,r3
10012734:	19000415 	stw	r4,16(r3)
10012738:	dfc01017 	ldw	ra,64(sp)
1001273c:	df000f17 	ldw	fp,60(sp)
10012740:	ddc00e17 	ldw	r23,56(sp)
10012744:	dd800d17 	ldw	r22,52(sp)
10012748:	dd400c17 	ldw	r21,48(sp)
1001274c:	dd000b17 	ldw	r20,44(sp)
10012750:	dcc00a17 	ldw	r19,40(sp)
10012754:	dc800917 	ldw	r18,36(sp)
10012758:	dc400817 	ldw	r17,32(sp)
1001275c:	dc000717 	ldw	r16,28(sp)
10012760:	dec01104 	addi	sp,sp,68
10012764:	f800283a 	ret

10012768 <__pow5mult>:
10012768:	defffa04 	addi	sp,sp,-24
1001276c:	dcc00315 	stw	r19,12(sp)
10012770:	dc000015 	stw	r16,0(sp)
10012774:	dfc00515 	stw	ra,20(sp)
10012778:	dd000415 	stw	r20,16(sp)
1001277c:	dc800215 	stw	r18,8(sp)
10012780:	dc400115 	stw	r17,4(sp)
10012784:	308000cc 	andi	r2,r6,3
10012788:	3021883a 	mov	r16,r6
1001278c:	2027883a 	mov	r19,r4
10012790:	10002f1e 	bne	r2,zero,10012850 <__pow5mult+0xe8>
10012794:	2825883a 	mov	r18,r5
10012798:	8021d0ba 	srai	r16,r16,2
1001279c:	80001a26 	beq	r16,zero,10012808 <__pow5mult+0xa0>
100127a0:	9c401217 	ldw	r17,72(r19)
100127a4:	8800061e 	bne	r17,zero,100127c0 <__pow5mult+0x58>
100127a8:	00003406 	br	1001287c <__pow5mult+0x114>
100127ac:	8021d07a 	srai	r16,r16,1
100127b0:	80001526 	beq	r16,zero,10012808 <__pow5mult+0xa0>
100127b4:	88800017 	ldw	r2,0(r17)
100127b8:	10001c26 	beq	r2,zero,1001282c <__pow5mult+0xc4>
100127bc:	1023883a 	mov	r17,r2
100127c0:	8080004c 	andi	r2,r16,1
100127c4:	103ff926 	beq	r2,zero,100127ac <__alt_data_end+0xf80127ac>
100127c8:	880d883a 	mov	r6,r17
100127cc:	900b883a 	mov	r5,r18
100127d0:	9809883a 	mov	r4,r19
100127d4:	00124dc0 	call	100124dc <__multiply>
100127d8:	90001b26 	beq	r18,zero,10012848 <__pow5mult+0xe0>
100127dc:	91000117 	ldw	r4,4(r18)
100127e0:	98c01317 	ldw	r3,76(r19)
100127e4:	8021d07a 	srai	r16,r16,1
100127e8:	2109883a 	add	r4,r4,r4
100127ec:	2109883a 	add	r4,r4,r4
100127f0:	1907883a 	add	r3,r3,r4
100127f4:	19000017 	ldw	r4,0(r3)
100127f8:	91000015 	stw	r4,0(r18)
100127fc:	1c800015 	stw	r18,0(r3)
10012800:	1025883a 	mov	r18,r2
10012804:	803feb1e 	bne	r16,zero,100127b4 <__alt_data_end+0xf80127b4>
10012808:	9005883a 	mov	r2,r18
1001280c:	dfc00517 	ldw	ra,20(sp)
10012810:	dd000417 	ldw	r20,16(sp)
10012814:	dcc00317 	ldw	r19,12(sp)
10012818:	dc800217 	ldw	r18,8(sp)
1001281c:	dc400117 	ldw	r17,4(sp)
10012820:	dc000017 	ldw	r16,0(sp)
10012824:	dec00604 	addi	sp,sp,24
10012828:	f800283a 	ret
1001282c:	880d883a 	mov	r6,r17
10012830:	880b883a 	mov	r5,r17
10012834:	9809883a 	mov	r4,r19
10012838:	00124dc0 	call	100124dc <__multiply>
1001283c:	88800015 	stw	r2,0(r17)
10012840:	10000015 	stw	zero,0(r2)
10012844:	003fdd06 	br	100127bc <__alt_data_end+0xf80127bc>
10012848:	1025883a 	mov	r18,r2
1001284c:	003fd706 	br	100127ac <__alt_data_end+0xf80127ac>
10012850:	10bfffc4 	addi	r2,r2,-1
10012854:	1085883a 	add	r2,r2,r2
10012858:	00c400b4 	movhi	r3,4098
1001285c:	18e77704 	addi	r3,r3,-25124
10012860:	1085883a 	add	r2,r2,r2
10012864:	1885883a 	add	r2,r3,r2
10012868:	11800017 	ldw	r6,0(r2)
1001286c:	000f883a 	mov	r7,zero
10012870:	001213c0 	call	1001213c <__multadd>
10012874:	1025883a 	mov	r18,r2
10012878:	003fc706 	br	10012798 <__alt_data_end+0xf8012798>
1001287c:	05000044 	movi	r20,1
10012880:	a00b883a 	mov	r5,r20
10012884:	9809883a 	mov	r4,r19
10012888:	001206c0 	call	1001206c <_Balloc>
1001288c:	1023883a 	mov	r17,r2
10012890:	00809c44 	movi	r2,625
10012894:	88800515 	stw	r2,20(r17)
10012898:	8d000415 	stw	r20,16(r17)
1001289c:	9c401215 	stw	r17,72(r19)
100128a0:	88000015 	stw	zero,0(r17)
100128a4:	003fc606 	br	100127c0 <__alt_data_end+0xf80127c0>

100128a8 <__lshift>:
100128a8:	defff904 	addi	sp,sp,-28
100128ac:	dd400515 	stw	r21,20(sp)
100128b0:	dcc00315 	stw	r19,12(sp)
100128b4:	302bd17a 	srai	r21,r6,5
100128b8:	2cc00417 	ldw	r19,16(r5)
100128bc:	28800217 	ldw	r2,8(r5)
100128c0:	dd000415 	stw	r20,16(sp)
100128c4:	ace7883a 	add	r19,r21,r19
100128c8:	dc800215 	stw	r18,8(sp)
100128cc:	dc400115 	stw	r17,4(sp)
100128d0:	dc000015 	stw	r16,0(sp)
100128d4:	dfc00615 	stw	ra,24(sp)
100128d8:	9c000044 	addi	r16,r19,1
100128dc:	2823883a 	mov	r17,r5
100128e0:	3029883a 	mov	r20,r6
100128e4:	2025883a 	mov	r18,r4
100128e8:	29400117 	ldw	r5,4(r5)
100128ec:	1400030e 	bge	r2,r16,100128fc <__lshift+0x54>
100128f0:	1085883a 	add	r2,r2,r2
100128f4:	29400044 	addi	r5,r5,1
100128f8:	143ffd16 	blt	r2,r16,100128f0 <__alt_data_end+0xf80128f0>
100128fc:	9009883a 	mov	r4,r18
10012900:	001206c0 	call	1001206c <_Balloc>
10012904:	10c00504 	addi	r3,r2,20
10012908:	0540070e 	bge	zero,r21,10012928 <__lshift+0x80>
1001290c:	ad6b883a 	add	r21,r21,r21
10012910:	ad6b883a 	add	r21,r21,r21
10012914:	1809883a 	mov	r4,r3
10012918:	1d47883a 	add	r3,r3,r21
1001291c:	20000015 	stw	zero,0(r4)
10012920:	21000104 	addi	r4,r4,4
10012924:	193ffd1e 	bne	r3,r4,1001291c <__alt_data_end+0xf801291c>
10012928:	8a000417 	ldw	r8,16(r17)
1001292c:	89000504 	addi	r4,r17,20
10012930:	a18007cc 	andi	r6,r20,31
10012934:	4211883a 	add	r8,r8,r8
10012938:	4211883a 	add	r8,r8,r8
1001293c:	2211883a 	add	r8,r4,r8
10012940:	30002326 	beq	r6,zero,100129d0 <__lshift+0x128>
10012944:	02400804 	movi	r9,32
10012948:	4993c83a 	sub	r9,r9,r6
1001294c:	000b883a 	mov	r5,zero
10012950:	21c00017 	ldw	r7,0(r4)
10012954:	1815883a 	mov	r10,r3
10012958:	18c00104 	addi	r3,r3,4
1001295c:	398e983a 	sll	r7,r7,r6
10012960:	21000104 	addi	r4,r4,4
10012964:	394ab03a 	or	r5,r7,r5
10012968:	197fff15 	stw	r5,-4(r3)
1001296c:	217fff17 	ldw	r5,-4(r4)
10012970:	2a4ad83a 	srl	r5,r5,r9
10012974:	223ff636 	bltu	r4,r8,10012950 <__alt_data_end+0xf8012950>
10012978:	51400115 	stw	r5,4(r10)
1001297c:	28001a1e 	bne	r5,zero,100129e8 <__lshift+0x140>
10012980:	843fffc4 	addi	r16,r16,-1
10012984:	14000415 	stw	r16,16(r2)
10012988:	88000826 	beq	r17,zero,100129ac <__lshift+0x104>
1001298c:	89000117 	ldw	r4,4(r17)
10012990:	90c01317 	ldw	r3,76(r18)
10012994:	2109883a 	add	r4,r4,r4
10012998:	2109883a 	add	r4,r4,r4
1001299c:	1907883a 	add	r3,r3,r4
100129a0:	19000017 	ldw	r4,0(r3)
100129a4:	89000015 	stw	r4,0(r17)
100129a8:	1c400015 	stw	r17,0(r3)
100129ac:	dfc00617 	ldw	ra,24(sp)
100129b0:	dd400517 	ldw	r21,20(sp)
100129b4:	dd000417 	ldw	r20,16(sp)
100129b8:	dcc00317 	ldw	r19,12(sp)
100129bc:	dc800217 	ldw	r18,8(sp)
100129c0:	dc400117 	ldw	r17,4(sp)
100129c4:	dc000017 	ldw	r16,0(sp)
100129c8:	dec00704 	addi	sp,sp,28
100129cc:	f800283a 	ret
100129d0:	21400017 	ldw	r5,0(r4)
100129d4:	18c00104 	addi	r3,r3,4
100129d8:	21000104 	addi	r4,r4,4
100129dc:	197fff15 	stw	r5,-4(r3)
100129e0:	223ffb36 	bltu	r4,r8,100129d0 <__alt_data_end+0xf80129d0>
100129e4:	003fe606 	br	10012980 <__alt_data_end+0xf8012980>
100129e8:	9c000084 	addi	r16,r19,2
100129ec:	003fe406 	br	10012980 <__alt_data_end+0xf8012980>

100129f0 <__mcmp>:
100129f0:	20800417 	ldw	r2,16(r4)
100129f4:	28c00417 	ldw	r3,16(r5)
100129f8:	10c5c83a 	sub	r2,r2,r3
100129fc:	1000111e 	bne	r2,zero,10012a44 <__mcmp+0x54>
10012a00:	18c7883a 	add	r3,r3,r3
10012a04:	18c7883a 	add	r3,r3,r3
10012a08:	21000504 	addi	r4,r4,20
10012a0c:	29400504 	addi	r5,r5,20
10012a10:	20c5883a 	add	r2,r4,r3
10012a14:	28cb883a 	add	r5,r5,r3
10012a18:	00000106 	br	10012a20 <__mcmp+0x30>
10012a1c:	20800a2e 	bgeu	r4,r2,10012a48 <__mcmp+0x58>
10012a20:	10bfff04 	addi	r2,r2,-4
10012a24:	297fff04 	addi	r5,r5,-4
10012a28:	11800017 	ldw	r6,0(r2)
10012a2c:	28c00017 	ldw	r3,0(r5)
10012a30:	30fffa26 	beq	r6,r3,10012a1c <__alt_data_end+0xf8012a1c>
10012a34:	30c00236 	bltu	r6,r3,10012a40 <__mcmp+0x50>
10012a38:	00800044 	movi	r2,1
10012a3c:	f800283a 	ret
10012a40:	00bfffc4 	movi	r2,-1
10012a44:	f800283a 	ret
10012a48:	0005883a 	mov	r2,zero
10012a4c:	f800283a 	ret

10012a50 <__mdiff>:
10012a50:	28c00417 	ldw	r3,16(r5)
10012a54:	30800417 	ldw	r2,16(r6)
10012a58:	defffa04 	addi	sp,sp,-24
10012a5c:	dcc00315 	stw	r19,12(sp)
10012a60:	dc800215 	stw	r18,8(sp)
10012a64:	dfc00515 	stw	ra,20(sp)
10012a68:	dd000415 	stw	r20,16(sp)
10012a6c:	dc400115 	stw	r17,4(sp)
10012a70:	dc000015 	stw	r16,0(sp)
10012a74:	1887c83a 	sub	r3,r3,r2
10012a78:	2825883a 	mov	r18,r5
10012a7c:	3027883a 	mov	r19,r6
10012a80:	1800141e 	bne	r3,zero,10012ad4 <__mdiff+0x84>
10012a84:	1085883a 	add	r2,r2,r2
10012a88:	1085883a 	add	r2,r2,r2
10012a8c:	2a000504 	addi	r8,r5,20
10012a90:	34000504 	addi	r16,r6,20
10012a94:	4087883a 	add	r3,r8,r2
10012a98:	8085883a 	add	r2,r16,r2
10012a9c:	00000106 	br	10012aa4 <__mdiff+0x54>
10012aa0:	40c0592e 	bgeu	r8,r3,10012c08 <__mdiff+0x1b8>
10012aa4:	18ffff04 	addi	r3,r3,-4
10012aa8:	10bfff04 	addi	r2,r2,-4
10012aac:	19c00017 	ldw	r7,0(r3)
10012ab0:	11400017 	ldw	r5,0(r2)
10012ab4:	397ffa26 	beq	r7,r5,10012aa0 <__alt_data_end+0xf8012aa0>
10012ab8:	3940592e 	bgeu	r7,r5,10012c20 <__mdiff+0x1d0>
10012abc:	9005883a 	mov	r2,r18
10012ac0:	4023883a 	mov	r17,r8
10012ac4:	9825883a 	mov	r18,r19
10012ac8:	05000044 	movi	r20,1
10012acc:	1027883a 	mov	r19,r2
10012ad0:	00000406 	br	10012ae4 <__mdiff+0x94>
10012ad4:	18005616 	blt	r3,zero,10012c30 <__mdiff+0x1e0>
10012ad8:	34400504 	addi	r17,r6,20
10012adc:	2c000504 	addi	r16,r5,20
10012ae0:	0029883a 	mov	r20,zero
10012ae4:	91400117 	ldw	r5,4(r18)
10012ae8:	001206c0 	call	1001206c <_Balloc>
10012aec:	92400417 	ldw	r9,16(r18)
10012af0:	9b000417 	ldw	r12,16(r19)
10012af4:	12c00504 	addi	r11,r2,20
10012af8:	4a51883a 	add	r8,r9,r9
10012afc:	6319883a 	add	r12,r12,r12
10012b00:	4211883a 	add	r8,r8,r8
10012b04:	6319883a 	add	r12,r12,r12
10012b08:	15000315 	stw	r20,12(r2)
10012b0c:	8211883a 	add	r8,r16,r8
10012b10:	8b19883a 	add	r12,r17,r12
10012b14:	0007883a 	mov	r3,zero
10012b18:	81400017 	ldw	r5,0(r16)
10012b1c:	89c00017 	ldw	r7,0(r17)
10012b20:	59800104 	addi	r6,r11,4
10012b24:	293fffcc 	andi	r4,r5,65535
10012b28:	20c7883a 	add	r3,r4,r3
10012b2c:	393fffcc 	andi	r4,r7,65535
10012b30:	1909c83a 	sub	r4,r3,r4
10012b34:	280ad43a 	srli	r5,r5,16
10012b38:	380ed43a 	srli	r7,r7,16
10012b3c:	2007d43a 	srai	r3,r4,16
10012b40:	213fffcc 	andi	r4,r4,65535
10012b44:	29cbc83a 	sub	r5,r5,r7
10012b48:	28c7883a 	add	r3,r5,r3
10012b4c:	180a943a 	slli	r5,r3,16
10012b50:	8c400104 	addi	r17,r17,4
10012b54:	84000104 	addi	r16,r16,4
10012b58:	2908b03a 	or	r4,r5,r4
10012b5c:	59000015 	stw	r4,0(r11)
10012b60:	1807d43a 	srai	r3,r3,16
10012b64:	3015883a 	mov	r10,r6
10012b68:	3017883a 	mov	r11,r6
10012b6c:	8b3fea36 	bltu	r17,r12,10012b18 <__alt_data_end+0xf8012b18>
10012b70:	8200162e 	bgeu	r16,r8,10012bcc <__mdiff+0x17c>
10012b74:	8017883a 	mov	r11,r16
10012b78:	59400017 	ldw	r5,0(r11)
10012b7c:	31800104 	addi	r6,r6,4
10012b80:	5ac00104 	addi	r11,r11,4
10012b84:	293fffcc 	andi	r4,r5,65535
10012b88:	20c7883a 	add	r3,r4,r3
10012b8c:	280ed43a 	srli	r7,r5,16
10012b90:	180bd43a 	srai	r5,r3,16
10012b94:	193fffcc 	andi	r4,r3,65535
10012b98:	3947883a 	add	r3,r7,r5
10012b9c:	180a943a 	slli	r5,r3,16
10012ba0:	1807d43a 	srai	r3,r3,16
10012ba4:	2908b03a 	or	r4,r5,r4
10012ba8:	313fff15 	stw	r4,-4(r6)
10012bac:	5a3ff236 	bltu	r11,r8,10012b78 <__alt_data_end+0xf8012b78>
10012bb0:	0406303a 	nor	r3,zero,r16
10012bb4:	1a07883a 	add	r3,r3,r8
10012bb8:	1806d0ba 	srli	r3,r3,2
10012bbc:	18c00044 	addi	r3,r3,1
10012bc0:	18c7883a 	add	r3,r3,r3
10012bc4:	18c7883a 	add	r3,r3,r3
10012bc8:	50d5883a 	add	r10,r10,r3
10012bcc:	50ffff04 	addi	r3,r10,-4
10012bd0:	2000041e 	bne	r4,zero,10012be4 <__mdiff+0x194>
10012bd4:	18ffff04 	addi	r3,r3,-4
10012bd8:	19000017 	ldw	r4,0(r3)
10012bdc:	4a7fffc4 	addi	r9,r9,-1
10012be0:	203ffc26 	beq	r4,zero,10012bd4 <__alt_data_end+0xf8012bd4>
10012be4:	12400415 	stw	r9,16(r2)
10012be8:	dfc00517 	ldw	ra,20(sp)
10012bec:	dd000417 	ldw	r20,16(sp)
10012bf0:	dcc00317 	ldw	r19,12(sp)
10012bf4:	dc800217 	ldw	r18,8(sp)
10012bf8:	dc400117 	ldw	r17,4(sp)
10012bfc:	dc000017 	ldw	r16,0(sp)
10012c00:	dec00604 	addi	sp,sp,24
10012c04:	f800283a 	ret
10012c08:	000b883a 	mov	r5,zero
10012c0c:	001206c0 	call	1001206c <_Balloc>
10012c10:	00c00044 	movi	r3,1
10012c14:	10c00415 	stw	r3,16(r2)
10012c18:	10000515 	stw	zero,20(r2)
10012c1c:	003ff206 	br	10012be8 <__alt_data_end+0xf8012be8>
10012c20:	8023883a 	mov	r17,r16
10012c24:	0029883a 	mov	r20,zero
10012c28:	4021883a 	mov	r16,r8
10012c2c:	003fad06 	br	10012ae4 <__alt_data_end+0xf8012ae4>
10012c30:	9005883a 	mov	r2,r18
10012c34:	94400504 	addi	r17,r18,20
10012c38:	9c000504 	addi	r16,r19,20
10012c3c:	9825883a 	mov	r18,r19
10012c40:	05000044 	movi	r20,1
10012c44:	1027883a 	mov	r19,r2
10012c48:	003fa606 	br	10012ae4 <__alt_data_end+0xf8012ae4>

10012c4c <__ulp>:
10012c4c:	295ffc2c 	andhi	r5,r5,32752
10012c50:	00bf3034 	movhi	r2,64704
10012c54:	2887883a 	add	r3,r5,r2
10012c58:	00c0020e 	bge	zero,r3,10012c64 <__ulp+0x18>
10012c5c:	0005883a 	mov	r2,zero
10012c60:	f800283a 	ret
10012c64:	00c7c83a 	sub	r3,zero,r3
10012c68:	1807d53a 	srai	r3,r3,20
10012c6c:	008004c4 	movi	r2,19
10012c70:	10c00b0e 	bge	r2,r3,10012ca0 <__ulp+0x54>
10012c74:	18bffb04 	addi	r2,r3,-20
10012c78:	01000784 	movi	r4,30
10012c7c:	0007883a 	mov	r3,zero
10012c80:	20800516 	blt	r4,r2,10012c98 <__ulp+0x4c>
10012c84:	010007c4 	movi	r4,31
10012c88:	2089c83a 	sub	r4,r4,r2
10012c8c:	00800044 	movi	r2,1
10012c90:	1104983a 	sll	r2,r2,r4
10012c94:	f800283a 	ret
10012c98:	00800044 	movi	r2,1
10012c9c:	f800283a 	ret
10012ca0:	01400234 	movhi	r5,8
10012ca4:	28c7d83a 	sra	r3,r5,r3
10012ca8:	0005883a 	mov	r2,zero
10012cac:	f800283a 	ret

10012cb0 <__b2d>:
10012cb0:	defffa04 	addi	sp,sp,-24
10012cb4:	dc000015 	stw	r16,0(sp)
10012cb8:	24000417 	ldw	r16,16(r4)
10012cbc:	dc400115 	stw	r17,4(sp)
10012cc0:	24400504 	addi	r17,r4,20
10012cc4:	8421883a 	add	r16,r16,r16
10012cc8:	8421883a 	add	r16,r16,r16
10012ccc:	8c21883a 	add	r16,r17,r16
10012cd0:	dc800215 	stw	r18,8(sp)
10012cd4:	84bfff17 	ldw	r18,-4(r16)
10012cd8:	dd000415 	stw	r20,16(sp)
10012cdc:	dcc00315 	stw	r19,12(sp)
10012ce0:	9009883a 	mov	r4,r18
10012ce4:	2829883a 	mov	r20,r5
10012ce8:	dfc00515 	stw	ra,20(sp)
10012cec:	00123880 	call	10012388 <__hi0bits>
10012cf0:	00c00804 	movi	r3,32
10012cf4:	1889c83a 	sub	r4,r3,r2
10012cf8:	a1000015 	stw	r4,0(r20)
10012cfc:	01000284 	movi	r4,10
10012d00:	84ffff04 	addi	r19,r16,-4
10012d04:	20801216 	blt	r4,r2,10012d50 <__b2d+0xa0>
10012d08:	018002c4 	movi	r6,11
10012d0c:	308dc83a 	sub	r6,r6,r2
10012d10:	9186d83a 	srl	r3,r18,r6
10012d14:	18cffc34 	orhi	r3,r3,16368
10012d18:	8cc0212e 	bgeu	r17,r19,10012da0 <__b2d+0xf0>
10012d1c:	813ffe17 	ldw	r4,-8(r16)
10012d20:	218cd83a 	srl	r6,r4,r6
10012d24:	10800544 	addi	r2,r2,21
10012d28:	9084983a 	sll	r2,r18,r2
10012d2c:	1184b03a 	or	r2,r2,r6
10012d30:	dfc00517 	ldw	ra,20(sp)
10012d34:	dd000417 	ldw	r20,16(sp)
10012d38:	dcc00317 	ldw	r19,12(sp)
10012d3c:	dc800217 	ldw	r18,8(sp)
10012d40:	dc400117 	ldw	r17,4(sp)
10012d44:	dc000017 	ldw	r16,0(sp)
10012d48:	dec00604 	addi	sp,sp,24
10012d4c:	f800283a 	ret
10012d50:	8cc00f2e 	bgeu	r17,r19,10012d90 <__b2d+0xe0>
10012d54:	117ffd44 	addi	r5,r2,-11
10012d58:	80bffe17 	ldw	r2,-8(r16)
10012d5c:	28000e26 	beq	r5,zero,10012d98 <__b2d+0xe8>
10012d60:	1949c83a 	sub	r4,r3,r5
10012d64:	9164983a 	sll	r18,r18,r5
10012d68:	1106d83a 	srl	r3,r2,r4
10012d6c:	81bffe04 	addi	r6,r16,-8
10012d70:	948ffc34 	orhi	r18,r18,16368
10012d74:	90c6b03a 	or	r3,r18,r3
10012d78:	89800e2e 	bgeu	r17,r6,10012db4 <__b2d+0x104>
10012d7c:	81bffd17 	ldw	r6,-12(r16)
10012d80:	1144983a 	sll	r2,r2,r5
10012d84:	310ad83a 	srl	r5,r6,r4
10012d88:	2884b03a 	or	r2,r5,r2
10012d8c:	003fe806 	br	10012d30 <__alt_data_end+0xf8012d30>
10012d90:	10bffd44 	addi	r2,r2,-11
10012d94:	1000041e 	bne	r2,zero,10012da8 <__b2d+0xf8>
10012d98:	90cffc34 	orhi	r3,r18,16368
10012d9c:	003fe406 	br	10012d30 <__alt_data_end+0xf8012d30>
10012da0:	000d883a 	mov	r6,zero
10012da4:	003fdf06 	br	10012d24 <__alt_data_end+0xf8012d24>
10012da8:	90a4983a 	sll	r18,r18,r2
10012dac:	0005883a 	mov	r2,zero
10012db0:	003ff906 	br	10012d98 <__alt_data_end+0xf8012d98>
10012db4:	1144983a 	sll	r2,r2,r5
10012db8:	003fdd06 	br	10012d30 <__alt_data_end+0xf8012d30>

10012dbc <__d2b>:
10012dbc:	defff804 	addi	sp,sp,-32
10012dc0:	dc000215 	stw	r16,8(sp)
10012dc4:	3021883a 	mov	r16,r6
10012dc8:	dc400315 	stw	r17,12(sp)
10012dcc:	8022907a 	slli	r17,r16,1
10012dd0:	dd000615 	stw	r20,24(sp)
10012dd4:	2829883a 	mov	r20,r5
10012dd8:	01400044 	movi	r5,1
10012ddc:	dcc00515 	stw	r19,20(sp)
10012de0:	dc800415 	stw	r18,16(sp)
10012de4:	dfc00715 	stw	ra,28(sp)
10012de8:	3825883a 	mov	r18,r7
10012dec:	8822d57a 	srli	r17,r17,21
10012df0:	001206c0 	call	1001206c <_Balloc>
10012df4:	1027883a 	mov	r19,r2
10012df8:	00800434 	movhi	r2,16
10012dfc:	10bfffc4 	addi	r2,r2,-1
10012e00:	808c703a 	and	r6,r16,r2
10012e04:	88000126 	beq	r17,zero,10012e0c <__d2b+0x50>
10012e08:	31800434 	orhi	r6,r6,16
10012e0c:	d9800015 	stw	r6,0(sp)
10012e10:	a0002426 	beq	r20,zero,10012ea4 <__d2b+0xe8>
10012e14:	d9000104 	addi	r4,sp,4
10012e18:	dd000115 	stw	r20,4(sp)
10012e1c:	00123f00 	call	100123f0 <__lo0bits>
10012e20:	d8c00017 	ldw	r3,0(sp)
10012e24:	10002f1e 	bne	r2,zero,10012ee4 <__d2b+0x128>
10012e28:	d9000117 	ldw	r4,4(sp)
10012e2c:	99000515 	stw	r4,20(r19)
10012e30:	1821003a 	cmpeq	r16,r3,zero
10012e34:	01000084 	movi	r4,2
10012e38:	2421c83a 	sub	r16,r4,r16
10012e3c:	98c00615 	stw	r3,24(r19)
10012e40:	9c000415 	stw	r16,16(r19)
10012e44:	88001f1e 	bne	r17,zero,10012ec4 <__d2b+0x108>
10012e48:	10bef384 	addi	r2,r2,-1074
10012e4c:	90800015 	stw	r2,0(r18)
10012e50:	00900034 	movhi	r2,16384
10012e54:	10bfffc4 	addi	r2,r2,-1
10012e58:	8085883a 	add	r2,r16,r2
10012e5c:	1085883a 	add	r2,r2,r2
10012e60:	1085883a 	add	r2,r2,r2
10012e64:	9885883a 	add	r2,r19,r2
10012e68:	11000517 	ldw	r4,20(r2)
10012e6c:	8020917a 	slli	r16,r16,5
10012e70:	00123880 	call	10012388 <__hi0bits>
10012e74:	d8c00817 	ldw	r3,32(sp)
10012e78:	8085c83a 	sub	r2,r16,r2
10012e7c:	18800015 	stw	r2,0(r3)
10012e80:	9805883a 	mov	r2,r19
10012e84:	dfc00717 	ldw	ra,28(sp)
10012e88:	dd000617 	ldw	r20,24(sp)
10012e8c:	dcc00517 	ldw	r19,20(sp)
10012e90:	dc800417 	ldw	r18,16(sp)
10012e94:	dc400317 	ldw	r17,12(sp)
10012e98:	dc000217 	ldw	r16,8(sp)
10012e9c:	dec00804 	addi	sp,sp,32
10012ea0:	f800283a 	ret
10012ea4:	d809883a 	mov	r4,sp
10012ea8:	00123f00 	call	100123f0 <__lo0bits>
10012eac:	d8c00017 	ldw	r3,0(sp)
10012eb0:	04000044 	movi	r16,1
10012eb4:	9c000415 	stw	r16,16(r19)
10012eb8:	98c00515 	stw	r3,20(r19)
10012ebc:	10800804 	addi	r2,r2,32
10012ec0:	883fe126 	beq	r17,zero,10012e48 <__alt_data_end+0xf8012e48>
10012ec4:	00c00d44 	movi	r3,53
10012ec8:	8c7ef344 	addi	r17,r17,-1075
10012ecc:	88a3883a 	add	r17,r17,r2
10012ed0:	1885c83a 	sub	r2,r3,r2
10012ed4:	d8c00817 	ldw	r3,32(sp)
10012ed8:	94400015 	stw	r17,0(r18)
10012edc:	18800015 	stw	r2,0(r3)
10012ee0:	003fe706 	br	10012e80 <__alt_data_end+0xf8012e80>
10012ee4:	01000804 	movi	r4,32
10012ee8:	2089c83a 	sub	r4,r4,r2
10012eec:	1908983a 	sll	r4,r3,r4
10012ef0:	d9400117 	ldw	r5,4(sp)
10012ef4:	1886d83a 	srl	r3,r3,r2
10012ef8:	2148b03a 	or	r4,r4,r5
10012efc:	99000515 	stw	r4,20(r19)
10012f00:	d8c00015 	stw	r3,0(sp)
10012f04:	003fca06 	br	10012e30 <__alt_data_end+0xf8012e30>

10012f08 <__ratio>:
10012f08:	defff904 	addi	sp,sp,-28
10012f0c:	dc400315 	stw	r17,12(sp)
10012f10:	2823883a 	mov	r17,r5
10012f14:	d9400104 	addi	r5,sp,4
10012f18:	dfc00615 	stw	ra,24(sp)
10012f1c:	dcc00515 	stw	r19,20(sp)
10012f20:	dc800415 	stw	r18,16(sp)
10012f24:	2027883a 	mov	r19,r4
10012f28:	dc000215 	stw	r16,8(sp)
10012f2c:	0012cb00 	call	10012cb0 <__b2d>
10012f30:	d80b883a 	mov	r5,sp
10012f34:	8809883a 	mov	r4,r17
10012f38:	1025883a 	mov	r18,r2
10012f3c:	1821883a 	mov	r16,r3
10012f40:	0012cb00 	call	10012cb0 <__b2d>
10012f44:	8a000417 	ldw	r8,16(r17)
10012f48:	99000417 	ldw	r4,16(r19)
10012f4c:	d9400117 	ldw	r5,4(sp)
10012f50:	2209c83a 	sub	r4,r4,r8
10012f54:	2010917a 	slli	r8,r4,5
10012f58:	d9000017 	ldw	r4,0(sp)
10012f5c:	2909c83a 	sub	r4,r5,r4
10012f60:	4109883a 	add	r4,r8,r4
10012f64:	01000e0e 	bge	zero,r4,10012fa0 <__ratio+0x98>
10012f68:	2008953a 	slli	r4,r4,20
10012f6c:	2421883a 	add	r16,r4,r16
10012f70:	100d883a 	mov	r6,r2
10012f74:	180f883a 	mov	r7,r3
10012f78:	9009883a 	mov	r4,r18
10012f7c:	800b883a 	mov	r5,r16
10012f80:	0009e1c0 	call	10009e1c <__divdf3>
10012f84:	dfc00617 	ldw	ra,24(sp)
10012f88:	dcc00517 	ldw	r19,20(sp)
10012f8c:	dc800417 	ldw	r18,16(sp)
10012f90:	dc400317 	ldw	r17,12(sp)
10012f94:	dc000217 	ldw	r16,8(sp)
10012f98:	dec00704 	addi	sp,sp,28
10012f9c:	f800283a 	ret
10012fa0:	2008953a 	slli	r4,r4,20
10012fa4:	1907c83a 	sub	r3,r3,r4
10012fa8:	003ff106 	br	10012f70 <__alt_data_end+0xf8012f70>

10012fac <_mprec_log10>:
10012fac:	defffe04 	addi	sp,sp,-8
10012fb0:	dc000015 	stw	r16,0(sp)
10012fb4:	dfc00115 	stw	ra,4(sp)
10012fb8:	008005c4 	movi	r2,23
10012fbc:	2021883a 	mov	r16,r4
10012fc0:	11000d0e 	bge	r2,r4,10012ff8 <_mprec_log10+0x4c>
10012fc4:	0005883a 	mov	r2,zero
10012fc8:	00cffc34 	movhi	r3,16368
10012fcc:	843fffc4 	addi	r16,r16,-1
10012fd0:	000d883a 	mov	r6,zero
10012fd4:	01d00934 	movhi	r7,16420
10012fd8:	1009883a 	mov	r4,r2
10012fdc:	180b883a 	mov	r5,r3
10012fe0:	000a9500 	call	1000a950 <__muldf3>
10012fe4:	803ff91e 	bne	r16,zero,10012fcc <__alt_data_end+0xf8012fcc>
10012fe8:	dfc00117 	ldw	ra,4(sp)
10012fec:	dc000017 	ldw	r16,0(sp)
10012ff0:	dec00204 	addi	sp,sp,8
10012ff4:	f800283a 	ret
10012ff8:	202090fa 	slli	r16,r4,3
10012ffc:	008400b4 	movhi	r2,4098
10013000:	10a78e04 	addi	r2,r2,-25032
10013004:	1421883a 	add	r16,r2,r16
10013008:	80800017 	ldw	r2,0(r16)
1001300c:	80c00117 	ldw	r3,4(r16)
10013010:	dfc00117 	ldw	ra,4(sp)
10013014:	dc000017 	ldw	r16,0(sp)
10013018:	dec00204 	addi	sp,sp,8
1001301c:	f800283a 	ret

10013020 <__copybits>:
10013020:	297fffc4 	addi	r5,r5,-1
10013024:	280fd17a 	srai	r7,r5,5
10013028:	30c00417 	ldw	r3,16(r6)
1001302c:	30800504 	addi	r2,r6,20
10013030:	39c00044 	addi	r7,r7,1
10013034:	18c7883a 	add	r3,r3,r3
10013038:	39cf883a 	add	r7,r7,r7
1001303c:	18c7883a 	add	r3,r3,r3
10013040:	39cf883a 	add	r7,r7,r7
10013044:	10c7883a 	add	r3,r2,r3
10013048:	21cf883a 	add	r7,r4,r7
1001304c:	10c00d2e 	bgeu	r2,r3,10013084 <__copybits+0x64>
10013050:	200b883a 	mov	r5,r4
10013054:	12000017 	ldw	r8,0(r2)
10013058:	29400104 	addi	r5,r5,4
1001305c:	10800104 	addi	r2,r2,4
10013060:	2a3fff15 	stw	r8,-4(r5)
10013064:	10fffb36 	bltu	r2,r3,10013054 <__alt_data_end+0xf8013054>
10013068:	1985c83a 	sub	r2,r3,r6
1001306c:	10bffac4 	addi	r2,r2,-21
10013070:	1004d0ba 	srli	r2,r2,2
10013074:	10800044 	addi	r2,r2,1
10013078:	1085883a 	add	r2,r2,r2
1001307c:	1085883a 	add	r2,r2,r2
10013080:	2089883a 	add	r4,r4,r2
10013084:	21c0032e 	bgeu	r4,r7,10013094 <__copybits+0x74>
10013088:	20000015 	stw	zero,0(r4)
1001308c:	21000104 	addi	r4,r4,4
10013090:	21fffd36 	bltu	r4,r7,10013088 <__alt_data_end+0xf8013088>
10013094:	f800283a 	ret

10013098 <__any_on>:
10013098:	20c00417 	ldw	r3,16(r4)
1001309c:	2805d17a 	srai	r2,r5,5
100130a0:	21000504 	addi	r4,r4,20
100130a4:	18800d0e 	bge	r3,r2,100130dc <__any_on+0x44>
100130a8:	18c7883a 	add	r3,r3,r3
100130ac:	18c7883a 	add	r3,r3,r3
100130b0:	20c7883a 	add	r3,r4,r3
100130b4:	20c0192e 	bgeu	r4,r3,1001311c <__any_on+0x84>
100130b8:	18bfff17 	ldw	r2,-4(r3)
100130bc:	18ffff04 	addi	r3,r3,-4
100130c0:	1000041e 	bne	r2,zero,100130d4 <__any_on+0x3c>
100130c4:	20c0142e 	bgeu	r4,r3,10013118 <__any_on+0x80>
100130c8:	18ffff04 	addi	r3,r3,-4
100130cc:	19400017 	ldw	r5,0(r3)
100130d0:	283ffc26 	beq	r5,zero,100130c4 <__alt_data_end+0xf80130c4>
100130d4:	00800044 	movi	r2,1
100130d8:	f800283a 	ret
100130dc:	10c00a0e 	bge	r2,r3,10013108 <__any_on+0x70>
100130e0:	1085883a 	add	r2,r2,r2
100130e4:	1085883a 	add	r2,r2,r2
100130e8:	294007cc 	andi	r5,r5,31
100130ec:	2087883a 	add	r3,r4,r2
100130f0:	283ff026 	beq	r5,zero,100130b4 <__alt_data_end+0xf80130b4>
100130f4:	19800017 	ldw	r6,0(r3)
100130f8:	3144d83a 	srl	r2,r6,r5
100130fc:	114a983a 	sll	r5,r2,r5
10013100:	317ff41e 	bne	r6,r5,100130d4 <__alt_data_end+0xf80130d4>
10013104:	003feb06 	br	100130b4 <__alt_data_end+0xf80130b4>
10013108:	1085883a 	add	r2,r2,r2
1001310c:	1085883a 	add	r2,r2,r2
10013110:	2087883a 	add	r3,r4,r2
10013114:	003fe706 	br	100130b4 <__alt_data_end+0xf80130b4>
10013118:	f800283a 	ret
1001311c:	0005883a 	mov	r2,zero
10013120:	f800283a 	ret

10013124 <_realloc_r>:
10013124:	defff604 	addi	sp,sp,-40
10013128:	dc800215 	stw	r18,8(sp)
1001312c:	dfc00915 	stw	ra,36(sp)
10013130:	df000815 	stw	fp,32(sp)
10013134:	ddc00715 	stw	r23,28(sp)
10013138:	dd800615 	stw	r22,24(sp)
1001313c:	dd400515 	stw	r21,20(sp)
10013140:	dd000415 	stw	r20,16(sp)
10013144:	dcc00315 	stw	r19,12(sp)
10013148:	dc400115 	stw	r17,4(sp)
1001314c:	dc000015 	stw	r16,0(sp)
10013150:	3025883a 	mov	r18,r6
10013154:	2800b726 	beq	r5,zero,10013434 <_realloc_r+0x310>
10013158:	282b883a 	mov	r21,r5
1001315c:	2029883a 	mov	r20,r4
10013160:	0016e980 	call	10016e98 <__malloc_lock>
10013164:	a8bfff17 	ldw	r2,-4(r21)
10013168:	043fff04 	movi	r16,-4
1001316c:	90c002c4 	addi	r3,r18,11
10013170:	01000584 	movi	r4,22
10013174:	acfffe04 	addi	r19,r21,-8
10013178:	1420703a 	and	r16,r2,r16
1001317c:	20c0332e 	bgeu	r4,r3,1001324c <_realloc_r+0x128>
10013180:	047ffe04 	movi	r17,-8
10013184:	1c62703a 	and	r17,r3,r17
10013188:	8807883a 	mov	r3,r17
1001318c:	88005816 	blt	r17,zero,100132f0 <_realloc_r+0x1cc>
10013190:	8c805736 	bltu	r17,r18,100132f0 <_realloc_r+0x1cc>
10013194:	80c0300e 	bge	r16,r3,10013258 <_realloc_r+0x134>
10013198:	070400b4 	movhi	fp,4098
1001319c:	e729ba04 	addi	fp,fp,-22808
100131a0:	e1c00217 	ldw	r7,8(fp)
100131a4:	9c09883a 	add	r4,r19,r16
100131a8:	22000117 	ldw	r8,4(r4)
100131ac:	21c06326 	beq	r4,r7,1001333c <_realloc_r+0x218>
100131b0:	017fff84 	movi	r5,-2
100131b4:	414a703a 	and	r5,r8,r5
100131b8:	214b883a 	add	r5,r4,r5
100131bc:	29800117 	ldw	r6,4(r5)
100131c0:	3180004c 	andi	r6,r6,1
100131c4:	30003f26 	beq	r6,zero,100132c4 <_realloc_r+0x1a0>
100131c8:	1080004c 	andi	r2,r2,1
100131cc:	10008326 	beq	r2,zero,100133dc <_realloc_r+0x2b8>
100131d0:	900b883a 	mov	r5,r18
100131d4:	a009883a 	mov	r4,r20
100131d8:	00113b00 	call	100113b0 <_malloc_r>
100131dc:	1025883a 	mov	r18,r2
100131e0:	10011e26 	beq	r2,zero,1001365c <_realloc_r+0x538>
100131e4:	a93fff17 	ldw	r4,-4(r21)
100131e8:	10fffe04 	addi	r3,r2,-8
100131ec:	00bfff84 	movi	r2,-2
100131f0:	2084703a 	and	r2,r4,r2
100131f4:	9885883a 	add	r2,r19,r2
100131f8:	1880ee26 	beq	r3,r2,100135b4 <_realloc_r+0x490>
100131fc:	81bfff04 	addi	r6,r16,-4
10013200:	00800904 	movi	r2,36
10013204:	1180b836 	bltu	r2,r6,100134e8 <_realloc_r+0x3c4>
10013208:	00c004c4 	movi	r3,19
1001320c:	19809636 	bltu	r3,r6,10013468 <_realloc_r+0x344>
10013210:	9005883a 	mov	r2,r18
10013214:	a807883a 	mov	r3,r21
10013218:	19000017 	ldw	r4,0(r3)
1001321c:	11000015 	stw	r4,0(r2)
10013220:	19000117 	ldw	r4,4(r3)
10013224:	11000115 	stw	r4,4(r2)
10013228:	18c00217 	ldw	r3,8(r3)
1001322c:	10c00215 	stw	r3,8(r2)
10013230:	a80b883a 	mov	r5,r21
10013234:	a009883a 	mov	r4,r20
10013238:	001075c0 	call	1001075c <_free_r>
1001323c:	a009883a 	mov	r4,r20
10013240:	0016ebc0 	call	10016ebc <__malloc_unlock>
10013244:	9005883a 	mov	r2,r18
10013248:	00001206 	br	10013294 <_realloc_r+0x170>
1001324c:	00c00404 	movi	r3,16
10013250:	1823883a 	mov	r17,r3
10013254:	003fce06 	br	10013190 <__alt_data_end+0xf8013190>
10013258:	a825883a 	mov	r18,r21
1001325c:	8445c83a 	sub	r2,r16,r17
10013260:	00c003c4 	movi	r3,15
10013264:	18802636 	bltu	r3,r2,10013300 <_realloc_r+0x1dc>
10013268:	99800117 	ldw	r6,4(r19)
1001326c:	9c07883a 	add	r3,r19,r16
10013270:	3180004c 	andi	r6,r6,1
10013274:	3420b03a 	or	r16,r6,r16
10013278:	9c000115 	stw	r16,4(r19)
1001327c:	18800117 	ldw	r2,4(r3)
10013280:	10800054 	ori	r2,r2,1
10013284:	18800115 	stw	r2,4(r3)
10013288:	a009883a 	mov	r4,r20
1001328c:	0016ebc0 	call	10016ebc <__malloc_unlock>
10013290:	9005883a 	mov	r2,r18
10013294:	dfc00917 	ldw	ra,36(sp)
10013298:	df000817 	ldw	fp,32(sp)
1001329c:	ddc00717 	ldw	r23,28(sp)
100132a0:	dd800617 	ldw	r22,24(sp)
100132a4:	dd400517 	ldw	r21,20(sp)
100132a8:	dd000417 	ldw	r20,16(sp)
100132ac:	dcc00317 	ldw	r19,12(sp)
100132b0:	dc800217 	ldw	r18,8(sp)
100132b4:	dc400117 	ldw	r17,4(sp)
100132b8:	dc000017 	ldw	r16,0(sp)
100132bc:	dec00a04 	addi	sp,sp,40
100132c0:	f800283a 	ret
100132c4:	017fff04 	movi	r5,-4
100132c8:	414a703a 	and	r5,r8,r5
100132cc:	814d883a 	add	r6,r16,r5
100132d0:	30c01f16 	blt	r6,r3,10013350 <_realloc_r+0x22c>
100132d4:	20800317 	ldw	r2,12(r4)
100132d8:	20c00217 	ldw	r3,8(r4)
100132dc:	a825883a 	mov	r18,r21
100132e0:	3021883a 	mov	r16,r6
100132e4:	18800315 	stw	r2,12(r3)
100132e8:	10c00215 	stw	r3,8(r2)
100132ec:	003fdb06 	br	1001325c <__alt_data_end+0xf801325c>
100132f0:	00800304 	movi	r2,12
100132f4:	a0800015 	stw	r2,0(r20)
100132f8:	0005883a 	mov	r2,zero
100132fc:	003fe506 	br	10013294 <__alt_data_end+0xf8013294>
10013300:	98c00117 	ldw	r3,4(r19)
10013304:	9c4b883a 	add	r5,r19,r17
10013308:	11000054 	ori	r4,r2,1
1001330c:	18c0004c 	andi	r3,r3,1
10013310:	1c62b03a 	or	r17,r3,r17
10013314:	9c400115 	stw	r17,4(r19)
10013318:	29000115 	stw	r4,4(r5)
1001331c:	2885883a 	add	r2,r5,r2
10013320:	10c00117 	ldw	r3,4(r2)
10013324:	29400204 	addi	r5,r5,8
10013328:	a009883a 	mov	r4,r20
1001332c:	18c00054 	ori	r3,r3,1
10013330:	10c00115 	stw	r3,4(r2)
10013334:	001075c0 	call	1001075c <_free_r>
10013338:	003fd306 	br	10013288 <__alt_data_end+0xf8013288>
1001333c:	017fff04 	movi	r5,-4
10013340:	414a703a 	and	r5,r8,r5
10013344:	89800404 	addi	r6,r17,16
10013348:	8151883a 	add	r8,r16,r5
1001334c:	4180590e 	bge	r8,r6,100134b4 <_realloc_r+0x390>
10013350:	1080004c 	andi	r2,r2,1
10013354:	103f9e1e 	bne	r2,zero,100131d0 <__alt_data_end+0xf80131d0>
10013358:	adbffe17 	ldw	r22,-8(r21)
1001335c:	00bfff04 	movi	r2,-4
10013360:	9dadc83a 	sub	r22,r19,r22
10013364:	b1800117 	ldw	r6,4(r22)
10013368:	3084703a 	and	r2,r6,r2
1001336c:	20002026 	beq	r4,zero,100133f0 <_realloc_r+0x2cc>
10013370:	80af883a 	add	r23,r16,r2
10013374:	b96f883a 	add	r23,r23,r5
10013378:	21c05f26 	beq	r4,r7,100134f8 <_realloc_r+0x3d4>
1001337c:	b8c01c16 	blt	r23,r3,100133f0 <_realloc_r+0x2cc>
10013380:	20800317 	ldw	r2,12(r4)
10013384:	20c00217 	ldw	r3,8(r4)
10013388:	81bfff04 	addi	r6,r16,-4
1001338c:	01000904 	movi	r4,36
10013390:	18800315 	stw	r2,12(r3)
10013394:	10c00215 	stw	r3,8(r2)
10013398:	b0c00217 	ldw	r3,8(r22)
1001339c:	b0800317 	ldw	r2,12(r22)
100133a0:	b4800204 	addi	r18,r22,8
100133a4:	18800315 	stw	r2,12(r3)
100133a8:	10c00215 	stw	r3,8(r2)
100133ac:	21801b36 	bltu	r4,r6,1001341c <_realloc_r+0x2f8>
100133b0:	008004c4 	movi	r2,19
100133b4:	1180352e 	bgeu	r2,r6,1001348c <_realloc_r+0x368>
100133b8:	a8800017 	ldw	r2,0(r21)
100133bc:	b0800215 	stw	r2,8(r22)
100133c0:	a8800117 	ldw	r2,4(r21)
100133c4:	b0800315 	stw	r2,12(r22)
100133c8:	008006c4 	movi	r2,27
100133cc:	11807f36 	bltu	r2,r6,100135cc <_realloc_r+0x4a8>
100133d0:	b0800404 	addi	r2,r22,16
100133d4:	ad400204 	addi	r21,r21,8
100133d8:	00002d06 	br	10013490 <_realloc_r+0x36c>
100133dc:	adbffe17 	ldw	r22,-8(r21)
100133e0:	00bfff04 	movi	r2,-4
100133e4:	9dadc83a 	sub	r22,r19,r22
100133e8:	b1000117 	ldw	r4,4(r22)
100133ec:	2084703a 	and	r2,r4,r2
100133f0:	b03f7726 	beq	r22,zero,100131d0 <__alt_data_end+0xf80131d0>
100133f4:	80af883a 	add	r23,r16,r2
100133f8:	b8ff7516 	blt	r23,r3,100131d0 <__alt_data_end+0xf80131d0>
100133fc:	b0800317 	ldw	r2,12(r22)
10013400:	b0c00217 	ldw	r3,8(r22)
10013404:	81bfff04 	addi	r6,r16,-4
10013408:	01000904 	movi	r4,36
1001340c:	18800315 	stw	r2,12(r3)
10013410:	10c00215 	stw	r3,8(r2)
10013414:	b4800204 	addi	r18,r22,8
10013418:	21bfe52e 	bgeu	r4,r6,100133b0 <__alt_data_end+0xf80133b0>
1001341c:	a80b883a 	mov	r5,r21
10013420:	9009883a 	mov	r4,r18
10013424:	0011de80 	call	10011de8 <memmove>
10013428:	b821883a 	mov	r16,r23
1001342c:	b027883a 	mov	r19,r22
10013430:	003f8a06 	br	1001325c <__alt_data_end+0xf801325c>
10013434:	300b883a 	mov	r5,r6
10013438:	dfc00917 	ldw	ra,36(sp)
1001343c:	df000817 	ldw	fp,32(sp)
10013440:	ddc00717 	ldw	r23,28(sp)
10013444:	dd800617 	ldw	r22,24(sp)
10013448:	dd400517 	ldw	r21,20(sp)
1001344c:	dd000417 	ldw	r20,16(sp)
10013450:	dcc00317 	ldw	r19,12(sp)
10013454:	dc800217 	ldw	r18,8(sp)
10013458:	dc400117 	ldw	r17,4(sp)
1001345c:	dc000017 	ldw	r16,0(sp)
10013460:	dec00a04 	addi	sp,sp,40
10013464:	00113b01 	jmpi	100113b0 <_malloc_r>
10013468:	a8c00017 	ldw	r3,0(r21)
1001346c:	90c00015 	stw	r3,0(r18)
10013470:	a8c00117 	ldw	r3,4(r21)
10013474:	90c00115 	stw	r3,4(r18)
10013478:	00c006c4 	movi	r3,27
1001347c:	19804536 	bltu	r3,r6,10013594 <_realloc_r+0x470>
10013480:	90800204 	addi	r2,r18,8
10013484:	a8c00204 	addi	r3,r21,8
10013488:	003f6306 	br	10013218 <__alt_data_end+0xf8013218>
1001348c:	9005883a 	mov	r2,r18
10013490:	a8c00017 	ldw	r3,0(r21)
10013494:	b821883a 	mov	r16,r23
10013498:	b027883a 	mov	r19,r22
1001349c:	10c00015 	stw	r3,0(r2)
100134a0:	a8c00117 	ldw	r3,4(r21)
100134a4:	10c00115 	stw	r3,4(r2)
100134a8:	a8c00217 	ldw	r3,8(r21)
100134ac:	10c00215 	stw	r3,8(r2)
100134b0:	003f6a06 	br	1001325c <__alt_data_end+0xf801325c>
100134b4:	9c67883a 	add	r19,r19,r17
100134b8:	4445c83a 	sub	r2,r8,r17
100134bc:	e4c00215 	stw	r19,8(fp)
100134c0:	10800054 	ori	r2,r2,1
100134c4:	98800115 	stw	r2,4(r19)
100134c8:	a8bfff17 	ldw	r2,-4(r21)
100134cc:	a009883a 	mov	r4,r20
100134d0:	1080004c 	andi	r2,r2,1
100134d4:	1462b03a 	or	r17,r2,r17
100134d8:	ac7fff15 	stw	r17,-4(r21)
100134dc:	0016ebc0 	call	10016ebc <__malloc_unlock>
100134e0:	a805883a 	mov	r2,r21
100134e4:	003f6b06 	br	10013294 <__alt_data_end+0xf8013294>
100134e8:	a80b883a 	mov	r5,r21
100134ec:	9009883a 	mov	r4,r18
100134f0:	0011de80 	call	10011de8 <memmove>
100134f4:	003f4e06 	br	10013230 <__alt_data_end+0xf8013230>
100134f8:	89000404 	addi	r4,r17,16
100134fc:	b93fbc16 	blt	r23,r4,100133f0 <__alt_data_end+0xf80133f0>
10013500:	b0800317 	ldw	r2,12(r22)
10013504:	b0c00217 	ldw	r3,8(r22)
10013508:	81bfff04 	addi	r6,r16,-4
1001350c:	01000904 	movi	r4,36
10013510:	18800315 	stw	r2,12(r3)
10013514:	10c00215 	stw	r3,8(r2)
10013518:	b4800204 	addi	r18,r22,8
1001351c:	21804336 	bltu	r4,r6,1001362c <_realloc_r+0x508>
10013520:	008004c4 	movi	r2,19
10013524:	11803f2e 	bgeu	r2,r6,10013624 <_realloc_r+0x500>
10013528:	a8800017 	ldw	r2,0(r21)
1001352c:	b0800215 	stw	r2,8(r22)
10013530:	a8800117 	ldw	r2,4(r21)
10013534:	b0800315 	stw	r2,12(r22)
10013538:	008006c4 	movi	r2,27
1001353c:	11803f36 	bltu	r2,r6,1001363c <_realloc_r+0x518>
10013540:	b0800404 	addi	r2,r22,16
10013544:	ad400204 	addi	r21,r21,8
10013548:	a8c00017 	ldw	r3,0(r21)
1001354c:	10c00015 	stw	r3,0(r2)
10013550:	a8c00117 	ldw	r3,4(r21)
10013554:	10c00115 	stw	r3,4(r2)
10013558:	a8c00217 	ldw	r3,8(r21)
1001355c:	10c00215 	stw	r3,8(r2)
10013560:	b447883a 	add	r3,r22,r17
10013564:	bc45c83a 	sub	r2,r23,r17
10013568:	e0c00215 	stw	r3,8(fp)
1001356c:	10800054 	ori	r2,r2,1
10013570:	18800115 	stw	r2,4(r3)
10013574:	b0800117 	ldw	r2,4(r22)
10013578:	a009883a 	mov	r4,r20
1001357c:	1080004c 	andi	r2,r2,1
10013580:	1462b03a 	or	r17,r2,r17
10013584:	b4400115 	stw	r17,4(r22)
10013588:	0016ebc0 	call	10016ebc <__malloc_unlock>
1001358c:	9005883a 	mov	r2,r18
10013590:	003f4006 	br	10013294 <__alt_data_end+0xf8013294>
10013594:	a8c00217 	ldw	r3,8(r21)
10013598:	90c00215 	stw	r3,8(r18)
1001359c:	a8c00317 	ldw	r3,12(r21)
100135a0:	90c00315 	stw	r3,12(r18)
100135a4:	30801126 	beq	r6,r2,100135ec <_realloc_r+0x4c8>
100135a8:	90800404 	addi	r2,r18,16
100135ac:	a8c00404 	addi	r3,r21,16
100135b0:	003f1906 	br	10013218 <__alt_data_end+0xf8013218>
100135b4:	90ffff17 	ldw	r3,-4(r18)
100135b8:	00bfff04 	movi	r2,-4
100135bc:	a825883a 	mov	r18,r21
100135c0:	1884703a 	and	r2,r3,r2
100135c4:	80a1883a 	add	r16,r16,r2
100135c8:	003f2406 	br	1001325c <__alt_data_end+0xf801325c>
100135cc:	a8800217 	ldw	r2,8(r21)
100135d0:	b0800415 	stw	r2,16(r22)
100135d4:	a8800317 	ldw	r2,12(r21)
100135d8:	b0800515 	stw	r2,20(r22)
100135dc:	31000a26 	beq	r6,r4,10013608 <_realloc_r+0x4e4>
100135e0:	b0800604 	addi	r2,r22,24
100135e4:	ad400404 	addi	r21,r21,16
100135e8:	003fa906 	br	10013490 <__alt_data_end+0xf8013490>
100135ec:	a9000417 	ldw	r4,16(r21)
100135f0:	90800604 	addi	r2,r18,24
100135f4:	a8c00604 	addi	r3,r21,24
100135f8:	91000415 	stw	r4,16(r18)
100135fc:	a9000517 	ldw	r4,20(r21)
10013600:	91000515 	stw	r4,20(r18)
10013604:	003f0406 	br	10013218 <__alt_data_end+0xf8013218>
10013608:	a8c00417 	ldw	r3,16(r21)
1001360c:	ad400604 	addi	r21,r21,24
10013610:	b0800804 	addi	r2,r22,32
10013614:	b0c00615 	stw	r3,24(r22)
10013618:	a8ffff17 	ldw	r3,-4(r21)
1001361c:	b0c00715 	stw	r3,28(r22)
10013620:	003f9b06 	br	10013490 <__alt_data_end+0xf8013490>
10013624:	9005883a 	mov	r2,r18
10013628:	003fc706 	br	10013548 <__alt_data_end+0xf8013548>
1001362c:	a80b883a 	mov	r5,r21
10013630:	9009883a 	mov	r4,r18
10013634:	0011de80 	call	10011de8 <memmove>
10013638:	003fc906 	br	10013560 <__alt_data_end+0xf8013560>
1001363c:	a8800217 	ldw	r2,8(r21)
10013640:	b0800415 	stw	r2,16(r22)
10013644:	a8800317 	ldw	r2,12(r21)
10013648:	b0800515 	stw	r2,20(r22)
1001364c:	31000726 	beq	r6,r4,1001366c <_realloc_r+0x548>
10013650:	b0800604 	addi	r2,r22,24
10013654:	ad400404 	addi	r21,r21,16
10013658:	003fbb06 	br	10013548 <__alt_data_end+0xf8013548>
1001365c:	a009883a 	mov	r4,r20
10013660:	0016ebc0 	call	10016ebc <__malloc_unlock>
10013664:	0005883a 	mov	r2,zero
10013668:	003f0a06 	br	10013294 <__alt_data_end+0xf8013294>
1001366c:	a8c00417 	ldw	r3,16(r21)
10013670:	ad400604 	addi	r21,r21,24
10013674:	b0800804 	addi	r2,r22,32
10013678:	b0c00615 	stw	r3,24(r22)
1001367c:	a8ffff17 	ldw	r3,-4(r21)
10013680:	b0c00715 	stw	r3,28(r22)
10013684:	003fb006 	br	10013548 <__alt_data_end+0xf8013548>

10013688 <__fpclassifyd>:
10013688:	00a00034 	movhi	r2,32768
1001368c:	10bfffc4 	addi	r2,r2,-1
10013690:	2884703a 	and	r2,r5,r2
10013694:	10000726 	beq	r2,zero,100136b4 <__fpclassifyd+0x2c>
10013698:	00fffc34 	movhi	r3,65520
1001369c:	019ff834 	movhi	r6,32736
100136a0:	28c7883a 	add	r3,r5,r3
100136a4:	31bfffc4 	addi	r6,r6,-1
100136a8:	30c00536 	bltu	r6,r3,100136c0 <__fpclassifyd+0x38>
100136ac:	00800104 	movi	r2,4
100136b0:	f800283a 	ret
100136b4:	2000021e 	bne	r4,zero,100136c0 <__fpclassifyd+0x38>
100136b8:	00800084 	movi	r2,2
100136bc:	f800283a 	ret
100136c0:	00dffc34 	movhi	r3,32752
100136c4:	019ff834 	movhi	r6,32736
100136c8:	28cb883a 	add	r5,r5,r3
100136cc:	31bfffc4 	addi	r6,r6,-1
100136d0:	317ff62e 	bgeu	r6,r5,100136ac <__alt_data_end+0xf80136ac>
100136d4:	01400434 	movhi	r5,16
100136d8:	297fffc4 	addi	r5,r5,-1
100136dc:	28800236 	bltu	r5,r2,100136e8 <__fpclassifyd+0x60>
100136e0:	008000c4 	movi	r2,3
100136e4:	f800283a 	ret
100136e8:	10c00226 	beq	r2,r3,100136f4 <__fpclassifyd+0x6c>
100136ec:	0005883a 	mov	r2,zero
100136f0:	f800283a 	ret
100136f4:	2005003a 	cmpeq	r2,r4,zero
100136f8:	f800283a 	ret

100136fc <_sbrk_r>:
100136fc:	defffd04 	addi	sp,sp,-12
10013700:	dc000015 	stw	r16,0(sp)
10013704:	040400b4 	movhi	r16,4098
10013708:	dc400115 	stw	r17,4(sp)
1001370c:	8436d904 	addi	r16,r16,-9372
10013710:	2023883a 	mov	r17,r4
10013714:	2809883a 	mov	r4,r5
10013718:	dfc00215 	stw	ra,8(sp)
1001371c:	80000015 	stw	zero,0(r16)
10013720:	00170a40 	call	100170a4 <sbrk>
10013724:	00ffffc4 	movi	r3,-1
10013728:	10c00526 	beq	r2,r3,10013740 <_sbrk_r+0x44>
1001372c:	dfc00217 	ldw	ra,8(sp)
10013730:	dc400117 	ldw	r17,4(sp)
10013734:	dc000017 	ldw	r16,0(sp)
10013738:	dec00304 	addi	sp,sp,12
1001373c:	f800283a 	ret
10013740:	80c00017 	ldw	r3,0(r16)
10013744:	183ff926 	beq	r3,zero,1001372c <__alt_data_end+0xf801372c>
10013748:	88c00015 	stw	r3,0(r17)
1001374c:	003ff706 	br	1001372c <__alt_data_end+0xf801372c>

10013750 <__sread>:
10013750:	defffe04 	addi	sp,sp,-8
10013754:	dc000015 	stw	r16,0(sp)
10013758:	2821883a 	mov	r16,r5
1001375c:	2940038f 	ldh	r5,14(r5)
10013760:	dfc00115 	stw	ra,4(sp)
10013764:	001560c0 	call	1001560c <_read_r>
10013768:	10000716 	blt	r2,zero,10013788 <__sread+0x38>
1001376c:	80c01417 	ldw	r3,80(r16)
10013770:	1887883a 	add	r3,r3,r2
10013774:	80c01415 	stw	r3,80(r16)
10013778:	dfc00117 	ldw	ra,4(sp)
1001377c:	dc000017 	ldw	r16,0(sp)
10013780:	dec00204 	addi	sp,sp,8
10013784:	f800283a 	ret
10013788:	80c0030b 	ldhu	r3,12(r16)
1001378c:	18fbffcc 	andi	r3,r3,61439
10013790:	80c0030d 	sth	r3,12(r16)
10013794:	dfc00117 	ldw	ra,4(sp)
10013798:	dc000017 	ldw	r16,0(sp)
1001379c:	dec00204 	addi	sp,sp,8
100137a0:	f800283a 	ret

100137a4 <__seofread>:
100137a4:	0005883a 	mov	r2,zero
100137a8:	f800283a 	ret

100137ac <__swrite>:
100137ac:	2880030b 	ldhu	r2,12(r5)
100137b0:	defffb04 	addi	sp,sp,-20
100137b4:	dcc00315 	stw	r19,12(sp)
100137b8:	dc800215 	stw	r18,8(sp)
100137bc:	dc400115 	stw	r17,4(sp)
100137c0:	dc000015 	stw	r16,0(sp)
100137c4:	dfc00415 	stw	ra,16(sp)
100137c8:	10c0400c 	andi	r3,r2,256
100137cc:	2821883a 	mov	r16,r5
100137d0:	2023883a 	mov	r17,r4
100137d4:	3025883a 	mov	r18,r6
100137d8:	3827883a 	mov	r19,r7
100137dc:	18000526 	beq	r3,zero,100137f4 <__swrite+0x48>
100137e0:	2940038f 	ldh	r5,14(r5)
100137e4:	01c00084 	movi	r7,2
100137e8:	000d883a 	mov	r6,zero
100137ec:	00155ac0 	call	100155ac <_lseek_r>
100137f0:	8080030b 	ldhu	r2,12(r16)
100137f4:	8140038f 	ldh	r5,14(r16)
100137f8:	10bbffcc 	andi	r2,r2,61439
100137fc:	980f883a 	mov	r7,r19
10013800:	900d883a 	mov	r6,r18
10013804:	8809883a 	mov	r4,r17
10013808:	8080030d 	sth	r2,12(r16)
1001380c:	dfc00417 	ldw	ra,16(sp)
10013810:	dcc00317 	ldw	r19,12(sp)
10013814:	dc800217 	ldw	r18,8(sp)
10013818:	dc400117 	ldw	r17,4(sp)
1001381c:	dc000017 	ldw	r16,0(sp)
10013820:	dec00504 	addi	sp,sp,20
10013824:	00150601 	jmpi	10015060 <_write_r>

10013828 <__sseek>:
10013828:	defffe04 	addi	sp,sp,-8
1001382c:	dc000015 	stw	r16,0(sp)
10013830:	2821883a 	mov	r16,r5
10013834:	2940038f 	ldh	r5,14(r5)
10013838:	dfc00115 	stw	ra,4(sp)
1001383c:	00155ac0 	call	100155ac <_lseek_r>
10013840:	00ffffc4 	movi	r3,-1
10013844:	10c00826 	beq	r2,r3,10013868 <__sseek+0x40>
10013848:	80c0030b 	ldhu	r3,12(r16)
1001384c:	80801415 	stw	r2,80(r16)
10013850:	18c40014 	ori	r3,r3,4096
10013854:	80c0030d 	sth	r3,12(r16)
10013858:	dfc00117 	ldw	ra,4(sp)
1001385c:	dc000017 	ldw	r16,0(sp)
10013860:	dec00204 	addi	sp,sp,8
10013864:	f800283a 	ret
10013868:	80c0030b 	ldhu	r3,12(r16)
1001386c:	18fbffcc 	andi	r3,r3,61439
10013870:	80c0030d 	sth	r3,12(r16)
10013874:	dfc00117 	ldw	ra,4(sp)
10013878:	dc000017 	ldw	r16,0(sp)
1001387c:	dec00204 	addi	sp,sp,8
10013880:	f800283a 	ret

10013884 <__sclose>:
10013884:	2940038f 	ldh	r5,14(r5)
10013888:	00150c01 	jmpi	100150c0 <_close_r>

1001388c <strcmp>:
1001388c:	2144b03a 	or	r2,r4,r5
10013890:	108000cc 	andi	r2,r2,3
10013894:	1000171e 	bne	r2,zero,100138f4 <strcmp+0x68>
10013898:	20800017 	ldw	r2,0(r4)
1001389c:	28c00017 	ldw	r3,0(r5)
100138a0:	10c0141e 	bne	r2,r3,100138f4 <strcmp+0x68>
100138a4:	027fbff4 	movhi	r9,65279
100138a8:	4a7fbfc4 	addi	r9,r9,-257
100138ac:	0086303a 	nor	r3,zero,r2
100138b0:	02202074 	movhi	r8,32897
100138b4:	1245883a 	add	r2,r2,r9
100138b8:	42202004 	addi	r8,r8,-32640
100138bc:	10c4703a 	and	r2,r2,r3
100138c0:	1204703a 	and	r2,r2,r8
100138c4:	10000226 	beq	r2,zero,100138d0 <strcmp+0x44>
100138c8:	00002306 	br	10013958 <strcmp+0xcc>
100138cc:	1000221e 	bne	r2,zero,10013958 <strcmp+0xcc>
100138d0:	21000104 	addi	r4,r4,4
100138d4:	20c00017 	ldw	r3,0(r4)
100138d8:	29400104 	addi	r5,r5,4
100138dc:	29800017 	ldw	r6,0(r5)
100138e0:	1a4f883a 	add	r7,r3,r9
100138e4:	00c4303a 	nor	r2,zero,r3
100138e8:	3884703a 	and	r2,r7,r2
100138ec:	1204703a 	and	r2,r2,r8
100138f0:	19bff626 	beq	r3,r6,100138cc <__alt_data_end+0xf80138cc>
100138f4:	20800003 	ldbu	r2,0(r4)
100138f8:	10c03fcc 	andi	r3,r2,255
100138fc:	18c0201c 	xori	r3,r3,128
10013900:	18ffe004 	addi	r3,r3,-128
10013904:	18000c26 	beq	r3,zero,10013938 <strcmp+0xac>
10013908:	29800007 	ldb	r6,0(r5)
1001390c:	19800326 	beq	r3,r6,1001391c <strcmp+0x90>
10013910:	00001306 	br	10013960 <strcmp+0xd4>
10013914:	29800007 	ldb	r6,0(r5)
10013918:	11800b1e 	bne	r2,r6,10013948 <strcmp+0xbc>
1001391c:	21000044 	addi	r4,r4,1
10013920:	20c00003 	ldbu	r3,0(r4)
10013924:	29400044 	addi	r5,r5,1
10013928:	18803fcc 	andi	r2,r3,255
1001392c:	1080201c 	xori	r2,r2,128
10013930:	10bfe004 	addi	r2,r2,-128
10013934:	103ff71e 	bne	r2,zero,10013914 <__alt_data_end+0xf8013914>
10013938:	0007883a 	mov	r3,zero
1001393c:	28800003 	ldbu	r2,0(r5)
10013940:	1885c83a 	sub	r2,r3,r2
10013944:	f800283a 	ret
10013948:	28800003 	ldbu	r2,0(r5)
1001394c:	18c03fcc 	andi	r3,r3,255
10013950:	1885c83a 	sub	r2,r3,r2
10013954:	f800283a 	ret
10013958:	0005883a 	mov	r2,zero
1001395c:	f800283a 	ret
10013960:	10c03fcc 	andi	r3,r2,255
10013964:	003ff506 	br	1001393c <__alt_data_end+0xf801393c>

10013968 <__sprint_r.part.0>:
10013968:	28801917 	ldw	r2,100(r5)
1001396c:	defff604 	addi	sp,sp,-40
10013970:	dd400515 	stw	r21,20(sp)
10013974:	dfc00915 	stw	ra,36(sp)
10013978:	df000815 	stw	fp,32(sp)
1001397c:	ddc00715 	stw	r23,28(sp)
10013980:	dd800615 	stw	r22,24(sp)
10013984:	dd000415 	stw	r20,16(sp)
10013988:	dcc00315 	stw	r19,12(sp)
1001398c:	dc800215 	stw	r18,8(sp)
10013990:	dc400115 	stw	r17,4(sp)
10013994:	dc000015 	stw	r16,0(sp)
10013998:	1088000c 	andi	r2,r2,8192
1001399c:	302b883a 	mov	r21,r6
100139a0:	10002e26 	beq	r2,zero,10013a5c <__sprint_r.part.0+0xf4>
100139a4:	30800217 	ldw	r2,8(r6)
100139a8:	35800017 	ldw	r22,0(r6)
100139ac:	10002926 	beq	r2,zero,10013a54 <__sprint_r.part.0+0xec>
100139b0:	2827883a 	mov	r19,r5
100139b4:	2029883a 	mov	r20,r4
100139b8:	b5c00104 	addi	r23,r22,4
100139bc:	04bfffc4 	movi	r18,-1
100139c0:	bc400017 	ldw	r17,0(r23)
100139c4:	b4000017 	ldw	r16,0(r22)
100139c8:	0039883a 	mov	fp,zero
100139cc:	8822d0ba 	srli	r17,r17,2
100139d0:	8800031e 	bne	r17,zero,100139e0 <__sprint_r.part.0+0x78>
100139d4:	00001806 	br	10013a38 <__sprint_r.part.0+0xd0>
100139d8:	84000104 	addi	r16,r16,4
100139dc:	8f001526 	beq	r17,fp,10013a34 <__sprint_r.part.0+0xcc>
100139e0:	81400017 	ldw	r5,0(r16)
100139e4:	980d883a 	mov	r6,r19
100139e8:	a009883a 	mov	r4,r20
100139ec:	00154580 	call	10015458 <_fputwc_r>
100139f0:	e7000044 	addi	fp,fp,1
100139f4:	14bff81e 	bne	r2,r18,100139d8 <__alt_data_end+0xf80139d8>
100139f8:	9005883a 	mov	r2,r18
100139fc:	a8000215 	stw	zero,8(r21)
10013a00:	a8000115 	stw	zero,4(r21)
10013a04:	dfc00917 	ldw	ra,36(sp)
10013a08:	df000817 	ldw	fp,32(sp)
10013a0c:	ddc00717 	ldw	r23,28(sp)
10013a10:	dd800617 	ldw	r22,24(sp)
10013a14:	dd400517 	ldw	r21,20(sp)
10013a18:	dd000417 	ldw	r20,16(sp)
10013a1c:	dcc00317 	ldw	r19,12(sp)
10013a20:	dc800217 	ldw	r18,8(sp)
10013a24:	dc400117 	ldw	r17,4(sp)
10013a28:	dc000017 	ldw	r16,0(sp)
10013a2c:	dec00a04 	addi	sp,sp,40
10013a30:	f800283a 	ret
10013a34:	a8800217 	ldw	r2,8(r21)
10013a38:	8c63883a 	add	r17,r17,r17
10013a3c:	8c63883a 	add	r17,r17,r17
10013a40:	1445c83a 	sub	r2,r2,r17
10013a44:	a8800215 	stw	r2,8(r21)
10013a48:	b5800204 	addi	r22,r22,8
10013a4c:	bdc00204 	addi	r23,r23,8
10013a50:	103fdb1e 	bne	r2,zero,100139c0 <__alt_data_end+0xf80139c0>
10013a54:	0005883a 	mov	r2,zero
10013a58:	003fe806 	br	100139fc <__alt_data_end+0xf80139fc>
10013a5c:	0010a6c0 	call	10010a6c <__sfvwrite_r>
10013a60:	003fe606 	br	100139fc <__alt_data_end+0xf80139fc>

10013a64 <__sprint_r>:
10013a64:	30c00217 	ldw	r3,8(r6)
10013a68:	18000126 	beq	r3,zero,10013a70 <__sprint_r+0xc>
10013a6c:	00139681 	jmpi	10013968 <__sprint_r.part.0>
10013a70:	30000115 	stw	zero,4(r6)
10013a74:	0005883a 	mov	r2,zero
10013a78:	f800283a 	ret

10013a7c <___vfiprintf_internal_r>:
10013a7c:	deffca04 	addi	sp,sp,-216
10013a80:	dd403115 	stw	r21,196(sp)
10013a84:	dfc03515 	stw	ra,212(sp)
10013a88:	df003415 	stw	fp,208(sp)
10013a8c:	ddc03315 	stw	r23,204(sp)
10013a90:	dd803215 	stw	r22,200(sp)
10013a94:	dd003015 	stw	r20,192(sp)
10013a98:	dcc02f15 	stw	r19,188(sp)
10013a9c:	dc802e15 	stw	r18,184(sp)
10013aa0:	dc402d15 	stw	r17,180(sp)
10013aa4:	dc002c15 	stw	r16,176(sp)
10013aa8:	d9002115 	stw	r4,132(sp)
10013aac:	d9402015 	stw	r5,128(sp)
10013ab0:	d9c02215 	stw	r7,136(sp)
10013ab4:	302b883a 	mov	r21,r6
10013ab8:	20000226 	beq	r4,zero,10013ac4 <___vfiprintf_internal_r+0x48>
10013abc:	20800e17 	ldw	r2,56(r4)
10013ac0:	1000cf26 	beq	r2,zero,10013e00 <___vfiprintf_internal_r+0x384>
10013ac4:	d8c02017 	ldw	r3,128(sp)
10013ac8:	1880030b 	ldhu	r2,12(r3)
10013acc:	10c8000c 	andi	r3,r2,8192
10013ad0:	1800071e 	bne	r3,zero,10013af0 <___vfiprintf_internal_r+0x74>
10013ad4:	d9402017 	ldw	r5,128(sp)
10013ad8:	00f7ffc4 	movi	r3,-8193
10013adc:	10880014 	ori	r2,r2,8192
10013ae0:	29001917 	ldw	r4,100(r5)
10013ae4:	2880030d 	sth	r2,12(r5)
10013ae8:	20c6703a 	and	r3,r4,r3
10013aec:	28c01915 	stw	r3,100(r5)
10013af0:	10c0020c 	andi	r3,r2,8
10013af4:	1800a526 	beq	r3,zero,10013d8c <___vfiprintf_internal_r+0x310>
10013af8:	d9002017 	ldw	r4,128(sp)
10013afc:	20c00417 	ldw	r3,16(r4)
10013b00:	1800a226 	beq	r3,zero,10013d8c <___vfiprintf_internal_r+0x310>
10013b04:	1080068c 	andi	r2,r2,26
10013b08:	00c00284 	movi	r3,10
10013b0c:	10c0a826 	beq	r2,r3,10013db0 <___vfiprintf_internal_r+0x334>
10013b10:	d9001a04 	addi	r4,sp,104
10013b14:	d94019c4 	addi	r5,sp,103
10013b18:	048400b4 	movhi	r18,4098
10013b1c:	2145c83a 	sub	r2,r4,r5
10013b20:	94a7c004 	addi	r18,r18,-24832
10013b24:	d9001e15 	stw	r4,120(sp)
10013b28:	d9401f15 	stw	r5,124(sp)
10013b2c:	dec01a15 	stw	sp,104(sp)
10013b30:	d8001c15 	stw	zero,112(sp)
10013b34:	d8001b15 	stw	zero,108(sp)
10013b38:	d811883a 	mov	r8,sp
10013b3c:	d8002615 	stw	zero,152(sp)
10013b40:	d8002415 	stw	zero,144(sp)
10013b44:	d8802815 	stw	r2,160(sp)
10013b48:	a82d883a 	mov	r22,r21
10013b4c:	b0800007 	ldb	r2,0(r22)
10013b50:	10040d26 	beq	r2,zero,10014b88 <___vfiprintf_internal_r+0x110c>
10013b54:	00c00944 	movi	r3,37
10013b58:	b029883a 	mov	r20,r22
10013b5c:	10c0021e 	bne	r2,r3,10013b68 <___vfiprintf_internal_r+0xec>
10013b60:	00001606 	br	10013bbc <___vfiprintf_internal_r+0x140>
10013b64:	10c00326 	beq	r2,r3,10013b74 <___vfiprintf_internal_r+0xf8>
10013b68:	a5000044 	addi	r20,r20,1
10013b6c:	a0800007 	ldb	r2,0(r20)
10013b70:	103ffc1e 	bne	r2,zero,10013b64 <__alt_data_end+0xf8013b64>
10013b74:	a5a1c83a 	sub	r16,r20,r22
10013b78:	80001026 	beq	r16,zero,10013bbc <___vfiprintf_internal_r+0x140>
10013b7c:	d8c01c17 	ldw	r3,112(sp)
10013b80:	d8801b17 	ldw	r2,108(sp)
10013b84:	45800015 	stw	r22,0(r8)
10013b88:	80c7883a 	add	r3,r16,r3
10013b8c:	10800044 	addi	r2,r2,1
10013b90:	44000115 	stw	r16,4(r8)
10013b94:	d8c01c15 	stw	r3,112(sp)
10013b98:	d8801b15 	stw	r2,108(sp)
10013b9c:	010001c4 	movi	r4,7
10013ba0:	2080750e 	bge	r4,r2,10013d78 <___vfiprintf_internal_r+0x2fc>
10013ba4:	1803951e 	bne	r3,zero,100149fc <___vfiprintf_internal_r+0xf80>
10013ba8:	d8c02417 	ldw	r3,144(sp)
10013bac:	d8001b15 	stw	zero,108(sp)
10013bb0:	d811883a 	mov	r8,sp
10013bb4:	1c07883a 	add	r3,r3,r16
10013bb8:	d8c02415 	stw	r3,144(sp)
10013bbc:	a0800007 	ldb	r2,0(r20)
10013bc0:	1002e026 	beq	r2,zero,10014744 <___vfiprintf_internal_r+0xcc8>
10013bc4:	a5800044 	addi	r22,r20,1
10013bc8:	a0c00047 	ldb	r3,1(r20)
10013bcc:	d8001d85 	stb	zero,118(sp)
10013bd0:	0027883a 	mov	r19,zero
10013bd4:	d8002305 	stb	zero,140(sp)
10013bd8:	043fffc4 	movi	r16,-1
10013bdc:	d8002515 	stw	zero,148(sp)
10013be0:	0023883a 	mov	r17,zero
10013be4:	05001604 	movi	r20,88
10013be8:	05400244 	movi	r21,9
10013bec:	402f883a 	mov	r23,r8
10013bf0:	b5800044 	addi	r22,r22,1
10013bf4:	18bff804 	addi	r2,r3,-32
10013bf8:	a0827736 	bltu	r20,r2,100145d8 <___vfiprintf_internal_r+0xb5c>
10013bfc:	100490ba 	slli	r2,r2,2
10013c00:	01040074 	movhi	r4,4097
10013c04:	210f0504 	addi	r4,r4,15380
10013c08:	1105883a 	add	r2,r2,r4
10013c0c:	10800017 	ldw	r2,0(r2)
10013c10:	1000683a 	jmp	r2
10013c14:	100142d8 	cmpnei	zero,r2,1291
10013c18:	100145d8 	cmpnei	zero,r2,1303
10013c1c:	100145d8 	cmpnei	zero,r2,1303
10013c20:	100142f4 	orhi	zero,r2,1291
10013c24:	100145d8 	cmpnei	zero,r2,1303
10013c28:	100145d8 	cmpnei	zero,r2,1303
10013c2c:	100145d8 	cmpnei	zero,r2,1303
10013c30:	100145d8 	cmpnei	zero,r2,1303
10013c34:	100145d8 	cmpnei	zero,r2,1303
10013c38:	100145d8 	cmpnei	zero,r2,1303
10013c3c:	100144fc 	xorhi	zero,r2,1299
10013c40:	10014520 	cmpeqi	zero,r2,1300
10013c44:	100145d8 	cmpnei	zero,r2,1303
10013c48:	10013e18 	cmpnei	zero,r2,1272
10013c4c:	10014534 	orhi	zero,r2,1300
10013c50:	100145d8 	cmpnei	zero,r2,1303
10013c54:	10014300 	call	11001430 <_gp+0xfdd738>
10013c58:	1001430c 	andi	zero,r2,1292
10013c5c:	1001430c 	andi	zero,r2,1292
10013c60:	1001430c 	andi	zero,r2,1292
10013c64:	1001430c 	andi	zero,r2,1292
10013c68:	1001430c 	andi	zero,r2,1292
10013c6c:	1001430c 	andi	zero,r2,1292
10013c70:	1001430c 	andi	zero,r2,1292
10013c74:	1001430c 	andi	zero,r2,1292
10013c78:	1001430c 	andi	zero,r2,1292
10013c7c:	100145d8 	cmpnei	zero,r2,1303
10013c80:	100145d8 	cmpnei	zero,r2,1303
10013c84:	100145d8 	cmpnei	zero,r2,1303
10013c88:	100145d8 	cmpnei	zero,r2,1303
10013c8c:	100145d8 	cmpnei	zero,r2,1303
10013c90:	100145d8 	cmpnei	zero,r2,1303
10013c94:	100145d8 	cmpnei	zero,r2,1303
10013c98:	100145d8 	cmpnei	zero,r2,1303
10013c9c:	100145d8 	cmpnei	zero,r2,1303
10013ca0:	100145d8 	cmpnei	zero,r2,1303
10013ca4:	1001434c 	andi	zero,r2,1293
10013ca8:	100145d8 	cmpnei	zero,r2,1303
10013cac:	100145d8 	cmpnei	zero,r2,1303
10013cb0:	100145d8 	cmpnei	zero,r2,1303
10013cb4:	100145d8 	cmpnei	zero,r2,1303
10013cb8:	100145d8 	cmpnei	zero,r2,1303
10013cbc:	100145d8 	cmpnei	zero,r2,1303
10013cc0:	100145d8 	cmpnei	zero,r2,1303
10013cc4:	100145d8 	cmpnei	zero,r2,1303
10013cc8:	100145d8 	cmpnei	zero,r2,1303
10013ccc:	100145d8 	cmpnei	zero,r2,1303
10013cd0:	10014388 	cmpgei	zero,r2,1294
10013cd4:	100145d8 	cmpnei	zero,r2,1303
10013cd8:	100145d8 	cmpnei	zero,r2,1303
10013cdc:	100145d8 	cmpnei	zero,r2,1303
10013ce0:	100145d8 	cmpnei	zero,r2,1303
10013ce4:	100145d8 	cmpnei	zero,r2,1303
10013ce8:	100143e4 	muli	zero,r2,1295
10013cec:	100145d8 	cmpnei	zero,r2,1303
10013cf0:	100145d8 	cmpnei	zero,r2,1303
10013cf4:	10014458 	cmpnei	zero,r2,1297
10013cf8:	100145d8 	cmpnei	zero,r2,1303
10013cfc:	100145d8 	cmpnei	zero,r2,1303
10013d00:	100145d8 	cmpnei	zero,r2,1303
10013d04:	100145d8 	cmpnei	zero,r2,1303
10013d08:	100145d8 	cmpnei	zero,r2,1303
10013d0c:	100145d8 	cmpnei	zero,r2,1303
10013d10:	100145d8 	cmpnei	zero,r2,1303
10013d14:	100145d8 	cmpnei	zero,r2,1303
10013d18:	100145d8 	cmpnei	zero,r2,1303
10013d1c:	100145d8 	cmpnei	zero,r2,1303
10013d20:	10014200 	call	11001420 <_gp+0xfdd728>
10013d24:	10014230 	cmpltui	zero,r2,1288
10013d28:	100145d8 	cmpnei	zero,r2,1303
10013d2c:	100145d8 	cmpnei	zero,r2,1303
10013d30:	100145d8 	cmpnei	zero,r2,1303
10013d34:	10014580 	call	11001458 <_gp+0xfdd760>
10013d38:	10014230 	cmpltui	zero,r2,1288
10013d3c:	100145d8 	cmpnei	zero,r2,1303
10013d40:	100145d8 	cmpnei	zero,r2,1303
10013d44:	100140d8 	cmpnei	zero,r2,1283
10013d48:	100145d8 	cmpnei	zero,r2,1303
10013d4c:	100140ec 	andhi	zero,r2,1283
10013d50:	10014124 	muli	zero,r2,1284
10013d54:	10013e24 	muli	zero,r2,1272
10013d58:	100140cc 	andi	zero,r2,1283
10013d5c:	100145d8 	cmpnei	zero,r2,1303
10013d60:	10014498 	cmpnei	zero,r2,1298
10013d64:	100145d8 	cmpnei	zero,r2,1303
10013d68:	100144e4 	muli	zero,r2,1299
10013d6c:	100145d8 	cmpnei	zero,r2,1303
10013d70:	100145d8 	cmpnei	zero,r2,1303
10013d74:	100141a8 	cmpgeui	zero,r2,1286
10013d78:	42000204 	addi	r8,r8,8
10013d7c:	d8c02417 	ldw	r3,144(sp)
10013d80:	1c07883a 	add	r3,r3,r16
10013d84:	d8c02415 	stw	r3,144(sp)
10013d88:	003f8c06 	br	10013bbc <__alt_data_end+0xf8013bbc>
10013d8c:	d9402017 	ldw	r5,128(sp)
10013d90:	d9002117 	ldw	r4,132(sp)
10013d94:	000e5dc0 	call	1000e5dc <__swsetup_r>
10013d98:	1003c11e 	bne	r2,zero,10014ca0 <___vfiprintf_internal_r+0x1224>
10013d9c:	d9402017 	ldw	r5,128(sp)
10013da0:	00c00284 	movi	r3,10
10013da4:	2880030b 	ldhu	r2,12(r5)
10013da8:	1080068c 	andi	r2,r2,26
10013dac:	10ff581e 	bne	r2,r3,10013b10 <__alt_data_end+0xf8013b10>
10013db0:	d8c02017 	ldw	r3,128(sp)
10013db4:	1880038f 	ldh	r2,14(r3)
10013db8:	103f5516 	blt	r2,zero,10013b10 <__alt_data_end+0xf8013b10>
10013dbc:	d9c02217 	ldw	r7,136(sp)
10013dc0:	d9002117 	ldw	r4,132(sp)
10013dc4:	a80d883a 	mov	r6,r21
10013dc8:	180b883a 	mov	r5,r3
10013dcc:	0014fa40 	call	10014fa4 <__sbprintf>
10013dd0:	dfc03517 	ldw	ra,212(sp)
10013dd4:	df003417 	ldw	fp,208(sp)
10013dd8:	ddc03317 	ldw	r23,204(sp)
10013ddc:	dd803217 	ldw	r22,200(sp)
10013de0:	dd403117 	ldw	r21,196(sp)
10013de4:	dd003017 	ldw	r20,192(sp)
10013de8:	dcc02f17 	ldw	r19,188(sp)
10013dec:	dc802e17 	ldw	r18,184(sp)
10013df0:	dc402d17 	ldw	r17,180(sp)
10013df4:	dc002c17 	ldw	r16,176(sp)
10013df8:	dec03604 	addi	sp,sp,216
10013dfc:	f800283a 	ret
10013e00:	00105e80 	call	100105e8 <__sinit>
10013e04:	003f2f06 	br	10013ac4 <__alt_data_end+0xf8013ac4>
10013e08:	d8c02517 	ldw	r3,148(sp)
10013e0c:	d8802215 	stw	r2,136(sp)
10013e10:	00c7c83a 	sub	r3,zero,r3
10013e14:	d8c02515 	stw	r3,148(sp)
10013e18:	8c400114 	ori	r17,r17,4
10013e1c:	b0c00007 	ldb	r3,0(r22)
10013e20:	003f7306 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10013e24:	00800c04 	movi	r2,48
10013e28:	d9402217 	ldw	r5,136(sp)
10013e2c:	d8801d05 	stb	r2,116(sp)
10013e30:	00801e04 	movi	r2,120
10013e34:	d8801d45 	stb	r2,117(sp)
10013e38:	d8001d85 	stb	zero,118(sp)
10013e3c:	b811883a 	mov	r8,r23
10013e40:	28c00104 	addi	r3,r5,4
10013e44:	2cc00017 	ldw	r19,0(r5)
10013e48:	0029883a 	mov	r20,zero
10013e4c:	88800094 	ori	r2,r17,2
10013e50:	80032516 	blt	r16,zero,10014ae8 <___vfiprintf_internal_r+0x106c>
10013e54:	00bfdfc4 	movi	r2,-129
10013e58:	88a2703a 	and	r17,r17,r2
10013e5c:	d8c02215 	stw	r3,136(sp)
10013e60:	8c400094 	ori	r17,r17,2
10013e64:	98032a1e 	bne	r19,zero,10014b10 <___vfiprintf_internal_r+0x1094>
10013e68:	008400b4 	movhi	r2,4098
10013e6c:	10a76004 	addi	r2,r2,-25216
10013e70:	d8802615 	stw	r2,152(sp)
10013e74:	002b883a 	mov	r21,zero
10013e78:	8001741e 	bne	r16,zero,1001444c <___vfiprintf_internal_r+0x9d0>
10013e7c:	0021883a 	mov	r16,zero
10013e80:	0029883a 	mov	r20,zero
10013e84:	ddc01a04 	addi	r23,sp,104
10013e88:	8027883a 	mov	r19,r16
10013e8c:	8500010e 	bge	r16,r20,10013e94 <___vfiprintf_internal_r+0x418>
10013e90:	a027883a 	mov	r19,r20
10013e94:	ad403fcc 	andi	r21,r21,255
10013e98:	ad40201c 	xori	r21,r21,128
10013e9c:	ad7fe004 	addi	r21,r21,-128
10013ea0:	a8000126 	beq	r21,zero,10013ea8 <___vfiprintf_internal_r+0x42c>
10013ea4:	9cc00044 	addi	r19,r19,1
10013ea8:	89c0008c 	andi	r7,r17,2
10013eac:	38000126 	beq	r7,zero,10013eb4 <___vfiprintf_internal_r+0x438>
10013eb0:	9cc00084 	addi	r19,r19,2
10013eb4:	88c0210c 	andi	r3,r17,132
10013eb8:	1801dd1e 	bne	r3,zero,10014630 <___vfiprintf_internal_r+0xbb4>
10013ebc:	d9402517 	ldw	r5,148(sp)
10013ec0:	2cebc83a 	sub	r21,r5,r19
10013ec4:	0541da0e 	bge	zero,r21,10014630 <___vfiprintf_internal_r+0xbb4>
10013ec8:	07000404 	movi	fp,16
10013ecc:	d8801c17 	ldw	r2,112(sp)
10013ed0:	e543be0e 	bge	fp,r21,10014dcc <___vfiprintf_internal_r+0x1350>
10013ed4:	014400b4 	movhi	r5,4098
10013ed8:	2967c404 	addi	r5,r5,-24816
10013edc:	dc002715 	stw	r16,156(sp)
10013ee0:	d9801b17 	ldw	r6,108(sp)
10013ee4:	a821883a 	mov	r16,r21
10013ee8:	d9402315 	stw	r5,140(sp)
10013eec:	028001c4 	movi	r10,7
10013ef0:	d9c02915 	stw	r7,164(sp)
10013ef4:	182b883a 	mov	r21,r3
10013ef8:	00000506 	br	10013f10 <___vfiprintf_internal_r+0x494>
10013efc:	31000084 	addi	r4,r6,2
10013f00:	42000204 	addi	r8,r8,8
10013f04:	180d883a 	mov	r6,r3
10013f08:	843ffc04 	addi	r16,r16,-16
10013f0c:	e4000f0e 	bge	fp,r16,10013f4c <___vfiprintf_internal_r+0x4d0>
10013f10:	010400b4 	movhi	r4,4098
10013f14:	10800404 	addi	r2,r2,16
10013f18:	30c00044 	addi	r3,r6,1
10013f1c:	2127c404 	addi	r4,r4,-24816
10013f20:	41000015 	stw	r4,0(r8)
10013f24:	47000115 	stw	fp,4(r8)
10013f28:	d8801c15 	stw	r2,112(sp)
10013f2c:	d8c01b15 	stw	r3,108(sp)
10013f30:	50fff20e 	bge	r10,r3,10013efc <__alt_data_end+0xf8013efc>
10013f34:	1001b21e 	bne	r2,zero,10014600 <___vfiprintf_internal_r+0xb84>
10013f38:	843ffc04 	addi	r16,r16,-16
10013f3c:	000d883a 	mov	r6,zero
10013f40:	01000044 	movi	r4,1
10013f44:	d811883a 	mov	r8,sp
10013f48:	e43ff116 	blt	fp,r16,10013f10 <__alt_data_end+0xf8013f10>
10013f4c:	a807883a 	mov	r3,r21
10013f50:	d9c02917 	ldw	r7,164(sp)
10013f54:	802b883a 	mov	r21,r16
10013f58:	dc002717 	ldw	r16,156(sp)
10013f5c:	d9402317 	ldw	r5,140(sp)
10013f60:	a885883a 	add	r2,r21,r2
10013f64:	45400115 	stw	r21,4(r8)
10013f68:	41400015 	stw	r5,0(r8)
10013f6c:	d8801c15 	stw	r2,112(sp)
10013f70:	d9001b15 	stw	r4,108(sp)
10013f74:	014001c4 	movi	r5,7
10013f78:	29026216 	blt	r5,r4,10014904 <___vfiprintf_internal_r+0xe88>
10013f7c:	d9801d87 	ldb	r6,118(sp)
10013f80:	42000204 	addi	r8,r8,8
10013f84:	21400044 	addi	r5,r4,1
10013f88:	3001ae1e 	bne	r6,zero,10014644 <___vfiprintf_internal_r+0xbc8>
10013f8c:	3801bb26 	beq	r7,zero,1001467c <___vfiprintf_internal_r+0xc00>
10013f90:	d9001d04 	addi	r4,sp,116
10013f94:	10800084 	addi	r2,r2,2
10013f98:	41000015 	stw	r4,0(r8)
10013f9c:	01000084 	movi	r4,2
10013fa0:	41000115 	stw	r4,4(r8)
10013fa4:	d8801c15 	stw	r2,112(sp)
10013fa8:	d9401b15 	stw	r5,108(sp)
10013fac:	010001c4 	movi	r4,7
10013fb0:	2142680e 	bge	r4,r5,10014954 <___vfiprintf_internal_r+0xed8>
10013fb4:	1002b11e 	bne	r2,zero,10014a7c <___vfiprintf_internal_r+0x1000>
10013fb8:	01802004 	movi	r6,128
10013fbc:	01400044 	movi	r5,1
10013fc0:	0009883a 	mov	r4,zero
10013fc4:	d811883a 	mov	r8,sp
10013fc8:	1981ae1e 	bne	r3,r6,10014684 <___vfiprintf_internal_r+0xc08>
10013fcc:	d8c02517 	ldw	r3,148(sp)
10013fd0:	1cf9c83a 	sub	fp,r3,r19
10013fd4:	0701ab0e 	bge	zero,fp,10014684 <___vfiprintf_internal_r+0xc08>
10013fd8:	05400404 	movi	r21,16
10013fdc:	af03a90e 	bge	r21,fp,10014e84 <___vfiprintf_internal_r+0x1408>
10013fe0:	014400b4 	movhi	r5,4098
10013fe4:	2967c004 	addi	r5,r5,-24832
10013fe8:	d9402315 	stw	r5,140(sp)
10013fec:	01c001c4 	movi	r7,7
10013ff0:	00000506 	br	10014008 <___vfiprintf_internal_r+0x58c>
10013ff4:	21800084 	addi	r6,r4,2
10013ff8:	42000204 	addi	r8,r8,8
10013ffc:	1809883a 	mov	r4,r3
10014000:	e73ffc04 	addi	fp,fp,-16
10014004:	af000d0e 	bge	r21,fp,1001403c <___vfiprintf_internal_r+0x5c0>
10014008:	10800404 	addi	r2,r2,16
1001400c:	20c00044 	addi	r3,r4,1
10014010:	44800015 	stw	r18,0(r8)
10014014:	45400115 	stw	r21,4(r8)
10014018:	d8801c15 	stw	r2,112(sp)
1001401c:	d8c01b15 	stw	r3,108(sp)
10014020:	38fff40e 	bge	r7,r3,10013ff4 <__alt_data_end+0xf8013ff4>
10014024:	10022b1e 	bne	r2,zero,100148d4 <___vfiprintf_internal_r+0xe58>
10014028:	e73ffc04 	addi	fp,fp,-16
1001402c:	01800044 	movi	r6,1
10014030:	0009883a 	mov	r4,zero
10014034:	d811883a 	mov	r8,sp
10014038:	af3ff316 	blt	r21,fp,10014008 <__alt_data_end+0xf8014008>
1001403c:	d8c02317 	ldw	r3,140(sp)
10014040:	1705883a 	add	r2,r2,fp
10014044:	47000115 	stw	fp,4(r8)
10014048:	40c00015 	stw	r3,0(r8)
1001404c:	d8801c15 	stw	r2,112(sp)
10014050:	d9801b15 	stw	r6,108(sp)
10014054:	00c001c4 	movi	r3,7
10014058:	19829416 	blt	r3,r6,10014aac <___vfiprintf_internal_r+0x1030>
1001405c:	8521c83a 	sub	r16,r16,r20
10014060:	42000204 	addi	r8,r8,8
10014064:	31400044 	addi	r5,r6,1
10014068:	3009883a 	mov	r4,r6
1001406c:	04018716 	blt	zero,r16,1001468c <___vfiprintf_internal_r+0xc10>
10014070:	a085883a 	add	r2,r20,r2
10014074:	45c00015 	stw	r23,0(r8)
10014078:	45000115 	stw	r20,4(r8)
1001407c:	d8801c15 	stw	r2,112(sp)
10014080:	d9401b15 	stw	r5,108(sp)
10014084:	00c001c4 	movi	r3,7
10014088:	1941c20e 	bge	r3,r5,10014794 <___vfiprintf_internal_r+0xd18>
1001408c:	1002531e 	bne	r2,zero,100149dc <___vfiprintf_internal_r+0xf60>
10014090:	d8001b15 	stw	zero,108(sp)
10014094:	8c40010c 	andi	r17,r17,4
10014098:	88023226 	beq	r17,zero,10014964 <___vfiprintf_internal_r+0xee8>
1001409c:	d9002517 	ldw	r4,148(sp)
100140a0:	24e3c83a 	sub	r17,r4,r19
100140a4:	04432916 	blt	zero,r17,10014d4c <___vfiprintf_internal_r+0x12d0>
100140a8:	d8802517 	ldw	r2,148(sp)
100140ac:	14c0010e 	bge	r2,r19,100140b4 <___vfiprintf_internal_r+0x638>
100140b0:	9805883a 	mov	r2,r19
100140b4:	d8c02417 	ldw	r3,144(sp)
100140b8:	1887883a 	add	r3,r3,r2
100140bc:	d8c02415 	stw	r3,144(sp)
100140c0:	d8001b15 	stw	zero,108(sp)
100140c4:	d811883a 	mov	r8,sp
100140c8:	003ea006 	br	10013b4c <__alt_data_end+0xf8013b4c>
100140cc:	8c400814 	ori	r17,r17,32
100140d0:	b0c00007 	ldb	r3,0(r22)
100140d4:	003ec606 	br	10013bf0 <__alt_data_end+0xf8013bf0>
100140d8:	b0c00007 	ldb	r3,0(r22)
100140dc:	00801b04 	movi	r2,108
100140e0:	18832026 	beq	r3,r2,10014d64 <___vfiprintf_internal_r+0x12e8>
100140e4:	8c400414 	ori	r17,r17,16
100140e8:	003ec106 	br	10013bf0 <__alt_data_end+0xf8013bf0>
100140ec:	9cc03fcc 	andi	r19,r19,255
100140f0:	b811883a 	mov	r8,r23
100140f4:	9803981e 	bne	r19,zero,10014f58 <___vfiprintf_internal_r+0x14dc>
100140f8:	8880080c 	andi	r2,r17,32
100140fc:	1002be26 	beq	r2,zero,10014bf8 <___vfiprintf_internal_r+0x117c>
10014100:	d9002217 	ldw	r4,136(sp)
10014104:	d9402417 	ldw	r5,144(sp)
10014108:	20800017 	ldw	r2,0(r4)
1001410c:	2807d7fa 	srai	r3,r5,31
10014110:	21000104 	addi	r4,r4,4
10014114:	d9002215 	stw	r4,136(sp)
10014118:	11400015 	stw	r5,0(r2)
1001411c:	10c00115 	stw	r3,4(r2)
10014120:	003e8a06 	br	10013b4c <__alt_data_end+0xf8013b4c>
10014124:	9cc03fcc 	andi	r19,r19,255
10014128:	b811883a 	mov	r8,r23
1001412c:	9803871e 	bne	r19,zero,10014f4c <___vfiprintf_internal_r+0x14d0>
10014130:	8880080c 	andi	r2,r17,32
10014134:	10009a26 	beq	r2,zero,100143a0 <___vfiprintf_internal_r+0x924>
10014138:	d9002217 	ldw	r4,136(sp)
1001413c:	d8001d85 	stb	zero,118(sp)
10014140:	20800204 	addi	r2,r4,8
10014144:	24c00017 	ldw	r19,0(r4)
10014148:	25000117 	ldw	r20,4(r4)
1001414c:	8002a416 	blt	r16,zero,10014be0 <___vfiprintf_internal_r+0x1164>
10014150:	013fdfc4 	movi	r4,-129
10014154:	9d06b03a 	or	r3,r19,r20
10014158:	d8802215 	stw	r2,136(sp)
1001415c:	8922703a 	and	r17,r17,r4
10014160:	18009b26 	beq	r3,zero,100143d0 <___vfiprintf_internal_r+0x954>
10014164:	002b883a 	mov	r21,zero
10014168:	ddc01a04 	addi	r23,sp,104
1001416c:	9806d0fa 	srli	r3,r19,3
10014170:	a008977a 	slli	r4,r20,29
10014174:	a028d0fa 	srli	r20,r20,3
10014178:	9cc001cc 	andi	r19,r19,7
1001417c:	98800c04 	addi	r2,r19,48
10014180:	bdffffc4 	addi	r23,r23,-1
10014184:	20e6b03a 	or	r19,r4,r3
10014188:	b8800005 	stb	r2,0(r23)
1001418c:	9d06b03a 	or	r3,r19,r20
10014190:	183ff61e 	bne	r3,zero,1001416c <__alt_data_end+0xf801416c>
10014194:	88c0004c 	andi	r3,r17,1
10014198:	18021f1e 	bne	r3,zero,10014a18 <___vfiprintf_internal_r+0xf9c>
1001419c:	d9401e17 	ldw	r5,120(sp)
100141a0:	2de9c83a 	sub	r20,r5,r23
100141a4:	003f3806 	br	10013e88 <__alt_data_end+0xf8013e88>
100141a8:	9cc03fcc 	andi	r19,r19,255
100141ac:	b811883a 	mov	r8,r23
100141b0:	98034f1e 	bne	r19,zero,10014ef0 <___vfiprintf_internal_r+0x1474>
100141b4:	008400b4 	movhi	r2,4098
100141b8:	10a76004 	addi	r2,r2,-25216
100141bc:	d8802615 	stw	r2,152(sp)
100141c0:	8880080c 	andi	r2,r17,32
100141c4:	1000ac26 	beq	r2,zero,10014478 <___vfiprintf_internal_r+0x9fc>
100141c8:	d9002217 	ldw	r4,136(sp)
100141cc:	24c00017 	ldw	r19,0(r4)
100141d0:	25000117 	ldw	r20,4(r4)
100141d4:	21000204 	addi	r4,r4,8
100141d8:	d9002215 	stw	r4,136(sp)
100141dc:	8880004c 	andi	r2,r17,1
100141e0:	1001e726 	beq	r2,zero,10014980 <___vfiprintf_internal_r+0xf04>
100141e4:	9d04b03a 	or	r2,r19,r20
100141e8:	10025c1e 	bne	r2,zero,10014b5c <___vfiprintf_internal_r+0x10e0>
100141ec:	d8001d85 	stb	zero,118(sp)
100141f0:	80024416 	blt	r16,zero,10014b04 <___vfiprintf_internal_r+0x1088>
100141f4:	00bfdfc4 	movi	r2,-129
100141f8:	88a2703a 	and	r17,r17,r2
100141fc:	003f1d06 	br	10013e74 <__alt_data_end+0xf8013e74>
10014200:	d8c02217 	ldw	r3,136(sp)
10014204:	04c00044 	movi	r19,1
10014208:	b811883a 	mov	r8,r23
1001420c:	18800017 	ldw	r2,0(r3)
10014210:	18c00104 	addi	r3,r3,4
10014214:	d8001d85 	stb	zero,118(sp)
10014218:	d8801005 	stb	r2,64(sp)
1001421c:	d8c02215 	stw	r3,136(sp)
10014220:	9829883a 	mov	r20,r19
10014224:	ddc01004 	addi	r23,sp,64
10014228:	0021883a 	mov	r16,zero
1001422c:	003f1e06 	br	10013ea8 <__alt_data_end+0xf8013ea8>
10014230:	9cc03fcc 	andi	r19,r19,255
10014234:	b811883a 	mov	r8,r23
10014238:	9803331e 	bne	r19,zero,10014f08 <___vfiprintf_internal_r+0x148c>
1001423c:	8880080c 	andi	r2,r17,32
10014240:	10004826 	beq	r2,zero,10014364 <___vfiprintf_internal_r+0x8e8>
10014244:	d9002217 	ldw	r4,136(sp)
10014248:	20800117 	ldw	r2,4(r4)
1001424c:	24c00017 	ldw	r19,0(r4)
10014250:	21000204 	addi	r4,r4,8
10014254:	d9002215 	stw	r4,136(sp)
10014258:	1029883a 	mov	r20,r2
1001425c:	10024c16 	blt	r2,zero,10014b90 <___vfiprintf_internal_r+0x1114>
10014260:	dd401d83 	ldbu	r21,118(sp)
10014264:	80007116 	blt	r16,zero,1001442c <___vfiprintf_internal_r+0x9b0>
10014268:	00ffdfc4 	movi	r3,-129
1001426c:	9d04b03a 	or	r2,r19,r20
10014270:	88e2703a 	and	r17,r17,r3
10014274:	1000d126 	beq	r2,zero,100145bc <___vfiprintf_internal_r+0xb40>
10014278:	a0023526 	beq	r20,zero,10014b50 <___vfiprintf_internal_r+0x10d4>
1001427c:	ddc01a04 	addi	r23,sp,104
10014280:	4039883a 	mov	fp,r8
10014284:	9809883a 	mov	r4,r19
10014288:	a00b883a 	mov	r5,r20
1001428c:	01800284 	movi	r6,10
10014290:	000f883a 	mov	r7,zero
10014294:	0015fa80 	call	10015fa8 <__umoddi3>
10014298:	10800c04 	addi	r2,r2,48
1001429c:	bdffffc4 	addi	r23,r23,-1
100142a0:	9809883a 	mov	r4,r19
100142a4:	a00b883a 	mov	r5,r20
100142a8:	b8800005 	stb	r2,0(r23)
100142ac:	01800284 	movi	r6,10
100142b0:	000f883a 	mov	r7,zero
100142b4:	00159ac0 	call	100159ac <__udivdi3>
100142b8:	1027883a 	mov	r19,r2
100142bc:	10c4b03a 	or	r2,r2,r3
100142c0:	1829883a 	mov	r20,r3
100142c4:	103fef1e 	bne	r2,zero,10014284 <__alt_data_end+0xf8014284>
100142c8:	d9001e17 	ldw	r4,120(sp)
100142cc:	e011883a 	mov	r8,fp
100142d0:	25e9c83a 	sub	r20,r4,r23
100142d4:	003eec06 	br	10013e88 <__alt_data_end+0xf8013e88>
100142d8:	d8802307 	ldb	r2,140(sp)
100142dc:	1002361e 	bne	r2,zero,10014bb8 <___vfiprintf_internal_r+0x113c>
100142e0:	00c00804 	movi	r3,32
100142e4:	d8c02305 	stb	r3,140(sp)
100142e8:	04c00044 	movi	r19,1
100142ec:	b0c00007 	ldb	r3,0(r22)
100142f0:	003e3f06 	br	10013bf0 <__alt_data_end+0xf8013bf0>
100142f4:	8c400054 	ori	r17,r17,1
100142f8:	b0c00007 	ldb	r3,0(r22)
100142fc:	003e3c06 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014300:	8c402014 	ori	r17,r17,128
10014304:	b0c00007 	ldb	r3,0(r22)
10014308:	003e3906 	br	10013bf0 <__alt_data_end+0xf8013bf0>
1001430c:	dc002715 	stw	r16,156(sp)
10014310:	d8002515 	stw	zero,148(sp)
10014314:	1f3ff404 	addi	fp,r3,-48
10014318:	0009883a 	mov	r4,zero
1001431c:	b021883a 	mov	r16,r22
10014320:	01400284 	movi	r5,10
10014324:	00085800 	call	10008580 <__mulsi3>
10014328:	80c00007 	ldb	r3,0(r16)
1001432c:	e089883a 	add	r4,fp,r2
10014330:	b5800044 	addi	r22,r22,1
10014334:	1f3ff404 	addi	fp,r3,-48
10014338:	b021883a 	mov	r16,r22
1001433c:	af3ff82e 	bgeu	r21,fp,10014320 <__alt_data_end+0xf8014320>
10014340:	d9002515 	stw	r4,148(sp)
10014344:	dc002717 	ldw	r16,156(sp)
10014348:	003e2a06 	br	10013bf4 <__alt_data_end+0xf8013bf4>
1001434c:	9cc03fcc 	andi	r19,r19,255
10014350:	b811883a 	mov	r8,r23
10014354:	9802e91e 	bne	r19,zero,10014efc <___vfiprintf_internal_r+0x1480>
10014358:	8c400414 	ori	r17,r17,16
1001435c:	8880080c 	andi	r2,r17,32
10014360:	103fb81e 	bne	r2,zero,10014244 <__alt_data_end+0xf8014244>
10014364:	8880040c 	andi	r2,r17,16
10014368:	10022e26 	beq	r2,zero,10014c24 <___vfiprintf_internal_r+0x11a8>
1001436c:	d9402217 	ldw	r5,136(sp)
10014370:	2cc00017 	ldw	r19,0(r5)
10014374:	29400104 	addi	r5,r5,4
10014378:	d9402215 	stw	r5,136(sp)
1001437c:	9829d7fa 	srai	r20,r19,31
10014380:	a005883a 	mov	r2,r20
10014384:	003fb506 	br	1001425c <__alt_data_end+0xf801425c>
10014388:	9cc03fcc 	andi	r19,r19,255
1001438c:	b811883a 	mov	r8,r23
10014390:	9802fa1e 	bne	r19,zero,10014f7c <___vfiprintf_internal_r+0x1500>
10014394:	8c400414 	ori	r17,r17,16
10014398:	8880080c 	andi	r2,r17,32
1001439c:	103f661e 	bne	r2,zero,10014138 <__alt_data_end+0xf8014138>
100143a0:	8880040c 	andi	r2,r17,16
100143a4:	10020626 	beq	r2,zero,10014bc0 <___vfiprintf_internal_r+0x1144>
100143a8:	d9402217 	ldw	r5,136(sp)
100143ac:	d8001d85 	stb	zero,118(sp)
100143b0:	0029883a 	mov	r20,zero
100143b4:	28800104 	addi	r2,r5,4
100143b8:	2cc00017 	ldw	r19,0(r5)
100143bc:	80020816 	blt	r16,zero,10014be0 <___vfiprintf_internal_r+0x1164>
100143c0:	00ffdfc4 	movi	r3,-129
100143c4:	d8802215 	stw	r2,136(sp)
100143c8:	88e2703a 	and	r17,r17,r3
100143cc:	983f651e 	bne	r19,zero,10014164 <__alt_data_end+0xf8014164>
100143d0:	002b883a 	mov	r21,zero
100143d4:	8002cf26 	beq	r16,zero,10014f14 <___vfiprintf_internal_r+0x1498>
100143d8:	0027883a 	mov	r19,zero
100143dc:	0029883a 	mov	r20,zero
100143e0:	003f6106 	br	10014168 <__alt_data_end+0xf8014168>
100143e4:	9cc03fcc 	andi	r19,r19,255
100143e8:	b811883a 	mov	r8,r23
100143ec:	9802e01e 	bne	r19,zero,10014f70 <___vfiprintf_internal_r+0x14f4>
100143f0:	8c400414 	ori	r17,r17,16
100143f4:	8880080c 	andi	r2,r17,32
100143f8:	1000641e 	bne	r2,zero,1001458c <___vfiprintf_internal_r+0xb10>
100143fc:	8880040c 	andi	r2,r17,16
10014400:	1001c81e 	bne	r2,zero,10014b24 <___vfiprintf_internal_r+0x10a8>
10014404:	8880100c 	andi	r2,r17,64
10014408:	d8001d85 	stb	zero,118(sp)
1001440c:	1002281e 	bne	r2,zero,10014cb0 <___vfiprintf_internal_r+0x1234>
10014410:	d9002217 	ldw	r4,136(sp)
10014414:	0029883a 	mov	r20,zero
10014418:	20800104 	addi	r2,r4,4
1001441c:	24c00017 	ldw	r19,0(r4)
10014420:	8001c60e 	bge	r16,zero,10014b3c <___vfiprintf_internal_r+0x10c0>
10014424:	d8802215 	stw	r2,136(sp)
10014428:	002b883a 	mov	r21,zero
1001442c:	9d04b03a 	or	r2,r19,r20
10014430:	103f911e 	bne	r2,zero,10014278 <__alt_data_end+0xf8014278>
10014434:	00800044 	movi	r2,1
10014438:	10803fcc 	andi	r2,r2,255
1001443c:	00c00044 	movi	r3,1
10014440:	10c05f26 	beq	r2,r3,100145c0 <___vfiprintf_internal_r+0xb44>
10014444:	00c00084 	movi	r3,2
10014448:	10ffe31e 	bne	r2,r3,100143d8 <__alt_data_end+0xf80143d8>
1001444c:	0027883a 	mov	r19,zero
10014450:	0029883a 	mov	r20,zero
10014454:	00015106 	br	1001499c <___vfiprintf_internal_r+0xf20>
10014458:	9cc03fcc 	andi	r19,r19,255
1001445c:	b811883a 	mov	r8,r23
10014460:	9802c01e 	bne	r19,zero,10014f64 <___vfiprintf_internal_r+0x14e8>
10014464:	014400b4 	movhi	r5,4098
10014468:	29675b04 	addi	r5,r5,-25236
1001446c:	d9402615 	stw	r5,152(sp)
10014470:	8880080c 	andi	r2,r17,32
10014474:	103f541e 	bne	r2,zero,100141c8 <__alt_data_end+0xf80141c8>
10014478:	8880040c 	andi	r2,r17,16
1001447c:	1001f226 	beq	r2,zero,10014c48 <___vfiprintf_internal_r+0x11cc>
10014480:	d9402217 	ldw	r5,136(sp)
10014484:	0029883a 	mov	r20,zero
10014488:	2cc00017 	ldw	r19,0(r5)
1001448c:	29400104 	addi	r5,r5,4
10014490:	d9402215 	stw	r5,136(sp)
10014494:	003f5106 	br	100141dc <__alt_data_end+0xf80141dc>
10014498:	d8c02217 	ldw	r3,136(sp)
1001449c:	b811883a 	mov	r8,r23
100144a0:	d8001d85 	stb	zero,118(sp)
100144a4:	1dc00017 	ldw	r23,0(r3)
100144a8:	1f000104 	addi	fp,r3,4
100144ac:	b8025926 	beq	r23,zero,10014e14 <___vfiprintf_internal_r+0x1398>
100144b0:	80023316 	blt	r16,zero,10014d80 <___vfiprintf_internal_r+0x1304>
100144b4:	800d883a 	mov	r6,r16
100144b8:	000b883a 	mov	r5,zero
100144bc:	b809883a 	mov	r4,r23
100144c0:	da002a15 	stw	r8,168(sp)
100144c4:	0011bbc0 	call	10011bbc <memchr>
100144c8:	da002a17 	ldw	r8,168(sp)
100144cc:	10026826 	beq	r2,zero,10014e70 <___vfiprintf_internal_r+0x13f4>
100144d0:	15e9c83a 	sub	r20,r2,r23
100144d4:	dd401d83 	ldbu	r21,118(sp)
100144d8:	df002215 	stw	fp,136(sp)
100144dc:	0021883a 	mov	r16,zero
100144e0:	003e6906 	br	10013e88 <__alt_data_end+0xf8013e88>
100144e4:	9cc03fcc 	andi	r19,r19,255
100144e8:	b811883a 	mov	r8,r23
100144ec:	983fc126 	beq	r19,zero,100143f4 <__alt_data_end+0xf80143f4>
100144f0:	d8c02303 	ldbu	r3,140(sp)
100144f4:	d8c01d85 	stb	r3,118(sp)
100144f8:	003fbe06 	br	100143f4 <__alt_data_end+0xf80143f4>
100144fc:	d9002217 	ldw	r4,136(sp)
10014500:	d9402217 	ldw	r5,136(sp)
10014504:	21000017 	ldw	r4,0(r4)
10014508:	28800104 	addi	r2,r5,4
1001450c:	d9002515 	stw	r4,148(sp)
10014510:	203e3d16 	blt	r4,zero,10013e08 <__alt_data_end+0xf8013e08>
10014514:	d8802215 	stw	r2,136(sp)
10014518:	b0c00007 	ldb	r3,0(r22)
1001451c:	003db406 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014520:	00c00ac4 	movi	r3,43
10014524:	d8c02305 	stb	r3,140(sp)
10014528:	04c00044 	movi	r19,1
1001452c:	b0c00007 	ldb	r3,0(r22)
10014530:	003daf06 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014534:	b0c00007 	ldb	r3,0(r22)
10014538:	01000a84 	movi	r4,42
1001453c:	b4000044 	addi	r16,r22,1
10014540:	19025e26 	beq	r3,r4,10014ebc <___vfiprintf_internal_r+0x1440>
10014544:	1f3ff404 	addi	fp,r3,-48
10014548:	0009883a 	mov	r4,zero
1001454c:	af025236 	bltu	r21,fp,10014e98 <___vfiprintf_internal_r+0x141c>
10014550:	01400284 	movi	r5,10
10014554:	00085800 	call	10008580 <__mulsi3>
10014558:	80c00007 	ldb	r3,0(r16)
1001455c:	1709883a 	add	r4,r2,fp
10014560:	85800044 	addi	r22,r16,1
10014564:	1f3ff404 	addi	fp,r3,-48
10014568:	b021883a 	mov	r16,r22
1001456c:	af3ff82e 	bgeu	r21,fp,10014550 <__alt_data_end+0xf8014550>
10014570:	2021883a 	mov	r16,r4
10014574:	203d9f0e 	bge	r4,zero,10013bf4 <__alt_data_end+0xf8013bf4>
10014578:	043fffc4 	movi	r16,-1
1001457c:	003d9d06 	br	10013bf4 <__alt_data_end+0xf8013bf4>
10014580:	8c401014 	ori	r17,r17,64
10014584:	b0c00007 	ldb	r3,0(r22)
10014588:	003d9906 	br	10013bf0 <__alt_data_end+0xf8013bf0>
1001458c:	d9002217 	ldw	r4,136(sp)
10014590:	d8001d85 	stb	zero,118(sp)
10014594:	20c00204 	addi	r3,r4,8
10014598:	24c00017 	ldw	r19,0(r4)
1001459c:	25000117 	ldw	r20,4(r4)
100145a0:	8001e716 	blt	r16,zero,10014d40 <___vfiprintf_internal_r+0x12c4>
100145a4:	013fdfc4 	movi	r4,-129
100145a8:	9d04b03a 	or	r2,r19,r20
100145ac:	d8c02215 	stw	r3,136(sp)
100145b0:	8922703a 	and	r17,r17,r4
100145b4:	002b883a 	mov	r21,zero
100145b8:	103f2f1e 	bne	r2,zero,10014278 <__alt_data_end+0xf8014278>
100145bc:	803e2f26 	beq	r16,zero,10013e7c <__alt_data_end+0xf8013e7c>
100145c0:	0027883a 	mov	r19,zero
100145c4:	9cc00c04 	addi	r19,r19,48
100145c8:	dcc019c5 	stb	r19,103(sp)
100145cc:	dd002817 	ldw	r20,160(sp)
100145d0:	ddc019c4 	addi	r23,sp,103
100145d4:	003e2c06 	br	10013e88 <__alt_data_end+0xf8013e88>
100145d8:	9cc03fcc 	andi	r19,r19,255
100145dc:	b811883a 	mov	r8,r23
100145e0:	9802571e 	bne	r19,zero,10014f40 <___vfiprintf_internal_r+0x14c4>
100145e4:	18005726 	beq	r3,zero,10014744 <___vfiprintf_internal_r+0xcc8>
100145e8:	04c00044 	movi	r19,1
100145ec:	d8c01005 	stb	r3,64(sp)
100145f0:	d8001d85 	stb	zero,118(sp)
100145f4:	9829883a 	mov	r20,r19
100145f8:	ddc01004 	addi	r23,sp,64
100145fc:	003f0a06 	br	10014228 <__alt_data_end+0xf8014228>
10014600:	d9402017 	ldw	r5,128(sp)
10014604:	d9002117 	ldw	r4,132(sp)
10014608:	d9801a04 	addi	r6,sp,104
1001460c:	da802a15 	stw	r10,168(sp)
10014610:	00139680 	call	10013968 <__sprint_r.part.0>
10014614:	da802a17 	ldw	r10,168(sp)
10014618:	1000501e 	bne	r2,zero,1001475c <___vfiprintf_internal_r+0xce0>
1001461c:	d9801b17 	ldw	r6,108(sp)
10014620:	d8801c17 	ldw	r2,112(sp)
10014624:	d811883a 	mov	r8,sp
10014628:	31000044 	addi	r4,r6,1
1001462c:	003e3606 	br	10013f08 <__alt_data_end+0xf8013f08>
10014630:	d9001b17 	ldw	r4,108(sp)
10014634:	d8801c17 	ldw	r2,112(sp)
10014638:	21400044 	addi	r5,r4,1
1001463c:	d9801d87 	ldb	r6,118(sp)
10014640:	303e5226 	beq	r6,zero,10013f8c <__alt_data_end+0xf8013f8c>
10014644:	01800044 	movi	r6,1
10014648:	d9001d84 	addi	r4,sp,118
1001464c:	1185883a 	add	r2,r2,r6
10014650:	41000015 	stw	r4,0(r8)
10014654:	41800115 	stw	r6,4(r8)
10014658:	d8801c15 	stw	r2,112(sp)
1001465c:	d9401b15 	stw	r5,108(sp)
10014660:	010001c4 	movi	r4,7
10014664:	2140b00e 	bge	r4,r5,10014928 <___vfiprintf_internal_r+0xeac>
10014668:	1000f61e 	bne	r2,zero,10014a44 <___vfiprintf_internal_r+0xfc8>
1001466c:	3800b31e 	bne	r7,zero,1001493c <___vfiprintf_internal_r+0xec0>
10014670:	0009883a 	mov	r4,zero
10014674:	300b883a 	mov	r5,r6
10014678:	d811883a 	mov	r8,sp
1001467c:	01802004 	movi	r6,128
10014680:	19be5226 	beq	r3,r6,10013fcc <__alt_data_end+0xf8013fcc>
10014684:	8521c83a 	sub	r16,r16,r20
10014688:	043e790e 	bge	zero,r16,10014070 <__alt_data_end+0xf8014070>
1001468c:	05400404 	movi	r21,16
10014690:	ac01b00e 	bge	r21,r16,10014d54 <___vfiprintf_internal_r+0x12d8>
10014694:	014400b4 	movhi	r5,4098
10014698:	2967c004 	addi	r5,r5,-24832
1001469c:	d9402315 	stw	r5,140(sp)
100146a0:	070001c4 	movi	fp,7
100146a4:	00000506 	br	100146bc <___vfiprintf_internal_r+0xc40>
100146a8:	21400084 	addi	r5,r4,2
100146ac:	42000204 	addi	r8,r8,8
100146b0:	1809883a 	mov	r4,r3
100146b4:	843ffc04 	addi	r16,r16,-16
100146b8:	ac000d0e 	bge	r21,r16,100146f0 <___vfiprintf_internal_r+0xc74>
100146bc:	10800404 	addi	r2,r2,16
100146c0:	20c00044 	addi	r3,r4,1
100146c4:	44800015 	stw	r18,0(r8)
100146c8:	45400115 	stw	r21,4(r8)
100146cc:	d8801c15 	stw	r2,112(sp)
100146d0:	d8c01b15 	stw	r3,108(sp)
100146d4:	e0fff40e 	bge	fp,r3,100146a8 <__alt_data_end+0xf80146a8>
100146d8:	1000101e 	bne	r2,zero,1001471c <___vfiprintf_internal_r+0xca0>
100146dc:	843ffc04 	addi	r16,r16,-16
100146e0:	01400044 	movi	r5,1
100146e4:	0009883a 	mov	r4,zero
100146e8:	d811883a 	mov	r8,sp
100146ec:	ac3ff316 	blt	r21,r16,100146bc <__alt_data_end+0xf80146bc>
100146f0:	d8c02317 	ldw	r3,140(sp)
100146f4:	1405883a 	add	r2,r2,r16
100146f8:	44000115 	stw	r16,4(r8)
100146fc:	40c00015 	stw	r3,0(r8)
10014700:	d8801c15 	stw	r2,112(sp)
10014704:	d9401b15 	stw	r5,108(sp)
10014708:	00c001c4 	movi	r3,7
1001470c:	19401916 	blt	r3,r5,10014774 <___vfiprintf_internal_r+0xcf8>
10014710:	42000204 	addi	r8,r8,8
10014714:	29400044 	addi	r5,r5,1
10014718:	003e5506 	br	10014070 <__alt_data_end+0xf8014070>
1001471c:	d9402017 	ldw	r5,128(sp)
10014720:	d9002117 	ldw	r4,132(sp)
10014724:	d9801a04 	addi	r6,sp,104
10014728:	00139680 	call	10013968 <__sprint_r.part.0>
1001472c:	10000b1e 	bne	r2,zero,1001475c <___vfiprintf_internal_r+0xce0>
10014730:	d9001b17 	ldw	r4,108(sp)
10014734:	d8801c17 	ldw	r2,112(sp)
10014738:	d811883a 	mov	r8,sp
1001473c:	21400044 	addi	r5,r4,1
10014740:	003fdc06 	br	100146b4 <__alt_data_end+0xf80146b4>
10014744:	d8801c17 	ldw	r2,112(sp)
10014748:	10000426 	beq	r2,zero,1001475c <___vfiprintf_internal_r+0xce0>
1001474c:	d9402017 	ldw	r5,128(sp)
10014750:	d9002117 	ldw	r4,132(sp)
10014754:	d9801a04 	addi	r6,sp,104
10014758:	00139680 	call	10013968 <__sprint_r.part.0>
1001475c:	d9402017 	ldw	r5,128(sp)
10014760:	2880030b 	ldhu	r2,12(r5)
10014764:	1080100c 	andi	r2,r2,64
10014768:	10014d1e 	bne	r2,zero,10014ca0 <___vfiprintf_internal_r+0x1224>
1001476c:	d8802417 	ldw	r2,144(sp)
10014770:	003d9706 	br	10013dd0 <__alt_data_end+0xf8013dd0>
10014774:	1000d21e 	bne	r2,zero,10014ac0 <___vfiprintf_internal_r+0x1044>
10014778:	00c00044 	movi	r3,1
1001477c:	a005883a 	mov	r2,r20
10014780:	ddc00015 	stw	r23,0(sp)
10014784:	dd000115 	stw	r20,4(sp)
10014788:	dd001c15 	stw	r20,112(sp)
1001478c:	d8c01b15 	stw	r3,108(sp)
10014790:	d811883a 	mov	r8,sp
10014794:	42000204 	addi	r8,r8,8
10014798:	8c40010c 	andi	r17,r17,4
1001479c:	88004026 	beq	r17,zero,100148a0 <___vfiprintf_internal_r+0xe24>
100147a0:	d9002517 	ldw	r4,148(sp)
100147a4:	24e3c83a 	sub	r17,r4,r19
100147a8:	04403d0e 	bge	zero,r17,100148a0 <___vfiprintf_internal_r+0xe24>
100147ac:	04000404 	movi	r16,16
100147b0:	8441a90e 	bge	r16,r17,10014e58 <___vfiprintf_internal_r+0x13dc>
100147b4:	00c400b4 	movhi	r3,4098
100147b8:	18e7c404 	addi	r3,r3,-24816
100147bc:	d9001b17 	ldw	r4,108(sp)
100147c0:	d8c02315 	stw	r3,140(sp)
100147c4:	050001c4 	movi	r20,7
100147c8:	dd402117 	ldw	r21,132(sp)
100147cc:	ddc02017 	ldw	r23,128(sp)
100147d0:	00000506 	br	100147e8 <___vfiprintf_internal_r+0xd6c>
100147d4:	21400084 	addi	r5,r4,2
100147d8:	42000204 	addi	r8,r8,8
100147dc:	1809883a 	mov	r4,r3
100147e0:	8c7ffc04 	addi	r17,r17,-16
100147e4:	84400f0e 	bge	r16,r17,10014824 <___vfiprintf_internal_r+0xda8>
100147e8:	014400b4 	movhi	r5,4098
100147ec:	10800404 	addi	r2,r2,16
100147f0:	20c00044 	addi	r3,r4,1
100147f4:	2967c404 	addi	r5,r5,-24816
100147f8:	41400015 	stw	r5,0(r8)
100147fc:	44000115 	stw	r16,4(r8)
10014800:	d8801c15 	stw	r2,112(sp)
10014804:	d8c01b15 	stw	r3,108(sp)
10014808:	a0fff20e 	bge	r20,r3,100147d4 <__alt_data_end+0xf80147d4>
1001480c:	1000141e 	bne	r2,zero,10014860 <___vfiprintf_internal_r+0xde4>
10014810:	8c7ffc04 	addi	r17,r17,-16
10014814:	01400044 	movi	r5,1
10014818:	0009883a 	mov	r4,zero
1001481c:	d811883a 	mov	r8,sp
10014820:	847ff116 	blt	r16,r17,100147e8 <__alt_data_end+0xf80147e8>
10014824:	d8c02317 	ldw	r3,140(sp)
10014828:	1445883a 	add	r2,r2,r17
1001482c:	44400115 	stw	r17,4(r8)
10014830:	40c00015 	stw	r3,0(r8)
10014834:	d8801c15 	stw	r2,112(sp)
10014838:	d9401b15 	stw	r5,108(sp)
1001483c:	00c001c4 	movi	r3,7
10014840:	1940170e 	bge	r3,r5,100148a0 <___vfiprintf_internal_r+0xe24>
10014844:	1000101e 	bne	r2,zero,10014888 <___vfiprintf_internal_r+0xe0c>
10014848:	d8802517 	ldw	r2,148(sp)
1001484c:	14c11616 	blt	r2,r19,10014ca8 <___vfiprintf_internal_r+0x122c>
10014850:	d9002417 	ldw	r4,144(sp)
10014854:	2089883a 	add	r4,r4,r2
10014858:	d9002415 	stw	r4,144(sp)
1001485c:	003e1806 	br	100140c0 <__alt_data_end+0xf80140c0>
10014860:	d9801a04 	addi	r6,sp,104
10014864:	b80b883a 	mov	r5,r23
10014868:	a809883a 	mov	r4,r21
1001486c:	00139680 	call	10013968 <__sprint_r.part.0>
10014870:	103fba1e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014874:	d9001b17 	ldw	r4,108(sp)
10014878:	d8801c17 	ldw	r2,112(sp)
1001487c:	d811883a 	mov	r8,sp
10014880:	21400044 	addi	r5,r4,1
10014884:	003fd606 	br	100147e0 <__alt_data_end+0xf80147e0>
10014888:	d9402017 	ldw	r5,128(sp)
1001488c:	d9002117 	ldw	r4,132(sp)
10014890:	d9801a04 	addi	r6,sp,104
10014894:	00139680 	call	10013968 <__sprint_r.part.0>
10014898:	103fb01e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
1001489c:	d8801c17 	ldw	r2,112(sp)
100148a0:	d8c02517 	ldw	r3,148(sp)
100148a4:	1cc0010e 	bge	r3,r19,100148ac <___vfiprintf_internal_r+0xe30>
100148a8:	9807883a 	mov	r3,r19
100148ac:	d9002417 	ldw	r4,144(sp)
100148b0:	20c9883a 	add	r4,r4,r3
100148b4:	d9002415 	stw	r4,144(sp)
100148b8:	103e0126 	beq	r2,zero,100140c0 <__alt_data_end+0xf80140c0>
100148bc:	d9402017 	ldw	r5,128(sp)
100148c0:	d9002117 	ldw	r4,132(sp)
100148c4:	d9801a04 	addi	r6,sp,104
100148c8:	00139680 	call	10013968 <__sprint_r.part.0>
100148cc:	103dfc26 	beq	r2,zero,100140c0 <__alt_data_end+0xf80140c0>
100148d0:	003fa206 	br	1001475c <__alt_data_end+0xf801475c>
100148d4:	d9402017 	ldw	r5,128(sp)
100148d8:	d9002117 	ldw	r4,132(sp)
100148dc:	d9801a04 	addi	r6,sp,104
100148e0:	d9c02b15 	stw	r7,172(sp)
100148e4:	00139680 	call	10013968 <__sprint_r.part.0>
100148e8:	d9c02b17 	ldw	r7,172(sp)
100148ec:	103f9b1e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
100148f0:	d9001b17 	ldw	r4,108(sp)
100148f4:	d8801c17 	ldw	r2,112(sp)
100148f8:	d811883a 	mov	r8,sp
100148fc:	21800044 	addi	r6,r4,1
10014900:	003dbf06 	br	10014000 <__alt_data_end+0xf8014000>
10014904:	1000d81e 	bne	r2,zero,10014c68 <___vfiprintf_internal_r+0x11ec>
10014908:	d9001d87 	ldb	r4,118(sp)
1001490c:	20000a26 	beq	r4,zero,10014938 <___vfiprintf_internal_r+0xebc>
10014910:	00800044 	movi	r2,1
10014914:	d9001d84 	addi	r4,sp,118
10014918:	100b883a 	mov	r5,r2
1001491c:	d9000015 	stw	r4,0(sp)
10014920:	d8800115 	stw	r2,4(sp)
10014924:	d811883a 	mov	r8,sp
10014928:	2809883a 	mov	r4,r5
1001492c:	42000204 	addi	r8,r8,8
10014930:	29400044 	addi	r5,r5,1
10014934:	003d9506 	br	10013f8c <__alt_data_end+0xf8013f8c>
10014938:	3800fd26 	beq	r7,zero,10014d30 <___vfiprintf_internal_r+0x12b4>
1001493c:	00800084 	movi	r2,2
10014940:	d9001d04 	addi	r4,sp,116
10014944:	d9000015 	stw	r4,0(sp)
10014948:	d8800115 	stw	r2,4(sp)
1001494c:	01400044 	movi	r5,1
10014950:	d811883a 	mov	r8,sp
10014954:	2809883a 	mov	r4,r5
10014958:	42000204 	addi	r8,r8,8
1001495c:	29400044 	addi	r5,r5,1
10014960:	003f4606 	br	1001467c <__alt_data_end+0xf801467c>
10014964:	d8802517 	ldw	r2,148(sp)
10014968:	14c0010e 	bge	r2,r19,10014970 <___vfiprintf_internal_r+0xef4>
1001496c:	9805883a 	mov	r2,r19
10014970:	d9402417 	ldw	r5,144(sp)
10014974:	288b883a 	add	r5,r5,r2
10014978:	d9402415 	stw	r5,144(sp)
1001497c:	003dd006 	br	100140c0 <__alt_data_end+0xf80140c0>
10014980:	d8001d85 	stb	zero,118(sp)
10014984:	80005d16 	blt	r16,zero,10014afc <___vfiprintf_internal_r+0x1080>
10014988:	00ffdfc4 	movi	r3,-129
1001498c:	9d04b03a 	or	r2,r19,r20
10014990:	88e2703a 	and	r17,r17,r3
10014994:	103d3726 	beq	r2,zero,10013e74 <__alt_data_end+0xf8013e74>
10014998:	002b883a 	mov	r21,zero
1001499c:	d9002617 	ldw	r4,152(sp)
100149a0:	ddc01a04 	addi	r23,sp,104
100149a4:	988003cc 	andi	r2,r19,15
100149a8:	a006973a 	slli	r3,r20,28
100149ac:	2085883a 	add	r2,r4,r2
100149b0:	9826d13a 	srli	r19,r19,4
100149b4:	10800003 	ldbu	r2,0(r2)
100149b8:	a028d13a 	srli	r20,r20,4
100149bc:	bdffffc4 	addi	r23,r23,-1
100149c0:	1ce6b03a 	or	r19,r3,r19
100149c4:	b8800005 	stb	r2,0(r23)
100149c8:	9d04b03a 	or	r2,r19,r20
100149cc:	103ff51e 	bne	r2,zero,100149a4 <__alt_data_end+0xf80149a4>
100149d0:	d8801e17 	ldw	r2,120(sp)
100149d4:	15e9c83a 	sub	r20,r2,r23
100149d8:	003d2b06 	br	10013e88 <__alt_data_end+0xf8013e88>
100149dc:	d9402017 	ldw	r5,128(sp)
100149e0:	d9002117 	ldw	r4,132(sp)
100149e4:	d9801a04 	addi	r6,sp,104
100149e8:	00139680 	call	10013968 <__sprint_r.part.0>
100149ec:	103f5b1e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
100149f0:	d8801c17 	ldw	r2,112(sp)
100149f4:	d811883a 	mov	r8,sp
100149f8:	003f6706 	br	10014798 <__alt_data_end+0xf8014798>
100149fc:	d9402017 	ldw	r5,128(sp)
10014a00:	d9002117 	ldw	r4,132(sp)
10014a04:	d9801a04 	addi	r6,sp,104
10014a08:	00139680 	call	10013968 <__sprint_r.part.0>
10014a0c:	103f531e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014a10:	d811883a 	mov	r8,sp
10014a14:	003cd906 	br	10013d7c <__alt_data_end+0xf8013d7c>
10014a18:	10803fcc 	andi	r2,r2,255
10014a1c:	1080201c 	xori	r2,r2,128
10014a20:	10bfe004 	addi	r2,r2,-128
10014a24:	00c00c04 	movi	r3,48
10014a28:	10ffe926 	beq	r2,r3,100149d0 <__alt_data_end+0xf80149d0>
10014a2c:	b8ffffc5 	stb	r3,-1(r23)
10014a30:	d8c01e17 	ldw	r3,120(sp)
10014a34:	b8bfffc4 	addi	r2,r23,-1
10014a38:	102f883a 	mov	r23,r2
10014a3c:	18a9c83a 	sub	r20,r3,r2
10014a40:	003d1106 	br	10013e88 <__alt_data_end+0xf8013e88>
10014a44:	d9402017 	ldw	r5,128(sp)
10014a48:	d9002117 	ldw	r4,132(sp)
10014a4c:	d9801a04 	addi	r6,sp,104
10014a50:	d8c02a15 	stw	r3,168(sp)
10014a54:	d9c02b15 	stw	r7,172(sp)
10014a58:	00139680 	call	10013968 <__sprint_r.part.0>
10014a5c:	d8c02a17 	ldw	r3,168(sp)
10014a60:	d9c02b17 	ldw	r7,172(sp)
10014a64:	103f3d1e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014a68:	d9001b17 	ldw	r4,108(sp)
10014a6c:	d8801c17 	ldw	r2,112(sp)
10014a70:	d811883a 	mov	r8,sp
10014a74:	21400044 	addi	r5,r4,1
10014a78:	003d4406 	br	10013f8c <__alt_data_end+0xf8013f8c>
10014a7c:	d9402017 	ldw	r5,128(sp)
10014a80:	d9002117 	ldw	r4,132(sp)
10014a84:	d9801a04 	addi	r6,sp,104
10014a88:	d8c02a15 	stw	r3,168(sp)
10014a8c:	00139680 	call	10013968 <__sprint_r.part.0>
10014a90:	d8c02a17 	ldw	r3,168(sp)
10014a94:	103f311e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014a98:	d9001b17 	ldw	r4,108(sp)
10014a9c:	d8801c17 	ldw	r2,112(sp)
10014aa0:	d811883a 	mov	r8,sp
10014aa4:	21400044 	addi	r5,r4,1
10014aa8:	003ef406 	br	1001467c <__alt_data_end+0xf801467c>
10014aac:	1000bd1e 	bne	r2,zero,10014da4 <___vfiprintf_internal_r+0x1328>
10014ab0:	01400044 	movi	r5,1
10014ab4:	0009883a 	mov	r4,zero
10014ab8:	d811883a 	mov	r8,sp
10014abc:	003ef106 	br	10014684 <__alt_data_end+0xf8014684>
10014ac0:	d9402017 	ldw	r5,128(sp)
10014ac4:	d9002117 	ldw	r4,132(sp)
10014ac8:	d9801a04 	addi	r6,sp,104
10014acc:	00139680 	call	10013968 <__sprint_r.part.0>
10014ad0:	103f221e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014ad4:	d9401b17 	ldw	r5,108(sp)
10014ad8:	d8801c17 	ldw	r2,112(sp)
10014adc:	d811883a 	mov	r8,sp
10014ae0:	29400044 	addi	r5,r5,1
10014ae4:	003d6206 	br	10014070 <__alt_data_end+0xf8014070>
10014ae8:	014400b4 	movhi	r5,4098
10014aec:	29676004 	addi	r5,r5,-25216
10014af0:	d9402615 	stw	r5,152(sp)
10014af4:	d8c02215 	stw	r3,136(sp)
10014af8:	1023883a 	mov	r17,r2
10014afc:	9d04b03a 	or	r2,r19,r20
10014b00:	103fa51e 	bne	r2,zero,10014998 <__alt_data_end+0xf8014998>
10014b04:	002b883a 	mov	r21,zero
10014b08:	00800084 	movi	r2,2
10014b0c:	003e4a06 	br	10014438 <__alt_data_end+0xf8014438>
10014b10:	014400b4 	movhi	r5,4098
10014b14:	29676004 	addi	r5,r5,-25216
10014b18:	002b883a 	mov	r21,zero
10014b1c:	d9402615 	stw	r5,152(sp)
10014b20:	003f9e06 	br	1001499c <__alt_data_end+0xf801499c>
10014b24:	d9402217 	ldw	r5,136(sp)
10014b28:	d8001d85 	stb	zero,118(sp)
10014b2c:	0029883a 	mov	r20,zero
10014b30:	28800104 	addi	r2,r5,4
10014b34:	2cc00017 	ldw	r19,0(r5)
10014b38:	803e3a16 	blt	r16,zero,10014424 <__alt_data_end+0xf8014424>
10014b3c:	00ffdfc4 	movi	r3,-129
10014b40:	d8802215 	stw	r2,136(sp)
10014b44:	88e2703a 	and	r17,r17,r3
10014b48:	002b883a 	mov	r21,zero
10014b4c:	983e9b26 	beq	r19,zero,100145bc <__alt_data_end+0xf80145bc>
10014b50:	00800244 	movi	r2,9
10014b54:	14fdc936 	bltu	r2,r19,1001427c <__alt_data_end+0xf801427c>
10014b58:	003e9a06 	br	100145c4 <__alt_data_end+0xf80145c4>
10014b5c:	00800c04 	movi	r2,48
10014b60:	d8c01d45 	stb	r3,117(sp)
10014b64:	d8801d05 	stb	r2,116(sp)
10014b68:	d8001d85 	stb	zero,118(sp)
10014b6c:	88c00094 	ori	r3,r17,2
10014b70:	80009c16 	blt	r16,zero,10014de4 <___vfiprintf_internal_r+0x1368>
10014b74:	00bfdfc4 	movi	r2,-129
10014b78:	88a2703a 	and	r17,r17,r2
10014b7c:	8c400094 	ori	r17,r17,2
10014b80:	002b883a 	mov	r21,zero
10014b84:	003f8506 	br	1001499c <__alt_data_end+0xf801499c>
10014b88:	b029883a 	mov	r20,r22
10014b8c:	003c0b06 	br	10013bbc <__alt_data_end+0xf8013bbc>
10014b90:	04e7c83a 	sub	r19,zero,r19
10014b94:	05400b44 	movi	r21,45
10014b98:	9804c03a 	cmpne	r2,r19,zero
10014b9c:	0529c83a 	sub	r20,zero,r20
10014ba0:	dd401d85 	stb	r21,118(sp)
10014ba4:	a0a9c83a 	sub	r20,r20,r2
10014ba8:	80009716 	blt	r16,zero,10014e08 <___vfiprintf_internal_r+0x138c>
10014bac:	00bfdfc4 	movi	r2,-129
10014bb0:	88a2703a 	and	r17,r17,r2
10014bb4:	003db006 	br	10014278 <__alt_data_end+0xf8014278>
10014bb8:	b0c00007 	ldb	r3,0(r22)
10014bbc:	003c0c06 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014bc0:	8880100c 	andi	r2,r17,64
10014bc4:	d8001d85 	stb	zero,118(sp)
10014bc8:	1000461e 	bne	r2,zero,10014ce4 <___vfiprintf_internal_r+0x1268>
10014bcc:	d9002217 	ldw	r4,136(sp)
10014bd0:	0029883a 	mov	r20,zero
10014bd4:	20800104 	addi	r2,r4,4
10014bd8:	24c00017 	ldw	r19,0(r4)
10014bdc:	803df80e 	bge	r16,zero,100143c0 <__alt_data_end+0xf80143c0>
10014be0:	9d06b03a 	or	r3,r19,r20
10014be4:	d8802215 	stw	r2,136(sp)
10014be8:	183d5e1e 	bne	r3,zero,10014164 <__alt_data_end+0xf8014164>
10014bec:	002b883a 	mov	r21,zero
10014bf0:	0005883a 	mov	r2,zero
10014bf4:	003e1006 	br	10014438 <__alt_data_end+0xf8014438>
10014bf8:	8880040c 	andi	r2,r17,16
10014bfc:	1000321e 	bne	r2,zero,10014cc8 <___vfiprintf_internal_r+0x124c>
10014c00:	8c40100c 	andi	r17,r17,64
10014c04:	88008d26 	beq	r17,zero,10014e3c <___vfiprintf_internal_r+0x13c0>
10014c08:	d9402217 	ldw	r5,136(sp)
10014c0c:	d8c02417 	ldw	r3,144(sp)
10014c10:	28800017 	ldw	r2,0(r5)
10014c14:	29400104 	addi	r5,r5,4
10014c18:	d9402215 	stw	r5,136(sp)
10014c1c:	10c0000d 	sth	r3,0(r2)
10014c20:	003bca06 	br	10013b4c <__alt_data_end+0xf8013b4c>
10014c24:	8880100c 	andi	r2,r17,64
10014c28:	10003a26 	beq	r2,zero,10014d14 <___vfiprintf_internal_r+0x1298>
10014c2c:	d8802217 	ldw	r2,136(sp)
10014c30:	14c0000f 	ldh	r19,0(r2)
10014c34:	10800104 	addi	r2,r2,4
10014c38:	d8802215 	stw	r2,136(sp)
10014c3c:	9829d7fa 	srai	r20,r19,31
10014c40:	a005883a 	mov	r2,r20
10014c44:	003d8506 	br	1001425c <__alt_data_end+0xf801425c>
10014c48:	8880100c 	andi	r2,r17,64
10014c4c:	10002b26 	beq	r2,zero,10014cfc <___vfiprintf_internal_r+0x1280>
10014c50:	d8802217 	ldw	r2,136(sp)
10014c54:	0029883a 	mov	r20,zero
10014c58:	14c0000b 	ldhu	r19,0(r2)
10014c5c:	10800104 	addi	r2,r2,4
10014c60:	d8802215 	stw	r2,136(sp)
10014c64:	003d5d06 	br	100141dc <__alt_data_end+0xf80141dc>
10014c68:	d9402017 	ldw	r5,128(sp)
10014c6c:	d9002117 	ldw	r4,132(sp)
10014c70:	d9801a04 	addi	r6,sp,104
10014c74:	d8c02a15 	stw	r3,168(sp)
10014c78:	d9c02b15 	stw	r7,172(sp)
10014c7c:	00139680 	call	10013968 <__sprint_r.part.0>
10014c80:	d8c02a17 	ldw	r3,168(sp)
10014c84:	d9c02b17 	ldw	r7,172(sp)
10014c88:	103eb41e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014c8c:	d9001b17 	ldw	r4,108(sp)
10014c90:	d8801c17 	ldw	r2,112(sp)
10014c94:	d811883a 	mov	r8,sp
10014c98:	21400044 	addi	r5,r4,1
10014c9c:	003e6706 	br	1001463c <__alt_data_end+0xf801463c>
10014ca0:	00bfffc4 	movi	r2,-1
10014ca4:	003c4a06 	br	10013dd0 <__alt_data_end+0xf8013dd0>
10014ca8:	9805883a 	mov	r2,r19
10014cac:	003ee806 	br	10014850 <__alt_data_end+0xf8014850>
10014cb0:	d8c02217 	ldw	r3,136(sp)
10014cb4:	0029883a 	mov	r20,zero
10014cb8:	18800104 	addi	r2,r3,4
10014cbc:	1cc0000b 	ldhu	r19,0(r3)
10014cc0:	803f9e0e 	bge	r16,zero,10014b3c <__alt_data_end+0xf8014b3c>
10014cc4:	003dd706 	br	10014424 <__alt_data_end+0xf8014424>
10014cc8:	d8c02217 	ldw	r3,136(sp)
10014ccc:	d9002417 	ldw	r4,144(sp)
10014cd0:	18800017 	ldw	r2,0(r3)
10014cd4:	18c00104 	addi	r3,r3,4
10014cd8:	d8c02215 	stw	r3,136(sp)
10014cdc:	11000015 	stw	r4,0(r2)
10014ce0:	003b9a06 	br	10013b4c <__alt_data_end+0xf8013b4c>
10014ce4:	d8c02217 	ldw	r3,136(sp)
10014ce8:	0029883a 	mov	r20,zero
10014cec:	18800104 	addi	r2,r3,4
10014cf0:	1cc0000b 	ldhu	r19,0(r3)
10014cf4:	803db20e 	bge	r16,zero,100143c0 <__alt_data_end+0xf80143c0>
10014cf8:	003fb906 	br	10014be0 <__alt_data_end+0xf8014be0>
10014cfc:	d9002217 	ldw	r4,136(sp)
10014d00:	0029883a 	mov	r20,zero
10014d04:	24c00017 	ldw	r19,0(r4)
10014d08:	21000104 	addi	r4,r4,4
10014d0c:	d9002215 	stw	r4,136(sp)
10014d10:	003d3206 	br	100141dc <__alt_data_end+0xf80141dc>
10014d14:	d8c02217 	ldw	r3,136(sp)
10014d18:	1cc00017 	ldw	r19,0(r3)
10014d1c:	18c00104 	addi	r3,r3,4
10014d20:	d8c02215 	stw	r3,136(sp)
10014d24:	9829d7fa 	srai	r20,r19,31
10014d28:	a005883a 	mov	r2,r20
10014d2c:	003d4b06 	br	1001425c <__alt_data_end+0xf801425c>
10014d30:	0009883a 	mov	r4,zero
10014d34:	01400044 	movi	r5,1
10014d38:	d811883a 	mov	r8,sp
10014d3c:	003e4f06 	br	1001467c <__alt_data_end+0xf801467c>
10014d40:	d8c02215 	stw	r3,136(sp)
10014d44:	002b883a 	mov	r21,zero
10014d48:	003db806 	br	1001442c <__alt_data_end+0xf801442c>
10014d4c:	d811883a 	mov	r8,sp
10014d50:	003e9606 	br	100147ac <__alt_data_end+0xf80147ac>
10014d54:	010400b4 	movhi	r4,4098
10014d58:	2127c004 	addi	r4,r4,-24832
10014d5c:	d9002315 	stw	r4,140(sp)
10014d60:	003e6306 	br	100146f0 <__alt_data_end+0xf80146f0>
10014d64:	b0c00043 	ldbu	r3,1(r22)
10014d68:	8c400814 	ori	r17,r17,32
10014d6c:	b5800044 	addi	r22,r22,1
10014d70:	18c03fcc 	andi	r3,r3,255
10014d74:	18c0201c 	xori	r3,r3,128
10014d78:	18ffe004 	addi	r3,r3,-128
10014d7c:	003b9c06 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014d80:	b809883a 	mov	r4,r23
10014d84:	da002a15 	stw	r8,168(sp)
10014d88:	000c1380 	call	1000c138 <strlen>
10014d8c:	1029883a 	mov	r20,r2
10014d90:	dd401d83 	ldbu	r21,118(sp)
10014d94:	df002215 	stw	fp,136(sp)
10014d98:	0021883a 	mov	r16,zero
10014d9c:	da002a17 	ldw	r8,168(sp)
10014da0:	003c3906 	br	10013e88 <__alt_data_end+0xf8013e88>
10014da4:	d9402017 	ldw	r5,128(sp)
10014da8:	d9002117 	ldw	r4,132(sp)
10014dac:	d9801a04 	addi	r6,sp,104
10014db0:	00139680 	call	10013968 <__sprint_r.part.0>
10014db4:	103e691e 	bne	r2,zero,1001475c <__alt_data_end+0xf801475c>
10014db8:	d9001b17 	ldw	r4,108(sp)
10014dbc:	d8801c17 	ldw	r2,112(sp)
10014dc0:	d811883a 	mov	r8,sp
10014dc4:	21400044 	addi	r5,r4,1
10014dc8:	003e2e06 	br	10014684 <__alt_data_end+0xf8014684>
10014dcc:	010400b4 	movhi	r4,4098
10014dd0:	2127c404 	addi	r4,r4,-24816
10014dd4:	d9002315 	stw	r4,140(sp)
10014dd8:	d9001b17 	ldw	r4,108(sp)
10014ddc:	21000044 	addi	r4,r4,1
10014de0:	003c5e06 	br	10013f5c <__alt_data_end+0xf8013f5c>
10014de4:	002b883a 	mov	r21,zero
10014de8:	00800084 	movi	r2,2
10014dec:	10803fcc 	andi	r2,r2,255
10014df0:	01000044 	movi	r4,1
10014df4:	11002b26 	beq	r2,r4,10014ea4 <___vfiprintf_internal_r+0x1428>
10014df8:	01000084 	movi	r4,2
10014dfc:	11002b1e 	bne	r2,r4,10014eac <___vfiprintf_internal_r+0x1430>
10014e00:	1823883a 	mov	r17,r3
10014e04:	003ee506 	br	1001499c <__alt_data_end+0xf801499c>
10014e08:	8807883a 	mov	r3,r17
10014e0c:	00800044 	movi	r2,1
10014e10:	003ff606 	br	10014dec <__alt_data_end+0xf8014dec>
10014e14:	00800184 	movi	r2,6
10014e18:	1400012e 	bgeu	r2,r16,10014e20 <___vfiprintf_internal_r+0x13a4>
10014e1c:	1021883a 	mov	r16,r2
10014e20:	8029883a 	mov	r20,r16
10014e24:	8027883a 	mov	r19,r16
10014e28:	80002216 	blt	r16,zero,10014eb4 <___vfiprintf_internal_r+0x1438>
10014e2c:	05c400b4 	movhi	r23,4098
10014e30:	df002215 	stw	fp,136(sp)
10014e34:	bde76504 	addi	r23,r23,-25196
10014e38:	003cfb06 	br	10014228 <__alt_data_end+0xf8014228>
10014e3c:	d9002217 	ldw	r4,136(sp)
10014e40:	d9402417 	ldw	r5,144(sp)
10014e44:	20800017 	ldw	r2,0(r4)
10014e48:	21000104 	addi	r4,r4,4
10014e4c:	d9002215 	stw	r4,136(sp)
10014e50:	11400015 	stw	r5,0(r2)
10014e54:	003b3d06 	br	10013b4c <__alt_data_end+0xf8013b4c>
10014e58:	014400b4 	movhi	r5,4098
10014e5c:	2967c404 	addi	r5,r5,-24816
10014e60:	d9402315 	stw	r5,140(sp)
10014e64:	d9401b17 	ldw	r5,108(sp)
10014e68:	29400044 	addi	r5,r5,1
10014e6c:	003e6d06 	br	10014824 <__alt_data_end+0xf8014824>
10014e70:	8029883a 	mov	r20,r16
10014e74:	dd401d83 	ldbu	r21,118(sp)
10014e78:	df002215 	stw	fp,136(sp)
10014e7c:	0021883a 	mov	r16,zero
10014e80:	003c0106 	br	10013e88 <__alt_data_end+0xf8013e88>
10014e84:	00c400b4 	movhi	r3,4098
10014e88:	18e7c004 	addi	r3,r3,-24832
10014e8c:	d8c02315 	stw	r3,140(sp)
10014e90:	280d883a 	mov	r6,r5
10014e94:	003c6906 	br	1001403c <__alt_data_end+0xf801403c>
10014e98:	802d883a 	mov	r22,r16
10014e9c:	0021883a 	mov	r16,zero
10014ea0:	003b5406 	br	10013bf4 <__alt_data_end+0xf8013bf4>
10014ea4:	1823883a 	mov	r17,r3
10014ea8:	003cf306 	br	10014278 <__alt_data_end+0xf8014278>
10014eac:	1823883a 	mov	r17,r3
10014eb0:	003cad06 	br	10014168 <__alt_data_end+0xf8014168>
10014eb4:	0027883a 	mov	r19,zero
10014eb8:	003fdc06 	br	10014e2c <__alt_data_end+0xf8014e2c>
10014ebc:	d9402217 	ldw	r5,136(sp)
10014ec0:	8005883a 	mov	r2,r16
10014ec4:	b0c00043 	ldbu	r3,1(r22)
10014ec8:	2c000017 	ldw	r16,0(r5)
10014ecc:	29000104 	addi	r4,r5,4
10014ed0:	d9002215 	stw	r4,136(sp)
10014ed4:	102d883a 	mov	r22,r2
10014ed8:	803fa50e 	bge	r16,zero,10014d70 <__alt_data_end+0xf8014d70>
10014edc:	18c03fcc 	andi	r3,r3,255
10014ee0:	18c0201c 	xori	r3,r3,128
10014ee4:	043fffc4 	movi	r16,-1
10014ee8:	18ffe004 	addi	r3,r3,-128
10014eec:	003b4006 	br	10013bf0 <__alt_data_end+0xf8013bf0>
10014ef0:	d9402303 	ldbu	r5,140(sp)
10014ef4:	d9401d85 	stb	r5,118(sp)
10014ef8:	003cae06 	br	100141b4 <__alt_data_end+0xf80141b4>
10014efc:	d8c02303 	ldbu	r3,140(sp)
10014f00:	d8c01d85 	stb	r3,118(sp)
10014f04:	003d1406 	br	10014358 <__alt_data_end+0xf8014358>
10014f08:	d8c02303 	ldbu	r3,140(sp)
10014f0c:	d8c01d85 	stb	r3,118(sp)
10014f10:	003cca06 	br	1001423c <__alt_data_end+0xf801423c>
10014f14:	8880004c 	andi	r2,r17,1
10014f18:	002b883a 	mov	r21,zero
10014f1c:	10000526 	beq	r2,zero,10014f34 <___vfiprintf_internal_r+0x14b8>
10014f20:	00800c04 	movi	r2,48
10014f24:	d88019c5 	stb	r2,103(sp)
10014f28:	dd002817 	ldw	r20,160(sp)
10014f2c:	ddc019c4 	addi	r23,sp,103
10014f30:	003bd506 	br	10013e88 <__alt_data_end+0xf8013e88>
10014f34:	0029883a 	mov	r20,zero
10014f38:	ddc01a04 	addi	r23,sp,104
10014f3c:	003bd206 	br	10013e88 <__alt_data_end+0xf8013e88>
10014f40:	d9002303 	ldbu	r4,140(sp)
10014f44:	d9001d85 	stb	r4,118(sp)
10014f48:	003da606 	br	100145e4 <__alt_data_end+0xf80145e4>
10014f4c:	d8c02303 	ldbu	r3,140(sp)
10014f50:	d8c01d85 	stb	r3,118(sp)
10014f54:	003c7606 	br	10014130 <__alt_data_end+0xf8014130>
10014f58:	d8c02303 	ldbu	r3,140(sp)
10014f5c:	d8c01d85 	stb	r3,118(sp)
10014f60:	003c6506 	br	100140f8 <__alt_data_end+0xf80140f8>
10014f64:	d9002303 	ldbu	r4,140(sp)
10014f68:	d9001d85 	stb	r4,118(sp)
10014f6c:	003d3d06 	br	10014464 <__alt_data_end+0xf8014464>
10014f70:	d8c02303 	ldbu	r3,140(sp)
10014f74:	d8c01d85 	stb	r3,118(sp)
10014f78:	003d1d06 	br	100143f0 <__alt_data_end+0xf80143f0>
10014f7c:	d8c02303 	ldbu	r3,140(sp)
10014f80:	d8c01d85 	stb	r3,118(sp)
10014f84:	003d0306 	br	10014394 <__alt_data_end+0xf8014394>

10014f88 <__vfiprintf_internal>:
10014f88:	008400b4 	movhi	r2,4098
10014f8c:	10af4504 	addi	r2,r2,-17132
10014f90:	300f883a 	mov	r7,r6
10014f94:	280d883a 	mov	r6,r5
10014f98:	200b883a 	mov	r5,r4
10014f9c:	11000017 	ldw	r4,0(r2)
10014fa0:	0013a7c1 	jmpi	10013a7c <___vfiprintf_internal_r>

10014fa4 <__sbprintf>:
10014fa4:	2880030b 	ldhu	r2,12(r5)
10014fa8:	2ac01917 	ldw	r11,100(r5)
10014fac:	2a80038b 	ldhu	r10,14(r5)
10014fb0:	2a400717 	ldw	r9,28(r5)
10014fb4:	2a000917 	ldw	r8,36(r5)
10014fb8:	defee204 	addi	sp,sp,-1144
10014fbc:	00c10004 	movi	r3,1024
10014fc0:	dc011a15 	stw	r16,1128(sp)
10014fc4:	10bfff4c 	andi	r2,r2,65533
10014fc8:	2821883a 	mov	r16,r5
10014fcc:	d8cb883a 	add	r5,sp,r3
10014fd0:	dc811c15 	stw	r18,1136(sp)
10014fd4:	dc411b15 	stw	r17,1132(sp)
10014fd8:	dfc11d15 	stw	ra,1140(sp)
10014fdc:	2025883a 	mov	r18,r4
10014fe0:	d881030d 	sth	r2,1036(sp)
10014fe4:	dac11915 	stw	r11,1124(sp)
10014fe8:	da81038d 	sth	r10,1038(sp)
10014fec:	da410715 	stw	r9,1052(sp)
10014ff0:	da010915 	stw	r8,1060(sp)
10014ff4:	dec10015 	stw	sp,1024(sp)
10014ff8:	dec10415 	stw	sp,1040(sp)
10014ffc:	d8c10215 	stw	r3,1032(sp)
10015000:	d8c10515 	stw	r3,1044(sp)
10015004:	d8010615 	stw	zero,1048(sp)
10015008:	0013a7c0 	call	10013a7c <___vfiprintf_internal_r>
1001500c:	1023883a 	mov	r17,r2
10015010:	10000416 	blt	r2,zero,10015024 <__sbprintf+0x80>
10015014:	d9410004 	addi	r5,sp,1024
10015018:	9009883a 	mov	r4,r18
1001501c:	00101fc0 	call	100101fc <_fflush_r>
10015020:	10000d1e 	bne	r2,zero,10015058 <__sbprintf+0xb4>
10015024:	d881030b 	ldhu	r2,1036(sp)
10015028:	1080100c 	andi	r2,r2,64
1001502c:	10000326 	beq	r2,zero,1001503c <__sbprintf+0x98>
10015030:	8080030b 	ldhu	r2,12(r16)
10015034:	10801014 	ori	r2,r2,64
10015038:	8080030d 	sth	r2,12(r16)
1001503c:	8805883a 	mov	r2,r17
10015040:	dfc11d17 	ldw	ra,1140(sp)
10015044:	dc811c17 	ldw	r18,1136(sp)
10015048:	dc411b17 	ldw	r17,1132(sp)
1001504c:	dc011a17 	ldw	r16,1128(sp)
10015050:	dec11e04 	addi	sp,sp,1144
10015054:	f800283a 	ret
10015058:	047fffc4 	movi	r17,-1
1001505c:	003ff106 	br	10015024 <__alt_data_end+0xf8015024>

10015060 <_write_r>:
10015060:	defffd04 	addi	sp,sp,-12
10015064:	2805883a 	mov	r2,r5
10015068:	dc000015 	stw	r16,0(sp)
1001506c:	040400b4 	movhi	r16,4098
10015070:	dc400115 	stw	r17,4(sp)
10015074:	300b883a 	mov	r5,r6
10015078:	8436d904 	addi	r16,r16,-9372
1001507c:	2023883a 	mov	r17,r4
10015080:	380d883a 	mov	r6,r7
10015084:	1009883a 	mov	r4,r2
10015088:	dfc00215 	stw	ra,8(sp)
1001508c:	80000015 	stw	zero,0(r16)
10015090:	00174180 	call	10017418 <write>
10015094:	00ffffc4 	movi	r3,-1
10015098:	10c00526 	beq	r2,r3,100150b0 <_write_r+0x50>
1001509c:	dfc00217 	ldw	ra,8(sp)
100150a0:	dc400117 	ldw	r17,4(sp)
100150a4:	dc000017 	ldw	r16,0(sp)
100150a8:	dec00304 	addi	sp,sp,12
100150ac:	f800283a 	ret
100150b0:	80c00017 	ldw	r3,0(r16)
100150b4:	183ff926 	beq	r3,zero,1001509c <__alt_data_end+0xf801509c>
100150b8:	88c00015 	stw	r3,0(r17)
100150bc:	003ff706 	br	1001509c <__alt_data_end+0xf801509c>

100150c0 <_close_r>:
100150c0:	defffd04 	addi	sp,sp,-12
100150c4:	dc000015 	stw	r16,0(sp)
100150c8:	040400b4 	movhi	r16,4098
100150cc:	dc400115 	stw	r17,4(sp)
100150d0:	8436d904 	addi	r16,r16,-9372
100150d4:	2023883a 	mov	r17,r4
100150d8:	2809883a 	mov	r4,r5
100150dc:	dfc00215 	stw	ra,8(sp)
100150e0:	80000015 	stw	zero,0(r16)
100150e4:	00167440 	call	10016744 <close>
100150e8:	00ffffc4 	movi	r3,-1
100150ec:	10c00526 	beq	r2,r3,10015104 <_close_r+0x44>
100150f0:	dfc00217 	ldw	ra,8(sp)
100150f4:	dc400117 	ldw	r17,4(sp)
100150f8:	dc000017 	ldw	r16,0(sp)
100150fc:	dec00304 	addi	sp,sp,12
10015100:	f800283a 	ret
10015104:	80c00017 	ldw	r3,0(r16)
10015108:	183ff926 	beq	r3,zero,100150f0 <__alt_data_end+0xf80150f0>
1001510c:	88c00015 	stw	r3,0(r17)
10015110:	003ff706 	br	100150f0 <__alt_data_end+0xf80150f0>

10015114 <_calloc_r>:
10015114:	defffe04 	addi	sp,sp,-8
10015118:	2805883a 	mov	r2,r5
1001511c:	dc000015 	stw	r16,0(sp)
10015120:	300b883a 	mov	r5,r6
10015124:	2021883a 	mov	r16,r4
10015128:	1009883a 	mov	r4,r2
1001512c:	dfc00115 	stw	ra,4(sp)
10015130:	00085800 	call	10008580 <__mulsi3>
10015134:	100b883a 	mov	r5,r2
10015138:	8009883a 	mov	r4,r16
1001513c:	00113b00 	call	100113b0 <_malloc_r>
10015140:	10002926 	beq	r2,zero,100151e8 <_calloc_r+0xd4>
10015144:	11bfff17 	ldw	r6,-4(r2)
10015148:	1021883a 	mov	r16,r2
1001514c:	00bfff04 	movi	r2,-4
10015150:	308c703a 	and	r6,r6,r2
10015154:	00c00904 	movi	r3,36
10015158:	308d883a 	add	r6,r6,r2
1001515c:	19801636 	bltu	r3,r6,100151b8 <_calloc_r+0xa4>
10015160:	008004c4 	movi	r2,19
10015164:	11800b2e 	bgeu	r2,r6,10015194 <_calloc_r+0x80>
10015168:	80000015 	stw	zero,0(r16)
1001516c:	80000115 	stw	zero,4(r16)
10015170:	008006c4 	movi	r2,27
10015174:	11801a2e 	bgeu	r2,r6,100151e0 <_calloc_r+0xcc>
10015178:	80000215 	stw	zero,8(r16)
1001517c:	80000315 	stw	zero,12(r16)
10015180:	30c0151e 	bne	r6,r3,100151d8 <_calloc_r+0xc4>
10015184:	80000415 	stw	zero,16(r16)
10015188:	80800604 	addi	r2,r16,24
1001518c:	80000515 	stw	zero,20(r16)
10015190:	00000106 	br	10015198 <_calloc_r+0x84>
10015194:	8005883a 	mov	r2,r16
10015198:	10000015 	stw	zero,0(r2)
1001519c:	10000115 	stw	zero,4(r2)
100151a0:	10000215 	stw	zero,8(r2)
100151a4:	8005883a 	mov	r2,r16
100151a8:	dfc00117 	ldw	ra,4(sp)
100151ac:	dc000017 	ldw	r16,0(sp)
100151b0:	dec00204 	addi	sp,sp,8
100151b4:	f800283a 	ret
100151b8:	000b883a 	mov	r5,zero
100151bc:	8009883a 	mov	r4,r16
100151c0:	0011f440 	call	10011f44 <memset>
100151c4:	8005883a 	mov	r2,r16
100151c8:	dfc00117 	ldw	ra,4(sp)
100151cc:	dc000017 	ldw	r16,0(sp)
100151d0:	dec00204 	addi	sp,sp,8
100151d4:	f800283a 	ret
100151d8:	80800404 	addi	r2,r16,16
100151dc:	003fee06 	br	10015198 <__alt_data_end+0xf8015198>
100151e0:	80800204 	addi	r2,r16,8
100151e4:	003fec06 	br	10015198 <__alt_data_end+0xf8015198>
100151e8:	0005883a 	mov	r2,zero
100151ec:	003fee06 	br	100151a8 <__alt_data_end+0xf80151a8>

100151f0 <_fclose_r>:
100151f0:	28003926 	beq	r5,zero,100152d8 <_fclose_r+0xe8>
100151f4:	defffc04 	addi	sp,sp,-16
100151f8:	dc400115 	stw	r17,4(sp)
100151fc:	dc000015 	stw	r16,0(sp)
10015200:	dfc00315 	stw	ra,12(sp)
10015204:	dc800215 	stw	r18,8(sp)
10015208:	2023883a 	mov	r17,r4
1001520c:	2821883a 	mov	r16,r5
10015210:	20000226 	beq	r4,zero,1001521c <_fclose_r+0x2c>
10015214:	20800e17 	ldw	r2,56(r4)
10015218:	10002726 	beq	r2,zero,100152b8 <_fclose_r+0xc8>
1001521c:	8080030f 	ldh	r2,12(r16)
10015220:	1000071e 	bne	r2,zero,10015240 <_fclose_r+0x50>
10015224:	0005883a 	mov	r2,zero
10015228:	dfc00317 	ldw	ra,12(sp)
1001522c:	dc800217 	ldw	r18,8(sp)
10015230:	dc400117 	ldw	r17,4(sp)
10015234:	dc000017 	ldw	r16,0(sp)
10015238:	dec00404 	addi	sp,sp,16
1001523c:	f800283a 	ret
10015240:	800b883a 	mov	r5,r16
10015244:	8809883a 	mov	r4,r17
10015248:	000ffe00 	call	1000ffe0 <__sflush_r>
1001524c:	1025883a 	mov	r18,r2
10015250:	80800b17 	ldw	r2,44(r16)
10015254:	10000426 	beq	r2,zero,10015268 <_fclose_r+0x78>
10015258:	81400717 	ldw	r5,28(r16)
1001525c:	8809883a 	mov	r4,r17
10015260:	103ee83a 	callr	r2
10015264:	10001616 	blt	r2,zero,100152c0 <_fclose_r+0xd0>
10015268:	8080030b 	ldhu	r2,12(r16)
1001526c:	1080200c 	andi	r2,r2,128
10015270:	1000151e 	bne	r2,zero,100152c8 <_fclose_r+0xd8>
10015274:	81400c17 	ldw	r5,48(r16)
10015278:	28000526 	beq	r5,zero,10015290 <_fclose_r+0xa0>
1001527c:	80801004 	addi	r2,r16,64
10015280:	28800226 	beq	r5,r2,1001528c <_fclose_r+0x9c>
10015284:	8809883a 	mov	r4,r17
10015288:	001075c0 	call	1001075c <_free_r>
1001528c:	80000c15 	stw	zero,48(r16)
10015290:	81401117 	ldw	r5,68(r16)
10015294:	28000326 	beq	r5,zero,100152a4 <_fclose_r+0xb4>
10015298:	8809883a 	mov	r4,r17
1001529c:	001075c0 	call	1001075c <_free_r>
100152a0:	80001115 	stw	zero,68(r16)
100152a4:	00105f80 	call	100105f8 <__sfp_lock_acquire>
100152a8:	8000030d 	sth	zero,12(r16)
100152ac:	00105fc0 	call	100105fc <__sfp_lock_release>
100152b0:	9005883a 	mov	r2,r18
100152b4:	003fdc06 	br	10015228 <__alt_data_end+0xf8015228>
100152b8:	00105e80 	call	100105e8 <__sinit>
100152bc:	003fd706 	br	1001521c <__alt_data_end+0xf801521c>
100152c0:	04bfffc4 	movi	r18,-1
100152c4:	003fe806 	br	10015268 <__alt_data_end+0xf8015268>
100152c8:	81400417 	ldw	r5,16(r16)
100152cc:	8809883a 	mov	r4,r17
100152d0:	001075c0 	call	1001075c <_free_r>
100152d4:	003fe706 	br	10015274 <__alt_data_end+0xf8015274>
100152d8:	0005883a 	mov	r2,zero
100152dc:	f800283a 	ret

100152e0 <fclose>:
100152e0:	008400b4 	movhi	r2,4098
100152e4:	10af4504 	addi	r2,r2,-17132
100152e8:	200b883a 	mov	r5,r4
100152ec:	11000017 	ldw	r4,0(r2)
100152f0:	00151f01 	jmpi	100151f0 <_fclose_r>

100152f4 <__fputwc>:
100152f4:	defff804 	addi	sp,sp,-32
100152f8:	dcc00415 	stw	r19,16(sp)
100152fc:	dc800315 	stw	r18,12(sp)
10015300:	dc000115 	stw	r16,4(sp)
10015304:	dfc00715 	stw	ra,28(sp)
10015308:	dd400615 	stw	r21,24(sp)
1001530c:	dd000515 	stw	r20,20(sp)
10015310:	dc400215 	stw	r17,8(sp)
10015314:	2027883a 	mov	r19,r4
10015318:	2825883a 	mov	r18,r5
1001531c:	3021883a 	mov	r16,r6
10015320:	00111a00 	call	100111a0 <__locale_mb_cur_max>
10015324:	00c00044 	movi	r3,1
10015328:	10c03e26 	beq	r2,r3,10015424 <__fputwc+0x130>
1001532c:	81c01704 	addi	r7,r16,92
10015330:	900d883a 	mov	r6,r18
10015334:	d80b883a 	mov	r5,sp
10015338:	9809883a 	mov	r4,r19
1001533c:	00157c40 	call	100157c4 <_wcrtomb_r>
10015340:	1029883a 	mov	r20,r2
10015344:	00bfffc4 	movi	r2,-1
10015348:	a0802026 	beq	r20,r2,100153cc <__fputwc+0xd8>
1001534c:	d9400003 	ldbu	r5,0(sp)
10015350:	a0001c26 	beq	r20,zero,100153c4 <__fputwc+0xd0>
10015354:	0023883a 	mov	r17,zero
10015358:	05400284 	movi	r21,10
1001535c:	00000906 	br	10015384 <__fputwc+0x90>
10015360:	80800017 	ldw	r2,0(r16)
10015364:	11400005 	stb	r5,0(r2)
10015368:	80c00017 	ldw	r3,0(r16)
1001536c:	18c00044 	addi	r3,r3,1
10015370:	80c00015 	stw	r3,0(r16)
10015374:	8c400044 	addi	r17,r17,1
10015378:	dc45883a 	add	r2,sp,r17
1001537c:	8d00112e 	bgeu	r17,r20,100153c4 <__fputwc+0xd0>
10015380:	11400003 	ldbu	r5,0(r2)
10015384:	80c00217 	ldw	r3,8(r16)
10015388:	18ffffc4 	addi	r3,r3,-1
1001538c:	80c00215 	stw	r3,8(r16)
10015390:	183ff30e 	bge	r3,zero,10015360 <__alt_data_end+0xf8015360>
10015394:	80800617 	ldw	r2,24(r16)
10015398:	18801916 	blt	r3,r2,10015400 <__fputwc+0x10c>
1001539c:	80800017 	ldw	r2,0(r16)
100153a0:	11400005 	stb	r5,0(r2)
100153a4:	80800017 	ldw	r2,0(r16)
100153a8:	10c00003 	ldbu	r3,0(r2)
100153ac:	10800044 	addi	r2,r2,1
100153b0:	1d402326 	beq	r3,r21,10015440 <__fputwc+0x14c>
100153b4:	80800015 	stw	r2,0(r16)
100153b8:	8c400044 	addi	r17,r17,1
100153bc:	dc45883a 	add	r2,sp,r17
100153c0:	8d3fef36 	bltu	r17,r20,10015380 <__alt_data_end+0xf8015380>
100153c4:	9005883a 	mov	r2,r18
100153c8:	00000406 	br	100153dc <__fputwc+0xe8>
100153cc:	80c0030b 	ldhu	r3,12(r16)
100153d0:	a005883a 	mov	r2,r20
100153d4:	18c01014 	ori	r3,r3,64
100153d8:	80c0030d 	sth	r3,12(r16)
100153dc:	dfc00717 	ldw	ra,28(sp)
100153e0:	dd400617 	ldw	r21,24(sp)
100153e4:	dd000517 	ldw	r20,20(sp)
100153e8:	dcc00417 	ldw	r19,16(sp)
100153ec:	dc800317 	ldw	r18,12(sp)
100153f0:	dc400217 	ldw	r17,8(sp)
100153f4:	dc000117 	ldw	r16,4(sp)
100153f8:	dec00804 	addi	sp,sp,32
100153fc:	f800283a 	ret
10015400:	800d883a 	mov	r6,r16
10015404:	29403fcc 	andi	r5,r5,255
10015408:	9809883a 	mov	r4,r19
1001540c:	001566c0 	call	1001566c <__swbuf_r>
10015410:	10bfffe0 	cmpeqi	r2,r2,-1
10015414:	10803fcc 	andi	r2,r2,255
10015418:	103fd626 	beq	r2,zero,10015374 <__alt_data_end+0xf8015374>
1001541c:	00bfffc4 	movi	r2,-1
10015420:	003fee06 	br	100153dc <__alt_data_end+0xf80153dc>
10015424:	90ffffc4 	addi	r3,r18,-1
10015428:	01003f84 	movi	r4,254
1001542c:	20ffbf36 	bltu	r4,r3,1001532c <__alt_data_end+0xf801532c>
10015430:	900b883a 	mov	r5,r18
10015434:	dc800005 	stb	r18,0(sp)
10015438:	1029883a 	mov	r20,r2
1001543c:	003fc506 	br	10015354 <__alt_data_end+0xf8015354>
10015440:	800d883a 	mov	r6,r16
10015444:	a80b883a 	mov	r5,r21
10015448:	9809883a 	mov	r4,r19
1001544c:	001566c0 	call	1001566c <__swbuf_r>
10015450:	10bfffe0 	cmpeqi	r2,r2,-1
10015454:	003fef06 	br	10015414 <__alt_data_end+0xf8015414>

10015458 <_fputwc_r>:
10015458:	3080030b 	ldhu	r2,12(r6)
1001545c:	10c8000c 	andi	r3,r2,8192
10015460:	1800051e 	bne	r3,zero,10015478 <_fputwc_r+0x20>
10015464:	30c01917 	ldw	r3,100(r6)
10015468:	10880014 	ori	r2,r2,8192
1001546c:	3080030d 	sth	r2,12(r6)
10015470:	18880014 	ori	r2,r3,8192
10015474:	30801915 	stw	r2,100(r6)
10015478:	00152f41 	jmpi	100152f4 <__fputwc>

1001547c <fputwc>:
1001547c:	008400b4 	movhi	r2,4098
10015480:	defffc04 	addi	sp,sp,-16
10015484:	10af4504 	addi	r2,r2,-17132
10015488:	dc000115 	stw	r16,4(sp)
1001548c:	14000017 	ldw	r16,0(r2)
10015490:	dc400215 	stw	r17,8(sp)
10015494:	dfc00315 	stw	ra,12(sp)
10015498:	2023883a 	mov	r17,r4
1001549c:	80000226 	beq	r16,zero,100154a8 <fputwc+0x2c>
100154a0:	80800e17 	ldw	r2,56(r16)
100154a4:	10001026 	beq	r2,zero,100154e8 <fputwc+0x6c>
100154a8:	2880030b 	ldhu	r2,12(r5)
100154ac:	10c8000c 	andi	r3,r2,8192
100154b0:	1800051e 	bne	r3,zero,100154c8 <fputwc+0x4c>
100154b4:	28c01917 	ldw	r3,100(r5)
100154b8:	10880014 	ori	r2,r2,8192
100154bc:	2880030d 	sth	r2,12(r5)
100154c0:	18880014 	ori	r2,r3,8192
100154c4:	28801915 	stw	r2,100(r5)
100154c8:	280d883a 	mov	r6,r5
100154cc:	8009883a 	mov	r4,r16
100154d0:	880b883a 	mov	r5,r17
100154d4:	dfc00317 	ldw	ra,12(sp)
100154d8:	dc400217 	ldw	r17,8(sp)
100154dc:	dc000117 	ldw	r16,4(sp)
100154e0:	dec00404 	addi	sp,sp,16
100154e4:	00152f41 	jmpi	100152f4 <__fputwc>
100154e8:	8009883a 	mov	r4,r16
100154ec:	d9400015 	stw	r5,0(sp)
100154f0:	00105e80 	call	100105e8 <__sinit>
100154f4:	d9400017 	ldw	r5,0(sp)
100154f8:	003feb06 	br	100154a8 <__alt_data_end+0xf80154a8>

100154fc <_fstat_r>:
100154fc:	defffd04 	addi	sp,sp,-12
10015500:	2805883a 	mov	r2,r5
10015504:	dc000015 	stw	r16,0(sp)
10015508:	040400b4 	movhi	r16,4098
1001550c:	dc400115 	stw	r17,4(sp)
10015510:	8436d904 	addi	r16,r16,-9372
10015514:	2023883a 	mov	r17,r4
10015518:	300b883a 	mov	r5,r6
1001551c:	1009883a 	mov	r4,r2
10015520:	dfc00215 	stw	ra,8(sp)
10015524:	80000015 	stw	zero,0(r16)
10015528:	00168840 	call	10016884 <fstat>
1001552c:	00ffffc4 	movi	r3,-1
10015530:	10c00526 	beq	r2,r3,10015548 <_fstat_r+0x4c>
10015534:	dfc00217 	ldw	ra,8(sp)
10015538:	dc400117 	ldw	r17,4(sp)
1001553c:	dc000017 	ldw	r16,0(sp)
10015540:	dec00304 	addi	sp,sp,12
10015544:	f800283a 	ret
10015548:	80c00017 	ldw	r3,0(r16)
1001554c:	183ff926 	beq	r3,zero,10015534 <__alt_data_end+0xf8015534>
10015550:	88c00015 	stw	r3,0(r17)
10015554:	003ff706 	br	10015534 <__alt_data_end+0xf8015534>

10015558 <_isatty_r>:
10015558:	defffd04 	addi	sp,sp,-12
1001555c:	dc000015 	stw	r16,0(sp)
10015560:	040400b4 	movhi	r16,4098
10015564:	dc400115 	stw	r17,4(sp)
10015568:	8436d904 	addi	r16,r16,-9372
1001556c:	2023883a 	mov	r17,r4
10015570:	2809883a 	mov	r4,r5
10015574:	dfc00215 	stw	ra,8(sp)
10015578:	80000015 	stw	zero,0(r16)
1001557c:	0016b6c0 	call	10016b6c <isatty>
10015580:	00ffffc4 	movi	r3,-1
10015584:	10c00526 	beq	r2,r3,1001559c <_isatty_r+0x44>
10015588:	dfc00217 	ldw	ra,8(sp)
1001558c:	dc400117 	ldw	r17,4(sp)
10015590:	dc000017 	ldw	r16,0(sp)
10015594:	dec00304 	addi	sp,sp,12
10015598:	f800283a 	ret
1001559c:	80c00017 	ldw	r3,0(r16)
100155a0:	183ff926 	beq	r3,zero,10015588 <__alt_data_end+0xf8015588>
100155a4:	88c00015 	stw	r3,0(r17)
100155a8:	003ff706 	br	10015588 <__alt_data_end+0xf8015588>

100155ac <_lseek_r>:
100155ac:	defffd04 	addi	sp,sp,-12
100155b0:	2805883a 	mov	r2,r5
100155b4:	dc000015 	stw	r16,0(sp)
100155b8:	040400b4 	movhi	r16,4098
100155bc:	dc400115 	stw	r17,4(sp)
100155c0:	300b883a 	mov	r5,r6
100155c4:	8436d904 	addi	r16,r16,-9372
100155c8:	2023883a 	mov	r17,r4
100155cc:	380d883a 	mov	r6,r7
100155d0:	1009883a 	mov	r4,r2
100155d4:	dfc00215 	stw	ra,8(sp)
100155d8:	80000015 	stw	zero,0(r16)
100155dc:	0016d400 	call	10016d40 <lseek>
100155e0:	00ffffc4 	movi	r3,-1
100155e4:	10c00526 	beq	r2,r3,100155fc <_lseek_r+0x50>
100155e8:	dfc00217 	ldw	ra,8(sp)
100155ec:	dc400117 	ldw	r17,4(sp)
100155f0:	dc000017 	ldw	r16,0(sp)
100155f4:	dec00304 	addi	sp,sp,12
100155f8:	f800283a 	ret
100155fc:	80c00017 	ldw	r3,0(r16)
10015600:	183ff926 	beq	r3,zero,100155e8 <__alt_data_end+0xf80155e8>
10015604:	88c00015 	stw	r3,0(r17)
10015608:	003ff706 	br	100155e8 <__alt_data_end+0xf80155e8>

1001560c <_read_r>:
1001560c:	defffd04 	addi	sp,sp,-12
10015610:	2805883a 	mov	r2,r5
10015614:	dc000015 	stw	r16,0(sp)
10015618:	040400b4 	movhi	r16,4098
1001561c:	dc400115 	stw	r17,4(sp)
10015620:	300b883a 	mov	r5,r6
10015624:	8436d904 	addi	r16,r16,-9372
10015628:	2023883a 	mov	r17,r4
1001562c:	380d883a 	mov	r6,r7
10015630:	1009883a 	mov	r4,r2
10015634:	dfc00215 	stw	ra,8(sp)
10015638:	80000015 	stw	zero,0(r16)
1001563c:	0016f1c0 	call	10016f1c <read>
10015640:	00ffffc4 	movi	r3,-1
10015644:	10c00526 	beq	r2,r3,1001565c <_read_r+0x50>
10015648:	dfc00217 	ldw	ra,8(sp)
1001564c:	dc400117 	ldw	r17,4(sp)
10015650:	dc000017 	ldw	r16,0(sp)
10015654:	dec00304 	addi	sp,sp,12
10015658:	f800283a 	ret
1001565c:	80c00017 	ldw	r3,0(r16)
10015660:	183ff926 	beq	r3,zero,10015648 <__alt_data_end+0xf8015648>
10015664:	88c00015 	stw	r3,0(r17)
10015668:	003ff706 	br	10015648 <__alt_data_end+0xf8015648>

1001566c <__swbuf_r>:
1001566c:	defffb04 	addi	sp,sp,-20
10015670:	dcc00315 	stw	r19,12(sp)
10015674:	dc800215 	stw	r18,8(sp)
10015678:	dc000015 	stw	r16,0(sp)
1001567c:	dfc00415 	stw	ra,16(sp)
10015680:	dc400115 	stw	r17,4(sp)
10015684:	2025883a 	mov	r18,r4
10015688:	2827883a 	mov	r19,r5
1001568c:	3021883a 	mov	r16,r6
10015690:	20000226 	beq	r4,zero,1001569c <__swbuf_r+0x30>
10015694:	20800e17 	ldw	r2,56(r4)
10015698:	10004226 	beq	r2,zero,100157a4 <__swbuf_r+0x138>
1001569c:	80800617 	ldw	r2,24(r16)
100156a0:	8100030b 	ldhu	r4,12(r16)
100156a4:	80800215 	stw	r2,8(r16)
100156a8:	2080020c 	andi	r2,r4,8
100156ac:	10003626 	beq	r2,zero,10015788 <__swbuf_r+0x11c>
100156b0:	80c00417 	ldw	r3,16(r16)
100156b4:	18003426 	beq	r3,zero,10015788 <__swbuf_r+0x11c>
100156b8:	2088000c 	andi	r2,r4,8192
100156bc:	9c403fcc 	andi	r17,r19,255
100156c0:	10001a26 	beq	r2,zero,1001572c <__swbuf_r+0xc0>
100156c4:	80800017 	ldw	r2,0(r16)
100156c8:	81000517 	ldw	r4,20(r16)
100156cc:	10c7c83a 	sub	r3,r2,r3
100156d0:	1900200e 	bge	r3,r4,10015754 <__swbuf_r+0xe8>
100156d4:	18c00044 	addi	r3,r3,1
100156d8:	81000217 	ldw	r4,8(r16)
100156dc:	11400044 	addi	r5,r2,1
100156e0:	81400015 	stw	r5,0(r16)
100156e4:	213fffc4 	addi	r4,r4,-1
100156e8:	81000215 	stw	r4,8(r16)
100156ec:	14c00005 	stb	r19,0(r2)
100156f0:	80800517 	ldw	r2,20(r16)
100156f4:	10c01e26 	beq	r2,r3,10015770 <__swbuf_r+0x104>
100156f8:	8080030b 	ldhu	r2,12(r16)
100156fc:	1080004c 	andi	r2,r2,1
10015700:	10000226 	beq	r2,zero,1001570c <__swbuf_r+0xa0>
10015704:	00800284 	movi	r2,10
10015708:	88801926 	beq	r17,r2,10015770 <__swbuf_r+0x104>
1001570c:	8805883a 	mov	r2,r17
10015710:	dfc00417 	ldw	ra,16(sp)
10015714:	dcc00317 	ldw	r19,12(sp)
10015718:	dc800217 	ldw	r18,8(sp)
1001571c:	dc400117 	ldw	r17,4(sp)
10015720:	dc000017 	ldw	r16,0(sp)
10015724:	dec00504 	addi	sp,sp,20
10015728:	f800283a 	ret
1001572c:	81401917 	ldw	r5,100(r16)
10015730:	00b7ffc4 	movi	r2,-8193
10015734:	21080014 	ori	r4,r4,8192
10015738:	2884703a 	and	r2,r5,r2
1001573c:	80801915 	stw	r2,100(r16)
10015740:	80800017 	ldw	r2,0(r16)
10015744:	8100030d 	sth	r4,12(r16)
10015748:	81000517 	ldw	r4,20(r16)
1001574c:	10c7c83a 	sub	r3,r2,r3
10015750:	193fe016 	blt	r3,r4,100156d4 <__alt_data_end+0xf80156d4>
10015754:	800b883a 	mov	r5,r16
10015758:	9009883a 	mov	r4,r18
1001575c:	00101fc0 	call	100101fc <_fflush_r>
10015760:	1000071e 	bne	r2,zero,10015780 <__swbuf_r+0x114>
10015764:	80800017 	ldw	r2,0(r16)
10015768:	00c00044 	movi	r3,1
1001576c:	003fda06 	br	100156d8 <__alt_data_end+0xf80156d8>
10015770:	800b883a 	mov	r5,r16
10015774:	9009883a 	mov	r4,r18
10015778:	00101fc0 	call	100101fc <_fflush_r>
1001577c:	103fe326 	beq	r2,zero,1001570c <__alt_data_end+0xf801570c>
10015780:	00bfffc4 	movi	r2,-1
10015784:	003fe206 	br	10015710 <__alt_data_end+0xf8015710>
10015788:	800b883a 	mov	r5,r16
1001578c:	9009883a 	mov	r4,r18
10015790:	000e5dc0 	call	1000e5dc <__swsetup_r>
10015794:	103ffa1e 	bne	r2,zero,10015780 <__alt_data_end+0xf8015780>
10015798:	8100030b 	ldhu	r4,12(r16)
1001579c:	80c00417 	ldw	r3,16(r16)
100157a0:	003fc506 	br	100156b8 <__alt_data_end+0xf80156b8>
100157a4:	00105e80 	call	100105e8 <__sinit>
100157a8:	003fbc06 	br	1001569c <__alt_data_end+0xf801569c>

100157ac <__swbuf>:
100157ac:	008400b4 	movhi	r2,4098
100157b0:	10af4504 	addi	r2,r2,-17132
100157b4:	280d883a 	mov	r6,r5
100157b8:	200b883a 	mov	r5,r4
100157bc:	11000017 	ldw	r4,0(r2)
100157c0:	001566c1 	jmpi	1001566c <__swbuf_r>

100157c4 <_wcrtomb_r>:
100157c4:	defff604 	addi	sp,sp,-40
100157c8:	008400b4 	movhi	r2,4098
100157cc:	dc800815 	stw	r18,32(sp)
100157d0:	dc400715 	stw	r17,28(sp)
100157d4:	dc000615 	stw	r16,24(sp)
100157d8:	10af4904 	addi	r2,r2,-17116
100157dc:	dfc00915 	stw	ra,36(sp)
100157e0:	2021883a 	mov	r16,r4
100157e4:	3823883a 	mov	r17,r7
100157e8:	14800017 	ldw	r18,0(r2)
100157ec:	28001426 	beq	r5,zero,10015840 <_wcrtomb_r+0x7c>
100157f0:	d9400415 	stw	r5,16(sp)
100157f4:	d9800515 	stw	r6,20(sp)
100157f8:	00111940 	call	10011194 <__locale_charset>
100157fc:	d9800517 	ldw	r6,20(sp)
10015800:	d9400417 	ldw	r5,16(sp)
10015804:	100f883a 	mov	r7,r2
10015808:	dc400015 	stw	r17,0(sp)
1001580c:	8009883a 	mov	r4,r16
10015810:	903ee83a 	callr	r18
10015814:	00ffffc4 	movi	r3,-1
10015818:	10c0031e 	bne	r2,r3,10015828 <_wcrtomb_r+0x64>
1001581c:	88000015 	stw	zero,0(r17)
10015820:	00c02284 	movi	r3,138
10015824:	80c00015 	stw	r3,0(r16)
10015828:	dfc00917 	ldw	ra,36(sp)
1001582c:	dc800817 	ldw	r18,32(sp)
10015830:	dc400717 	ldw	r17,28(sp)
10015834:	dc000617 	ldw	r16,24(sp)
10015838:	dec00a04 	addi	sp,sp,40
1001583c:	f800283a 	ret
10015840:	00111940 	call	10011194 <__locale_charset>
10015844:	100f883a 	mov	r7,r2
10015848:	dc400015 	stw	r17,0(sp)
1001584c:	000d883a 	mov	r6,zero
10015850:	d9400104 	addi	r5,sp,4
10015854:	8009883a 	mov	r4,r16
10015858:	903ee83a 	callr	r18
1001585c:	003fed06 	br	10015814 <__alt_data_end+0xf8015814>

10015860 <wcrtomb>:
10015860:	defff604 	addi	sp,sp,-40
10015864:	008400b4 	movhi	r2,4098
10015868:	dc800615 	stw	r18,24(sp)
1001586c:	dc400515 	stw	r17,20(sp)
10015870:	10af4504 	addi	r2,r2,-17132
10015874:	dfc00915 	stw	ra,36(sp)
10015878:	dd000815 	stw	r20,32(sp)
1001587c:	dcc00715 	stw	r19,28(sp)
10015880:	dc000415 	stw	r16,16(sp)
10015884:	3025883a 	mov	r18,r6
10015888:	14400017 	ldw	r17,0(r2)
1001588c:	20001926 	beq	r4,zero,100158f4 <wcrtomb+0x94>
10015890:	008400b4 	movhi	r2,4098
10015894:	10af4904 	addi	r2,r2,-17116
10015898:	15000017 	ldw	r20,0(r2)
1001589c:	2021883a 	mov	r16,r4
100158a0:	2827883a 	mov	r19,r5
100158a4:	00111940 	call	10011194 <__locale_charset>
100158a8:	100f883a 	mov	r7,r2
100158ac:	dc800015 	stw	r18,0(sp)
100158b0:	980d883a 	mov	r6,r19
100158b4:	800b883a 	mov	r5,r16
100158b8:	8809883a 	mov	r4,r17
100158bc:	a03ee83a 	callr	r20
100158c0:	00ffffc4 	movi	r3,-1
100158c4:	10c0031e 	bne	r2,r3,100158d4 <wcrtomb+0x74>
100158c8:	90000015 	stw	zero,0(r18)
100158cc:	00c02284 	movi	r3,138
100158d0:	88c00015 	stw	r3,0(r17)
100158d4:	dfc00917 	ldw	ra,36(sp)
100158d8:	dd000817 	ldw	r20,32(sp)
100158dc:	dcc00717 	ldw	r19,28(sp)
100158e0:	dc800617 	ldw	r18,24(sp)
100158e4:	dc400517 	ldw	r17,20(sp)
100158e8:	dc000417 	ldw	r16,16(sp)
100158ec:	dec00a04 	addi	sp,sp,40
100158f0:	f800283a 	ret
100158f4:	008400b4 	movhi	r2,4098
100158f8:	10af4904 	addi	r2,r2,-17116
100158fc:	14000017 	ldw	r16,0(r2)
10015900:	00111940 	call	10011194 <__locale_charset>
10015904:	100f883a 	mov	r7,r2
10015908:	dc800015 	stw	r18,0(sp)
1001590c:	000d883a 	mov	r6,zero
10015910:	d9400104 	addi	r5,sp,4
10015914:	8809883a 	mov	r4,r17
10015918:	803ee83a 	callr	r16
1001591c:	003fe806 	br	100158c0 <__alt_data_end+0xf80158c0>

10015920 <__ascii_wctomb>:
10015920:	28000526 	beq	r5,zero,10015938 <__ascii_wctomb+0x18>
10015924:	00803fc4 	movi	r2,255
10015928:	11800536 	bltu	r2,r6,10015940 <__ascii_wctomb+0x20>
1001592c:	29800005 	stb	r6,0(r5)
10015930:	00800044 	movi	r2,1
10015934:	f800283a 	ret
10015938:	0005883a 	mov	r2,zero
1001593c:	f800283a 	ret
10015940:	00802284 	movi	r2,138
10015944:	20800015 	stw	r2,0(r4)
10015948:	00bfffc4 	movi	r2,-1
1001594c:	f800283a 	ret

10015950 <_wctomb_r>:
10015950:	008400b4 	movhi	r2,4098
10015954:	defff904 	addi	sp,sp,-28
10015958:	10af4904 	addi	r2,r2,-17116
1001595c:	dfc00615 	stw	ra,24(sp)
10015960:	dc400515 	stw	r17,20(sp)
10015964:	dc000415 	stw	r16,16(sp)
10015968:	3823883a 	mov	r17,r7
1001596c:	14000017 	ldw	r16,0(r2)
10015970:	d9000115 	stw	r4,4(sp)
10015974:	d9400215 	stw	r5,8(sp)
10015978:	d9800315 	stw	r6,12(sp)
1001597c:	00111940 	call	10011194 <__locale_charset>
10015980:	d9800317 	ldw	r6,12(sp)
10015984:	d9400217 	ldw	r5,8(sp)
10015988:	d9000117 	ldw	r4,4(sp)
1001598c:	100f883a 	mov	r7,r2
10015990:	dc400015 	stw	r17,0(sp)
10015994:	803ee83a 	callr	r16
10015998:	dfc00617 	ldw	ra,24(sp)
1001599c:	dc400517 	ldw	r17,20(sp)
100159a0:	dc000417 	ldw	r16,16(sp)
100159a4:	dec00704 	addi	sp,sp,28
100159a8:	f800283a 	ret

100159ac <__udivdi3>:
100159ac:	defff404 	addi	sp,sp,-48
100159b0:	dcc00515 	stw	r19,20(sp)
100159b4:	dc000215 	stw	r16,8(sp)
100159b8:	dfc00b15 	stw	ra,44(sp)
100159bc:	df000a15 	stw	fp,40(sp)
100159c0:	ddc00915 	stw	r23,36(sp)
100159c4:	dd800815 	stw	r22,32(sp)
100159c8:	dd400715 	stw	r21,28(sp)
100159cc:	dd000615 	stw	r20,24(sp)
100159d0:	dc800415 	stw	r18,16(sp)
100159d4:	dc400315 	stw	r17,12(sp)
100159d8:	2027883a 	mov	r19,r4
100159dc:	2821883a 	mov	r16,r5
100159e0:	3800461e 	bne	r7,zero,10015afc <__udivdi3+0x150>
100159e4:	3023883a 	mov	r17,r6
100159e8:	2025883a 	mov	r18,r4
100159ec:	2980572e 	bgeu	r5,r6,10015b4c <__udivdi3+0x1a0>
100159f0:	00bfffd4 	movui	r2,65535
100159f4:	282d883a 	mov	r22,r5
100159f8:	1180b236 	bltu	r2,r6,10015cc4 <__udivdi3+0x318>
100159fc:	00803fc4 	movi	r2,255
10015a00:	1185803a 	cmpltu	r2,r2,r6
10015a04:	100490fa 	slli	r2,r2,3
10015a08:	3086d83a 	srl	r3,r6,r2
10015a0c:	010400b4 	movhi	r4,4098
10015a10:	21271504 	addi	r4,r4,-25516
10015a14:	20c7883a 	add	r3,r4,r3
10015a18:	18c00003 	ldbu	r3,0(r3)
10015a1c:	1885883a 	add	r2,r3,r2
10015a20:	00c00804 	movi	r3,32
10015a24:	1887c83a 	sub	r3,r3,r2
10015a28:	18000526 	beq	r3,zero,10015a40 <__udivdi3+0x94>
10015a2c:	80e0983a 	sll	r16,r16,r3
10015a30:	9884d83a 	srl	r2,r19,r2
10015a34:	30e2983a 	sll	r17,r6,r3
10015a38:	98e4983a 	sll	r18,r19,r3
10015a3c:	142cb03a 	or	r22,r2,r16
10015a40:	882ad43a 	srli	r21,r17,16
10015a44:	b009883a 	mov	r4,r22
10015a48:	8d3fffcc 	andi	r20,r17,65535
10015a4c:	a80b883a 	mov	r5,r21
10015a50:	00085280 	call	10008528 <__umodsi3>
10015a54:	b009883a 	mov	r4,r22
10015a58:	a80b883a 	mov	r5,r21
10015a5c:	1027883a 	mov	r19,r2
10015a60:	00084c40 	call	100084c4 <__udivsi3>
10015a64:	100b883a 	mov	r5,r2
10015a68:	a009883a 	mov	r4,r20
10015a6c:	102d883a 	mov	r22,r2
10015a70:	00085800 	call	10008580 <__mulsi3>
10015a74:	9826943a 	slli	r19,r19,16
10015a78:	9006d43a 	srli	r3,r18,16
10015a7c:	1cc6b03a 	or	r3,r3,r19
10015a80:	1880052e 	bgeu	r3,r2,10015a98 <__udivdi3+0xec>
10015a84:	1c47883a 	add	r3,r3,r17
10015a88:	b13fffc4 	addi	r4,r22,-1
10015a8c:	1c400136 	bltu	r3,r17,10015a94 <__udivdi3+0xe8>
10015a90:	18814236 	bltu	r3,r2,10015f9c <__udivdi3+0x5f0>
10015a94:	202d883a 	mov	r22,r4
10015a98:	18a1c83a 	sub	r16,r3,r2
10015a9c:	8009883a 	mov	r4,r16
10015aa0:	a80b883a 	mov	r5,r21
10015aa4:	00085280 	call	10008528 <__umodsi3>
10015aa8:	1027883a 	mov	r19,r2
10015aac:	8009883a 	mov	r4,r16
10015ab0:	a80b883a 	mov	r5,r21
10015ab4:	9826943a 	slli	r19,r19,16
10015ab8:	00084c40 	call	100084c4 <__udivsi3>
10015abc:	100b883a 	mov	r5,r2
10015ac0:	a009883a 	mov	r4,r20
10015ac4:	94bfffcc 	andi	r18,r18,65535
10015ac8:	1021883a 	mov	r16,r2
10015acc:	94e4b03a 	or	r18,r18,r19
10015ad0:	00085800 	call	10008580 <__mulsi3>
10015ad4:	9080052e 	bgeu	r18,r2,10015aec <__udivdi3+0x140>
10015ad8:	8ca5883a 	add	r18,r17,r18
10015adc:	80ffffc4 	addi	r3,r16,-1
10015ae0:	94410c36 	bltu	r18,r17,10015f14 <__udivdi3+0x568>
10015ae4:	90810b2e 	bgeu	r18,r2,10015f14 <__udivdi3+0x568>
10015ae8:	843fff84 	addi	r16,r16,-2
10015aec:	b004943a 	slli	r2,r22,16
10015af0:	0007883a 	mov	r3,zero
10015af4:	1404b03a 	or	r2,r2,r16
10015af8:	00005e06 	br	10015c74 <__udivdi3+0x2c8>
10015afc:	29c05b36 	bltu	r5,r7,10015c6c <__udivdi3+0x2c0>
10015b00:	00bfffd4 	movui	r2,65535
10015b04:	11c0672e 	bgeu	r2,r7,10015ca4 <__udivdi3+0x2f8>
10015b08:	00804034 	movhi	r2,256
10015b0c:	10bfffc4 	addi	r2,r2,-1
10015b10:	11c10a36 	bltu	r2,r7,10015f3c <__udivdi3+0x590>
10015b14:	00800404 	movi	r2,16
10015b18:	3886d83a 	srl	r3,r7,r2
10015b1c:	010400b4 	movhi	r4,4098
10015b20:	21271504 	addi	r4,r4,-25516
10015b24:	20c7883a 	add	r3,r4,r3
10015b28:	18c00003 	ldbu	r3,0(r3)
10015b2c:	05c00804 	movi	r23,32
10015b30:	1885883a 	add	r2,r3,r2
10015b34:	b8afc83a 	sub	r23,r23,r2
10015b38:	b800671e 	bne	r23,zero,10015cd8 <__udivdi3+0x32c>
10015b3c:	3c010536 	bltu	r7,r16,10015f54 <__udivdi3+0x5a8>
10015b40:	9985403a 	cmpgeu	r2,r19,r6
10015b44:	0007883a 	mov	r3,zero
10015b48:	00004a06 	br	10015c74 <__udivdi3+0x2c8>
10015b4c:	3000041e 	bne	r6,zero,10015b60 <__udivdi3+0x1b4>
10015b50:	000b883a 	mov	r5,zero
10015b54:	01000044 	movi	r4,1
10015b58:	00084c40 	call	100084c4 <__udivsi3>
10015b5c:	1023883a 	mov	r17,r2
10015b60:	00bfffd4 	movui	r2,65535
10015b64:	1440532e 	bgeu	r2,r17,10015cb4 <__udivdi3+0x308>
10015b68:	00804034 	movhi	r2,256
10015b6c:	10bfffc4 	addi	r2,r2,-1
10015b70:	1440f436 	bltu	r2,r17,10015f44 <__udivdi3+0x598>
10015b74:	00800404 	movi	r2,16
10015b78:	8886d83a 	srl	r3,r17,r2
10015b7c:	010400b4 	movhi	r4,4098
10015b80:	21271504 	addi	r4,r4,-25516
10015b84:	20c7883a 	add	r3,r4,r3
10015b88:	18c00003 	ldbu	r3,0(r3)
10015b8c:	1885883a 	add	r2,r3,r2
10015b90:	00c00804 	movi	r3,32
10015b94:	1887c83a 	sub	r3,r3,r2
10015b98:	1800a51e 	bne	r3,zero,10015e30 <__udivdi3+0x484>
10015b9c:	882ad43a 	srli	r21,r17,16
10015ba0:	8461c83a 	sub	r16,r16,r17
10015ba4:	8d3fffcc 	andi	r20,r17,65535
10015ba8:	00c00044 	movi	r3,1
10015bac:	a80b883a 	mov	r5,r21
10015bb0:	8009883a 	mov	r4,r16
10015bb4:	d8c00115 	stw	r3,4(sp)
10015bb8:	00085280 	call	10008528 <__umodsi3>
10015bbc:	a80b883a 	mov	r5,r21
10015bc0:	8009883a 	mov	r4,r16
10015bc4:	1027883a 	mov	r19,r2
10015bc8:	00084c40 	call	100084c4 <__udivsi3>
10015bcc:	a00b883a 	mov	r5,r20
10015bd0:	1009883a 	mov	r4,r2
10015bd4:	102d883a 	mov	r22,r2
10015bd8:	00085800 	call	10008580 <__mulsi3>
10015bdc:	9826943a 	slli	r19,r19,16
10015be0:	900ed43a 	srli	r7,r18,16
10015be4:	d8c00117 	ldw	r3,4(sp)
10015be8:	3cceb03a 	or	r7,r7,r19
10015bec:	3880052e 	bgeu	r7,r2,10015c04 <__udivdi3+0x258>
10015bf0:	3c4f883a 	add	r7,r7,r17
10015bf4:	b13fffc4 	addi	r4,r22,-1
10015bf8:	3c400136 	bltu	r7,r17,10015c00 <__udivdi3+0x254>
10015bfc:	3880e436 	bltu	r7,r2,10015f90 <__udivdi3+0x5e4>
10015c00:	202d883a 	mov	r22,r4
10015c04:	38a1c83a 	sub	r16,r7,r2
10015c08:	8009883a 	mov	r4,r16
10015c0c:	a80b883a 	mov	r5,r21
10015c10:	d8c00115 	stw	r3,4(sp)
10015c14:	00085280 	call	10008528 <__umodsi3>
10015c18:	1027883a 	mov	r19,r2
10015c1c:	8009883a 	mov	r4,r16
10015c20:	a80b883a 	mov	r5,r21
10015c24:	9826943a 	slli	r19,r19,16
10015c28:	00084c40 	call	100084c4 <__udivsi3>
10015c2c:	a00b883a 	mov	r5,r20
10015c30:	1009883a 	mov	r4,r2
10015c34:	94bfffcc 	andi	r18,r18,65535
10015c38:	1021883a 	mov	r16,r2
10015c3c:	94e4b03a 	or	r18,r18,r19
10015c40:	00085800 	call	10008580 <__mulsi3>
10015c44:	d8c00117 	ldw	r3,4(sp)
10015c48:	9080052e 	bgeu	r18,r2,10015c60 <__udivdi3+0x2b4>
10015c4c:	8ca5883a 	add	r18,r17,r18
10015c50:	813fffc4 	addi	r4,r16,-1
10015c54:	9440ad36 	bltu	r18,r17,10015f0c <__udivdi3+0x560>
10015c58:	9080ac2e 	bgeu	r18,r2,10015f0c <__udivdi3+0x560>
10015c5c:	843fff84 	addi	r16,r16,-2
10015c60:	b004943a 	slli	r2,r22,16
10015c64:	1404b03a 	or	r2,r2,r16
10015c68:	00000206 	br	10015c74 <__udivdi3+0x2c8>
10015c6c:	0007883a 	mov	r3,zero
10015c70:	0005883a 	mov	r2,zero
10015c74:	dfc00b17 	ldw	ra,44(sp)
10015c78:	df000a17 	ldw	fp,40(sp)
10015c7c:	ddc00917 	ldw	r23,36(sp)
10015c80:	dd800817 	ldw	r22,32(sp)
10015c84:	dd400717 	ldw	r21,28(sp)
10015c88:	dd000617 	ldw	r20,24(sp)
10015c8c:	dcc00517 	ldw	r19,20(sp)
10015c90:	dc800417 	ldw	r18,16(sp)
10015c94:	dc400317 	ldw	r17,12(sp)
10015c98:	dc000217 	ldw	r16,8(sp)
10015c9c:	dec00c04 	addi	sp,sp,48
10015ca0:	f800283a 	ret
10015ca4:	00803fc4 	movi	r2,255
10015ca8:	11c5803a 	cmpltu	r2,r2,r7
10015cac:	100490fa 	slli	r2,r2,3
10015cb0:	003f9906 	br	10015b18 <__alt_data_end+0xf8015b18>
10015cb4:	00803fc4 	movi	r2,255
10015cb8:	1445803a 	cmpltu	r2,r2,r17
10015cbc:	100490fa 	slli	r2,r2,3
10015cc0:	003fad06 	br	10015b78 <__alt_data_end+0xf8015b78>
10015cc4:	00804034 	movhi	r2,256
10015cc8:	10bfffc4 	addi	r2,r2,-1
10015ccc:	11809f36 	bltu	r2,r6,10015f4c <__udivdi3+0x5a0>
10015cd0:	00800404 	movi	r2,16
10015cd4:	003f4c06 	br	10015a08 <__alt_data_end+0xf8015a08>
10015cd8:	3dce983a 	sll	r7,r7,r23
10015cdc:	30b8d83a 	srl	fp,r6,r2
10015ce0:	80a2d83a 	srl	r17,r16,r2
10015ce4:	35cc983a 	sll	r6,r6,r23
10015ce8:	3f38b03a 	or	fp,r7,fp
10015cec:	e024d43a 	srli	r18,fp,16
10015cf0:	9884d83a 	srl	r2,r19,r2
10015cf4:	85e0983a 	sll	r16,r16,r23
10015cf8:	8809883a 	mov	r4,r17
10015cfc:	900b883a 	mov	r5,r18
10015d00:	d9800015 	stw	r6,0(sp)
10015d04:	1420b03a 	or	r16,r2,r16
10015d08:	00085280 	call	10008528 <__umodsi3>
10015d0c:	900b883a 	mov	r5,r18
10015d10:	8809883a 	mov	r4,r17
10015d14:	1029883a 	mov	r20,r2
10015d18:	e5bfffcc 	andi	r22,fp,65535
10015d1c:	00084c40 	call	100084c4 <__udivsi3>
10015d20:	100b883a 	mov	r5,r2
10015d24:	b009883a 	mov	r4,r22
10015d28:	102b883a 	mov	r21,r2
10015d2c:	00085800 	call	10008580 <__mulsi3>
10015d30:	a028943a 	slli	r20,r20,16
10015d34:	8006d43a 	srli	r3,r16,16
10015d38:	1d06b03a 	or	r3,r3,r20
10015d3c:	1880042e 	bgeu	r3,r2,10015d50 <__udivdi3+0x3a4>
10015d40:	1f07883a 	add	r3,r3,fp
10015d44:	a93fffc4 	addi	r4,r21,-1
10015d48:	1f00892e 	bgeu	r3,fp,10015f70 <__udivdi3+0x5c4>
10015d4c:	202b883a 	mov	r21,r4
10015d50:	18a3c83a 	sub	r17,r3,r2
10015d54:	8809883a 	mov	r4,r17
10015d58:	900b883a 	mov	r5,r18
10015d5c:	00085280 	call	10008528 <__umodsi3>
10015d60:	1029883a 	mov	r20,r2
10015d64:	8809883a 	mov	r4,r17
10015d68:	900b883a 	mov	r5,r18
10015d6c:	a028943a 	slli	r20,r20,16
10015d70:	00084c40 	call	100084c4 <__udivsi3>
10015d74:	100b883a 	mov	r5,r2
10015d78:	b009883a 	mov	r4,r22
10015d7c:	843fffcc 	andi	r16,r16,65535
10015d80:	1023883a 	mov	r17,r2
10015d84:	8520b03a 	or	r16,r16,r20
10015d88:	00085800 	call	10008580 <__mulsi3>
10015d8c:	8080042e 	bgeu	r16,r2,10015da0 <__udivdi3+0x3f4>
10015d90:	8721883a 	add	r16,r16,fp
10015d94:	88ffffc4 	addi	r3,r17,-1
10015d98:	8700712e 	bgeu	r16,fp,10015f60 <__udivdi3+0x5b4>
10015d9c:	1823883a 	mov	r17,r3
10015da0:	a80e943a 	slli	r7,r21,16
10015da4:	d8c00017 	ldw	r3,0(sp)
10015da8:	80a1c83a 	sub	r16,r16,r2
10015dac:	3c64b03a 	or	r18,r7,r17
10015db0:	1d3fffcc 	andi	r20,r3,65535
10015db4:	9022d43a 	srli	r17,r18,16
10015db8:	95bfffcc 	andi	r22,r18,65535
10015dbc:	a00b883a 	mov	r5,r20
10015dc0:	b009883a 	mov	r4,r22
10015dc4:	182ad43a 	srli	r21,r3,16
10015dc8:	00085800 	call	10008580 <__mulsi3>
10015dcc:	a00b883a 	mov	r5,r20
10015dd0:	8809883a 	mov	r4,r17
10015dd4:	1039883a 	mov	fp,r2
10015dd8:	00085800 	call	10008580 <__mulsi3>
10015ddc:	8809883a 	mov	r4,r17
10015de0:	a80b883a 	mov	r5,r21
10015de4:	1029883a 	mov	r20,r2
10015de8:	00085800 	call	10008580 <__mulsi3>
10015dec:	a80b883a 	mov	r5,r21
10015df0:	b009883a 	mov	r4,r22
10015df4:	1023883a 	mov	r17,r2
10015df8:	00085800 	call	10008580 <__mulsi3>
10015dfc:	e006d43a 	srli	r3,fp,16
10015e00:	1505883a 	add	r2,r2,r20
10015e04:	1887883a 	add	r3,r3,r2
10015e08:	1d00022e 	bgeu	r3,r20,10015e14 <__udivdi3+0x468>
10015e0c:	00800074 	movhi	r2,1
10015e10:	88a3883a 	add	r17,r17,r2
10015e14:	1804d43a 	srli	r2,r3,16
10015e18:	1463883a 	add	r17,r2,r17
10015e1c:	84404436 	bltu	r16,r17,10015f30 <__udivdi3+0x584>
10015e20:	84403e26 	beq	r16,r17,10015f1c <__udivdi3+0x570>
10015e24:	9005883a 	mov	r2,r18
10015e28:	0007883a 	mov	r3,zero
10015e2c:	003f9106 	br	10015c74 <__alt_data_end+0xf8015c74>
10015e30:	88e2983a 	sll	r17,r17,r3
10015e34:	80aed83a 	srl	r23,r16,r2
10015e38:	80e0983a 	sll	r16,r16,r3
10015e3c:	882ad43a 	srli	r21,r17,16
10015e40:	9884d83a 	srl	r2,r19,r2
10015e44:	b809883a 	mov	r4,r23
10015e48:	a80b883a 	mov	r5,r21
10015e4c:	98e4983a 	sll	r18,r19,r3
10015e50:	142cb03a 	or	r22,r2,r16
10015e54:	00085280 	call	10008528 <__umodsi3>
10015e58:	b809883a 	mov	r4,r23
10015e5c:	a80b883a 	mov	r5,r21
10015e60:	1027883a 	mov	r19,r2
10015e64:	8d3fffcc 	andi	r20,r17,65535
10015e68:	00084c40 	call	100084c4 <__udivsi3>
10015e6c:	a009883a 	mov	r4,r20
10015e70:	100b883a 	mov	r5,r2
10015e74:	102f883a 	mov	r23,r2
10015e78:	00085800 	call	10008580 <__mulsi3>
10015e7c:	9826943a 	slli	r19,r19,16
10015e80:	b008d43a 	srli	r4,r22,16
10015e84:	24c8b03a 	or	r4,r4,r19
10015e88:	2080062e 	bgeu	r4,r2,10015ea4 <__udivdi3+0x4f8>
10015e8c:	2449883a 	add	r4,r4,r17
10015e90:	b8ffffc4 	addi	r3,r23,-1
10015e94:	24403c36 	bltu	r4,r17,10015f88 <__udivdi3+0x5dc>
10015e98:	20803b2e 	bgeu	r4,r2,10015f88 <__udivdi3+0x5dc>
10015e9c:	bdffff84 	addi	r23,r23,-2
10015ea0:	2449883a 	add	r4,r4,r17
10015ea4:	20a1c83a 	sub	r16,r4,r2
10015ea8:	a80b883a 	mov	r5,r21
10015eac:	8009883a 	mov	r4,r16
10015eb0:	00085280 	call	10008528 <__umodsi3>
10015eb4:	a80b883a 	mov	r5,r21
10015eb8:	8009883a 	mov	r4,r16
10015ebc:	1027883a 	mov	r19,r2
10015ec0:	00084c40 	call	100084c4 <__udivsi3>
10015ec4:	a009883a 	mov	r4,r20
10015ec8:	100b883a 	mov	r5,r2
10015ecc:	9826943a 	slli	r19,r19,16
10015ed0:	1039883a 	mov	fp,r2
10015ed4:	00085800 	call	10008580 <__mulsi3>
10015ed8:	b13fffcc 	andi	r4,r22,65535
10015edc:	24c8b03a 	or	r4,r4,r19
10015ee0:	2080062e 	bgeu	r4,r2,10015efc <__udivdi3+0x550>
10015ee4:	2449883a 	add	r4,r4,r17
10015ee8:	e0ffffc4 	addi	r3,fp,-1
10015eec:	24402436 	bltu	r4,r17,10015f80 <__udivdi3+0x5d4>
10015ef0:	2080232e 	bgeu	r4,r2,10015f80 <__udivdi3+0x5d4>
10015ef4:	e73fff84 	addi	fp,fp,-2
10015ef8:	2449883a 	add	r4,r4,r17
10015efc:	b82e943a 	slli	r23,r23,16
10015f00:	20a1c83a 	sub	r16,r4,r2
10015f04:	bf06b03a 	or	r3,r23,fp
10015f08:	003f2806 	br	10015bac <__alt_data_end+0xf8015bac>
10015f0c:	2021883a 	mov	r16,r4
10015f10:	003f5306 	br	10015c60 <__alt_data_end+0xf8015c60>
10015f14:	1821883a 	mov	r16,r3
10015f18:	003ef406 	br	10015aec <__alt_data_end+0xf8015aec>
10015f1c:	1806943a 	slli	r3,r3,16
10015f20:	9de6983a 	sll	r19,r19,r23
10015f24:	e73fffcc 	andi	fp,fp,65535
10015f28:	1f07883a 	add	r3,r3,fp
10015f2c:	98ffbd2e 	bgeu	r19,r3,10015e24 <__alt_data_end+0xf8015e24>
10015f30:	90bfffc4 	addi	r2,r18,-1
10015f34:	0007883a 	mov	r3,zero
10015f38:	003f4e06 	br	10015c74 <__alt_data_end+0xf8015c74>
10015f3c:	00800604 	movi	r2,24
10015f40:	003ef506 	br	10015b18 <__alt_data_end+0xf8015b18>
10015f44:	00800604 	movi	r2,24
10015f48:	003f0b06 	br	10015b78 <__alt_data_end+0xf8015b78>
10015f4c:	00800604 	movi	r2,24
10015f50:	003ead06 	br	10015a08 <__alt_data_end+0xf8015a08>
10015f54:	0007883a 	mov	r3,zero
10015f58:	00800044 	movi	r2,1
10015f5c:	003f4506 	br	10015c74 <__alt_data_end+0xf8015c74>
10015f60:	80bf8e2e 	bgeu	r16,r2,10015d9c <__alt_data_end+0xf8015d9c>
10015f64:	8c7fff84 	addi	r17,r17,-2
10015f68:	8721883a 	add	r16,r16,fp
10015f6c:	003f8c06 	br	10015da0 <__alt_data_end+0xf8015da0>
10015f70:	18bf762e 	bgeu	r3,r2,10015d4c <__alt_data_end+0xf8015d4c>
10015f74:	ad7fff84 	addi	r21,r21,-2
10015f78:	1f07883a 	add	r3,r3,fp
10015f7c:	003f7406 	br	10015d50 <__alt_data_end+0xf8015d50>
10015f80:	1839883a 	mov	fp,r3
10015f84:	003fdd06 	br	10015efc <__alt_data_end+0xf8015efc>
10015f88:	182f883a 	mov	r23,r3
10015f8c:	003fc506 	br	10015ea4 <__alt_data_end+0xf8015ea4>
10015f90:	b5bfff84 	addi	r22,r22,-2
10015f94:	3c4f883a 	add	r7,r7,r17
10015f98:	003f1a06 	br	10015c04 <__alt_data_end+0xf8015c04>
10015f9c:	b5bfff84 	addi	r22,r22,-2
10015fa0:	1c47883a 	add	r3,r3,r17
10015fa4:	003ebc06 	br	10015a98 <__alt_data_end+0xf8015a98>

10015fa8 <__umoddi3>:
10015fa8:	defff304 	addi	sp,sp,-52
10015fac:	df000b15 	stw	fp,44(sp)
10015fb0:	dc400415 	stw	r17,16(sp)
10015fb4:	dc000315 	stw	r16,12(sp)
10015fb8:	dfc00c15 	stw	ra,48(sp)
10015fbc:	ddc00a15 	stw	r23,40(sp)
10015fc0:	dd800915 	stw	r22,36(sp)
10015fc4:	dd400815 	stw	r21,32(sp)
10015fc8:	dd000715 	stw	r20,28(sp)
10015fcc:	dcc00615 	stw	r19,24(sp)
10015fd0:	dc800515 	stw	r18,20(sp)
10015fd4:	2021883a 	mov	r16,r4
10015fd8:	2823883a 	mov	r17,r5
10015fdc:	2839883a 	mov	fp,r5
10015fe0:	3800401e 	bne	r7,zero,100160e4 <__umoddi3+0x13c>
10015fe4:	3027883a 	mov	r19,r6
10015fe8:	2029883a 	mov	r20,r4
10015fec:	2980552e 	bgeu	r5,r6,10016144 <__umoddi3+0x19c>
10015ff0:	00bfffd4 	movui	r2,65535
10015ff4:	1180a236 	bltu	r2,r6,10016280 <__umoddi3+0x2d8>
10015ff8:	01003fc4 	movi	r4,255
10015ffc:	2189803a 	cmpltu	r4,r4,r6
10016000:	200890fa 	slli	r4,r4,3
10016004:	3104d83a 	srl	r2,r6,r4
10016008:	00c400b4 	movhi	r3,4098
1001600c:	18e71504 	addi	r3,r3,-25516
10016010:	1885883a 	add	r2,r3,r2
10016014:	10c00003 	ldbu	r3,0(r2)
10016018:	00800804 	movi	r2,32
1001601c:	1909883a 	add	r4,r3,r4
10016020:	1125c83a 	sub	r18,r2,r4
10016024:	90000526 	beq	r18,zero,1001603c <__umoddi3+0x94>
10016028:	8ca2983a 	sll	r17,r17,r18
1001602c:	8108d83a 	srl	r4,r16,r4
10016030:	34a6983a 	sll	r19,r6,r18
10016034:	84a8983a 	sll	r20,r16,r18
10016038:	2478b03a 	or	fp,r4,r17
1001603c:	982cd43a 	srli	r22,r19,16
10016040:	e009883a 	mov	r4,fp
10016044:	9dffffcc 	andi	r23,r19,65535
10016048:	b00b883a 	mov	r5,r22
1001604c:	00085280 	call	10008528 <__umodsi3>
10016050:	b00b883a 	mov	r5,r22
10016054:	e009883a 	mov	r4,fp
10016058:	102b883a 	mov	r21,r2
1001605c:	00084c40 	call	100084c4 <__udivsi3>
10016060:	100b883a 	mov	r5,r2
10016064:	b809883a 	mov	r4,r23
10016068:	00085800 	call	10008580 <__mulsi3>
1001606c:	a82a943a 	slli	r21,r21,16
10016070:	a006d43a 	srli	r3,r20,16
10016074:	1d46b03a 	or	r3,r3,r21
10016078:	1880032e 	bgeu	r3,r2,10016088 <__umoddi3+0xe0>
1001607c:	1cc7883a 	add	r3,r3,r19
10016080:	1cc00136 	bltu	r3,r19,10016088 <__umoddi3+0xe0>
10016084:	18813136 	bltu	r3,r2,1001654c <__umoddi3+0x5a4>
10016088:	18a1c83a 	sub	r16,r3,r2
1001608c:	b00b883a 	mov	r5,r22
10016090:	8009883a 	mov	r4,r16
10016094:	00085280 	call	10008528 <__umodsi3>
10016098:	b00b883a 	mov	r5,r22
1001609c:	8009883a 	mov	r4,r16
100160a0:	1023883a 	mov	r17,r2
100160a4:	00084c40 	call	100084c4 <__udivsi3>
100160a8:	100b883a 	mov	r5,r2
100160ac:	b809883a 	mov	r4,r23
100160b0:	8822943a 	slli	r17,r17,16
100160b4:	00085800 	call	10008580 <__mulsi3>
100160b8:	a0ffffcc 	andi	r3,r20,65535
100160bc:	1c46b03a 	or	r3,r3,r17
100160c0:	1880042e 	bgeu	r3,r2,100160d4 <__umoddi3+0x12c>
100160c4:	1cc7883a 	add	r3,r3,r19
100160c8:	1cc00236 	bltu	r3,r19,100160d4 <__umoddi3+0x12c>
100160cc:	1880012e 	bgeu	r3,r2,100160d4 <__umoddi3+0x12c>
100160d0:	1cc7883a 	add	r3,r3,r19
100160d4:	1885c83a 	sub	r2,r3,r2
100160d8:	1484d83a 	srl	r2,r2,r18
100160dc:	0007883a 	mov	r3,zero
100160e0:	00005306 	br	10016230 <__umoddi3+0x288>
100160e4:	29c05036 	bltu	r5,r7,10016228 <__umoddi3+0x280>
100160e8:	00bfffd4 	movui	r2,65535
100160ec:	11c05c2e 	bgeu	r2,r7,10016260 <__umoddi3+0x2b8>
100160f0:	00804034 	movhi	r2,256
100160f4:	10bfffc4 	addi	r2,r2,-1
100160f8:	11c10636 	bltu	r2,r7,10016514 <__umoddi3+0x56c>
100160fc:	01000404 	movi	r4,16
10016100:	3904d83a 	srl	r2,r7,r4
10016104:	00c400b4 	movhi	r3,4098
10016108:	18e71504 	addi	r3,r3,-25516
1001610c:	1885883a 	add	r2,r3,r2
10016110:	14c00003 	ldbu	r19,0(r2)
10016114:	00c00804 	movi	r3,32
10016118:	9927883a 	add	r19,r19,r4
1001611c:	1ce9c83a 	sub	r20,r3,r19
10016120:	a0005c1e 	bne	r20,zero,10016294 <__umoddi3+0x2ec>
10016124:	3c400136 	bltu	r7,r17,1001612c <__umoddi3+0x184>
10016128:	81810a36 	bltu	r16,r6,10016554 <__umoddi3+0x5ac>
1001612c:	8185c83a 	sub	r2,r16,r6
10016130:	89e3c83a 	sub	r17,r17,r7
10016134:	8089803a 	cmpltu	r4,r16,r2
10016138:	8939c83a 	sub	fp,r17,r4
1001613c:	e007883a 	mov	r3,fp
10016140:	00003b06 	br	10016230 <__umoddi3+0x288>
10016144:	3000041e 	bne	r6,zero,10016158 <__umoddi3+0x1b0>
10016148:	000b883a 	mov	r5,zero
1001614c:	01000044 	movi	r4,1
10016150:	00084c40 	call	100084c4 <__udivsi3>
10016154:	1027883a 	mov	r19,r2
10016158:	00bfffd4 	movui	r2,65535
1001615c:	14c0442e 	bgeu	r2,r19,10016270 <__umoddi3+0x2c8>
10016160:	00804034 	movhi	r2,256
10016164:	10bfffc4 	addi	r2,r2,-1
10016168:	14c0ec36 	bltu	r2,r19,1001651c <__umoddi3+0x574>
1001616c:	00800404 	movi	r2,16
10016170:	9886d83a 	srl	r3,r19,r2
10016174:	010400b4 	movhi	r4,4098
10016178:	21271504 	addi	r4,r4,-25516
1001617c:	20c7883a 	add	r3,r4,r3
10016180:	18c00003 	ldbu	r3,0(r3)
10016184:	1887883a 	add	r3,r3,r2
10016188:	00800804 	movi	r2,32
1001618c:	10e5c83a 	sub	r18,r2,r3
10016190:	9000ab1e 	bne	r18,zero,10016440 <__umoddi3+0x498>
10016194:	982cd43a 	srli	r22,r19,16
10016198:	8ce3c83a 	sub	r17,r17,r19
1001619c:	9dffffcc 	andi	r23,r19,65535
100161a0:	b00b883a 	mov	r5,r22
100161a4:	8809883a 	mov	r4,r17
100161a8:	00085280 	call	10008528 <__umodsi3>
100161ac:	b00b883a 	mov	r5,r22
100161b0:	8809883a 	mov	r4,r17
100161b4:	102b883a 	mov	r21,r2
100161b8:	00084c40 	call	100084c4 <__udivsi3>
100161bc:	b80b883a 	mov	r5,r23
100161c0:	1009883a 	mov	r4,r2
100161c4:	00085800 	call	10008580 <__mulsi3>
100161c8:	a82a943a 	slli	r21,r21,16
100161cc:	a006d43a 	srli	r3,r20,16
100161d0:	1d46b03a 	or	r3,r3,r21
100161d4:	1880042e 	bgeu	r3,r2,100161e8 <__umoddi3+0x240>
100161d8:	1cc7883a 	add	r3,r3,r19
100161dc:	1cc00236 	bltu	r3,r19,100161e8 <__umoddi3+0x240>
100161e0:	1880012e 	bgeu	r3,r2,100161e8 <__umoddi3+0x240>
100161e4:	1cc7883a 	add	r3,r3,r19
100161e8:	18a1c83a 	sub	r16,r3,r2
100161ec:	b00b883a 	mov	r5,r22
100161f0:	8009883a 	mov	r4,r16
100161f4:	00085280 	call	10008528 <__umodsi3>
100161f8:	1023883a 	mov	r17,r2
100161fc:	b00b883a 	mov	r5,r22
10016200:	8009883a 	mov	r4,r16
10016204:	00084c40 	call	100084c4 <__udivsi3>
10016208:	8822943a 	slli	r17,r17,16
1001620c:	b80b883a 	mov	r5,r23
10016210:	1009883a 	mov	r4,r2
10016214:	00085800 	call	10008580 <__mulsi3>
10016218:	a53fffcc 	andi	r20,r20,65535
1001621c:	a446b03a 	or	r3,r20,r17
10016220:	18bfac2e 	bgeu	r3,r2,100160d4 <__alt_data_end+0xf80160d4>
10016224:	003fa706 	br	100160c4 <__alt_data_end+0xf80160c4>
10016228:	2005883a 	mov	r2,r4
1001622c:	2807883a 	mov	r3,r5
10016230:	dfc00c17 	ldw	ra,48(sp)
10016234:	df000b17 	ldw	fp,44(sp)
10016238:	ddc00a17 	ldw	r23,40(sp)
1001623c:	dd800917 	ldw	r22,36(sp)
10016240:	dd400817 	ldw	r21,32(sp)
10016244:	dd000717 	ldw	r20,28(sp)
10016248:	dcc00617 	ldw	r19,24(sp)
1001624c:	dc800517 	ldw	r18,20(sp)
10016250:	dc400417 	ldw	r17,16(sp)
10016254:	dc000317 	ldw	r16,12(sp)
10016258:	dec00d04 	addi	sp,sp,52
1001625c:	f800283a 	ret
10016260:	04c03fc4 	movi	r19,255
10016264:	99c9803a 	cmpltu	r4,r19,r7
10016268:	200890fa 	slli	r4,r4,3
1001626c:	003fa406 	br	10016100 <__alt_data_end+0xf8016100>
10016270:	00803fc4 	movi	r2,255
10016274:	14c5803a 	cmpltu	r2,r2,r19
10016278:	100490fa 	slli	r2,r2,3
1001627c:	003fbc06 	br	10016170 <__alt_data_end+0xf8016170>
10016280:	00804034 	movhi	r2,256
10016284:	10bfffc4 	addi	r2,r2,-1
10016288:	1180a636 	bltu	r2,r6,10016524 <__umoddi3+0x57c>
1001628c:	01000404 	movi	r4,16
10016290:	003f5c06 	br	10016004 <__alt_data_end+0xf8016004>
10016294:	3d0e983a 	sll	r7,r7,r20
10016298:	34ead83a 	srl	r21,r6,r19
1001629c:	8cc6d83a 	srl	r3,r17,r19
100162a0:	8d10983a 	sll	r8,r17,r20
100162a4:	3d6ab03a 	or	r21,r7,r21
100162a8:	a82cd43a 	srli	r22,r21,16
100162ac:	84e2d83a 	srl	r17,r16,r19
100162b0:	1809883a 	mov	r4,r3
100162b4:	b00b883a 	mov	r5,r22
100162b8:	8a22b03a 	or	r17,r17,r8
100162bc:	3524983a 	sll	r18,r6,r20
100162c0:	dc400015 	stw	r17,0(sp)
100162c4:	d8c00115 	stw	r3,4(sp)
100162c8:	00085280 	call	10008528 <__umodsi3>
100162cc:	d8c00117 	ldw	r3,4(sp)
100162d0:	b00b883a 	mov	r5,r22
100162d4:	1039883a 	mov	fp,r2
100162d8:	1809883a 	mov	r4,r3
100162dc:	00084c40 	call	100084c4 <__udivsi3>
100162e0:	adffffcc 	andi	r23,r21,65535
100162e4:	100b883a 	mov	r5,r2
100162e8:	b809883a 	mov	r4,r23
100162ec:	1023883a 	mov	r17,r2
100162f0:	00085800 	call	10008580 <__mulsi3>
100162f4:	d9400017 	ldw	r5,0(sp)
100162f8:	e008943a 	slli	r4,fp,16
100162fc:	8520983a 	sll	r16,r16,r20
10016300:	2806d43a 	srli	r3,r5,16
10016304:	1906b03a 	or	r3,r3,r4
10016308:	1880042e 	bgeu	r3,r2,1001631c <__umoddi3+0x374>
1001630c:	1d47883a 	add	r3,r3,r21
10016310:	893fffc4 	addi	r4,r17,-1
10016314:	1d40892e 	bgeu	r3,r21,1001653c <__umoddi3+0x594>
10016318:	2023883a 	mov	r17,r4
1001631c:	18b9c83a 	sub	fp,r3,r2
10016320:	b00b883a 	mov	r5,r22
10016324:	e009883a 	mov	r4,fp
10016328:	00085280 	call	10008528 <__umodsi3>
1001632c:	b00b883a 	mov	r5,r22
10016330:	e009883a 	mov	r4,fp
10016334:	d8800215 	stw	r2,8(sp)
10016338:	00084c40 	call	100084c4 <__udivsi3>
1001633c:	100b883a 	mov	r5,r2
10016340:	b809883a 	mov	r4,r23
10016344:	102d883a 	mov	r22,r2
10016348:	00085800 	call	10008580 <__mulsi3>
1001634c:	d9800217 	ldw	r6,8(sp)
10016350:	d8c00017 	ldw	r3,0(sp)
10016354:	300c943a 	slli	r6,r6,16
10016358:	1a3fffcc 	andi	r8,r3,65535
1001635c:	4190b03a 	or	r8,r8,r6
10016360:	4080042e 	bgeu	r8,r2,10016374 <__umoddi3+0x3cc>
10016364:	4551883a 	add	r8,r8,r21
10016368:	b0ffffc4 	addi	r3,r22,-1
1001636c:	45406f2e 	bgeu	r8,r21,1001652c <__umoddi3+0x584>
10016370:	182d883a 	mov	r22,r3
10016374:	880e943a 	slli	r7,r17,16
10016378:	9006d43a 	srli	r3,r18,16
1001637c:	91bfffcc 	andi	r6,r18,65535
10016380:	3dacb03a 	or	r22,r7,r22
10016384:	b02ed43a 	srli	r23,r22,16
10016388:	b5bfffcc 	andi	r22,r22,65535
1001638c:	300b883a 	mov	r5,r6
10016390:	b009883a 	mov	r4,r22
10016394:	40a3c83a 	sub	r17,r8,r2
10016398:	d8c00115 	stw	r3,4(sp)
1001639c:	d9800215 	stw	r6,8(sp)
100163a0:	00085800 	call	10008580 <__mulsi3>
100163a4:	d9800217 	ldw	r6,8(sp)
100163a8:	b809883a 	mov	r4,r23
100163ac:	1039883a 	mov	fp,r2
100163b0:	300b883a 	mov	r5,r6
100163b4:	00085800 	call	10008580 <__mulsi3>
100163b8:	d8c00117 	ldw	r3,4(sp)
100163bc:	b809883a 	mov	r4,r23
100163c0:	d8800215 	stw	r2,8(sp)
100163c4:	180b883a 	mov	r5,r3
100163c8:	00085800 	call	10008580 <__mulsi3>
100163cc:	d8c00117 	ldw	r3,4(sp)
100163d0:	b009883a 	mov	r4,r22
100163d4:	102f883a 	mov	r23,r2
100163d8:	180b883a 	mov	r5,r3
100163dc:	00085800 	call	10008580 <__mulsi3>
100163e0:	d9800217 	ldw	r6,8(sp)
100163e4:	e006d43a 	srli	r3,fp,16
100163e8:	1185883a 	add	r2,r2,r6
100163ec:	1885883a 	add	r2,r3,r2
100163f0:	1180022e 	bgeu	r2,r6,100163fc <__umoddi3+0x454>
100163f4:	00c00074 	movhi	r3,1
100163f8:	b8ef883a 	add	r23,r23,r3
100163fc:	1006d43a 	srli	r3,r2,16
10016400:	1004943a 	slli	r2,r2,16
10016404:	e73fffcc 	andi	fp,fp,65535
10016408:	1dc7883a 	add	r3,r3,r23
1001640c:	1739883a 	add	fp,r2,fp
10016410:	88c03a36 	bltu	r17,r3,100164fc <__umoddi3+0x554>
10016414:	88c05126 	beq	r17,r3,1001655c <__umoddi3+0x5b4>
10016418:	88c9c83a 	sub	r4,r17,r3
1001641c:	e00f883a 	mov	r7,fp
10016420:	81cfc83a 	sub	r7,r16,r7
10016424:	81c7803a 	cmpltu	r3,r16,r7
10016428:	20c7c83a 	sub	r3,r4,r3
1001642c:	1cc4983a 	sll	r2,r3,r19
10016430:	3d0ed83a 	srl	r7,r7,r20
10016434:	1d06d83a 	srl	r3,r3,r20
10016438:	11c4b03a 	or	r2,r2,r7
1001643c:	003f7c06 	br	10016230 <__alt_data_end+0xf8016230>
10016440:	9ca6983a 	sll	r19,r19,r18
10016444:	88f8d83a 	srl	fp,r17,r3
10016448:	80c4d83a 	srl	r2,r16,r3
1001644c:	982cd43a 	srli	r22,r19,16
10016450:	8ca2983a 	sll	r17,r17,r18
10016454:	e009883a 	mov	r4,fp
10016458:	b00b883a 	mov	r5,r22
1001645c:	146ab03a 	or	r21,r2,r17
10016460:	00085280 	call	10008528 <__umodsi3>
10016464:	b00b883a 	mov	r5,r22
10016468:	e009883a 	mov	r4,fp
1001646c:	1029883a 	mov	r20,r2
10016470:	9dffffcc 	andi	r23,r19,65535
10016474:	00084c40 	call	100084c4 <__udivsi3>
10016478:	b809883a 	mov	r4,r23
1001647c:	100b883a 	mov	r5,r2
10016480:	00085800 	call	10008580 <__mulsi3>
10016484:	a008943a 	slli	r4,r20,16
10016488:	a806d43a 	srli	r3,r21,16
1001648c:	84a8983a 	sll	r20,r16,r18
10016490:	1906b03a 	or	r3,r3,r4
10016494:	1880042e 	bgeu	r3,r2,100164a8 <__umoddi3+0x500>
10016498:	1cc7883a 	add	r3,r3,r19
1001649c:	1cc00236 	bltu	r3,r19,100164a8 <__umoddi3+0x500>
100164a0:	1880012e 	bgeu	r3,r2,100164a8 <__umoddi3+0x500>
100164a4:	1cc7883a 	add	r3,r3,r19
100164a8:	18a3c83a 	sub	r17,r3,r2
100164ac:	b00b883a 	mov	r5,r22
100164b0:	8809883a 	mov	r4,r17
100164b4:	00085280 	call	10008528 <__umodsi3>
100164b8:	b00b883a 	mov	r5,r22
100164bc:	8809883a 	mov	r4,r17
100164c0:	1021883a 	mov	r16,r2
100164c4:	00084c40 	call	100084c4 <__udivsi3>
100164c8:	100b883a 	mov	r5,r2
100164cc:	b809883a 	mov	r4,r23
100164d0:	8020943a 	slli	r16,r16,16
100164d4:	00085800 	call	10008580 <__mulsi3>
100164d8:	a8ffffcc 	andi	r3,r21,65535
100164dc:	1c06b03a 	or	r3,r3,r16
100164e0:	1880042e 	bgeu	r3,r2,100164f4 <__umoddi3+0x54c>
100164e4:	1cc7883a 	add	r3,r3,r19
100164e8:	1cc00236 	bltu	r3,r19,100164f4 <__umoddi3+0x54c>
100164ec:	1880012e 	bgeu	r3,r2,100164f4 <__umoddi3+0x54c>
100164f0:	1cc7883a 	add	r3,r3,r19
100164f4:	18a3c83a 	sub	r17,r3,r2
100164f8:	003f2906 	br	100161a0 <__alt_data_end+0xf80161a0>
100164fc:	e48fc83a 	sub	r7,fp,r18
10016500:	1d49c83a 	sub	r4,r3,r21
10016504:	e1f9803a 	cmpltu	fp,fp,r7
10016508:	2739c83a 	sub	fp,r4,fp
1001650c:	8f09c83a 	sub	r4,r17,fp
10016510:	003fc306 	br	10016420 <__alt_data_end+0xf8016420>
10016514:	01000604 	movi	r4,24
10016518:	003ef906 	br	10016100 <__alt_data_end+0xf8016100>
1001651c:	00800604 	movi	r2,24
10016520:	003f1306 	br	10016170 <__alt_data_end+0xf8016170>
10016524:	01000604 	movi	r4,24
10016528:	003eb606 	br	10016004 <__alt_data_end+0xf8016004>
1001652c:	40bf902e 	bgeu	r8,r2,10016370 <__alt_data_end+0xf8016370>
10016530:	b5bfff84 	addi	r22,r22,-2
10016534:	4551883a 	add	r8,r8,r21
10016538:	003f8e06 	br	10016374 <__alt_data_end+0xf8016374>
1001653c:	18bf762e 	bgeu	r3,r2,10016318 <__alt_data_end+0xf8016318>
10016540:	8c7fff84 	addi	r17,r17,-2
10016544:	1d47883a 	add	r3,r3,r21
10016548:	003f7406 	br	1001631c <__alt_data_end+0xf801631c>
1001654c:	1cc7883a 	add	r3,r3,r19
10016550:	003ecd06 	br	10016088 <__alt_data_end+0xf8016088>
10016554:	8005883a 	mov	r2,r16
10016558:	003ef806 	br	1001613c <__alt_data_end+0xf801613c>
1001655c:	873fe736 	bltu	r16,fp,100164fc <__alt_data_end+0xf80164fc>
10016560:	e00f883a 	mov	r7,fp
10016564:	0009883a 	mov	r4,zero
10016568:	003fad06 	br	10016420 <__alt_data_end+0xf8016420>

1001656c <__ledf2>:
1001656c:	2804d53a 	srli	r2,r5,20
10016570:	3810d53a 	srli	r8,r7,20
10016574:	00c00434 	movhi	r3,16
10016578:	18ffffc4 	addi	r3,r3,-1
1001657c:	1081ffcc 	andi	r2,r2,2047
10016580:	0241ffc4 	movi	r9,2047
10016584:	28d4703a 	and	r10,r5,r3
10016588:	4201ffcc 	andi	r8,r8,2047
1001658c:	38c6703a 	and	r3,r7,r3
10016590:	280ad7fa 	srli	r5,r5,31
10016594:	380ed7fa 	srli	r7,r7,31
10016598:	12401f26 	beq	r2,r9,10016618 <__ledf2+0xac>
1001659c:	0241ffc4 	movi	r9,2047
100165a0:	42401426 	beq	r8,r9,100165f4 <__ledf2+0x88>
100165a4:	1000091e 	bne	r2,zero,100165cc <__ledf2+0x60>
100165a8:	2296b03a 	or	r11,r4,r10
100165ac:	5813003a 	cmpeq	r9,r11,zero
100165b0:	29403fcc 	andi	r5,r5,255
100165b4:	40000a1e 	bne	r8,zero,100165e0 <__ledf2+0x74>
100165b8:	30d8b03a 	or	r12,r6,r3
100165bc:	6000081e 	bne	r12,zero,100165e0 <__ledf2+0x74>
100165c0:	0005883a 	mov	r2,zero
100165c4:	5800111e 	bne	r11,zero,1001660c <__ledf2+0xa0>
100165c8:	f800283a 	ret
100165cc:	29403fcc 	andi	r5,r5,255
100165d0:	40000c1e 	bne	r8,zero,10016604 <__ledf2+0x98>
100165d4:	30d2b03a 	or	r9,r6,r3
100165d8:	48000c26 	beq	r9,zero,1001660c <__ledf2+0xa0>
100165dc:	0013883a 	mov	r9,zero
100165e0:	39c03fcc 	andi	r7,r7,255
100165e4:	48000826 	beq	r9,zero,10016608 <__ledf2+0x9c>
100165e8:	38001126 	beq	r7,zero,10016630 <__ledf2+0xc4>
100165ec:	00800044 	movi	r2,1
100165f0:	f800283a 	ret
100165f4:	30d2b03a 	or	r9,r6,r3
100165f8:	483fea26 	beq	r9,zero,100165a4 <__alt_data_end+0xf80165a4>
100165fc:	00800084 	movi	r2,2
10016600:	f800283a 	ret
10016604:	39c03fcc 	andi	r7,r7,255
10016608:	39400726 	beq	r7,r5,10016628 <__ledf2+0xbc>
1001660c:	2800081e 	bne	r5,zero,10016630 <__ledf2+0xc4>
10016610:	00800044 	movi	r2,1
10016614:	f800283a 	ret
10016618:	2292b03a 	or	r9,r4,r10
1001661c:	483fdf26 	beq	r9,zero,1001659c <__alt_data_end+0xf801659c>
10016620:	00800084 	movi	r2,2
10016624:	f800283a 	ret
10016628:	4080030e 	bge	r8,r2,10016638 <__ledf2+0xcc>
1001662c:	383fef26 	beq	r7,zero,100165ec <__alt_data_end+0xf80165ec>
10016630:	00bfffc4 	movi	r2,-1
10016634:	f800283a 	ret
10016638:	123feb16 	blt	r2,r8,100165e8 <__alt_data_end+0xf80165e8>
1001663c:	1abff336 	bltu	r3,r10,1001660c <__alt_data_end+0xf801660c>
10016640:	50c00326 	beq	r10,r3,10016650 <__ledf2+0xe4>
10016644:	50c0042e 	bgeu	r10,r3,10016658 <__ledf2+0xec>
10016648:	283fe81e 	bne	r5,zero,100165ec <__alt_data_end+0xf80165ec>
1001664c:	003ff806 	br	10016630 <__alt_data_end+0xf8016630>
10016650:	313fee36 	bltu	r6,r4,1001660c <__alt_data_end+0xf801660c>
10016654:	21bffc36 	bltu	r4,r6,10016648 <__alt_data_end+0xf8016648>
10016658:	0005883a 	mov	r2,zero
1001665c:	f800283a 	ret

10016660 <__floatunsidf>:
10016660:	defffe04 	addi	sp,sp,-8
10016664:	dc000015 	stw	r16,0(sp)
10016668:	dfc00115 	stw	ra,4(sp)
1001666c:	2021883a 	mov	r16,r4
10016670:	20002226 	beq	r4,zero,100166fc <__floatunsidf+0x9c>
10016674:	000becc0 	call	1000becc <__clzsi2>
10016678:	01010784 	movi	r4,1054
1001667c:	2089c83a 	sub	r4,r4,r2
10016680:	01810cc4 	movi	r6,1075
10016684:	310dc83a 	sub	r6,r6,r4
10016688:	00c007c4 	movi	r3,31
1001668c:	1980120e 	bge	r3,r6,100166d8 <__floatunsidf+0x78>
10016690:	00c104c4 	movi	r3,1043
10016694:	1907c83a 	sub	r3,r3,r4
10016698:	80ca983a 	sll	r5,r16,r3
1001669c:	00800434 	movhi	r2,16
100166a0:	10bfffc4 	addi	r2,r2,-1
100166a4:	2101ffcc 	andi	r4,r4,2047
100166a8:	0021883a 	mov	r16,zero
100166ac:	288a703a 	and	r5,r5,r2
100166b0:	2008953a 	slli	r4,r4,20
100166b4:	00c00434 	movhi	r3,16
100166b8:	18ffffc4 	addi	r3,r3,-1
100166bc:	28c6703a 	and	r3,r5,r3
100166c0:	8005883a 	mov	r2,r16
100166c4:	1906b03a 	or	r3,r3,r4
100166c8:	dfc00117 	ldw	ra,4(sp)
100166cc:	dc000017 	ldw	r16,0(sp)
100166d0:	dec00204 	addi	sp,sp,8
100166d4:	f800283a 	ret
100166d8:	00c002c4 	movi	r3,11
100166dc:	188bc83a 	sub	r5,r3,r2
100166e0:	814ad83a 	srl	r5,r16,r5
100166e4:	00c00434 	movhi	r3,16
100166e8:	18ffffc4 	addi	r3,r3,-1
100166ec:	81a0983a 	sll	r16,r16,r6
100166f0:	2101ffcc 	andi	r4,r4,2047
100166f4:	28ca703a 	and	r5,r5,r3
100166f8:	003fed06 	br	100166b0 <__alt_data_end+0xf80166b0>
100166fc:	0009883a 	mov	r4,zero
10016700:	000b883a 	mov	r5,zero
10016704:	003fea06 	br	100166b0 <__alt_data_end+0xf80166b0>

10016708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016708:	defffe04 	addi	sp,sp,-8
1001670c:	dfc00115 	stw	ra,4(sp)
10016710:	df000015 	stw	fp,0(sp)
10016714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016718:	d0a01117 	ldw	r2,-32700(gp)
1001671c:	10000326 	beq	r2,zero,1001672c <alt_get_errno+0x24>
10016720:	d0a01117 	ldw	r2,-32700(gp)
10016724:	103ee83a 	callr	r2
10016728:	00000106 	br	10016730 <alt_get_errno+0x28>
1001672c:	d0a79b04 	addi	r2,gp,-24980
}
10016730:	e037883a 	mov	sp,fp
10016734:	dfc00117 	ldw	ra,4(sp)
10016738:	df000017 	ldw	fp,0(sp)
1001673c:	dec00204 	addi	sp,sp,8
10016740:	f800283a 	ret

10016744 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10016744:	defffb04 	addi	sp,sp,-20
10016748:	dfc00415 	stw	ra,16(sp)
1001674c:	df000315 	stw	fp,12(sp)
10016750:	df000304 	addi	fp,sp,12
10016754:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10016758:	e0bfff17 	ldw	r2,-4(fp)
1001675c:	10000816 	blt	r2,zero,10016780 <close+0x3c>
10016760:	01400304 	movi	r5,12
10016764:	e13fff17 	ldw	r4,-4(fp)
10016768:	00085800 	call	10008580 <__mulsi3>
1001676c:	1007883a 	mov	r3,r2
10016770:	008400b4 	movhi	r2,4098
10016774:	10aac604 	addi	r2,r2,-21736
10016778:	1885883a 	add	r2,r3,r2
1001677c:	00000106 	br	10016784 <close+0x40>
10016780:	0005883a 	mov	r2,zero
10016784:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10016788:	e0bffd17 	ldw	r2,-12(fp)
1001678c:	10001926 	beq	r2,zero,100167f4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10016790:	e0bffd17 	ldw	r2,-12(fp)
10016794:	10800017 	ldw	r2,0(r2)
10016798:	10800417 	ldw	r2,16(r2)
1001679c:	10000626 	beq	r2,zero,100167b8 <close+0x74>
100167a0:	e0bffd17 	ldw	r2,-12(fp)
100167a4:	10800017 	ldw	r2,0(r2)
100167a8:	10800417 	ldw	r2,16(r2)
100167ac:	e13ffd17 	ldw	r4,-12(fp)
100167b0:	103ee83a 	callr	r2
100167b4:	00000106 	br	100167bc <close+0x78>
100167b8:	0005883a 	mov	r2,zero
100167bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100167c0:	e13fff17 	ldw	r4,-4(fp)
100167c4:	00170200 	call	10017020 <alt_release_fd>
    if (rval < 0)
100167c8:	e0bffe17 	ldw	r2,-8(fp)
100167cc:	1000070e 	bge	r2,zero,100167ec <close+0xa8>
    {
      ALT_ERRNO = -rval;
100167d0:	00167080 	call	10016708 <alt_get_errno>
100167d4:	1007883a 	mov	r3,r2
100167d8:	e0bffe17 	ldw	r2,-8(fp)
100167dc:	0085c83a 	sub	r2,zero,r2
100167e0:	18800015 	stw	r2,0(r3)
      return -1;
100167e4:	00bfffc4 	movi	r2,-1
100167e8:	00000706 	br	10016808 <close+0xc4>
    }
    return 0;
100167ec:	0005883a 	mov	r2,zero
100167f0:	00000506 	br	10016808 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100167f4:	00167080 	call	10016708 <alt_get_errno>
100167f8:	1007883a 	mov	r3,r2
100167fc:	00801444 	movi	r2,81
10016800:	18800015 	stw	r2,0(r3)
    return -1;
10016804:	00bfffc4 	movi	r2,-1
  }
}
10016808:	e037883a 	mov	sp,fp
1001680c:	dfc00117 	ldw	ra,4(sp)
10016810:	df000017 	ldw	fp,0(sp)
10016814:	dec00204 	addi	sp,sp,8
10016818:	f800283a 	ret

1001681c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001681c:	defffc04 	addi	sp,sp,-16
10016820:	df000315 	stw	fp,12(sp)
10016824:	df000304 	addi	fp,sp,12
10016828:	e13ffd15 	stw	r4,-12(fp)
1001682c:	e17ffe15 	stw	r5,-8(fp)
10016830:	e1bfff15 	stw	r6,-4(fp)
  return len;
10016834:	e0bfff17 	ldw	r2,-4(fp)
}
10016838:	e037883a 	mov	sp,fp
1001683c:	df000017 	ldw	fp,0(sp)
10016840:	dec00104 	addi	sp,sp,4
10016844:	f800283a 	ret

10016848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016848:	defffe04 	addi	sp,sp,-8
1001684c:	dfc00115 	stw	ra,4(sp)
10016850:	df000015 	stw	fp,0(sp)
10016854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016858:	d0a01117 	ldw	r2,-32700(gp)
1001685c:	10000326 	beq	r2,zero,1001686c <alt_get_errno+0x24>
10016860:	d0a01117 	ldw	r2,-32700(gp)
10016864:	103ee83a 	callr	r2
10016868:	00000106 	br	10016870 <alt_get_errno+0x28>
1001686c:	d0a79b04 	addi	r2,gp,-24980
}
10016870:	e037883a 	mov	sp,fp
10016874:	dfc00117 	ldw	ra,4(sp)
10016878:	df000017 	ldw	fp,0(sp)
1001687c:	dec00204 	addi	sp,sp,8
10016880:	f800283a 	ret

10016884 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10016884:	defffb04 	addi	sp,sp,-20
10016888:	dfc00415 	stw	ra,16(sp)
1001688c:	df000315 	stw	fp,12(sp)
10016890:	df000304 	addi	fp,sp,12
10016894:	e13ffe15 	stw	r4,-8(fp)
10016898:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001689c:	e0bffe17 	ldw	r2,-8(fp)
100168a0:	10000816 	blt	r2,zero,100168c4 <fstat+0x40>
100168a4:	01400304 	movi	r5,12
100168a8:	e13ffe17 	ldw	r4,-8(fp)
100168ac:	00085800 	call	10008580 <__mulsi3>
100168b0:	1007883a 	mov	r3,r2
100168b4:	008400b4 	movhi	r2,4098
100168b8:	10aac604 	addi	r2,r2,-21736
100168bc:	1885883a 	add	r2,r3,r2
100168c0:	00000106 	br	100168c8 <fstat+0x44>
100168c4:	0005883a 	mov	r2,zero
100168c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100168cc:	e0bffd17 	ldw	r2,-12(fp)
100168d0:	10001026 	beq	r2,zero,10016914 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100168d4:	e0bffd17 	ldw	r2,-12(fp)
100168d8:	10800017 	ldw	r2,0(r2)
100168dc:	10800817 	ldw	r2,32(r2)
100168e0:	10000726 	beq	r2,zero,10016900 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100168e4:	e0bffd17 	ldw	r2,-12(fp)
100168e8:	10800017 	ldw	r2,0(r2)
100168ec:	10800817 	ldw	r2,32(r2)
100168f0:	e17fff17 	ldw	r5,-4(fp)
100168f4:	e13ffd17 	ldw	r4,-12(fp)
100168f8:	103ee83a 	callr	r2
100168fc:	00000a06 	br	10016928 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10016900:	e0bfff17 	ldw	r2,-4(fp)
10016904:	00c80004 	movi	r3,8192
10016908:	10c00115 	stw	r3,4(r2)
      return 0;
1001690c:	0005883a 	mov	r2,zero
10016910:	00000506 	br	10016928 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10016914:	00168480 	call	10016848 <alt_get_errno>
10016918:	1007883a 	mov	r3,r2
1001691c:	00801444 	movi	r2,81
10016920:	18800015 	stw	r2,0(r3)
    return -1;
10016924:	00bfffc4 	movi	r2,-1
  }
}
10016928:	e037883a 	mov	sp,fp
1001692c:	dfc00117 	ldw	ra,4(sp)
10016930:	df000017 	ldw	fp,0(sp)
10016934:	dec00204 	addi	sp,sp,8
10016938:	f800283a 	ret

1001693c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
1001693c:	defff404 	addi	sp,sp,-48
10016940:	dfc00b15 	stw	ra,44(sp)
10016944:	df000a15 	stw	fp,40(sp)
10016948:	dd000915 	stw	r20,36(sp)
1001694c:	dcc00815 	stw	r19,32(sp)
10016950:	dc800715 	stw	r18,28(sp)
10016954:	dc400615 	stw	r17,24(sp)
10016958:	dc000515 	stw	r16,20(sp)
1001695c:	df000a04 	addi	fp,sp,40
10016960:	e13ff915 	stw	r4,-28(fp)
10016964:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
10016968:	e0bffa17 	ldw	r2,-24(fp)
1001696c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10016970:	d0a7aa17 	ldw	r2,-24920(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
10016974:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10016978:	d0a7a917 	ldw	r2,-24924(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
1001697c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
10016980:	e0bff817 	ldw	r2,-32(fp)
10016984:	10005f26 	beq	r2,zero,10016b04 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
10016988:	d0a7a417 	ldw	r2,-24944(gp)
1001698c:	1029883a 	mov	r20,r2
10016990:	e17ff817 	ldw	r5,-32(fp)
10016994:	e13ff717 	ldw	r4,-36(fp)
10016998:	00084c40 	call	100084c4 <__udivsi3>
1001699c:	a085883a 	add	r2,r20,r2
100169a0:	1007883a 	mov	r3,r2
100169a4:	e0bff917 	ldw	r2,-28(fp)
100169a8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
100169ac:	d0a7a517 	ldw	r2,-24940(gp)
100169b0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
100169b4:	e0bff717 	ldw	r2,-36(fp)
100169b8:	1021883a 	mov	r16,r2
100169bc:	0023883a 	mov	r17,zero
100169c0:	e17ff817 	ldw	r5,-32(fp)
100169c4:	010003f4 	movhi	r4,15
100169c8:	21109004 	addi	r4,r4,16960
100169cc:	00084c40 	call	100084c4 <__udivsi3>
100169d0:	1025883a 	mov	r18,r2
100169d4:	0027883a 	mov	r19,zero
100169d8:	900d883a 	mov	r6,r18
100169dc:	980f883a 	mov	r7,r19
100169e0:	8009883a 	mov	r4,r16
100169e4:	880b883a 	mov	r5,r17
100169e8:	00082c00 	call	100082c0 <__muldi3>
100169ec:	1009883a 	mov	r4,r2
100169f0:	180b883a 	mov	r5,r3
100169f4:	2005883a 	mov	r2,r4
100169f8:	2807883a 	mov	r3,r5
100169fc:	018003f4 	movhi	r6,15
10016a00:	31909004 	addi	r6,r6,16960
10016a04:	000f883a 	mov	r7,zero
10016a08:	1009883a 	mov	r4,r2
10016a0c:	180b883a 	mov	r5,r3
10016a10:	0015fa80 	call	10015fa8 <__umoddi3>
10016a14:	1009883a 	mov	r4,r2
10016a18:	180b883a 	mov	r5,r3
10016a1c:	2005883a 	mov	r2,r4
10016a20:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
10016a24:	a085883a 	add	r2,r20,r2
10016a28:	1007883a 	mov	r3,r2
10016a2c:	e0bff917 	ldw	r2,-28(fp)
10016a30:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10016a34:	00001406 	br	10016a88 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
10016a38:	e0bff917 	ldw	r2,-28(fp)
10016a3c:	10800017 	ldw	r2,0(r2)
10016a40:	00800516 	blt	zero,r2,10016a58 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
10016a44:	e0bff917 	ldw	r2,-28(fp)
10016a48:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
10016a4c:	e0bff917 	ldw	r2,-28(fp)
10016a50:	10000115 	stw	zero,4(r2)
          break;
10016a54:	00000f06 	br	10016a94 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
10016a58:	e0bff917 	ldw	r2,-28(fp)
10016a5c:	10800017 	ldw	r2,0(r2)
10016a60:	10ffffc4 	addi	r3,r2,-1
10016a64:	e0bff917 	ldw	r2,-28(fp)
10016a68:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
10016a6c:	e0bff917 	ldw	r2,-28(fp)
10016a70:	10c00117 	ldw	r3,4(r2)
10016a74:	008003f4 	movhi	r2,15
10016a78:	10909004 	addi	r2,r2,16960
10016a7c:	1887883a 	add	r3,r3,r2
10016a80:	e0bff917 	ldw	r2,-28(fp)
10016a84:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10016a88:	e0bff917 	ldw	r2,-28(fp)
10016a8c:	10800117 	ldw	r2,4(r2)
10016a90:	103fe916 	blt	r2,zero,10016a38 <__alt_data_end+0xf8016a38>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10016a94:	00000c06 	br	10016ac8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
10016a98:	e0bff917 	ldw	r2,-28(fp)
10016a9c:	10800017 	ldw	r2,0(r2)
10016aa0:	10c00044 	addi	r3,r2,1
10016aa4:	e0bff917 	ldw	r2,-28(fp)
10016aa8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
10016aac:	e0bff917 	ldw	r2,-28(fp)
10016ab0:	10c00117 	ldw	r3,4(r2)
10016ab4:	00bffc74 	movhi	r2,65521
10016ab8:	10af7004 	addi	r2,r2,-16960
10016abc:	1887883a 	add	r3,r3,r2
10016ac0:	e0bff917 	ldw	r2,-28(fp)
10016ac4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10016ac8:	e0bff917 	ldw	r2,-28(fp)
10016acc:	10c00117 	ldw	r3,4(r2)
10016ad0:	008003f4 	movhi	r2,15
10016ad4:	10908fc4 	addi	r2,r2,16959
10016ad8:	10ffef16 	blt	r2,r3,10016a98 <__alt_data_end+0xf8016a98>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
10016adc:	e0bff617 	ldw	r2,-40(fp)
10016ae0:	10000626 	beq	r2,zero,10016afc <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10016ae4:	d0e7a217 	ldw	r3,-24952(gp)
10016ae8:	e0bff617 	ldw	r2,-40(fp)
10016aec:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
10016af0:	d0e7a317 	ldw	r3,-24948(gp)
10016af4:	e0bff617 	ldw	r2,-40(fp)
10016af8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
10016afc:	0005883a 	mov	r2,zero
10016b00:	00000106 	br	10016b08 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
10016b04:	00bfde84 	movi	r2,-134
}
10016b08:	e6fffb04 	addi	sp,fp,-20
10016b0c:	dfc00617 	ldw	ra,24(sp)
10016b10:	df000517 	ldw	fp,20(sp)
10016b14:	dd000417 	ldw	r20,16(sp)
10016b18:	dcc00317 	ldw	r19,12(sp)
10016b1c:	dc800217 	ldw	r18,8(sp)
10016b20:	dc400117 	ldw	r17,4(sp)
10016b24:	dc000017 	ldw	r16,0(sp)
10016b28:	dec00704 	addi	sp,sp,28
10016b2c:	f800283a 	ret

10016b30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016b30:	defffe04 	addi	sp,sp,-8
10016b34:	dfc00115 	stw	ra,4(sp)
10016b38:	df000015 	stw	fp,0(sp)
10016b3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016b40:	d0a01117 	ldw	r2,-32700(gp)
10016b44:	10000326 	beq	r2,zero,10016b54 <alt_get_errno+0x24>
10016b48:	d0a01117 	ldw	r2,-32700(gp)
10016b4c:	103ee83a 	callr	r2
10016b50:	00000106 	br	10016b58 <alt_get_errno+0x28>
10016b54:	d0a79b04 	addi	r2,gp,-24980
}
10016b58:	e037883a 	mov	sp,fp
10016b5c:	dfc00117 	ldw	ra,4(sp)
10016b60:	df000017 	ldw	fp,0(sp)
10016b64:	dec00204 	addi	sp,sp,8
10016b68:	f800283a 	ret

10016b6c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10016b6c:	deffed04 	addi	sp,sp,-76
10016b70:	dfc01215 	stw	ra,72(sp)
10016b74:	df001115 	stw	fp,68(sp)
10016b78:	df001104 	addi	fp,sp,68
10016b7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016b80:	e0bfff17 	ldw	r2,-4(fp)
10016b84:	10000816 	blt	r2,zero,10016ba8 <isatty+0x3c>
10016b88:	01400304 	movi	r5,12
10016b8c:	e13fff17 	ldw	r4,-4(fp)
10016b90:	00085800 	call	10008580 <__mulsi3>
10016b94:	1007883a 	mov	r3,r2
10016b98:	008400b4 	movhi	r2,4098
10016b9c:	10aac604 	addi	r2,r2,-21736
10016ba0:	1885883a 	add	r2,r3,r2
10016ba4:	00000106 	br	10016bac <isatty+0x40>
10016ba8:	0005883a 	mov	r2,zero
10016bac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10016bb0:	e0bfef17 	ldw	r2,-68(fp)
10016bb4:	10000e26 	beq	r2,zero,10016bf0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10016bb8:	e0bfef17 	ldw	r2,-68(fp)
10016bbc:	10800017 	ldw	r2,0(r2)
10016bc0:	10800817 	ldw	r2,32(r2)
10016bc4:	1000021e 	bne	r2,zero,10016bd0 <isatty+0x64>
    {
      return 1;
10016bc8:	00800044 	movi	r2,1
10016bcc:	00000d06 	br	10016c04 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10016bd0:	e0bff004 	addi	r2,fp,-64
10016bd4:	100b883a 	mov	r5,r2
10016bd8:	e13fff17 	ldw	r4,-4(fp)
10016bdc:	00168840 	call	10016884 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10016be0:	e0bff117 	ldw	r2,-60(fp)
10016be4:	10880020 	cmpeqi	r2,r2,8192
10016be8:	10803fcc 	andi	r2,r2,255
10016bec:	00000506 	br	10016c04 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10016bf0:	0016b300 	call	10016b30 <alt_get_errno>
10016bf4:	1007883a 	mov	r3,r2
10016bf8:	00801444 	movi	r2,81
10016bfc:	18800015 	stw	r2,0(r3)
    return 0;
10016c00:	0005883a 	mov	r2,zero
  }
}
10016c04:	e037883a 	mov	sp,fp
10016c08:	dfc00117 	ldw	ra,4(sp)
10016c0c:	df000017 	ldw	fp,0(sp)
10016c10:	dec00204 	addi	sp,sp,8
10016c14:	f800283a 	ret

10016c18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10016c18:	defffc04 	addi	sp,sp,-16
10016c1c:	df000315 	stw	fp,12(sp)
10016c20:	df000304 	addi	fp,sp,12
10016c24:	e13ffd15 	stw	r4,-12(fp)
10016c28:	e17ffe15 	stw	r5,-8(fp)
10016c2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10016c30:	e0fffe17 	ldw	r3,-8(fp)
10016c34:	e0bffd17 	ldw	r2,-12(fp)
10016c38:	18800c26 	beq	r3,r2,10016c6c <alt_load_section+0x54>
  {
    while( to != end )
10016c3c:	00000806 	br	10016c60 <alt_load_section+0x48>
    {
      *to++ = *from++;
10016c40:	e0bffe17 	ldw	r2,-8(fp)
10016c44:	10c00104 	addi	r3,r2,4
10016c48:	e0fffe15 	stw	r3,-8(fp)
10016c4c:	e0fffd17 	ldw	r3,-12(fp)
10016c50:	19000104 	addi	r4,r3,4
10016c54:	e13ffd15 	stw	r4,-12(fp)
10016c58:	18c00017 	ldw	r3,0(r3)
10016c5c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10016c60:	e0fffe17 	ldw	r3,-8(fp)
10016c64:	e0bfff17 	ldw	r2,-4(fp)
10016c68:	18bff51e 	bne	r3,r2,10016c40 <__alt_data_end+0xf8016c40>
    {
      *to++ = *from++;
    }
  }
}
10016c6c:	0001883a 	nop
10016c70:	e037883a 	mov	sp,fp
10016c74:	df000017 	ldw	fp,0(sp)
10016c78:	dec00104 	addi	sp,sp,4
10016c7c:	f800283a 	ret

10016c80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10016c80:	defffe04 	addi	sp,sp,-8
10016c84:	dfc00115 	stw	ra,4(sp)
10016c88:	df000015 	stw	fp,0(sp)
10016c8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10016c90:	018400b4 	movhi	r6,4098
10016c94:	31af5404 	addi	r6,r6,-17072
10016c98:	014400b4 	movhi	r5,4098
10016c9c:	2967d504 	addi	r5,r5,-24748
10016ca0:	010400b4 	movhi	r4,4098
10016ca4:	212f5404 	addi	r4,r4,-17072
10016ca8:	0016c180 	call	10016c18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10016cac:	01840034 	movhi	r6,4096
10016cb0:	31808c04 	addi	r6,r6,560
10016cb4:	01440034 	movhi	r5,4096
10016cb8:	29400804 	addi	r5,r5,32
10016cbc:	01040034 	movhi	r4,4096
10016cc0:	21000804 	addi	r4,r4,32
10016cc4:	0016c180 	call	10016c18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10016cc8:	018400b4 	movhi	r6,4098
10016ccc:	31a7d504 	addi	r6,r6,-24748
10016cd0:	014400b4 	movhi	r5,4098
10016cd4:	2964b604 	addi	r5,r5,-27944
10016cd8:	010400b4 	movhi	r4,4098
10016cdc:	2124b604 	addi	r4,r4,-27944
10016ce0:	0016c180 	call	10016c18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10016ce4:	00183c40 	call	100183c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
10016ce8:	00185840 	call	10018584 <alt_icache_flush_all>
}
10016cec:	0001883a 	nop
10016cf0:	e037883a 	mov	sp,fp
10016cf4:	dfc00117 	ldw	ra,4(sp)
10016cf8:	df000017 	ldw	fp,0(sp)
10016cfc:	dec00204 	addi	sp,sp,8
10016d00:	f800283a 	ret

10016d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016d04:	defffe04 	addi	sp,sp,-8
10016d08:	dfc00115 	stw	ra,4(sp)
10016d0c:	df000015 	stw	fp,0(sp)
10016d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016d14:	d0a01117 	ldw	r2,-32700(gp)
10016d18:	10000326 	beq	r2,zero,10016d28 <alt_get_errno+0x24>
10016d1c:	d0a01117 	ldw	r2,-32700(gp)
10016d20:	103ee83a 	callr	r2
10016d24:	00000106 	br	10016d2c <alt_get_errno+0x28>
10016d28:	d0a79b04 	addi	r2,gp,-24980
}
10016d2c:	e037883a 	mov	sp,fp
10016d30:	dfc00117 	ldw	ra,4(sp)
10016d34:	df000017 	ldw	fp,0(sp)
10016d38:	dec00204 	addi	sp,sp,8
10016d3c:	f800283a 	ret

10016d40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10016d40:	defff904 	addi	sp,sp,-28
10016d44:	dfc00615 	stw	ra,24(sp)
10016d48:	df000515 	stw	fp,20(sp)
10016d4c:	df000504 	addi	fp,sp,20
10016d50:	e13ffd15 	stw	r4,-12(fp)
10016d54:	e17ffe15 	stw	r5,-8(fp)
10016d58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10016d5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016d60:	e0bffd17 	ldw	r2,-12(fp)
10016d64:	10000816 	blt	r2,zero,10016d88 <lseek+0x48>
10016d68:	01400304 	movi	r5,12
10016d6c:	e13ffd17 	ldw	r4,-12(fp)
10016d70:	00085800 	call	10008580 <__mulsi3>
10016d74:	1007883a 	mov	r3,r2
10016d78:	008400b4 	movhi	r2,4098
10016d7c:	10aac604 	addi	r2,r2,-21736
10016d80:	1885883a 	add	r2,r3,r2
10016d84:	00000106 	br	10016d8c <lseek+0x4c>
10016d88:	0005883a 	mov	r2,zero
10016d8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10016d90:	e0bffc17 	ldw	r2,-16(fp)
10016d94:	10001026 	beq	r2,zero,10016dd8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10016d98:	e0bffc17 	ldw	r2,-16(fp)
10016d9c:	10800017 	ldw	r2,0(r2)
10016da0:	10800717 	ldw	r2,28(r2)
10016da4:	10000926 	beq	r2,zero,10016dcc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10016da8:	e0bffc17 	ldw	r2,-16(fp)
10016dac:	10800017 	ldw	r2,0(r2)
10016db0:	10800717 	ldw	r2,28(r2)
10016db4:	e1bfff17 	ldw	r6,-4(fp)
10016db8:	e17ffe17 	ldw	r5,-8(fp)
10016dbc:	e13ffc17 	ldw	r4,-16(fp)
10016dc0:	103ee83a 	callr	r2
10016dc4:	e0bffb15 	stw	r2,-20(fp)
10016dc8:	00000506 	br	10016de0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10016dcc:	00bfde84 	movi	r2,-134
10016dd0:	e0bffb15 	stw	r2,-20(fp)
10016dd4:	00000206 	br	10016de0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10016dd8:	00bfebc4 	movi	r2,-81
10016ddc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10016de0:	e0bffb17 	ldw	r2,-20(fp)
10016de4:	1000070e 	bge	r2,zero,10016e04 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10016de8:	0016d040 	call	10016d04 <alt_get_errno>
10016dec:	1007883a 	mov	r3,r2
10016df0:	e0bffb17 	ldw	r2,-20(fp)
10016df4:	0085c83a 	sub	r2,zero,r2
10016df8:	18800015 	stw	r2,0(r3)
    rc = -1;
10016dfc:	00bfffc4 	movi	r2,-1
10016e00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10016e04:	e0bffb17 	ldw	r2,-20(fp)
}
10016e08:	e037883a 	mov	sp,fp
10016e0c:	dfc00117 	ldw	ra,4(sp)
10016e10:	df000017 	ldw	fp,0(sp)
10016e14:	dec00204 	addi	sp,sp,8
10016e18:	f800283a 	ret

10016e1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10016e1c:	defffd04 	addi	sp,sp,-12
10016e20:	dfc00215 	stw	ra,8(sp)
10016e24:	df000115 	stw	fp,4(sp)
10016e28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10016e2c:	0009883a 	mov	r4,zero
10016e30:	001754c0 	call	1001754c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10016e34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10016e38:	00175840 	call	10017584 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10016e3c:	018400b4 	movhi	r6,4098
10016e40:	31a7cb04 	addi	r6,r6,-24788
10016e44:	014400b4 	movhi	r5,4098
10016e48:	2967cb04 	addi	r5,r5,-24788
10016e4c:	010400b4 	movhi	r4,4098
10016e50:	2127cb04 	addi	r4,r4,-24788
10016e54:	00189280 	call	10018928 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10016e58:	00184c40 	call	100184c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10016e5c:	010400b4 	movhi	r4,4098
10016e60:	21214904 	addi	r4,r4,-31452
10016e64:	0018f440 	call	10018f44 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10016e68:	d0a7a617 	ldw	r2,-24936(gp)
10016e6c:	d0e7a717 	ldw	r3,-24932(gp)
10016e70:	d127a817 	ldw	r4,-24928(gp)
10016e74:	200d883a 	mov	r6,r4
10016e78:	180b883a 	mov	r5,r3
10016e7c:	1009883a 	mov	r4,r2
10016e80:	0004e9c0 	call	10004e9c <main>
10016e84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10016e88:	01000044 	movi	r4,1
10016e8c:	00167440 	call	10016744 <close>
  exit (result);
10016e90:	e13fff17 	ldw	r4,-4(fp)
10016e94:	0018f580 	call	10018f58 <exit>

10016e98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10016e98:	defffe04 	addi	sp,sp,-8
10016e9c:	df000115 	stw	fp,4(sp)
10016ea0:	df000104 	addi	fp,sp,4
10016ea4:	e13fff15 	stw	r4,-4(fp)
}
10016ea8:	0001883a 	nop
10016eac:	e037883a 	mov	sp,fp
10016eb0:	df000017 	ldw	fp,0(sp)
10016eb4:	dec00104 	addi	sp,sp,4
10016eb8:	f800283a 	ret

10016ebc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10016ebc:	defffe04 	addi	sp,sp,-8
10016ec0:	df000115 	stw	fp,4(sp)
10016ec4:	df000104 	addi	fp,sp,4
10016ec8:	e13fff15 	stw	r4,-4(fp)
}
10016ecc:	0001883a 	nop
10016ed0:	e037883a 	mov	sp,fp
10016ed4:	df000017 	ldw	fp,0(sp)
10016ed8:	dec00104 	addi	sp,sp,4
10016edc:	f800283a 	ret

10016ee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016ee0:	defffe04 	addi	sp,sp,-8
10016ee4:	dfc00115 	stw	ra,4(sp)
10016ee8:	df000015 	stw	fp,0(sp)
10016eec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016ef0:	d0a01117 	ldw	r2,-32700(gp)
10016ef4:	10000326 	beq	r2,zero,10016f04 <alt_get_errno+0x24>
10016ef8:	d0a01117 	ldw	r2,-32700(gp)
10016efc:	103ee83a 	callr	r2
10016f00:	00000106 	br	10016f08 <alt_get_errno+0x28>
10016f04:	d0a79b04 	addi	r2,gp,-24980
}
10016f08:	e037883a 	mov	sp,fp
10016f0c:	dfc00117 	ldw	ra,4(sp)
10016f10:	df000017 	ldw	fp,0(sp)
10016f14:	dec00204 	addi	sp,sp,8
10016f18:	f800283a 	ret

10016f1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10016f1c:	defff904 	addi	sp,sp,-28
10016f20:	dfc00615 	stw	ra,24(sp)
10016f24:	df000515 	stw	fp,20(sp)
10016f28:	df000504 	addi	fp,sp,20
10016f2c:	e13ffd15 	stw	r4,-12(fp)
10016f30:	e17ffe15 	stw	r5,-8(fp)
10016f34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016f38:	e0bffd17 	ldw	r2,-12(fp)
10016f3c:	10000816 	blt	r2,zero,10016f60 <read+0x44>
10016f40:	01400304 	movi	r5,12
10016f44:	e13ffd17 	ldw	r4,-12(fp)
10016f48:	00085800 	call	10008580 <__mulsi3>
10016f4c:	1007883a 	mov	r3,r2
10016f50:	008400b4 	movhi	r2,4098
10016f54:	10aac604 	addi	r2,r2,-21736
10016f58:	1885883a 	add	r2,r3,r2
10016f5c:	00000106 	br	10016f64 <read+0x48>
10016f60:	0005883a 	mov	r2,zero
10016f64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016f68:	e0bffb17 	ldw	r2,-20(fp)
10016f6c:	10002226 	beq	r2,zero,10016ff8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10016f70:	e0bffb17 	ldw	r2,-20(fp)
10016f74:	10800217 	ldw	r2,8(r2)
10016f78:	108000cc 	andi	r2,r2,3
10016f7c:	10800060 	cmpeqi	r2,r2,1
10016f80:	1000181e 	bne	r2,zero,10016fe4 <read+0xc8>
        (fd->dev->read))
10016f84:	e0bffb17 	ldw	r2,-20(fp)
10016f88:	10800017 	ldw	r2,0(r2)
10016f8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10016f90:	10001426 	beq	r2,zero,10016fe4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10016f94:	e0bffb17 	ldw	r2,-20(fp)
10016f98:	10800017 	ldw	r2,0(r2)
10016f9c:	10800517 	ldw	r2,20(r2)
10016fa0:	e0ffff17 	ldw	r3,-4(fp)
10016fa4:	180d883a 	mov	r6,r3
10016fa8:	e17ffe17 	ldw	r5,-8(fp)
10016fac:	e13ffb17 	ldw	r4,-20(fp)
10016fb0:	103ee83a 	callr	r2
10016fb4:	e0bffc15 	stw	r2,-16(fp)
10016fb8:	e0bffc17 	ldw	r2,-16(fp)
10016fbc:	1000070e 	bge	r2,zero,10016fdc <read+0xc0>
        {
          ALT_ERRNO = -rval;
10016fc0:	0016ee00 	call	10016ee0 <alt_get_errno>
10016fc4:	1007883a 	mov	r3,r2
10016fc8:	e0bffc17 	ldw	r2,-16(fp)
10016fcc:	0085c83a 	sub	r2,zero,r2
10016fd0:	18800015 	stw	r2,0(r3)
          return -1;
10016fd4:	00bfffc4 	movi	r2,-1
10016fd8:	00000c06 	br	1001700c <read+0xf0>
        }
        return rval;
10016fdc:	e0bffc17 	ldw	r2,-16(fp)
10016fe0:	00000a06 	br	1001700c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10016fe4:	0016ee00 	call	10016ee0 <alt_get_errno>
10016fe8:	1007883a 	mov	r3,r2
10016fec:	00800344 	movi	r2,13
10016ff0:	18800015 	stw	r2,0(r3)
10016ff4:	00000406 	br	10017008 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10016ff8:	0016ee00 	call	10016ee0 <alt_get_errno>
10016ffc:	1007883a 	mov	r3,r2
10017000:	00801444 	movi	r2,81
10017004:	18800015 	stw	r2,0(r3)
  }
  return -1;
10017008:	00bfffc4 	movi	r2,-1
}
1001700c:	e037883a 	mov	sp,fp
10017010:	dfc00117 	ldw	ra,4(sp)
10017014:	df000017 	ldw	fp,0(sp)
10017018:	dec00204 	addi	sp,sp,8
1001701c:	f800283a 	ret

10017020 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10017020:	defffc04 	addi	sp,sp,-16
10017024:	dfc00315 	stw	ra,12(sp)
10017028:	df000215 	stw	fp,8(sp)
1001702c:	dc000115 	stw	r16,4(sp)
10017030:	df000204 	addi	fp,sp,8
10017034:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10017038:	e0bffe17 	ldw	r2,-8(fp)
1001703c:	108000d0 	cmplti	r2,r2,3
10017040:	1000111e 	bne	r2,zero,10017088 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10017044:	040400b4 	movhi	r16,4098
10017048:	842ac604 	addi	r16,r16,-21736
1001704c:	e0bffe17 	ldw	r2,-8(fp)
10017050:	01400304 	movi	r5,12
10017054:	1009883a 	mov	r4,r2
10017058:	00085800 	call	10008580 <__mulsi3>
1001705c:	8085883a 	add	r2,r16,r2
10017060:	10800204 	addi	r2,r2,8
10017064:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10017068:	040400b4 	movhi	r16,4098
1001706c:	842ac604 	addi	r16,r16,-21736
10017070:	e0bffe17 	ldw	r2,-8(fp)
10017074:	01400304 	movi	r5,12
10017078:	1009883a 	mov	r4,r2
1001707c:	00085800 	call	10008580 <__mulsi3>
10017080:	8085883a 	add	r2,r16,r2
10017084:	10000015 	stw	zero,0(r2)
  }
}
10017088:	0001883a 	nop
1001708c:	e6ffff04 	addi	sp,fp,-4
10017090:	dfc00217 	ldw	ra,8(sp)
10017094:	df000117 	ldw	fp,4(sp)
10017098:	dc000017 	ldw	r16,0(sp)
1001709c:	dec00304 	addi	sp,sp,12
100170a0:	f800283a 	ret

100170a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100170a4:	defff904 	addi	sp,sp,-28
100170a8:	df000615 	stw	fp,24(sp)
100170ac:	df000604 	addi	fp,sp,24
100170b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100170b4:	0005303a 	rdctl	r2,status
100170b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100170bc:	e0fffe17 	ldw	r3,-8(fp)
100170c0:	00bfff84 	movi	r2,-2
100170c4:	1884703a 	and	r2,r3,r2
100170c8:	1001703a 	wrctl	status,r2
  
  return context;
100170cc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100170d0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100170d4:	d0a01217 	ldw	r2,-32696(gp)
100170d8:	10c000c4 	addi	r3,r2,3
100170dc:	00bfff04 	movi	r2,-4
100170e0:	1884703a 	and	r2,r3,r2
100170e4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100170e8:	d0e01217 	ldw	r3,-32696(gp)
100170ec:	e0bfff17 	ldw	r2,-4(fp)
100170f0:	1887883a 	add	r3,r3,r2
100170f4:	00860034 	movhi	r2,6144
100170f8:	10800004 	addi	r2,r2,0
100170fc:	10c0062e 	bgeu	r2,r3,10017118 <sbrk+0x74>
10017100:	e0bffb17 	ldw	r2,-20(fp)
10017104:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017108:	e0bffa17 	ldw	r2,-24(fp)
1001710c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10017110:	00bfffc4 	movi	r2,-1
10017114:	00000b06 	br	10017144 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10017118:	d0a01217 	ldw	r2,-32696(gp)
1001711c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10017120:	d0e01217 	ldw	r3,-32696(gp)
10017124:	e0bfff17 	ldw	r2,-4(fp)
10017128:	1885883a 	add	r2,r3,r2
1001712c:	d0a01215 	stw	r2,-32696(gp)
10017130:	e0bffb17 	ldw	r2,-20(fp)
10017134:	e0bffc15 	stw	r2,-16(fp)
10017138:	e0bffc17 	ldw	r2,-16(fp)
1001713c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10017140:	e0bffd17 	ldw	r2,-12(fp)
} 
10017144:	e037883a 	mov	sp,fp
10017148:	df000017 	ldw	fp,0(sp)
1001714c:	dec00104 	addi	sp,sp,4
10017150:	f800283a 	ret

10017154 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10017154:	defffa04 	addi	sp,sp,-24
10017158:	df000515 	stw	fp,20(sp)
1001715c:	df000504 	addi	fp,sp,20
10017160:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017164:	0005303a 	rdctl	r2,status
10017168:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001716c:	e0fffc17 	ldw	r3,-16(fp)
10017170:	00bfff84 	movi	r2,-2
10017174:	1884703a 	and	r2,r3,r2
10017178:	1001703a 	wrctl	status,r2
  
  return context;
1001717c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10017180:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10017184:	e0bfff17 	ldw	r2,-4(fp)
10017188:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001718c:	e0bffd17 	ldw	r2,-12(fp)
10017190:	10800017 	ldw	r2,0(r2)
10017194:	e0fffd17 	ldw	r3,-12(fp)
10017198:	18c00117 	ldw	r3,4(r3)
1001719c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100171a0:	e0bffd17 	ldw	r2,-12(fp)
100171a4:	10800117 	ldw	r2,4(r2)
100171a8:	e0fffd17 	ldw	r3,-12(fp)
100171ac:	18c00017 	ldw	r3,0(r3)
100171b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100171b4:	e0bffd17 	ldw	r2,-12(fp)
100171b8:	e0fffd17 	ldw	r3,-12(fp)
100171bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100171c0:	e0bffd17 	ldw	r2,-12(fp)
100171c4:	e0fffd17 	ldw	r3,-12(fp)
100171c8:	10c00015 	stw	r3,0(r2)
100171cc:	e0bffb17 	ldw	r2,-20(fp)
100171d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100171d4:	e0bffe17 	ldw	r2,-8(fp)
100171d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100171dc:	0001883a 	nop
100171e0:	e037883a 	mov	sp,fp
100171e4:	df000017 	ldw	fp,0(sp)
100171e8:	dec00104 	addi	sp,sp,4
100171ec:	f800283a 	ret

100171f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100171f0:	defffb04 	addi	sp,sp,-20
100171f4:	dfc00415 	stw	ra,16(sp)
100171f8:	df000315 	stw	fp,12(sp)
100171fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10017200:	d0a01317 	ldw	r2,-32692(gp)
10017204:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10017208:	d0a7aa17 	ldw	r2,-24920(gp)
1001720c:	10800044 	addi	r2,r2,1
10017210:	d0a7aa15 	stw	r2,-24920(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10017214:	00002e06 	br	100172d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10017218:	e0bffd17 	ldw	r2,-12(fp)
1001721c:	10800017 	ldw	r2,0(r2)
10017220:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10017224:	e0bffd17 	ldw	r2,-12(fp)
10017228:	10800403 	ldbu	r2,16(r2)
1001722c:	10803fcc 	andi	r2,r2,255
10017230:	10000426 	beq	r2,zero,10017244 <alt_tick+0x54>
10017234:	d0a7aa17 	ldw	r2,-24920(gp)
10017238:	1000021e 	bne	r2,zero,10017244 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001723c:	e0bffd17 	ldw	r2,-12(fp)
10017240:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10017244:	e0bffd17 	ldw	r2,-12(fp)
10017248:	10800217 	ldw	r2,8(r2)
1001724c:	d0e7aa17 	ldw	r3,-24920(gp)
10017250:	18801d36 	bltu	r3,r2,100172c8 <alt_tick+0xd8>
10017254:	e0bffd17 	ldw	r2,-12(fp)
10017258:	10800403 	ldbu	r2,16(r2)
1001725c:	10803fcc 	andi	r2,r2,255
10017260:	1000191e 	bne	r2,zero,100172c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10017264:	e0bffd17 	ldw	r2,-12(fp)
10017268:	10800317 	ldw	r2,12(r2)
1001726c:	e0fffd17 	ldw	r3,-12(fp)
10017270:	18c00517 	ldw	r3,20(r3)
10017274:	1809883a 	mov	r4,r3
10017278:	103ee83a 	callr	r2
1001727c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10017280:	e0bfff17 	ldw	r2,-4(fp)
10017284:	1000031e 	bne	r2,zero,10017294 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10017288:	e13ffd17 	ldw	r4,-12(fp)
1001728c:	00171540 	call	10017154 <alt_alarm_stop>
10017290:	00000d06 	br	100172c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10017294:	e0bffd17 	ldw	r2,-12(fp)
10017298:	10c00217 	ldw	r3,8(r2)
1001729c:	e0bfff17 	ldw	r2,-4(fp)
100172a0:	1887883a 	add	r3,r3,r2
100172a4:	e0bffd17 	ldw	r2,-12(fp)
100172a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100172ac:	e0bffd17 	ldw	r2,-12(fp)
100172b0:	10c00217 	ldw	r3,8(r2)
100172b4:	d0a7aa17 	ldw	r2,-24920(gp)
100172b8:	1880032e 	bgeu	r3,r2,100172c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100172bc:	e0bffd17 	ldw	r2,-12(fp)
100172c0:	00c00044 	movi	r3,1
100172c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100172c8:	e0bffe17 	ldw	r2,-8(fp)
100172cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100172d0:	e0fffd17 	ldw	r3,-12(fp)
100172d4:	d0a01304 	addi	r2,gp,-32692
100172d8:	18bfcf1e 	bne	r3,r2,10017218 <__alt_data_end+0xf8017218>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100172dc:	0001883a 	nop
}
100172e0:	0001883a 	nop
100172e4:	e037883a 	mov	sp,fp
100172e8:	dfc00117 	ldw	ra,4(sp)
100172ec:	df000017 	ldw	fp,0(sp)
100172f0:	dec00204 	addi	sp,sp,8
100172f4:	f800283a 	ret

100172f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100172f8:	defffe04 	addi	sp,sp,-8
100172fc:	dfc00115 	stw	ra,4(sp)
10017300:	df000015 	stw	fp,0(sp)
10017304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017308:	d0a01117 	ldw	r2,-32700(gp)
1001730c:	10000326 	beq	r2,zero,1001731c <alt_get_errno+0x24>
10017310:	d0a01117 	ldw	r2,-32700(gp)
10017314:	103ee83a 	callr	r2
10017318:	00000106 	br	10017320 <alt_get_errno+0x28>
1001731c:	d0a79b04 	addi	r2,gp,-24980
}
10017320:	e037883a 	mov	sp,fp
10017324:	dfc00117 	ldw	ra,4(sp)
10017328:	df000017 	ldw	fp,0(sp)
1001732c:	dec00204 	addi	sp,sp,8
10017330:	f800283a 	ret

10017334 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
10017334:	defffc04 	addi	sp,sp,-16
10017338:	dfc00315 	stw	ra,12(sp)
1001733c:	df000215 	stw	fp,8(sp)
10017340:	df000204 	addi	fp,sp,8
10017344:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10017348:	d0a7aa17 	ldw	r2,-24920(gp)
  clock_t ticks = alt_nticks(); 
1001734c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10017350:	d0a7a917 	ldw	r2,-24924(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
10017354:	1000061e 	bne	r2,zero,10017370 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
10017358:	00172f80 	call	100172f8 <alt_get_errno>
1001735c:	1007883a 	mov	r3,r2
10017360:	00801604 	movi	r2,88
10017364:	18800015 	stw	r2,0(r3)
    return 0;
10017368:	0005883a 	mov	r2,zero
1001736c:	00000a06 	br	10017398 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
10017370:	e0bfff17 	ldw	r2,-4(fp)
10017374:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
10017378:	e0bfff17 	ldw	r2,-4(fp)
1001737c:	e0fffe17 	ldw	r3,-8(fp)
10017380:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
10017384:	e0bfff17 	ldw	r2,-4(fp)
10017388:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
1001738c:	e0bfff17 	ldw	r2,-4(fp)
10017390:	10000315 	stw	zero,12(r2)

  return ticks;
10017394:	e0bffe17 	ldw	r2,-8(fp)
}
10017398:	e037883a 	mov	sp,fp
1001739c:	dfc00117 	ldw	ra,4(sp)
100173a0:	df000017 	ldw	fp,0(sp)
100173a4:	dec00204 	addi	sp,sp,8
100173a8:	f800283a 	ret

100173ac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100173ac:	defffd04 	addi	sp,sp,-12
100173b0:	dfc00215 	stw	ra,8(sp)
100173b4:	df000115 	stw	fp,4(sp)
100173b8:	df000104 	addi	fp,sp,4
100173bc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100173c0:	e13fff17 	ldw	r4,-4(fp)
100173c4:	001826c0 	call	1001826c <alt_busy_sleep>
}
100173c8:	e037883a 	mov	sp,fp
100173cc:	dfc00117 	ldw	ra,4(sp)
100173d0:	df000017 	ldw	fp,0(sp)
100173d4:	dec00204 	addi	sp,sp,8
100173d8:	f800283a 	ret

100173dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100173dc:	defffe04 	addi	sp,sp,-8
100173e0:	dfc00115 	stw	ra,4(sp)
100173e4:	df000015 	stw	fp,0(sp)
100173e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100173ec:	d0a01117 	ldw	r2,-32700(gp)
100173f0:	10000326 	beq	r2,zero,10017400 <alt_get_errno+0x24>
100173f4:	d0a01117 	ldw	r2,-32700(gp)
100173f8:	103ee83a 	callr	r2
100173fc:	00000106 	br	10017404 <alt_get_errno+0x28>
10017400:	d0a79b04 	addi	r2,gp,-24980
}
10017404:	e037883a 	mov	sp,fp
10017408:	dfc00117 	ldw	ra,4(sp)
1001740c:	df000017 	ldw	fp,0(sp)
10017410:	dec00204 	addi	sp,sp,8
10017414:	f800283a 	ret

10017418 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10017418:	defff904 	addi	sp,sp,-28
1001741c:	dfc00615 	stw	ra,24(sp)
10017420:	df000515 	stw	fp,20(sp)
10017424:	df000504 	addi	fp,sp,20
10017428:	e13ffd15 	stw	r4,-12(fp)
1001742c:	e17ffe15 	stw	r5,-8(fp)
10017430:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10017434:	e0bffd17 	ldw	r2,-12(fp)
10017438:	10000816 	blt	r2,zero,1001745c <write+0x44>
1001743c:	01400304 	movi	r5,12
10017440:	e13ffd17 	ldw	r4,-12(fp)
10017444:	00085800 	call	10008580 <__mulsi3>
10017448:	1007883a 	mov	r3,r2
1001744c:	008400b4 	movhi	r2,4098
10017450:	10aac604 	addi	r2,r2,-21736
10017454:	1885883a 	add	r2,r3,r2
10017458:	00000106 	br	10017460 <write+0x48>
1001745c:	0005883a 	mov	r2,zero
10017460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10017464:	e0bffb17 	ldw	r2,-20(fp)
10017468:	10002126 	beq	r2,zero,100174f0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001746c:	e0bffb17 	ldw	r2,-20(fp)
10017470:	10800217 	ldw	r2,8(r2)
10017474:	108000cc 	andi	r2,r2,3
10017478:	10001826 	beq	r2,zero,100174dc <write+0xc4>
1001747c:	e0bffb17 	ldw	r2,-20(fp)
10017480:	10800017 	ldw	r2,0(r2)
10017484:	10800617 	ldw	r2,24(r2)
10017488:	10001426 	beq	r2,zero,100174dc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001748c:	e0bffb17 	ldw	r2,-20(fp)
10017490:	10800017 	ldw	r2,0(r2)
10017494:	10800617 	ldw	r2,24(r2)
10017498:	e0ffff17 	ldw	r3,-4(fp)
1001749c:	180d883a 	mov	r6,r3
100174a0:	e17ffe17 	ldw	r5,-8(fp)
100174a4:	e13ffb17 	ldw	r4,-20(fp)
100174a8:	103ee83a 	callr	r2
100174ac:	e0bffc15 	stw	r2,-16(fp)
100174b0:	e0bffc17 	ldw	r2,-16(fp)
100174b4:	1000070e 	bge	r2,zero,100174d4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100174b8:	00173dc0 	call	100173dc <alt_get_errno>
100174bc:	1007883a 	mov	r3,r2
100174c0:	e0bffc17 	ldw	r2,-16(fp)
100174c4:	0085c83a 	sub	r2,zero,r2
100174c8:	18800015 	stw	r2,0(r3)
        return -1;
100174cc:	00bfffc4 	movi	r2,-1
100174d0:	00000c06 	br	10017504 <write+0xec>
      }
      return rval;
100174d4:	e0bffc17 	ldw	r2,-16(fp)
100174d8:	00000a06 	br	10017504 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100174dc:	00173dc0 	call	100173dc <alt_get_errno>
100174e0:	1007883a 	mov	r3,r2
100174e4:	00800344 	movi	r2,13
100174e8:	18800015 	stw	r2,0(r3)
100174ec:	00000406 	br	10017500 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100174f0:	00173dc0 	call	100173dc <alt_get_errno>
100174f4:	1007883a 	mov	r3,r2
100174f8:	00801444 	movi	r2,81
100174fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
10017500:	00bfffc4 	movi	r2,-1
}
10017504:	e037883a 	mov	sp,fp
10017508:	dfc00117 	ldw	ra,4(sp)
1001750c:	df000017 	ldw	fp,0(sp)
10017510:	dec00204 	addi	sp,sp,8
10017514:	f800283a 	ret

10017518 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10017518:	defffd04 	addi	sp,sp,-12
1001751c:	dfc00215 	stw	ra,8(sp)
10017520:	df000115 	stw	fp,4(sp)
10017524:	df000104 	addi	fp,sp,4
10017528:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001752c:	d1600e04 	addi	r5,gp,-32712
10017530:	e13fff17 	ldw	r4,-4(fp)
10017534:	00184200 	call	10018420 <alt_dev_llist_insert>
}
10017538:	e037883a 	mov	sp,fp
1001753c:	dfc00117 	ldw	ra,4(sp)
10017540:	df000017 	ldw	fp,0(sp)
10017544:	dec00204 	addi	sp,sp,8
10017548:	f800283a 	ret

1001754c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001754c:	defffd04 	addi	sp,sp,-12
10017550:	dfc00215 	stw	ra,8(sp)
10017554:	df000115 	stw	fp,4(sp)
10017558:	df000104 	addi	fp,sp,4
1001755c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10017560:	0018c280 	call	10018c28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10017564:	00800044 	movi	r2,1
10017568:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001756c:	0001883a 	nop
10017570:	e037883a 	mov	sp,fp
10017574:	dfc00117 	ldw	ra,4(sp)
10017578:	df000017 	ldw	fp,0(sp)
1001757c:	dec00204 	addi	sp,sp,8
10017580:	f800283a 	ret

10017584 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10017584:	defffe04 	addi	sp,sp,-8
10017588:	dfc00115 	stw	ra,4(sp)
1001758c:	df000015 	stw	fp,0(sp)
10017590:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
10017594:	01c0fa04 	movi	r7,1000
10017598:	01800044 	movi	r6,1
1001759c:	000b883a 	mov	r5,zero
100175a0:	01001804 	movi	r4,96
100175a4:	00180c40 	call	100180c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100175a8:	01800144 	movi	r6,5
100175ac:	000b883a 	mov	r5,zero
100175b0:	010400b4 	movhi	r4,4098
100175b4:	212b3004 	addi	r4,r4,-21312
100175b8:	00177480 	call	10017748 <altera_avalon_jtag_uart_init>
100175bc:	010400b4 	movhi	r4,4098
100175c0:	212b2604 	addi	r4,r4,-21352
100175c4:	00175180 	call	10017518 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100175c8:	0001883a 	nop
}
100175cc:	0001883a 	nop
100175d0:	e037883a 	mov	sp,fp
100175d4:	dfc00117 	ldw	ra,4(sp)
100175d8:	df000017 	ldw	fp,0(sp)
100175dc:	dec00204 	addi	sp,sp,8
100175e0:	f800283a 	ret

100175e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100175e4:	defffa04 	addi	sp,sp,-24
100175e8:	dfc00515 	stw	ra,20(sp)
100175ec:	df000415 	stw	fp,16(sp)
100175f0:	df000404 	addi	fp,sp,16
100175f4:	e13ffd15 	stw	r4,-12(fp)
100175f8:	e17ffe15 	stw	r5,-8(fp)
100175fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10017600:	e0bffd17 	ldw	r2,-12(fp)
10017604:	10800017 	ldw	r2,0(r2)
10017608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001760c:	e0bffc17 	ldw	r2,-16(fp)
10017610:	10c00a04 	addi	r3,r2,40
10017614:	e0bffd17 	ldw	r2,-12(fp)
10017618:	10800217 	ldw	r2,8(r2)
1001761c:	100f883a 	mov	r7,r2
10017620:	e1bfff17 	ldw	r6,-4(fp)
10017624:	e17ffe17 	ldw	r5,-8(fp)
10017628:	1809883a 	mov	r4,r3
1001762c:	0017c0c0 	call	10017c0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10017630:	e037883a 	mov	sp,fp
10017634:	dfc00117 	ldw	ra,4(sp)
10017638:	df000017 	ldw	fp,0(sp)
1001763c:	dec00204 	addi	sp,sp,8
10017640:	f800283a 	ret

10017644 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10017644:	defffa04 	addi	sp,sp,-24
10017648:	dfc00515 	stw	ra,20(sp)
1001764c:	df000415 	stw	fp,16(sp)
10017650:	df000404 	addi	fp,sp,16
10017654:	e13ffd15 	stw	r4,-12(fp)
10017658:	e17ffe15 	stw	r5,-8(fp)
1001765c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10017660:	e0bffd17 	ldw	r2,-12(fp)
10017664:	10800017 	ldw	r2,0(r2)
10017668:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001766c:	e0bffc17 	ldw	r2,-16(fp)
10017670:	10c00a04 	addi	r3,r2,40
10017674:	e0bffd17 	ldw	r2,-12(fp)
10017678:	10800217 	ldw	r2,8(r2)
1001767c:	100f883a 	mov	r7,r2
10017680:	e1bfff17 	ldw	r6,-4(fp)
10017684:	e17ffe17 	ldw	r5,-8(fp)
10017688:	1809883a 	mov	r4,r3
1001768c:	0017e280 	call	10017e28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10017690:	e037883a 	mov	sp,fp
10017694:	dfc00117 	ldw	ra,4(sp)
10017698:	df000017 	ldw	fp,0(sp)
1001769c:	dec00204 	addi	sp,sp,8
100176a0:	f800283a 	ret

100176a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100176a4:	defffc04 	addi	sp,sp,-16
100176a8:	dfc00315 	stw	ra,12(sp)
100176ac:	df000215 	stw	fp,8(sp)
100176b0:	df000204 	addi	fp,sp,8
100176b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100176b8:	e0bfff17 	ldw	r2,-4(fp)
100176bc:	10800017 	ldw	r2,0(r2)
100176c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100176c4:	e0bffe17 	ldw	r2,-8(fp)
100176c8:	10c00a04 	addi	r3,r2,40
100176cc:	e0bfff17 	ldw	r2,-4(fp)
100176d0:	10800217 	ldw	r2,8(r2)
100176d4:	100b883a 	mov	r5,r2
100176d8:	1809883a 	mov	r4,r3
100176dc:	0017ab40 	call	10017ab4 <altera_avalon_jtag_uart_close>
}
100176e0:	e037883a 	mov	sp,fp
100176e4:	dfc00117 	ldw	ra,4(sp)
100176e8:	df000017 	ldw	fp,0(sp)
100176ec:	dec00204 	addi	sp,sp,8
100176f0:	f800283a 	ret

100176f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100176f4:	defffa04 	addi	sp,sp,-24
100176f8:	dfc00515 	stw	ra,20(sp)
100176fc:	df000415 	stw	fp,16(sp)
10017700:	df000404 	addi	fp,sp,16
10017704:	e13ffd15 	stw	r4,-12(fp)
10017708:	e17ffe15 	stw	r5,-8(fp)
1001770c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10017710:	e0bffd17 	ldw	r2,-12(fp)
10017714:	10800017 	ldw	r2,0(r2)
10017718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001771c:	e0bffc17 	ldw	r2,-16(fp)
10017720:	10800a04 	addi	r2,r2,40
10017724:	e1bfff17 	ldw	r6,-4(fp)
10017728:	e17ffe17 	ldw	r5,-8(fp)
1001772c:	1009883a 	mov	r4,r2
10017730:	0017b1c0 	call	10017b1c <altera_avalon_jtag_uart_ioctl>
}
10017734:	e037883a 	mov	sp,fp
10017738:	dfc00117 	ldw	ra,4(sp)
1001773c:	df000017 	ldw	fp,0(sp)
10017740:	dec00204 	addi	sp,sp,8
10017744:	f800283a 	ret

10017748 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10017748:	defffa04 	addi	sp,sp,-24
1001774c:	dfc00515 	stw	ra,20(sp)
10017750:	df000415 	stw	fp,16(sp)
10017754:	df000404 	addi	fp,sp,16
10017758:	e13ffd15 	stw	r4,-12(fp)
1001775c:	e17ffe15 	stw	r5,-8(fp)
10017760:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10017764:	e0bffd17 	ldw	r2,-12(fp)
10017768:	00c00044 	movi	r3,1
1001776c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10017770:	e0bffd17 	ldw	r2,-12(fp)
10017774:	10800017 	ldw	r2,0(r2)
10017778:	10800104 	addi	r2,r2,4
1001777c:	1007883a 	mov	r3,r2
10017780:	e0bffd17 	ldw	r2,-12(fp)
10017784:	10800817 	ldw	r2,32(r2)
10017788:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001778c:	e0bffe17 	ldw	r2,-8(fp)
10017790:	e0ffff17 	ldw	r3,-4(fp)
10017794:	d8000015 	stw	zero,0(sp)
10017798:	e1fffd17 	ldw	r7,-12(fp)
1001779c:	01840074 	movhi	r6,4097
100177a0:	319e0204 	addi	r6,r6,30728
100177a4:	180b883a 	mov	r5,r3
100177a8:	1009883a 	mov	r4,r2
100177ac:	00185a40 	call	100185a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100177b0:	e0bffd17 	ldw	r2,-12(fp)
100177b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100177b8:	e0bffd17 	ldw	r2,-12(fp)
100177bc:	10800204 	addi	r2,r2,8
100177c0:	d0e7a917 	ldw	r3,-24924(gp)
100177c4:	e1fffd17 	ldw	r7,-12(fp)
100177c8:	01840074 	movhi	r6,4097
100177cc:	319e8504 	addi	r6,r6,31252
100177d0:	180b883a 	mov	r5,r3
100177d4:	1009883a 	mov	r4,r2
100177d8:	00181400 	call	10018140 <alt_alarm_start>
100177dc:	1000040e 	bge	r2,zero,100177f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100177e0:	e0fffd17 	ldw	r3,-12(fp)
100177e4:	00a00034 	movhi	r2,32768
100177e8:	10bfffc4 	addi	r2,r2,-1
100177ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100177f0:	0001883a 	nop
100177f4:	e037883a 	mov	sp,fp
100177f8:	dfc00117 	ldw	ra,4(sp)
100177fc:	df000017 	ldw	fp,0(sp)
10017800:	dec00204 	addi	sp,sp,8
10017804:	f800283a 	ret

10017808 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10017808:	defff804 	addi	sp,sp,-32
1001780c:	df000715 	stw	fp,28(sp)
10017810:	df000704 	addi	fp,sp,28
10017814:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10017818:	e0bfff17 	ldw	r2,-4(fp)
1001781c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10017820:	e0bffb17 	ldw	r2,-20(fp)
10017824:	10800017 	ldw	r2,0(r2)
10017828:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001782c:	e0bffc17 	ldw	r2,-16(fp)
10017830:	10800104 	addi	r2,r2,4
10017834:	10800037 	ldwio	r2,0(r2)
10017838:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001783c:	e0bffd17 	ldw	r2,-12(fp)
10017840:	1080c00c 	andi	r2,r2,768
10017844:	10006d26 	beq	r2,zero,100179fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10017848:	e0bffd17 	ldw	r2,-12(fp)
1001784c:	1080400c 	andi	r2,r2,256
10017850:	10003526 	beq	r2,zero,10017928 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10017854:	00800074 	movhi	r2,1
10017858:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001785c:	e0bffb17 	ldw	r2,-20(fp)
10017860:	10800a17 	ldw	r2,40(r2)
10017864:	10800044 	addi	r2,r2,1
10017868:	1081ffcc 	andi	r2,r2,2047
1001786c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10017870:	e0bffb17 	ldw	r2,-20(fp)
10017874:	10c00b17 	ldw	r3,44(r2)
10017878:	e0bffe17 	ldw	r2,-8(fp)
1001787c:	18801526 	beq	r3,r2,100178d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10017880:	e0bffc17 	ldw	r2,-16(fp)
10017884:	10800037 	ldwio	r2,0(r2)
10017888:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001788c:	e0bff917 	ldw	r2,-28(fp)
10017890:	10a0000c 	andi	r2,r2,32768
10017894:	10001126 	beq	r2,zero,100178dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10017898:	e0bffb17 	ldw	r2,-20(fp)
1001789c:	10800a17 	ldw	r2,40(r2)
100178a0:	e0fff917 	ldw	r3,-28(fp)
100178a4:	1809883a 	mov	r4,r3
100178a8:	e0fffb17 	ldw	r3,-20(fp)
100178ac:	1885883a 	add	r2,r3,r2
100178b0:	10800e04 	addi	r2,r2,56
100178b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100178b8:	e0bffb17 	ldw	r2,-20(fp)
100178bc:	10800a17 	ldw	r2,40(r2)
100178c0:	10800044 	addi	r2,r2,1
100178c4:	10c1ffcc 	andi	r3,r2,2047
100178c8:	e0bffb17 	ldw	r2,-20(fp)
100178cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100178d0:	003fe206 	br	1001785c <__alt_data_end+0xf801785c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100178d4:	0001883a 	nop
100178d8:	00000106 	br	100178e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100178dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100178e0:	e0bff917 	ldw	r2,-28(fp)
100178e4:	10bfffec 	andhi	r2,r2,65535
100178e8:	10000f26 	beq	r2,zero,10017928 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100178ec:	e0bffb17 	ldw	r2,-20(fp)
100178f0:	10c00817 	ldw	r3,32(r2)
100178f4:	00bfff84 	movi	r2,-2
100178f8:	1886703a 	and	r3,r3,r2
100178fc:	e0bffb17 	ldw	r2,-20(fp)
10017900:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10017904:	e0bffc17 	ldw	r2,-16(fp)
10017908:	10800104 	addi	r2,r2,4
1001790c:	1007883a 	mov	r3,r2
10017910:	e0bffb17 	ldw	r2,-20(fp)
10017914:	10800817 	ldw	r2,32(r2)
10017918:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001791c:	e0bffc17 	ldw	r2,-16(fp)
10017920:	10800104 	addi	r2,r2,4
10017924:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10017928:	e0bffd17 	ldw	r2,-12(fp)
1001792c:	1080800c 	andi	r2,r2,512
10017930:	103fbe26 	beq	r2,zero,1001782c <__alt_data_end+0xf801782c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10017934:	e0bffd17 	ldw	r2,-12(fp)
10017938:	1004d43a 	srli	r2,r2,16
1001793c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10017940:	00001406 	br	10017994 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10017944:	e0bffc17 	ldw	r2,-16(fp)
10017948:	e0fffb17 	ldw	r3,-20(fp)
1001794c:	18c00d17 	ldw	r3,52(r3)
10017950:	e13ffb17 	ldw	r4,-20(fp)
10017954:	20c7883a 	add	r3,r4,r3
10017958:	18c20e04 	addi	r3,r3,2104
1001795c:	18c00003 	ldbu	r3,0(r3)
10017960:	18c03fcc 	andi	r3,r3,255
10017964:	18c0201c 	xori	r3,r3,128
10017968:	18ffe004 	addi	r3,r3,-128
1001796c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10017970:	e0bffb17 	ldw	r2,-20(fp)
10017974:	10800d17 	ldw	r2,52(r2)
10017978:	10800044 	addi	r2,r2,1
1001797c:	10c1ffcc 	andi	r3,r2,2047
10017980:	e0bffb17 	ldw	r2,-20(fp)
10017984:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10017988:	e0bffa17 	ldw	r2,-24(fp)
1001798c:	10bfffc4 	addi	r2,r2,-1
10017990:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10017994:	e0bffa17 	ldw	r2,-24(fp)
10017998:	10000526 	beq	r2,zero,100179b0 <altera_avalon_jtag_uart_irq+0x1a8>
1001799c:	e0bffb17 	ldw	r2,-20(fp)
100179a0:	10c00d17 	ldw	r3,52(r2)
100179a4:	e0bffb17 	ldw	r2,-20(fp)
100179a8:	10800c17 	ldw	r2,48(r2)
100179ac:	18bfe51e 	bne	r3,r2,10017944 <__alt_data_end+0xf8017944>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100179b0:	e0bffa17 	ldw	r2,-24(fp)
100179b4:	103f9d26 	beq	r2,zero,1001782c <__alt_data_end+0xf801782c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100179b8:	e0bffb17 	ldw	r2,-20(fp)
100179bc:	10c00817 	ldw	r3,32(r2)
100179c0:	00bfff44 	movi	r2,-3
100179c4:	1886703a 	and	r3,r3,r2
100179c8:	e0bffb17 	ldw	r2,-20(fp)
100179cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100179d0:	e0bffb17 	ldw	r2,-20(fp)
100179d4:	10800017 	ldw	r2,0(r2)
100179d8:	10800104 	addi	r2,r2,4
100179dc:	1007883a 	mov	r3,r2
100179e0:	e0bffb17 	ldw	r2,-20(fp)
100179e4:	10800817 	ldw	r2,32(r2)
100179e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100179ec:	e0bffc17 	ldw	r2,-16(fp)
100179f0:	10800104 	addi	r2,r2,4
100179f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100179f8:	003f8c06 	br	1001782c <__alt_data_end+0xf801782c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100179fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10017a00:	0001883a 	nop
10017a04:	e037883a 	mov	sp,fp
10017a08:	df000017 	ldw	fp,0(sp)
10017a0c:	dec00104 	addi	sp,sp,4
10017a10:	f800283a 	ret

10017a14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10017a14:	defff804 	addi	sp,sp,-32
10017a18:	df000715 	stw	fp,28(sp)
10017a1c:	df000704 	addi	fp,sp,28
10017a20:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10017a24:	e0bffb17 	ldw	r2,-20(fp)
10017a28:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10017a2c:	e0bff917 	ldw	r2,-28(fp)
10017a30:	10800017 	ldw	r2,0(r2)
10017a34:	10800104 	addi	r2,r2,4
10017a38:	10800037 	ldwio	r2,0(r2)
10017a3c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10017a40:	e0bffa17 	ldw	r2,-24(fp)
10017a44:	1081000c 	andi	r2,r2,1024
10017a48:	10000b26 	beq	r2,zero,10017a78 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10017a4c:	e0bff917 	ldw	r2,-28(fp)
10017a50:	10800017 	ldw	r2,0(r2)
10017a54:	10800104 	addi	r2,r2,4
10017a58:	1007883a 	mov	r3,r2
10017a5c:	e0bff917 	ldw	r2,-28(fp)
10017a60:	10800817 	ldw	r2,32(r2)
10017a64:	10810014 	ori	r2,r2,1024
10017a68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10017a6c:	e0bff917 	ldw	r2,-28(fp)
10017a70:	10000915 	stw	zero,36(r2)
10017a74:	00000a06 	br	10017aa0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10017a78:	e0bff917 	ldw	r2,-28(fp)
10017a7c:	10c00917 	ldw	r3,36(r2)
10017a80:	00a00034 	movhi	r2,32768
10017a84:	10bfff04 	addi	r2,r2,-4
10017a88:	10c00536 	bltu	r2,r3,10017aa0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10017a8c:	e0bff917 	ldw	r2,-28(fp)
10017a90:	10800917 	ldw	r2,36(r2)
10017a94:	10c00044 	addi	r3,r2,1
10017a98:	e0bff917 	ldw	r2,-28(fp)
10017a9c:	10c00915 	stw	r3,36(r2)
10017aa0:	d0a7a917 	ldw	r2,-24924(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10017aa4:	e037883a 	mov	sp,fp
10017aa8:	df000017 	ldw	fp,0(sp)
10017aac:	dec00104 	addi	sp,sp,4
10017ab0:	f800283a 	ret

10017ab4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10017ab4:	defffd04 	addi	sp,sp,-12
10017ab8:	df000215 	stw	fp,8(sp)
10017abc:	df000204 	addi	fp,sp,8
10017ac0:	e13ffe15 	stw	r4,-8(fp)
10017ac4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10017ac8:	00000506 	br	10017ae0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10017acc:	e0bfff17 	ldw	r2,-4(fp)
10017ad0:	1090000c 	andi	r2,r2,16384
10017ad4:	10000226 	beq	r2,zero,10017ae0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10017ad8:	00bffd44 	movi	r2,-11
10017adc:	00000b06 	br	10017b0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10017ae0:	e0bffe17 	ldw	r2,-8(fp)
10017ae4:	10c00d17 	ldw	r3,52(r2)
10017ae8:	e0bffe17 	ldw	r2,-8(fp)
10017aec:	10800c17 	ldw	r2,48(r2)
10017af0:	18800526 	beq	r3,r2,10017b08 <altera_avalon_jtag_uart_close+0x54>
10017af4:	e0bffe17 	ldw	r2,-8(fp)
10017af8:	10c00917 	ldw	r3,36(r2)
10017afc:	e0bffe17 	ldw	r2,-8(fp)
10017b00:	10800117 	ldw	r2,4(r2)
10017b04:	18bff136 	bltu	r3,r2,10017acc <__alt_data_end+0xf8017acc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10017b08:	0005883a 	mov	r2,zero
}
10017b0c:	e037883a 	mov	sp,fp
10017b10:	df000017 	ldw	fp,0(sp)
10017b14:	dec00104 	addi	sp,sp,4
10017b18:	f800283a 	ret

10017b1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10017b1c:	defffa04 	addi	sp,sp,-24
10017b20:	df000515 	stw	fp,20(sp)
10017b24:	df000504 	addi	fp,sp,20
10017b28:	e13ffd15 	stw	r4,-12(fp)
10017b2c:	e17ffe15 	stw	r5,-8(fp)
10017b30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10017b34:	00bff9c4 	movi	r2,-25
10017b38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10017b3c:	e0bffe17 	ldw	r2,-8(fp)
10017b40:	10da8060 	cmpeqi	r3,r2,27137
10017b44:	1800031e 	bne	r3,zero,10017b54 <altera_avalon_jtag_uart_ioctl+0x38>
10017b48:	109a80a0 	cmpeqi	r2,r2,27138
10017b4c:	1000181e 	bne	r2,zero,10017bb0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10017b50:	00002906 	br	10017bf8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10017b54:	e0bffd17 	ldw	r2,-12(fp)
10017b58:	10c00117 	ldw	r3,4(r2)
10017b5c:	00a00034 	movhi	r2,32768
10017b60:	10bfffc4 	addi	r2,r2,-1
10017b64:	18802126 	beq	r3,r2,10017bec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10017b68:	e0bfff17 	ldw	r2,-4(fp)
10017b6c:	10800017 	ldw	r2,0(r2)
10017b70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10017b74:	e0bffc17 	ldw	r2,-16(fp)
10017b78:	10800090 	cmplti	r2,r2,2
10017b7c:	1000061e 	bne	r2,zero,10017b98 <altera_avalon_jtag_uart_ioctl+0x7c>
10017b80:	e0fffc17 	ldw	r3,-16(fp)
10017b84:	00a00034 	movhi	r2,32768
10017b88:	10bfffc4 	addi	r2,r2,-1
10017b8c:	18800226 	beq	r3,r2,10017b98 <altera_avalon_jtag_uart_ioctl+0x7c>
10017b90:	e0bffc17 	ldw	r2,-16(fp)
10017b94:	00000206 	br	10017ba0 <altera_avalon_jtag_uart_ioctl+0x84>
10017b98:	00a00034 	movhi	r2,32768
10017b9c:	10bfff84 	addi	r2,r2,-2
10017ba0:	e0fffd17 	ldw	r3,-12(fp)
10017ba4:	18800115 	stw	r2,4(r3)
      rc = 0;
10017ba8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10017bac:	00000f06 	br	10017bec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10017bb0:	e0bffd17 	ldw	r2,-12(fp)
10017bb4:	10c00117 	ldw	r3,4(r2)
10017bb8:	00a00034 	movhi	r2,32768
10017bbc:	10bfffc4 	addi	r2,r2,-1
10017bc0:	18800c26 	beq	r3,r2,10017bf4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10017bc4:	e0bffd17 	ldw	r2,-12(fp)
10017bc8:	10c00917 	ldw	r3,36(r2)
10017bcc:	e0bffd17 	ldw	r2,-12(fp)
10017bd0:	10800117 	ldw	r2,4(r2)
10017bd4:	1885803a 	cmpltu	r2,r3,r2
10017bd8:	10c03fcc 	andi	r3,r2,255
10017bdc:	e0bfff17 	ldw	r2,-4(fp)
10017be0:	10c00015 	stw	r3,0(r2)
      rc = 0;
10017be4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10017be8:	00000206 	br	10017bf4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10017bec:	0001883a 	nop
10017bf0:	00000106 	br	10017bf8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10017bf4:	0001883a 	nop

  default:
    break;
  }

  return rc;
10017bf8:	e0bffb17 	ldw	r2,-20(fp)
}
10017bfc:	e037883a 	mov	sp,fp
10017c00:	df000017 	ldw	fp,0(sp)
10017c04:	dec00104 	addi	sp,sp,4
10017c08:	f800283a 	ret

10017c0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10017c0c:	defff304 	addi	sp,sp,-52
10017c10:	dfc00c15 	stw	ra,48(sp)
10017c14:	df000b15 	stw	fp,44(sp)
10017c18:	df000b04 	addi	fp,sp,44
10017c1c:	e13ffc15 	stw	r4,-16(fp)
10017c20:	e17ffd15 	stw	r5,-12(fp)
10017c24:	e1bffe15 	stw	r6,-8(fp)
10017c28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10017c2c:	e0bffd17 	ldw	r2,-12(fp)
10017c30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10017c34:	00004706 	br	10017d54 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10017c38:	e0bffc17 	ldw	r2,-16(fp)
10017c3c:	10800a17 	ldw	r2,40(r2)
10017c40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10017c44:	e0bffc17 	ldw	r2,-16(fp)
10017c48:	10800b17 	ldw	r2,44(r2)
10017c4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10017c50:	e0fff717 	ldw	r3,-36(fp)
10017c54:	e0bff817 	ldw	r2,-32(fp)
10017c58:	18800536 	bltu	r3,r2,10017c70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10017c5c:	e0fff717 	ldw	r3,-36(fp)
10017c60:	e0bff817 	ldw	r2,-32(fp)
10017c64:	1885c83a 	sub	r2,r3,r2
10017c68:	e0bff615 	stw	r2,-40(fp)
10017c6c:	00000406 	br	10017c80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10017c70:	00c20004 	movi	r3,2048
10017c74:	e0bff817 	ldw	r2,-32(fp)
10017c78:	1885c83a 	sub	r2,r3,r2
10017c7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10017c80:	e0bff617 	ldw	r2,-40(fp)
10017c84:	10001e26 	beq	r2,zero,10017d00 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10017c88:	e0fffe17 	ldw	r3,-8(fp)
10017c8c:	e0bff617 	ldw	r2,-40(fp)
10017c90:	1880022e 	bgeu	r3,r2,10017c9c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10017c94:	e0bffe17 	ldw	r2,-8(fp)
10017c98:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10017c9c:	e0bffc17 	ldw	r2,-16(fp)
10017ca0:	10c00e04 	addi	r3,r2,56
10017ca4:	e0bff817 	ldw	r2,-32(fp)
10017ca8:	1885883a 	add	r2,r3,r2
10017cac:	e1bff617 	ldw	r6,-40(fp)
10017cb0:	100b883a 	mov	r5,r2
10017cb4:	e13ff517 	ldw	r4,-44(fp)
10017cb8:	0011ca00 	call	10011ca0 <memcpy>
      ptr   += n;
10017cbc:	e0fff517 	ldw	r3,-44(fp)
10017cc0:	e0bff617 	ldw	r2,-40(fp)
10017cc4:	1885883a 	add	r2,r3,r2
10017cc8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10017ccc:	e0fffe17 	ldw	r3,-8(fp)
10017cd0:	e0bff617 	ldw	r2,-40(fp)
10017cd4:	1885c83a 	sub	r2,r3,r2
10017cd8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10017cdc:	e0fff817 	ldw	r3,-32(fp)
10017ce0:	e0bff617 	ldw	r2,-40(fp)
10017ce4:	1885883a 	add	r2,r3,r2
10017ce8:	10c1ffcc 	andi	r3,r2,2047
10017cec:	e0bffc17 	ldw	r2,-16(fp)
10017cf0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10017cf4:	e0bffe17 	ldw	r2,-8(fp)
10017cf8:	00bfcf16 	blt	zero,r2,10017c38 <__alt_data_end+0xf8017c38>
10017cfc:	00000106 	br	10017d04 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10017d00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10017d04:	e0fff517 	ldw	r3,-44(fp)
10017d08:	e0bffd17 	ldw	r2,-12(fp)
10017d0c:	1880141e 	bne	r3,r2,10017d60 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10017d10:	e0bfff17 	ldw	r2,-4(fp)
10017d14:	1090000c 	andi	r2,r2,16384
10017d18:	1000131e 	bne	r2,zero,10017d68 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10017d1c:	0001883a 	nop
10017d20:	e0bffc17 	ldw	r2,-16(fp)
10017d24:	10c00a17 	ldw	r3,40(r2)
10017d28:	e0bff717 	ldw	r2,-36(fp)
10017d2c:	1880051e 	bne	r3,r2,10017d44 <altera_avalon_jtag_uart_read+0x138>
10017d30:	e0bffc17 	ldw	r2,-16(fp)
10017d34:	10c00917 	ldw	r3,36(r2)
10017d38:	e0bffc17 	ldw	r2,-16(fp)
10017d3c:	10800117 	ldw	r2,4(r2)
10017d40:	18bff736 	bltu	r3,r2,10017d20 <__alt_data_end+0xf8017d20>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10017d44:	e0bffc17 	ldw	r2,-16(fp)
10017d48:	10c00a17 	ldw	r3,40(r2)
10017d4c:	e0bff717 	ldw	r2,-36(fp)
10017d50:	18800726 	beq	r3,r2,10017d70 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10017d54:	e0bffe17 	ldw	r2,-8(fp)
10017d58:	00bfb716 	blt	zero,r2,10017c38 <__alt_data_end+0xf8017c38>
10017d5c:	00000506 	br	10017d74 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10017d60:	0001883a 	nop
10017d64:	00000306 	br	10017d74 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10017d68:	0001883a 	nop
10017d6c:	00000106 	br	10017d74 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10017d70:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10017d74:	e0fff517 	ldw	r3,-44(fp)
10017d78:	e0bffd17 	ldw	r2,-12(fp)
10017d7c:	18801826 	beq	r3,r2,10017de0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017d80:	0005303a 	rdctl	r2,status
10017d84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017d88:	e0fffb17 	ldw	r3,-20(fp)
10017d8c:	00bfff84 	movi	r2,-2
10017d90:	1884703a 	and	r2,r3,r2
10017d94:	1001703a 	wrctl	status,r2
  
  return context;
10017d98:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10017d9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10017da0:	e0bffc17 	ldw	r2,-16(fp)
10017da4:	10800817 	ldw	r2,32(r2)
10017da8:	10c00054 	ori	r3,r2,1
10017dac:	e0bffc17 	ldw	r2,-16(fp)
10017db0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10017db4:	e0bffc17 	ldw	r2,-16(fp)
10017db8:	10800017 	ldw	r2,0(r2)
10017dbc:	10800104 	addi	r2,r2,4
10017dc0:	1007883a 	mov	r3,r2
10017dc4:	e0bffc17 	ldw	r2,-16(fp)
10017dc8:	10800817 	ldw	r2,32(r2)
10017dcc:	18800035 	stwio	r2,0(r3)
10017dd0:	e0bffa17 	ldw	r2,-24(fp)
10017dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017dd8:	e0bff917 	ldw	r2,-28(fp)
10017ddc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10017de0:	e0fff517 	ldw	r3,-44(fp)
10017de4:	e0bffd17 	ldw	r2,-12(fp)
10017de8:	18800426 	beq	r3,r2,10017dfc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10017dec:	e0fff517 	ldw	r3,-44(fp)
10017df0:	e0bffd17 	ldw	r2,-12(fp)
10017df4:	1885c83a 	sub	r2,r3,r2
10017df8:	00000606 	br	10017e14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10017dfc:	e0bfff17 	ldw	r2,-4(fp)
10017e00:	1090000c 	andi	r2,r2,16384
10017e04:	10000226 	beq	r2,zero,10017e10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10017e08:	00bffd44 	movi	r2,-11
10017e0c:	00000106 	br	10017e14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10017e10:	00bffec4 	movi	r2,-5
}
10017e14:	e037883a 	mov	sp,fp
10017e18:	dfc00117 	ldw	ra,4(sp)
10017e1c:	df000017 	ldw	fp,0(sp)
10017e20:	dec00204 	addi	sp,sp,8
10017e24:	f800283a 	ret

10017e28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10017e28:	defff304 	addi	sp,sp,-52
10017e2c:	dfc00c15 	stw	ra,48(sp)
10017e30:	df000b15 	stw	fp,44(sp)
10017e34:	df000b04 	addi	fp,sp,44
10017e38:	e13ffc15 	stw	r4,-16(fp)
10017e3c:	e17ffd15 	stw	r5,-12(fp)
10017e40:	e1bffe15 	stw	r6,-8(fp)
10017e44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10017e48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10017e4c:	e0bffd17 	ldw	r2,-12(fp)
10017e50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10017e54:	00003706 	br	10017f34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10017e58:	e0bffc17 	ldw	r2,-16(fp)
10017e5c:	10800c17 	ldw	r2,48(r2)
10017e60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10017e64:	e0bffc17 	ldw	r2,-16(fp)
10017e68:	10800d17 	ldw	r2,52(r2)
10017e6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10017e70:	e0fff917 	ldw	r3,-28(fp)
10017e74:	e0bff517 	ldw	r2,-44(fp)
10017e78:	1880062e 	bgeu	r3,r2,10017e94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10017e7c:	e0fff517 	ldw	r3,-44(fp)
10017e80:	e0bff917 	ldw	r2,-28(fp)
10017e84:	1885c83a 	sub	r2,r3,r2
10017e88:	10bfffc4 	addi	r2,r2,-1
10017e8c:	e0bff615 	stw	r2,-40(fp)
10017e90:	00000b06 	br	10017ec0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10017e94:	e0bff517 	ldw	r2,-44(fp)
10017e98:	10000526 	beq	r2,zero,10017eb0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10017e9c:	00c20004 	movi	r3,2048
10017ea0:	e0bff917 	ldw	r2,-28(fp)
10017ea4:	1885c83a 	sub	r2,r3,r2
10017ea8:	e0bff615 	stw	r2,-40(fp)
10017eac:	00000406 	br	10017ec0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10017eb0:	00c1ffc4 	movi	r3,2047
10017eb4:	e0bff917 	ldw	r2,-28(fp)
10017eb8:	1885c83a 	sub	r2,r3,r2
10017ebc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10017ec0:	e0bff617 	ldw	r2,-40(fp)
10017ec4:	10001e26 	beq	r2,zero,10017f40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10017ec8:	e0fffe17 	ldw	r3,-8(fp)
10017ecc:	e0bff617 	ldw	r2,-40(fp)
10017ed0:	1880022e 	bgeu	r3,r2,10017edc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10017ed4:	e0bffe17 	ldw	r2,-8(fp)
10017ed8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10017edc:	e0bffc17 	ldw	r2,-16(fp)
10017ee0:	10c20e04 	addi	r3,r2,2104
10017ee4:	e0bff917 	ldw	r2,-28(fp)
10017ee8:	1885883a 	add	r2,r3,r2
10017eec:	e1bff617 	ldw	r6,-40(fp)
10017ef0:	e17ffd17 	ldw	r5,-12(fp)
10017ef4:	1009883a 	mov	r4,r2
10017ef8:	0011ca00 	call	10011ca0 <memcpy>
      ptr   += n;
10017efc:	e0fffd17 	ldw	r3,-12(fp)
10017f00:	e0bff617 	ldw	r2,-40(fp)
10017f04:	1885883a 	add	r2,r3,r2
10017f08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10017f0c:	e0fffe17 	ldw	r3,-8(fp)
10017f10:	e0bff617 	ldw	r2,-40(fp)
10017f14:	1885c83a 	sub	r2,r3,r2
10017f18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10017f1c:	e0fff917 	ldw	r3,-28(fp)
10017f20:	e0bff617 	ldw	r2,-40(fp)
10017f24:	1885883a 	add	r2,r3,r2
10017f28:	10c1ffcc 	andi	r3,r2,2047
10017f2c:	e0bffc17 	ldw	r2,-16(fp)
10017f30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10017f34:	e0bffe17 	ldw	r2,-8(fp)
10017f38:	00bfc716 	blt	zero,r2,10017e58 <__alt_data_end+0xf8017e58>
10017f3c:	00000106 	br	10017f44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10017f40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017f44:	0005303a 	rdctl	r2,status
10017f48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017f4c:	e0fffb17 	ldw	r3,-20(fp)
10017f50:	00bfff84 	movi	r2,-2
10017f54:	1884703a 	and	r2,r3,r2
10017f58:	1001703a 	wrctl	status,r2
  
  return context;
10017f5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10017f60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10017f64:	e0bffc17 	ldw	r2,-16(fp)
10017f68:	10800817 	ldw	r2,32(r2)
10017f6c:	10c00094 	ori	r3,r2,2
10017f70:	e0bffc17 	ldw	r2,-16(fp)
10017f74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10017f78:	e0bffc17 	ldw	r2,-16(fp)
10017f7c:	10800017 	ldw	r2,0(r2)
10017f80:	10800104 	addi	r2,r2,4
10017f84:	1007883a 	mov	r3,r2
10017f88:	e0bffc17 	ldw	r2,-16(fp)
10017f8c:	10800817 	ldw	r2,32(r2)
10017f90:	18800035 	stwio	r2,0(r3)
10017f94:	e0bffa17 	ldw	r2,-24(fp)
10017f98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017f9c:	e0bff817 	ldw	r2,-32(fp)
10017fa0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10017fa4:	e0bffe17 	ldw	r2,-8(fp)
10017fa8:	0080100e 	bge	zero,r2,10017fec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10017fac:	e0bfff17 	ldw	r2,-4(fp)
10017fb0:	1090000c 	andi	r2,r2,16384
10017fb4:	1000101e 	bne	r2,zero,10017ff8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10017fb8:	0001883a 	nop
10017fbc:	e0bffc17 	ldw	r2,-16(fp)
10017fc0:	10c00d17 	ldw	r3,52(r2)
10017fc4:	e0bff517 	ldw	r2,-44(fp)
10017fc8:	1880051e 	bne	r3,r2,10017fe0 <altera_avalon_jtag_uart_write+0x1b8>
10017fcc:	e0bffc17 	ldw	r2,-16(fp)
10017fd0:	10c00917 	ldw	r3,36(r2)
10017fd4:	e0bffc17 	ldw	r2,-16(fp)
10017fd8:	10800117 	ldw	r2,4(r2)
10017fdc:	18bff736 	bltu	r3,r2,10017fbc <__alt_data_end+0xf8017fbc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10017fe0:	e0bffc17 	ldw	r2,-16(fp)
10017fe4:	10800917 	ldw	r2,36(r2)
10017fe8:	1000051e 	bne	r2,zero,10018000 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10017fec:	e0bffe17 	ldw	r2,-8(fp)
10017ff0:	00bfd016 	blt	zero,r2,10017f34 <__alt_data_end+0xf8017f34>
10017ff4:	00000306 	br	10018004 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10017ff8:	0001883a 	nop
10017ffc:	00000106 	br	10018004 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10018000:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10018004:	e0fffd17 	ldw	r3,-12(fp)
10018008:	e0bff717 	ldw	r2,-36(fp)
1001800c:	18800426 	beq	r3,r2,10018020 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10018010:	e0fffd17 	ldw	r3,-12(fp)
10018014:	e0bff717 	ldw	r2,-36(fp)
10018018:	1885c83a 	sub	r2,r3,r2
1001801c:	00000606 	br	10018038 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10018020:	e0bfff17 	ldw	r2,-4(fp)
10018024:	1090000c 	andi	r2,r2,16384
10018028:	10000226 	beq	r2,zero,10018034 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1001802c:	00bffd44 	movi	r2,-11
10018030:	00000106 	br	10018038 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10018034:	00bffec4 	movi	r2,-5
}
10018038:	e037883a 	mov	sp,fp
1001803c:	dfc00117 	ldw	ra,4(sp)
10018040:	df000017 	ldw	fp,0(sp)
10018044:	dec00204 	addi	sp,sp,8
10018048:	f800283a 	ret

1001804c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1001804c:	defffa04 	addi	sp,sp,-24
10018050:	dfc00515 	stw	ra,20(sp)
10018054:	df000415 	stw	fp,16(sp)
10018058:	df000404 	addi	fp,sp,16
1001805c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10018060:	0007883a 	mov	r3,zero
10018064:	e0bfff17 	ldw	r2,-4(fp)
10018068:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1001806c:	e0bfff17 	ldw	r2,-4(fp)
10018070:	10800104 	addi	r2,r2,4
10018074:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018078:	0005303a 	rdctl	r2,status
1001807c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10018080:	e0fffd17 	ldw	r3,-12(fp)
10018084:	00bfff84 	movi	r2,-2
10018088:	1884703a 	and	r2,r3,r2
1001808c:	1001703a 	wrctl	status,r2
  
  return context;
10018090:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10018094:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
10018098:	00171f00 	call	100171f0 <alt_tick>
1001809c:	e0bffc17 	ldw	r2,-16(fp)
100180a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100180a4:	e0bffe17 	ldw	r2,-8(fp)
100180a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
100180ac:	0001883a 	nop
100180b0:	e037883a 	mov	sp,fp
100180b4:	dfc00117 	ldw	ra,4(sp)
100180b8:	df000017 	ldw	fp,0(sp)
100180bc:	dec00204 	addi	sp,sp,8
100180c0:	f800283a 	ret

100180c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
100180c4:	defff804 	addi	sp,sp,-32
100180c8:	dfc00715 	stw	ra,28(sp)
100180cc:	df000615 	stw	fp,24(sp)
100180d0:	df000604 	addi	fp,sp,24
100180d4:	e13ffc15 	stw	r4,-16(fp)
100180d8:	e17ffd15 	stw	r5,-12(fp)
100180dc:	e1bffe15 	stw	r6,-8(fp)
100180e0:	e1ffff15 	stw	r7,-4(fp)
100180e4:	e0bfff17 	ldw	r2,-4(fp)
100180e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
100180ec:	d0a7a917 	ldw	r2,-24924(gp)
100180f0:	1000021e 	bne	r2,zero,100180fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
100180f4:	e0bffb17 	ldw	r2,-20(fp)
100180f8:	d0a7a915 	stw	r2,-24924(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
100180fc:	e0bffc17 	ldw	r2,-16(fp)
10018100:	10800104 	addi	r2,r2,4
10018104:	00c001c4 	movi	r3,7
10018108:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
1001810c:	d8000015 	stw	zero,0(sp)
10018110:	e1fffc17 	ldw	r7,-16(fp)
10018114:	018400b4 	movhi	r6,4098
10018118:	31a01304 	addi	r6,r6,-32692
1001811c:	e17ffe17 	ldw	r5,-8(fp)
10018120:	e13ffd17 	ldw	r4,-12(fp)
10018124:	00185a40 	call	100185a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10018128:	0001883a 	nop
1001812c:	e037883a 	mov	sp,fp
10018130:	dfc00117 	ldw	ra,4(sp)
10018134:	df000017 	ldw	fp,0(sp)
10018138:	dec00204 	addi	sp,sp,8
1001813c:	f800283a 	ret

10018140 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10018140:	defff504 	addi	sp,sp,-44
10018144:	df000a15 	stw	fp,40(sp)
10018148:	df000a04 	addi	fp,sp,40
1001814c:	e13ffc15 	stw	r4,-16(fp)
10018150:	e17ffd15 	stw	r5,-12(fp)
10018154:	e1bffe15 	stw	r6,-8(fp)
10018158:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001815c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10018160:	d0a7a917 	ldw	r2,-24924(gp)
  
  if (alt_ticks_per_second ())
10018164:	10003c26 	beq	r2,zero,10018258 <alt_alarm_start+0x118>
  {
    if (alarm)
10018168:	e0bffc17 	ldw	r2,-16(fp)
1001816c:	10003826 	beq	r2,zero,10018250 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10018170:	e0bffc17 	ldw	r2,-16(fp)
10018174:	e0fffe17 	ldw	r3,-8(fp)
10018178:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001817c:	e0bffc17 	ldw	r2,-16(fp)
10018180:	e0ffff17 	ldw	r3,-4(fp)
10018184:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018188:	0005303a 	rdctl	r2,status
1001818c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10018190:	e0fff917 	ldw	r3,-28(fp)
10018194:	00bfff84 	movi	r2,-2
10018198:	1884703a 	and	r2,r3,r2
1001819c:	1001703a 	wrctl	status,r2
  
  return context;
100181a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100181a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100181a8:	d0a7aa17 	ldw	r2,-24920(gp)
      
      current_nticks = alt_nticks();
100181ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100181b0:	e0fffd17 	ldw	r3,-12(fp)
100181b4:	e0bff617 	ldw	r2,-40(fp)
100181b8:	1885883a 	add	r2,r3,r2
100181bc:	10c00044 	addi	r3,r2,1
100181c0:	e0bffc17 	ldw	r2,-16(fp)
100181c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100181c8:	e0bffc17 	ldw	r2,-16(fp)
100181cc:	10c00217 	ldw	r3,8(r2)
100181d0:	e0bff617 	ldw	r2,-40(fp)
100181d4:	1880042e 	bgeu	r3,r2,100181e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100181d8:	e0bffc17 	ldw	r2,-16(fp)
100181dc:	00c00044 	movi	r3,1
100181e0:	10c00405 	stb	r3,16(r2)
100181e4:	00000206 	br	100181f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100181e8:	e0bffc17 	ldw	r2,-16(fp)
100181ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100181f0:	e0bffc17 	ldw	r2,-16(fp)
100181f4:	d0e01304 	addi	r3,gp,-32692
100181f8:	e0fffa15 	stw	r3,-24(fp)
100181fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10018200:	e0bffb17 	ldw	r2,-20(fp)
10018204:	e0fffa17 	ldw	r3,-24(fp)
10018208:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001820c:	e0bffa17 	ldw	r2,-24(fp)
10018210:	10c00017 	ldw	r3,0(r2)
10018214:	e0bffb17 	ldw	r2,-20(fp)
10018218:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001821c:	e0bffa17 	ldw	r2,-24(fp)
10018220:	10800017 	ldw	r2,0(r2)
10018224:	e0fffb17 	ldw	r3,-20(fp)
10018228:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001822c:	e0bffa17 	ldw	r2,-24(fp)
10018230:	e0fffb17 	ldw	r3,-20(fp)
10018234:	10c00015 	stw	r3,0(r2)
10018238:	e0bff817 	ldw	r2,-32(fp)
1001823c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10018240:	e0bff717 	ldw	r2,-36(fp)
10018244:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10018248:	0005883a 	mov	r2,zero
1001824c:	00000306 	br	1001825c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10018250:	00bffa84 	movi	r2,-22
10018254:	00000106 	br	1001825c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10018258:	00bfde84 	movi	r2,-134
  }
}
1001825c:	e037883a 	mov	sp,fp
10018260:	df000017 	ldw	fp,0(sp)
10018264:	dec00104 	addi	sp,sp,4
10018268:	f800283a 	ret

1001826c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1001826c:	defffa04 	addi	sp,sp,-24
10018270:	dfc00515 	stw	ra,20(sp)
10018274:	df000415 	stw	fp,16(sp)
10018278:	df000404 	addi	fp,sp,16
1001827c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10018280:	00800244 	movi	r2,9
10018284:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10018288:	014003f4 	movhi	r5,15
1001828c:	29509004 	addi	r5,r5,16960
10018290:	e13ffd17 	ldw	r4,-12(fp)
10018294:	00085800 	call	10008580 <__mulsi3>
10018298:	100b883a 	mov	r5,r2
1001829c:	0100bef4 	movhi	r4,763
100182a0:	213c2004 	addi	r4,r4,-3968
100182a4:	00084c40 	call	100084c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100182a8:	100b883a 	mov	r5,r2
100182ac:	01200034 	movhi	r4,32768
100182b0:	213fffc4 	addi	r4,r4,-1
100182b4:	00084c40 	call	100084c4 <__udivsi3>
100182b8:	100b883a 	mov	r5,r2
100182bc:	e13fff17 	ldw	r4,-4(fp)
100182c0:	00084c40 	call	100084c4 <__udivsi3>
100182c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100182c8:	e0bffe17 	ldw	r2,-8(fp)
100182cc:	10002a26 	beq	r2,zero,10018378 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100182d0:	e03ffc15 	stw	zero,-16(fp)
100182d4:	00001706 	br	10018334 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100182d8:	00a00034 	movhi	r2,32768
100182dc:	10bfffc4 	addi	r2,r2,-1
100182e0:	10bfffc4 	addi	r2,r2,-1
100182e4:	103ffe1e 	bne	r2,zero,100182e0 <__alt_data_end+0xf80182e0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100182e8:	014003f4 	movhi	r5,15
100182ec:	29509004 	addi	r5,r5,16960
100182f0:	e13ffd17 	ldw	r4,-12(fp)
100182f4:	00085800 	call	10008580 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100182f8:	100b883a 	mov	r5,r2
100182fc:	0100bef4 	movhi	r4,763
10018300:	213c2004 	addi	r4,r4,-3968
10018304:	00084c40 	call	100084c4 <__udivsi3>
10018308:	100b883a 	mov	r5,r2
1001830c:	01200034 	movhi	r4,32768
10018310:	213fffc4 	addi	r4,r4,-1
10018314:	00084c40 	call	100084c4 <__udivsi3>
10018318:	1007883a 	mov	r3,r2
1001831c:	e0bfff17 	ldw	r2,-4(fp)
10018320:	10c5c83a 	sub	r2,r2,r3
10018324:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10018328:	e0bffc17 	ldw	r2,-16(fp)
1001832c:	10800044 	addi	r2,r2,1
10018330:	e0bffc15 	stw	r2,-16(fp)
10018334:	e0fffc17 	ldw	r3,-16(fp)
10018338:	e0bffe17 	ldw	r2,-8(fp)
1001833c:	18bfe616 	blt	r3,r2,100182d8 <__alt_data_end+0xf80182d8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10018340:	014003f4 	movhi	r5,15
10018344:	29509004 	addi	r5,r5,16960
10018348:	e13ffd17 	ldw	r4,-12(fp)
1001834c:	00085800 	call	10008580 <__mulsi3>
10018350:	100b883a 	mov	r5,r2
10018354:	0100bef4 	movhi	r4,763
10018358:	213c2004 	addi	r4,r4,-3968
1001835c:	00084c40 	call	100084c4 <__udivsi3>
10018360:	e17fff17 	ldw	r5,-4(fp)
10018364:	1009883a 	mov	r4,r2
10018368:	00085800 	call	10008580 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1001836c:	10bfffc4 	addi	r2,r2,-1
10018370:	103ffe1e 	bne	r2,zero,1001836c <__alt_data_end+0xf801836c>
10018374:	00000d06 	br	100183ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10018378:	014003f4 	movhi	r5,15
1001837c:	29509004 	addi	r5,r5,16960
10018380:	e13ffd17 	ldw	r4,-12(fp)
10018384:	00085800 	call	10008580 <__mulsi3>
10018388:	100b883a 	mov	r5,r2
1001838c:	0100bef4 	movhi	r4,763
10018390:	213c2004 	addi	r4,r4,-3968
10018394:	00084c40 	call	100084c4 <__udivsi3>
10018398:	e17fff17 	ldw	r5,-4(fp)
1001839c:	1009883a 	mov	r4,r2
100183a0:	00085800 	call	10008580 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100183a4:	10bfffc4 	addi	r2,r2,-1
100183a8:	00bffe16 	blt	zero,r2,100183a4 <__alt_data_end+0xf80183a4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100183ac:	0005883a 	mov	r2,zero
}
100183b0:	e037883a 	mov	sp,fp
100183b4:	dfc00117 	ldw	ra,4(sp)
100183b8:	df000017 	ldw	fp,0(sp)
100183bc:	dec00204 	addi	sp,sp,8
100183c0:	f800283a 	ret

100183c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100183c4:	deffff04 	addi	sp,sp,-4
100183c8:	df000015 	stw	fp,0(sp)
100183cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100183d0:	0001883a 	nop
100183d4:	e037883a 	mov	sp,fp
100183d8:	df000017 	ldw	fp,0(sp)
100183dc:	dec00104 	addi	sp,sp,4
100183e0:	f800283a 	ret

100183e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100183e4:	defffe04 	addi	sp,sp,-8
100183e8:	dfc00115 	stw	ra,4(sp)
100183ec:	df000015 	stw	fp,0(sp)
100183f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100183f4:	d0a01117 	ldw	r2,-32700(gp)
100183f8:	10000326 	beq	r2,zero,10018408 <alt_get_errno+0x24>
100183fc:	d0a01117 	ldw	r2,-32700(gp)
10018400:	103ee83a 	callr	r2
10018404:	00000106 	br	1001840c <alt_get_errno+0x28>
10018408:	d0a79b04 	addi	r2,gp,-24980
}
1001840c:	e037883a 	mov	sp,fp
10018410:	dfc00117 	ldw	ra,4(sp)
10018414:	df000017 	ldw	fp,0(sp)
10018418:	dec00204 	addi	sp,sp,8
1001841c:	f800283a 	ret

10018420 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10018420:	defffa04 	addi	sp,sp,-24
10018424:	dfc00515 	stw	ra,20(sp)
10018428:	df000415 	stw	fp,16(sp)
1001842c:	df000404 	addi	fp,sp,16
10018430:	e13ffe15 	stw	r4,-8(fp)
10018434:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10018438:	e0bffe17 	ldw	r2,-8(fp)
1001843c:	10000326 	beq	r2,zero,1001844c <alt_dev_llist_insert+0x2c>
10018440:	e0bffe17 	ldw	r2,-8(fp)
10018444:	10800217 	ldw	r2,8(r2)
10018448:	1000061e 	bne	r2,zero,10018464 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1001844c:	00183e40 	call	100183e4 <alt_get_errno>
10018450:	1007883a 	mov	r3,r2
10018454:	00800584 	movi	r2,22
10018458:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1001845c:	00bffa84 	movi	r2,-22
10018460:	00001306 	br	100184b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10018464:	e0bffe17 	ldw	r2,-8(fp)
10018468:	e0ffff17 	ldw	r3,-4(fp)
1001846c:	e0fffc15 	stw	r3,-16(fp)
10018470:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10018474:	e0bffd17 	ldw	r2,-12(fp)
10018478:	e0fffc17 	ldw	r3,-16(fp)
1001847c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10018480:	e0bffc17 	ldw	r2,-16(fp)
10018484:	10c00017 	ldw	r3,0(r2)
10018488:	e0bffd17 	ldw	r2,-12(fp)
1001848c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10018490:	e0bffc17 	ldw	r2,-16(fp)
10018494:	10800017 	ldw	r2,0(r2)
10018498:	e0fffd17 	ldw	r3,-12(fp)
1001849c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100184a0:	e0bffc17 	ldw	r2,-16(fp)
100184a4:	e0fffd17 	ldw	r3,-12(fp)
100184a8:	10c00015 	stw	r3,0(r2)

  return 0;  
100184ac:	0005883a 	mov	r2,zero
}
100184b0:	e037883a 	mov	sp,fp
100184b4:	dfc00117 	ldw	ra,4(sp)
100184b8:	df000017 	ldw	fp,0(sp)
100184bc:	dec00204 	addi	sp,sp,8
100184c0:	f800283a 	ret

100184c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100184c4:	defffd04 	addi	sp,sp,-12
100184c8:	dfc00215 	stw	ra,8(sp)
100184cc:	df000115 	stw	fp,4(sp)
100184d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100184d4:	008400b4 	movhi	r2,4098
100184d8:	10a4b504 	addi	r2,r2,-27948
100184dc:	e0bfff15 	stw	r2,-4(fp)
100184e0:	00000606 	br	100184fc <_do_ctors+0x38>
        (*ctor) (); 
100184e4:	e0bfff17 	ldw	r2,-4(fp)
100184e8:	10800017 	ldw	r2,0(r2)
100184ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100184f0:	e0bfff17 	ldw	r2,-4(fp)
100184f4:	10bfff04 	addi	r2,r2,-4
100184f8:	e0bfff15 	stw	r2,-4(fp)
100184fc:	e0ffff17 	ldw	r3,-4(fp)
10018500:	008400b4 	movhi	r2,4098
10018504:	10a4b604 	addi	r2,r2,-27944
10018508:	18bff62e 	bgeu	r3,r2,100184e4 <__alt_data_end+0xf80184e4>
        (*ctor) (); 
}
1001850c:	0001883a 	nop
10018510:	e037883a 	mov	sp,fp
10018514:	dfc00117 	ldw	ra,4(sp)
10018518:	df000017 	ldw	fp,0(sp)
1001851c:	dec00204 	addi	sp,sp,8
10018520:	f800283a 	ret

10018524 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10018524:	defffd04 	addi	sp,sp,-12
10018528:	dfc00215 	stw	ra,8(sp)
1001852c:	df000115 	stw	fp,4(sp)
10018530:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10018534:	008400b4 	movhi	r2,4098
10018538:	10a4b504 	addi	r2,r2,-27948
1001853c:	e0bfff15 	stw	r2,-4(fp)
10018540:	00000606 	br	1001855c <_do_dtors+0x38>
        (*dtor) (); 
10018544:	e0bfff17 	ldw	r2,-4(fp)
10018548:	10800017 	ldw	r2,0(r2)
1001854c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10018550:	e0bfff17 	ldw	r2,-4(fp)
10018554:	10bfff04 	addi	r2,r2,-4
10018558:	e0bfff15 	stw	r2,-4(fp)
1001855c:	e0ffff17 	ldw	r3,-4(fp)
10018560:	008400b4 	movhi	r2,4098
10018564:	10a4b604 	addi	r2,r2,-27944
10018568:	18bff62e 	bgeu	r3,r2,10018544 <__alt_data_end+0xf8018544>
        (*dtor) (); 
}
1001856c:	0001883a 	nop
10018570:	e037883a 	mov	sp,fp
10018574:	dfc00117 	ldw	ra,4(sp)
10018578:	df000017 	ldw	fp,0(sp)
1001857c:	dec00204 	addi	sp,sp,8
10018580:	f800283a 	ret

10018584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10018584:	deffff04 	addi	sp,sp,-4
10018588:	df000015 	stw	fp,0(sp)
1001858c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10018590:	0001883a 	nop
10018594:	e037883a 	mov	sp,fp
10018598:	df000017 	ldw	fp,0(sp)
1001859c:	dec00104 	addi	sp,sp,4
100185a0:	f800283a 	ret

100185a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100185a4:	defff904 	addi	sp,sp,-28
100185a8:	dfc00615 	stw	ra,24(sp)
100185ac:	df000515 	stw	fp,20(sp)
100185b0:	df000504 	addi	fp,sp,20
100185b4:	e13ffc15 	stw	r4,-16(fp)
100185b8:	e17ffd15 	stw	r5,-12(fp)
100185bc:	e1bffe15 	stw	r6,-8(fp)
100185c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100185c4:	e0800217 	ldw	r2,8(fp)
100185c8:	d8800015 	stw	r2,0(sp)
100185cc:	e1ffff17 	ldw	r7,-4(fp)
100185d0:	e1bffe17 	ldw	r6,-8(fp)
100185d4:	e17ffd17 	ldw	r5,-12(fp)
100185d8:	e13ffc17 	ldw	r4,-16(fp)
100185dc:	00187540 	call	10018754 <alt_iic_isr_register>
}  
100185e0:	e037883a 	mov	sp,fp
100185e4:	dfc00117 	ldw	ra,4(sp)
100185e8:	df000017 	ldw	fp,0(sp)
100185ec:	dec00204 	addi	sp,sp,8
100185f0:	f800283a 	ret

100185f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100185f4:	defff904 	addi	sp,sp,-28
100185f8:	df000615 	stw	fp,24(sp)
100185fc:	df000604 	addi	fp,sp,24
10018600:	e13ffe15 	stw	r4,-8(fp)
10018604:	e17fff15 	stw	r5,-4(fp)
10018608:	e0bfff17 	ldw	r2,-4(fp)
1001860c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018610:	0005303a 	rdctl	r2,status
10018614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10018618:	e0fffb17 	ldw	r3,-20(fp)
1001861c:	00bfff84 	movi	r2,-2
10018620:	1884703a 	and	r2,r3,r2
10018624:	1001703a 	wrctl	status,r2
  
  return context;
10018628:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001862c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10018630:	00c00044 	movi	r3,1
10018634:	e0bffa17 	ldw	r2,-24(fp)
10018638:	1884983a 	sll	r2,r3,r2
1001863c:	1007883a 	mov	r3,r2
10018640:	d0a7ab17 	ldw	r2,-24916(gp)
10018644:	1884b03a 	or	r2,r3,r2
10018648:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001864c:	d0a7ab17 	ldw	r2,-24916(gp)
10018650:	100170fa 	wrctl	ienable,r2
10018654:	e0bffc17 	ldw	r2,-16(fp)
10018658:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001865c:	e0bffd17 	ldw	r2,-12(fp)
10018660:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10018664:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10018668:	0001883a 	nop
}
1001866c:	e037883a 	mov	sp,fp
10018670:	df000017 	ldw	fp,0(sp)
10018674:	dec00104 	addi	sp,sp,4
10018678:	f800283a 	ret

1001867c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001867c:	defff904 	addi	sp,sp,-28
10018680:	df000615 	stw	fp,24(sp)
10018684:	df000604 	addi	fp,sp,24
10018688:	e13ffe15 	stw	r4,-8(fp)
1001868c:	e17fff15 	stw	r5,-4(fp)
10018690:	e0bfff17 	ldw	r2,-4(fp)
10018694:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018698:	0005303a 	rdctl	r2,status
1001869c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100186a0:	e0fffb17 	ldw	r3,-20(fp)
100186a4:	00bfff84 	movi	r2,-2
100186a8:	1884703a 	and	r2,r3,r2
100186ac:	1001703a 	wrctl	status,r2
  
  return context;
100186b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100186b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100186b8:	00c00044 	movi	r3,1
100186bc:	e0bffa17 	ldw	r2,-24(fp)
100186c0:	1884983a 	sll	r2,r3,r2
100186c4:	0084303a 	nor	r2,zero,r2
100186c8:	1007883a 	mov	r3,r2
100186cc:	d0a7ab17 	ldw	r2,-24916(gp)
100186d0:	1884703a 	and	r2,r3,r2
100186d4:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100186d8:	d0a7ab17 	ldw	r2,-24916(gp)
100186dc:	100170fa 	wrctl	ienable,r2
100186e0:	e0bffc17 	ldw	r2,-16(fp)
100186e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100186e8:	e0bffd17 	ldw	r2,-12(fp)
100186ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100186f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100186f4:	0001883a 	nop
}
100186f8:	e037883a 	mov	sp,fp
100186fc:	df000017 	ldw	fp,0(sp)
10018700:	dec00104 	addi	sp,sp,4
10018704:	f800283a 	ret

10018708 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10018708:	defffc04 	addi	sp,sp,-16
1001870c:	df000315 	stw	fp,12(sp)
10018710:	df000304 	addi	fp,sp,12
10018714:	e13ffe15 	stw	r4,-8(fp)
10018718:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1001871c:	000530fa 	rdctl	r2,ienable
10018720:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10018724:	00c00044 	movi	r3,1
10018728:	e0bfff17 	ldw	r2,-4(fp)
1001872c:	1884983a 	sll	r2,r3,r2
10018730:	1007883a 	mov	r3,r2
10018734:	e0bffd17 	ldw	r2,-12(fp)
10018738:	1884703a 	and	r2,r3,r2
1001873c:	1004c03a 	cmpne	r2,r2,zero
10018740:	10803fcc 	andi	r2,r2,255
}
10018744:	e037883a 	mov	sp,fp
10018748:	df000017 	ldw	fp,0(sp)
1001874c:	dec00104 	addi	sp,sp,4
10018750:	f800283a 	ret

10018754 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10018754:	defff504 	addi	sp,sp,-44
10018758:	dfc00a15 	stw	ra,40(sp)
1001875c:	df000915 	stw	fp,36(sp)
10018760:	df000904 	addi	fp,sp,36
10018764:	e13ffc15 	stw	r4,-16(fp)
10018768:	e17ffd15 	stw	r5,-12(fp)
1001876c:	e1bffe15 	stw	r6,-8(fp)
10018770:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10018774:	00bffa84 	movi	r2,-22
10018778:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1001877c:	e0bffd17 	ldw	r2,-12(fp)
10018780:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10018784:	e0bff817 	ldw	r2,-32(fp)
10018788:	10800808 	cmpgei	r2,r2,32
1001878c:	1000271e 	bne	r2,zero,1001882c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018790:	0005303a 	rdctl	r2,status
10018794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10018798:	e0fffb17 	ldw	r3,-20(fp)
1001879c:	00bfff84 	movi	r2,-2
100187a0:	1884703a 	and	r2,r3,r2
100187a4:	1001703a 	wrctl	status,r2
  
  return context;
100187a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100187ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100187b0:	008400b4 	movhi	r2,4098
100187b4:	10b6f504 	addi	r2,r2,-9260
100187b8:	e0fff817 	ldw	r3,-32(fp)
100187bc:	180690fa 	slli	r3,r3,3
100187c0:	10c5883a 	add	r2,r2,r3
100187c4:	e0fffe17 	ldw	r3,-8(fp)
100187c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100187cc:	008400b4 	movhi	r2,4098
100187d0:	10b6f504 	addi	r2,r2,-9260
100187d4:	e0fff817 	ldw	r3,-32(fp)
100187d8:	180690fa 	slli	r3,r3,3
100187dc:	10c5883a 	add	r2,r2,r3
100187e0:	10800104 	addi	r2,r2,4
100187e4:	e0ffff17 	ldw	r3,-4(fp)
100187e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100187ec:	e0bffe17 	ldw	r2,-8(fp)
100187f0:	10000526 	beq	r2,zero,10018808 <alt_iic_isr_register+0xb4>
100187f4:	e0bff817 	ldw	r2,-32(fp)
100187f8:	100b883a 	mov	r5,r2
100187fc:	e13ffc17 	ldw	r4,-16(fp)
10018800:	00185f40 	call	100185f4 <alt_ic_irq_enable>
10018804:	00000406 	br	10018818 <alt_iic_isr_register+0xc4>
10018808:	e0bff817 	ldw	r2,-32(fp)
1001880c:	100b883a 	mov	r5,r2
10018810:	e13ffc17 	ldw	r4,-16(fp)
10018814:	001867c0 	call	1001867c <alt_ic_irq_disable>
10018818:	e0bff715 	stw	r2,-36(fp)
1001881c:	e0bffa17 	ldw	r2,-24(fp)
10018820:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10018824:	e0bff917 	ldw	r2,-28(fp)
10018828:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1001882c:	e0bff717 	ldw	r2,-36(fp)
}
10018830:	e037883a 	mov	sp,fp
10018834:	dfc00117 	ldw	ra,4(sp)
10018838:	df000017 	ldw	fp,0(sp)
1001883c:	dec00204 	addi	sp,sp,8
10018840:	f800283a 	ret

10018844 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10018844:	defff804 	addi	sp,sp,-32
10018848:	dfc00715 	stw	ra,28(sp)
1001884c:	df000615 	stw	fp,24(sp)
10018850:	dc000515 	stw	r16,20(sp)
10018854:	df000604 	addi	fp,sp,24
10018858:	e13ffb15 	stw	r4,-20(fp)
1001885c:	e17ffc15 	stw	r5,-16(fp)
10018860:	e1bffd15 	stw	r6,-12(fp)
10018864:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10018868:	e1bffe17 	ldw	r6,-8(fp)
1001886c:	e17ffd17 	ldw	r5,-12(fp)
10018870:	e13ffc17 	ldw	r4,-16(fp)
10018874:	0018acc0 	call	10018acc <open>
10018878:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1001887c:	e0bffa17 	ldw	r2,-24(fp)
10018880:	10002216 	blt	r2,zero,1001890c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10018884:	040400b4 	movhi	r16,4098
10018888:	842ac604 	addi	r16,r16,-21736
1001888c:	e0bffa17 	ldw	r2,-24(fp)
10018890:	01400304 	movi	r5,12
10018894:	1009883a 	mov	r4,r2
10018898:	00085800 	call	10008580 <__mulsi3>
1001889c:	8085883a 	add	r2,r16,r2
100188a0:	10c00017 	ldw	r3,0(r2)
100188a4:	e0bffb17 	ldw	r2,-20(fp)
100188a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100188ac:	040400b4 	movhi	r16,4098
100188b0:	842ac604 	addi	r16,r16,-21736
100188b4:	e0bffa17 	ldw	r2,-24(fp)
100188b8:	01400304 	movi	r5,12
100188bc:	1009883a 	mov	r4,r2
100188c0:	00085800 	call	10008580 <__mulsi3>
100188c4:	8085883a 	add	r2,r16,r2
100188c8:	10800104 	addi	r2,r2,4
100188cc:	10c00017 	ldw	r3,0(r2)
100188d0:	e0bffb17 	ldw	r2,-20(fp)
100188d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100188d8:	040400b4 	movhi	r16,4098
100188dc:	842ac604 	addi	r16,r16,-21736
100188e0:	e0bffa17 	ldw	r2,-24(fp)
100188e4:	01400304 	movi	r5,12
100188e8:	1009883a 	mov	r4,r2
100188ec:	00085800 	call	10008580 <__mulsi3>
100188f0:	8085883a 	add	r2,r16,r2
100188f4:	10800204 	addi	r2,r2,8
100188f8:	10c00017 	ldw	r3,0(r2)
100188fc:	e0bffb17 	ldw	r2,-20(fp)
10018900:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10018904:	e13ffa17 	ldw	r4,-24(fp)
10018908:	00170200 	call	10017020 <alt_release_fd>
  }
} 
1001890c:	0001883a 	nop
10018910:	e6ffff04 	addi	sp,fp,-4
10018914:	dfc00217 	ldw	ra,8(sp)
10018918:	df000117 	ldw	fp,4(sp)
1001891c:	dc000017 	ldw	r16,0(sp)
10018920:	dec00304 	addi	sp,sp,12
10018924:	f800283a 	ret

10018928 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10018928:	defffb04 	addi	sp,sp,-20
1001892c:	dfc00415 	stw	ra,16(sp)
10018930:	df000315 	stw	fp,12(sp)
10018934:	df000304 	addi	fp,sp,12
10018938:	e13ffd15 	stw	r4,-12(fp)
1001893c:	e17ffe15 	stw	r5,-8(fp)
10018940:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10018944:	01c07fc4 	movi	r7,511
10018948:	01800044 	movi	r6,1
1001894c:	e17ffd17 	ldw	r5,-12(fp)
10018950:	010400b4 	movhi	r4,4098
10018954:	212ac904 	addi	r4,r4,-21724
10018958:	00188440 	call	10018844 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1001895c:	01c07fc4 	movi	r7,511
10018960:	000d883a 	mov	r6,zero
10018964:	e17ffe17 	ldw	r5,-8(fp)
10018968:	010400b4 	movhi	r4,4098
1001896c:	212ac604 	addi	r4,r4,-21736
10018970:	00188440 	call	10018844 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10018974:	01c07fc4 	movi	r7,511
10018978:	01800044 	movi	r6,1
1001897c:	e17fff17 	ldw	r5,-4(fp)
10018980:	010400b4 	movhi	r4,4098
10018984:	212acc04 	addi	r4,r4,-21712
10018988:	00188440 	call	10018844 <alt_open_fd>
}  
1001898c:	0001883a 	nop
10018990:	e037883a 	mov	sp,fp
10018994:	dfc00117 	ldw	ra,4(sp)
10018998:	df000017 	ldw	fp,0(sp)
1001899c:	dec00204 	addi	sp,sp,8
100189a0:	f800283a 	ret

100189a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100189a4:	defffe04 	addi	sp,sp,-8
100189a8:	dfc00115 	stw	ra,4(sp)
100189ac:	df000015 	stw	fp,0(sp)
100189b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100189b4:	d0a01117 	ldw	r2,-32700(gp)
100189b8:	10000326 	beq	r2,zero,100189c8 <alt_get_errno+0x24>
100189bc:	d0a01117 	ldw	r2,-32700(gp)
100189c0:	103ee83a 	callr	r2
100189c4:	00000106 	br	100189cc <alt_get_errno+0x28>
100189c8:	d0a79b04 	addi	r2,gp,-24980
}
100189cc:	e037883a 	mov	sp,fp
100189d0:	dfc00117 	ldw	ra,4(sp)
100189d4:	df000017 	ldw	fp,0(sp)
100189d8:	dec00204 	addi	sp,sp,8
100189dc:	f800283a 	ret

100189e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100189e0:	defffb04 	addi	sp,sp,-20
100189e4:	dfc00415 	stw	ra,16(sp)
100189e8:	df000315 	stw	fp,12(sp)
100189ec:	dc000215 	stw	r16,8(sp)
100189f0:	df000304 	addi	fp,sp,12
100189f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100189f8:	e0bffe17 	ldw	r2,-8(fp)
100189fc:	10800217 	ldw	r2,8(r2)
10018a00:	10d00034 	orhi	r3,r2,16384
10018a04:	e0bffe17 	ldw	r2,-8(fp)
10018a08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10018a0c:	e03ffd15 	stw	zero,-12(fp)
10018a10:	00002306 	br	10018aa0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10018a14:	040400b4 	movhi	r16,4098
10018a18:	842ac604 	addi	r16,r16,-21736
10018a1c:	e0bffd17 	ldw	r2,-12(fp)
10018a20:	01400304 	movi	r5,12
10018a24:	1009883a 	mov	r4,r2
10018a28:	00085800 	call	10008580 <__mulsi3>
10018a2c:	8085883a 	add	r2,r16,r2
10018a30:	10c00017 	ldw	r3,0(r2)
10018a34:	e0bffe17 	ldw	r2,-8(fp)
10018a38:	10800017 	ldw	r2,0(r2)
10018a3c:	1880151e 	bne	r3,r2,10018a94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10018a40:	040400b4 	movhi	r16,4098
10018a44:	842ac604 	addi	r16,r16,-21736
10018a48:	e0bffd17 	ldw	r2,-12(fp)
10018a4c:	01400304 	movi	r5,12
10018a50:	1009883a 	mov	r4,r2
10018a54:	00085800 	call	10008580 <__mulsi3>
10018a58:	8085883a 	add	r2,r16,r2
10018a5c:	10800204 	addi	r2,r2,8
10018a60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10018a64:	10000b0e 	bge	r2,zero,10018a94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10018a68:	01400304 	movi	r5,12
10018a6c:	e13ffd17 	ldw	r4,-12(fp)
10018a70:	00085800 	call	10008580 <__mulsi3>
10018a74:	1007883a 	mov	r3,r2
10018a78:	008400b4 	movhi	r2,4098
10018a7c:	10aac604 	addi	r2,r2,-21736
10018a80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10018a84:	e0bffe17 	ldw	r2,-8(fp)
10018a88:	18800226 	beq	r3,r2,10018a94 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10018a8c:	00bffcc4 	movi	r2,-13
10018a90:	00000806 	br	10018ab4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10018a94:	e0bffd17 	ldw	r2,-12(fp)
10018a98:	10800044 	addi	r2,r2,1
10018a9c:	e0bffd15 	stw	r2,-12(fp)
10018aa0:	d0a01017 	ldw	r2,-32704(gp)
10018aa4:	1007883a 	mov	r3,r2
10018aa8:	e0bffd17 	ldw	r2,-12(fp)
10018aac:	18bfd92e 	bgeu	r3,r2,10018a14 <__alt_data_end+0xf8018a14>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10018ab0:	0005883a 	mov	r2,zero
}
10018ab4:	e6ffff04 	addi	sp,fp,-4
10018ab8:	dfc00217 	ldw	ra,8(sp)
10018abc:	df000117 	ldw	fp,4(sp)
10018ac0:	dc000017 	ldw	r16,0(sp)
10018ac4:	dec00304 	addi	sp,sp,12
10018ac8:	f800283a 	ret

10018acc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10018acc:	defff604 	addi	sp,sp,-40
10018ad0:	dfc00915 	stw	ra,36(sp)
10018ad4:	df000815 	stw	fp,32(sp)
10018ad8:	df000804 	addi	fp,sp,32
10018adc:	e13ffd15 	stw	r4,-12(fp)
10018ae0:	e17ffe15 	stw	r5,-8(fp)
10018ae4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10018ae8:	00bfffc4 	movi	r2,-1
10018aec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10018af0:	00bffb44 	movi	r2,-19
10018af4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10018af8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10018afc:	d1600e04 	addi	r5,gp,-32712
10018b00:	e13ffd17 	ldw	r4,-12(fp)
10018b04:	0018c4c0 	call	10018c4c <alt_find_dev>
10018b08:	e0bff815 	stw	r2,-32(fp)
10018b0c:	e0bff817 	ldw	r2,-32(fp)
10018b10:	1000051e 	bne	r2,zero,10018b28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10018b14:	e13ffd17 	ldw	r4,-12(fp)
10018b18:	0018cdc0 	call	10018cdc <alt_find_file>
10018b1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10018b20:	00800044 	movi	r2,1
10018b24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10018b28:	e0bff817 	ldw	r2,-32(fp)
10018b2c:	10002b26 	beq	r2,zero,10018bdc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10018b30:	e13ff817 	ldw	r4,-32(fp)
10018b34:	0018de40 	call	10018de4 <alt_get_fd>
10018b38:	e0bff915 	stw	r2,-28(fp)
10018b3c:	e0bff917 	ldw	r2,-28(fp)
10018b40:	1000030e 	bge	r2,zero,10018b50 <open+0x84>
    {
      status = index;
10018b44:	e0bff917 	ldw	r2,-28(fp)
10018b48:	e0bffa15 	stw	r2,-24(fp)
10018b4c:	00002506 	br	10018be4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10018b50:	01400304 	movi	r5,12
10018b54:	e13ff917 	ldw	r4,-28(fp)
10018b58:	00085800 	call	10008580 <__mulsi3>
10018b5c:	1007883a 	mov	r3,r2
10018b60:	008400b4 	movhi	r2,4098
10018b64:	10aac604 	addi	r2,r2,-21736
10018b68:	1885883a 	add	r2,r3,r2
10018b6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10018b70:	e0fffe17 	ldw	r3,-8(fp)
10018b74:	00900034 	movhi	r2,16384
10018b78:	10bfffc4 	addi	r2,r2,-1
10018b7c:	1886703a 	and	r3,r3,r2
10018b80:	e0bffc17 	ldw	r2,-16(fp)
10018b84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10018b88:	e0bffb17 	ldw	r2,-20(fp)
10018b8c:	1000051e 	bne	r2,zero,10018ba4 <open+0xd8>
10018b90:	e13ffc17 	ldw	r4,-16(fp)
10018b94:	00189e00 	call	100189e0 <alt_file_locked>
10018b98:	e0bffa15 	stw	r2,-24(fp)
10018b9c:	e0bffa17 	ldw	r2,-24(fp)
10018ba0:	10001016 	blt	r2,zero,10018be4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10018ba4:	e0bff817 	ldw	r2,-32(fp)
10018ba8:	10800317 	ldw	r2,12(r2)
10018bac:	10000826 	beq	r2,zero,10018bd0 <open+0x104>
10018bb0:	e0bff817 	ldw	r2,-32(fp)
10018bb4:	10800317 	ldw	r2,12(r2)
10018bb8:	e1ffff17 	ldw	r7,-4(fp)
10018bbc:	e1bffe17 	ldw	r6,-8(fp)
10018bc0:	e17ffd17 	ldw	r5,-12(fp)
10018bc4:	e13ffc17 	ldw	r4,-16(fp)
10018bc8:	103ee83a 	callr	r2
10018bcc:	00000106 	br	10018bd4 <open+0x108>
10018bd0:	0005883a 	mov	r2,zero
10018bd4:	e0bffa15 	stw	r2,-24(fp)
10018bd8:	00000206 	br	10018be4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10018bdc:	00bffb44 	movi	r2,-19
10018be0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10018be4:	e0bffa17 	ldw	r2,-24(fp)
10018be8:	1000090e 	bge	r2,zero,10018c10 <open+0x144>
  {
    alt_release_fd (index);  
10018bec:	e13ff917 	ldw	r4,-28(fp)
10018bf0:	00170200 	call	10017020 <alt_release_fd>
    ALT_ERRNO = -status;
10018bf4:	00189a40 	call	100189a4 <alt_get_errno>
10018bf8:	1007883a 	mov	r3,r2
10018bfc:	e0bffa17 	ldw	r2,-24(fp)
10018c00:	0085c83a 	sub	r2,zero,r2
10018c04:	18800015 	stw	r2,0(r3)
    return -1;
10018c08:	00bfffc4 	movi	r2,-1
10018c0c:	00000106 	br	10018c14 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10018c10:	e0bff917 	ldw	r2,-28(fp)
}
10018c14:	e037883a 	mov	sp,fp
10018c18:	dfc00117 	ldw	ra,4(sp)
10018c1c:	df000017 	ldw	fp,0(sp)
10018c20:	dec00204 	addi	sp,sp,8
10018c24:	f800283a 	ret

10018c28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10018c28:	deffff04 	addi	sp,sp,-4
10018c2c:	df000015 	stw	fp,0(sp)
10018c30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10018c34:	000170fa 	wrctl	ienable,zero
}
10018c38:	0001883a 	nop
10018c3c:	e037883a 	mov	sp,fp
10018c40:	df000017 	ldw	fp,0(sp)
10018c44:	dec00104 	addi	sp,sp,4
10018c48:	f800283a 	ret

10018c4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10018c4c:	defffa04 	addi	sp,sp,-24
10018c50:	dfc00515 	stw	ra,20(sp)
10018c54:	df000415 	stw	fp,16(sp)
10018c58:	df000404 	addi	fp,sp,16
10018c5c:	e13ffe15 	stw	r4,-8(fp)
10018c60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10018c64:	e0bfff17 	ldw	r2,-4(fp)
10018c68:	10800017 	ldw	r2,0(r2)
10018c6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10018c70:	e13ffe17 	ldw	r4,-8(fp)
10018c74:	000c1380 	call	1000c138 <strlen>
10018c78:	10800044 	addi	r2,r2,1
10018c7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10018c80:	00000d06 	br	10018cb8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10018c84:	e0bffc17 	ldw	r2,-16(fp)
10018c88:	10800217 	ldw	r2,8(r2)
10018c8c:	e0fffd17 	ldw	r3,-12(fp)
10018c90:	180d883a 	mov	r6,r3
10018c94:	e17ffe17 	ldw	r5,-8(fp)
10018c98:	1009883a 	mov	r4,r2
10018c9c:	0018f900 	call	10018f90 <memcmp>
10018ca0:	1000021e 	bne	r2,zero,10018cac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10018ca4:	e0bffc17 	ldw	r2,-16(fp)
10018ca8:	00000706 	br	10018cc8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10018cac:	e0bffc17 	ldw	r2,-16(fp)
10018cb0:	10800017 	ldw	r2,0(r2)
10018cb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10018cb8:	e0fffc17 	ldw	r3,-16(fp)
10018cbc:	e0bfff17 	ldw	r2,-4(fp)
10018cc0:	18bff01e 	bne	r3,r2,10018c84 <__alt_data_end+0xf8018c84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10018cc4:	0005883a 	mov	r2,zero
}
10018cc8:	e037883a 	mov	sp,fp
10018ccc:	dfc00117 	ldw	ra,4(sp)
10018cd0:	df000017 	ldw	fp,0(sp)
10018cd4:	dec00204 	addi	sp,sp,8
10018cd8:	f800283a 	ret

10018cdc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10018cdc:	defffb04 	addi	sp,sp,-20
10018ce0:	dfc00415 	stw	ra,16(sp)
10018ce4:	df000315 	stw	fp,12(sp)
10018ce8:	df000304 	addi	fp,sp,12
10018cec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10018cf0:	d0a00c17 	ldw	r2,-32720(gp)
10018cf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10018cf8:	00003106 	br	10018dc0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10018cfc:	e0bffd17 	ldw	r2,-12(fp)
10018d00:	10800217 	ldw	r2,8(r2)
10018d04:	1009883a 	mov	r4,r2
10018d08:	000c1380 	call	1000c138 <strlen>
10018d0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10018d10:	e0bffd17 	ldw	r2,-12(fp)
10018d14:	10c00217 	ldw	r3,8(r2)
10018d18:	e0bffe17 	ldw	r2,-8(fp)
10018d1c:	10bfffc4 	addi	r2,r2,-1
10018d20:	1885883a 	add	r2,r3,r2
10018d24:	10800003 	ldbu	r2,0(r2)
10018d28:	10803fcc 	andi	r2,r2,255
10018d2c:	1080201c 	xori	r2,r2,128
10018d30:	10bfe004 	addi	r2,r2,-128
10018d34:	10800bd8 	cmpnei	r2,r2,47
10018d38:	1000031e 	bne	r2,zero,10018d48 <alt_find_file+0x6c>
    {
      len -= 1;
10018d3c:	e0bffe17 	ldw	r2,-8(fp)
10018d40:	10bfffc4 	addi	r2,r2,-1
10018d44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10018d48:	e0bffe17 	ldw	r2,-8(fp)
10018d4c:	e0ffff17 	ldw	r3,-4(fp)
10018d50:	1885883a 	add	r2,r3,r2
10018d54:	10800003 	ldbu	r2,0(r2)
10018d58:	10803fcc 	andi	r2,r2,255
10018d5c:	1080201c 	xori	r2,r2,128
10018d60:	10bfe004 	addi	r2,r2,-128
10018d64:	10800be0 	cmpeqi	r2,r2,47
10018d68:	1000081e 	bne	r2,zero,10018d8c <alt_find_file+0xb0>
10018d6c:	e0bffe17 	ldw	r2,-8(fp)
10018d70:	e0ffff17 	ldw	r3,-4(fp)
10018d74:	1885883a 	add	r2,r3,r2
10018d78:	10800003 	ldbu	r2,0(r2)
10018d7c:	10803fcc 	andi	r2,r2,255
10018d80:	1080201c 	xori	r2,r2,128
10018d84:	10bfe004 	addi	r2,r2,-128
10018d88:	10000a1e 	bne	r2,zero,10018db4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10018d8c:	e0bffd17 	ldw	r2,-12(fp)
10018d90:	10800217 	ldw	r2,8(r2)
10018d94:	e0fffe17 	ldw	r3,-8(fp)
10018d98:	180d883a 	mov	r6,r3
10018d9c:	e17fff17 	ldw	r5,-4(fp)
10018da0:	1009883a 	mov	r4,r2
10018da4:	0018f900 	call	10018f90 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10018da8:	1000021e 	bne	r2,zero,10018db4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10018dac:	e0bffd17 	ldw	r2,-12(fp)
10018db0:	00000706 	br	10018dd0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10018db4:	e0bffd17 	ldw	r2,-12(fp)
10018db8:	10800017 	ldw	r2,0(r2)
10018dbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10018dc0:	e0fffd17 	ldw	r3,-12(fp)
10018dc4:	d0a00c04 	addi	r2,gp,-32720
10018dc8:	18bfcc1e 	bne	r3,r2,10018cfc <__alt_data_end+0xf8018cfc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10018dcc:	0005883a 	mov	r2,zero
}
10018dd0:	e037883a 	mov	sp,fp
10018dd4:	dfc00117 	ldw	ra,4(sp)
10018dd8:	df000017 	ldw	fp,0(sp)
10018ddc:	dec00204 	addi	sp,sp,8
10018de0:	f800283a 	ret

10018de4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10018de4:	defffa04 	addi	sp,sp,-24
10018de8:	dfc00515 	stw	ra,20(sp)
10018dec:	df000415 	stw	fp,16(sp)
10018df0:	dc000315 	stw	r16,12(sp)
10018df4:	df000404 	addi	fp,sp,16
10018df8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10018dfc:	00bffa04 	movi	r2,-24
10018e00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10018e04:	e03ffc15 	stw	zero,-16(fp)
10018e08:	00001d06 	br	10018e80 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10018e0c:	040400b4 	movhi	r16,4098
10018e10:	842ac604 	addi	r16,r16,-21736
10018e14:	e0bffc17 	ldw	r2,-16(fp)
10018e18:	01400304 	movi	r5,12
10018e1c:	1009883a 	mov	r4,r2
10018e20:	00085800 	call	10008580 <__mulsi3>
10018e24:	8085883a 	add	r2,r16,r2
10018e28:	10800017 	ldw	r2,0(r2)
10018e2c:	1000111e 	bne	r2,zero,10018e74 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10018e30:	040400b4 	movhi	r16,4098
10018e34:	842ac604 	addi	r16,r16,-21736
10018e38:	e0bffc17 	ldw	r2,-16(fp)
10018e3c:	01400304 	movi	r5,12
10018e40:	1009883a 	mov	r4,r2
10018e44:	00085800 	call	10008580 <__mulsi3>
10018e48:	8085883a 	add	r2,r16,r2
10018e4c:	e0fffe17 	ldw	r3,-8(fp)
10018e50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10018e54:	d0e01017 	ldw	r3,-32704(gp)
10018e58:	e0bffc17 	ldw	r2,-16(fp)
10018e5c:	1880020e 	bge	r3,r2,10018e68 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10018e60:	e0bffc17 	ldw	r2,-16(fp)
10018e64:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
10018e68:	e0bffc17 	ldw	r2,-16(fp)
10018e6c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10018e70:	00000606 	br	10018e8c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10018e74:	e0bffc17 	ldw	r2,-16(fp)
10018e78:	10800044 	addi	r2,r2,1
10018e7c:	e0bffc15 	stw	r2,-16(fp)
10018e80:	e0bffc17 	ldw	r2,-16(fp)
10018e84:	10800810 	cmplti	r2,r2,32
10018e88:	103fe01e 	bne	r2,zero,10018e0c <__alt_data_end+0xf8018e0c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10018e8c:	e0bffd17 	ldw	r2,-12(fp)
}
10018e90:	e6ffff04 	addi	sp,fp,-4
10018e94:	dfc00217 	ldw	ra,8(sp)
10018e98:	df000117 	ldw	fp,4(sp)
10018e9c:	dc000017 	ldw	r16,0(sp)
10018ea0:	dec00304 	addi	sp,sp,12
10018ea4:	f800283a 	ret

10018ea8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10018ea8:	defffe04 	addi	sp,sp,-8
10018eac:	df000115 	stw	fp,4(sp)
10018eb0:	df000104 	addi	fp,sp,4
10018eb4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10018eb8:	e0bfff17 	ldw	r2,-4(fp)
10018ebc:	10bffe84 	addi	r2,r2,-6
10018ec0:	10c00428 	cmpgeui	r3,r2,16
10018ec4:	18001a1e 	bne	r3,zero,10018f30 <alt_exception_cause_generated_bad_addr+0x88>
10018ec8:	100690ba 	slli	r3,r2,2
10018ecc:	008400b4 	movhi	r2,4098
10018ed0:	10a3b804 	addi	r2,r2,-28960
10018ed4:	1885883a 	add	r2,r3,r2
10018ed8:	10800017 	ldw	r2,0(r2)
10018edc:	1000683a 	jmp	r2
10018ee0:	10018f20 	cmpeqi	zero,r2,1596
10018ee4:	10018f20 	cmpeqi	zero,r2,1596
10018ee8:	10018f30 	cmpltui	zero,r2,1596
10018eec:	10018f30 	cmpltui	zero,r2,1596
10018ef0:	10018f30 	cmpltui	zero,r2,1596
10018ef4:	10018f20 	cmpeqi	zero,r2,1596
10018ef8:	10018f28 	cmpgeui	zero,r2,1596
10018efc:	10018f30 	cmpltui	zero,r2,1596
10018f00:	10018f20 	cmpeqi	zero,r2,1596
10018f04:	10018f20 	cmpeqi	zero,r2,1596
10018f08:	10018f30 	cmpltui	zero,r2,1596
10018f0c:	10018f20 	cmpeqi	zero,r2,1596
10018f10:	10018f28 	cmpgeui	zero,r2,1596
10018f14:	10018f30 	cmpltui	zero,r2,1596
10018f18:	10018f30 	cmpltui	zero,r2,1596
10018f1c:	10018f20 	cmpeqi	zero,r2,1596
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10018f20:	00800044 	movi	r2,1
10018f24:	00000306 	br	10018f34 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10018f28:	0005883a 	mov	r2,zero
10018f2c:	00000106 	br	10018f34 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10018f30:	0005883a 	mov	r2,zero
  }
}
10018f34:	e037883a 	mov	sp,fp
10018f38:	df000017 	ldw	fp,0(sp)
10018f3c:	dec00104 	addi	sp,sp,4
10018f40:	f800283a 	ret

10018f44 <atexit>:
10018f44:	200b883a 	mov	r5,r4
10018f48:	000f883a 	mov	r7,zero
10018f4c:	000d883a 	mov	r6,zero
10018f50:	0009883a 	mov	r4,zero
10018f54:	001900c1 	jmpi	1001900c <__register_exitproc>

10018f58 <exit>:
10018f58:	defffe04 	addi	sp,sp,-8
10018f5c:	000b883a 	mov	r5,zero
10018f60:	dc000015 	stw	r16,0(sp)
10018f64:	dfc00115 	stw	ra,4(sp)
10018f68:	2021883a 	mov	r16,r4
10018f6c:	00191240 	call	10019124 <__call_exitprocs>
10018f70:	008400b4 	movhi	r2,4098
10018f74:	10af4404 	addi	r2,r2,-17136
10018f78:	11000017 	ldw	r4,0(r2)
10018f7c:	20800f17 	ldw	r2,60(r4)
10018f80:	10000126 	beq	r2,zero,10018f88 <exit+0x30>
10018f84:	103ee83a 	callr	r2
10018f88:	8009883a 	mov	r4,r16
10018f8c:	00192a40 	call	100192a4 <_exit>

10018f90 <memcmp>:
10018f90:	01c000c4 	movi	r7,3
10018f94:	3980192e 	bgeu	r7,r6,10018ffc <memcmp+0x6c>
10018f98:	2144b03a 	or	r2,r4,r5
10018f9c:	11c4703a 	and	r2,r2,r7
10018fa0:	10000f26 	beq	r2,zero,10018fe0 <memcmp+0x50>
10018fa4:	20800003 	ldbu	r2,0(r4)
10018fa8:	28c00003 	ldbu	r3,0(r5)
10018fac:	10c0151e 	bne	r2,r3,10019004 <memcmp+0x74>
10018fb0:	31bfff84 	addi	r6,r6,-2
10018fb4:	01ffffc4 	movi	r7,-1
10018fb8:	00000406 	br	10018fcc <memcmp+0x3c>
10018fbc:	20800003 	ldbu	r2,0(r4)
10018fc0:	28c00003 	ldbu	r3,0(r5)
10018fc4:	31bfffc4 	addi	r6,r6,-1
10018fc8:	10c00e1e 	bne	r2,r3,10019004 <memcmp+0x74>
10018fcc:	21000044 	addi	r4,r4,1
10018fd0:	29400044 	addi	r5,r5,1
10018fd4:	31fff91e 	bne	r6,r7,10018fbc <__alt_data_end+0xf8018fbc>
10018fd8:	0005883a 	mov	r2,zero
10018fdc:	f800283a 	ret
10018fe0:	20c00017 	ldw	r3,0(r4)
10018fe4:	28800017 	ldw	r2,0(r5)
10018fe8:	18bfee1e 	bne	r3,r2,10018fa4 <__alt_data_end+0xf8018fa4>
10018fec:	31bfff04 	addi	r6,r6,-4
10018ff0:	21000104 	addi	r4,r4,4
10018ff4:	29400104 	addi	r5,r5,4
10018ff8:	39bff936 	bltu	r7,r6,10018fe0 <__alt_data_end+0xf8018fe0>
10018ffc:	303fe91e 	bne	r6,zero,10018fa4 <__alt_data_end+0xf8018fa4>
10019000:	003ff506 	br	10018fd8 <__alt_data_end+0xf8018fd8>
10019004:	10c5c83a 	sub	r2,r2,r3
10019008:	f800283a 	ret

1001900c <__register_exitproc>:
1001900c:	defffa04 	addi	sp,sp,-24
10019010:	dc000315 	stw	r16,12(sp)
10019014:	040400b4 	movhi	r16,4098
10019018:	842f4404 	addi	r16,r16,-17136
1001901c:	80c00017 	ldw	r3,0(r16)
10019020:	dc400415 	stw	r17,16(sp)
10019024:	dfc00515 	stw	ra,20(sp)
10019028:	18805217 	ldw	r2,328(r3)
1001902c:	2023883a 	mov	r17,r4
10019030:	10003726 	beq	r2,zero,10019110 <__register_exitproc+0x104>
10019034:	10c00117 	ldw	r3,4(r2)
10019038:	010007c4 	movi	r4,31
1001903c:	20c00e16 	blt	r4,r3,10019078 <__register_exitproc+0x6c>
10019040:	1a000044 	addi	r8,r3,1
10019044:	8800221e 	bne	r17,zero,100190d0 <__register_exitproc+0xc4>
10019048:	18c00084 	addi	r3,r3,2
1001904c:	18c7883a 	add	r3,r3,r3
10019050:	18c7883a 	add	r3,r3,r3
10019054:	12000115 	stw	r8,4(r2)
10019058:	10c7883a 	add	r3,r2,r3
1001905c:	19400015 	stw	r5,0(r3)
10019060:	0005883a 	mov	r2,zero
10019064:	dfc00517 	ldw	ra,20(sp)
10019068:	dc400417 	ldw	r17,16(sp)
1001906c:	dc000317 	ldw	r16,12(sp)
10019070:	dec00604 	addi	sp,sp,24
10019074:	f800283a 	ret
10019078:	00800034 	movhi	r2,0
1001907c:	10800004 	addi	r2,r2,0
10019080:	10002626 	beq	r2,zero,1001911c <__register_exitproc+0x110>
10019084:	01006404 	movi	r4,400
10019088:	d9400015 	stw	r5,0(sp)
1001908c:	d9800115 	stw	r6,4(sp)
10019090:	d9c00215 	stw	r7,8(sp)
10019094:	00000000 	call	10000000 <__alt_mem_sdram>
10019098:	d9400017 	ldw	r5,0(sp)
1001909c:	d9800117 	ldw	r6,4(sp)
100190a0:	d9c00217 	ldw	r7,8(sp)
100190a4:	10001d26 	beq	r2,zero,1001911c <__register_exitproc+0x110>
100190a8:	81000017 	ldw	r4,0(r16)
100190ac:	10000115 	stw	zero,4(r2)
100190b0:	02000044 	movi	r8,1
100190b4:	22405217 	ldw	r9,328(r4)
100190b8:	0007883a 	mov	r3,zero
100190bc:	12400015 	stw	r9,0(r2)
100190c0:	20805215 	stw	r2,328(r4)
100190c4:	10006215 	stw	zero,392(r2)
100190c8:	10006315 	stw	zero,396(r2)
100190cc:	883fde26 	beq	r17,zero,10019048 <__alt_data_end+0xf8019048>
100190d0:	18c9883a 	add	r4,r3,r3
100190d4:	2109883a 	add	r4,r4,r4
100190d8:	1109883a 	add	r4,r2,r4
100190dc:	21802215 	stw	r6,136(r4)
100190e0:	01800044 	movi	r6,1
100190e4:	12406217 	ldw	r9,392(r2)
100190e8:	30cc983a 	sll	r6,r6,r3
100190ec:	4992b03a 	or	r9,r9,r6
100190f0:	12406215 	stw	r9,392(r2)
100190f4:	21c04215 	stw	r7,264(r4)
100190f8:	01000084 	movi	r4,2
100190fc:	893fd21e 	bne	r17,r4,10019048 <__alt_data_end+0xf8019048>
10019100:	11006317 	ldw	r4,396(r2)
10019104:	218cb03a 	or	r6,r4,r6
10019108:	11806315 	stw	r6,396(r2)
1001910c:	003fce06 	br	10019048 <__alt_data_end+0xf8019048>
10019110:	18805304 	addi	r2,r3,332
10019114:	18805215 	stw	r2,328(r3)
10019118:	003fc606 	br	10019034 <__alt_data_end+0xf8019034>
1001911c:	00bfffc4 	movi	r2,-1
10019120:	003fd006 	br	10019064 <__alt_data_end+0xf8019064>

10019124 <__call_exitprocs>:
10019124:	defff504 	addi	sp,sp,-44
10019128:	df000915 	stw	fp,36(sp)
1001912c:	dd400615 	stw	r21,24(sp)
10019130:	dc800315 	stw	r18,12(sp)
10019134:	dfc00a15 	stw	ra,40(sp)
10019138:	ddc00815 	stw	r23,32(sp)
1001913c:	dd800715 	stw	r22,28(sp)
10019140:	dd000515 	stw	r20,20(sp)
10019144:	dcc00415 	stw	r19,16(sp)
10019148:	dc400215 	stw	r17,8(sp)
1001914c:	dc000115 	stw	r16,4(sp)
10019150:	d9000015 	stw	r4,0(sp)
10019154:	2839883a 	mov	fp,r5
10019158:	04800044 	movi	r18,1
1001915c:	057fffc4 	movi	r21,-1
10019160:	008400b4 	movhi	r2,4098
10019164:	10af4404 	addi	r2,r2,-17136
10019168:	12000017 	ldw	r8,0(r2)
1001916c:	45005217 	ldw	r20,328(r8)
10019170:	44c05204 	addi	r19,r8,328
10019174:	a0001c26 	beq	r20,zero,100191e8 <__call_exitprocs+0xc4>
10019178:	a0800117 	ldw	r2,4(r20)
1001917c:	15ffffc4 	addi	r23,r2,-1
10019180:	b8000d16 	blt	r23,zero,100191b8 <__call_exitprocs+0x94>
10019184:	14000044 	addi	r16,r2,1
10019188:	8421883a 	add	r16,r16,r16
1001918c:	8421883a 	add	r16,r16,r16
10019190:	84402004 	addi	r17,r16,128
10019194:	a463883a 	add	r17,r20,r17
10019198:	a421883a 	add	r16,r20,r16
1001919c:	e0001e26 	beq	fp,zero,10019218 <__call_exitprocs+0xf4>
100191a0:	80804017 	ldw	r2,256(r16)
100191a4:	e0801c26 	beq	fp,r2,10019218 <__call_exitprocs+0xf4>
100191a8:	bdffffc4 	addi	r23,r23,-1
100191ac:	843fff04 	addi	r16,r16,-4
100191b0:	8c7fff04 	addi	r17,r17,-4
100191b4:	bd7ff91e 	bne	r23,r21,1001919c <__alt_data_end+0xf801919c>
100191b8:	00800034 	movhi	r2,0
100191bc:	10800004 	addi	r2,r2,0
100191c0:	10000926 	beq	r2,zero,100191e8 <__call_exitprocs+0xc4>
100191c4:	a0800117 	ldw	r2,4(r20)
100191c8:	1000301e 	bne	r2,zero,1001928c <__call_exitprocs+0x168>
100191cc:	a0800017 	ldw	r2,0(r20)
100191d0:	10003226 	beq	r2,zero,1001929c <__call_exitprocs+0x178>
100191d4:	a009883a 	mov	r4,r20
100191d8:	98800015 	stw	r2,0(r19)
100191dc:	00000000 	call	10000000 <__alt_mem_sdram>
100191e0:	9d000017 	ldw	r20,0(r19)
100191e4:	a03fe41e 	bne	r20,zero,10019178 <__alt_data_end+0xf8019178>
100191e8:	dfc00a17 	ldw	ra,40(sp)
100191ec:	df000917 	ldw	fp,36(sp)
100191f0:	ddc00817 	ldw	r23,32(sp)
100191f4:	dd800717 	ldw	r22,28(sp)
100191f8:	dd400617 	ldw	r21,24(sp)
100191fc:	dd000517 	ldw	r20,20(sp)
10019200:	dcc00417 	ldw	r19,16(sp)
10019204:	dc800317 	ldw	r18,12(sp)
10019208:	dc400217 	ldw	r17,8(sp)
1001920c:	dc000117 	ldw	r16,4(sp)
10019210:	dec00b04 	addi	sp,sp,44
10019214:	f800283a 	ret
10019218:	a0800117 	ldw	r2,4(r20)
1001921c:	80c00017 	ldw	r3,0(r16)
10019220:	10bfffc4 	addi	r2,r2,-1
10019224:	15c01426 	beq	r2,r23,10019278 <__call_exitprocs+0x154>
10019228:	80000015 	stw	zero,0(r16)
1001922c:	183fde26 	beq	r3,zero,100191a8 <__alt_data_end+0xf80191a8>
10019230:	95c8983a 	sll	r4,r18,r23
10019234:	a0806217 	ldw	r2,392(r20)
10019238:	a5800117 	ldw	r22,4(r20)
1001923c:	2084703a 	and	r2,r4,r2
10019240:	10000b26 	beq	r2,zero,10019270 <__call_exitprocs+0x14c>
10019244:	a0806317 	ldw	r2,396(r20)
10019248:	2088703a 	and	r4,r4,r2
1001924c:	20000c1e 	bne	r4,zero,10019280 <__call_exitprocs+0x15c>
10019250:	89400017 	ldw	r5,0(r17)
10019254:	d9000017 	ldw	r4,0(sp)
10019258:	183ee83a 	callr	r3
1001925c:	a0800117 	ldw	r2,4(r20)
10019260:	15bfbf1e 	bne	r2,r22,10019160 <__alt_data_end+0xf8019160>
10019264:	98800017 	ldw	r2,0(r19)
10019268:	153fcf26 	beq	r2,r20,100191a8 <__alt_data_end+0xf80191a8>
1001926c:	003fbc06 	br	10019160 <__alt_data_end+0xf8019160>
10019270:	183ee83a 	callr	r3
10019274:	003ff906 	br	1001925c <__alt_data_end+0xf801925c>
10019278:	a5c00115 	stw	r23,4(r20)
1001927c:	003feb06 	br	1001922c <__alt_data_end+0xf801922c>
10019280:	89000017 	ldw	r4,0(r17)
10019284:	183ee83a 	callr	r3
10019288:	003ff406 	br	1001925c <__alt_data_end+0xf801925c>
1001928c:	a0800017 	ldw	r2,0(r20)
10019290:	a027883a 	mov	r19,r20
10019294:	1029883a 	mov	r20,r2
10019298:	003fb606 	br	10019174 <__alt_data_end+0xf8019174>
1001929c:	0005883a 	mov	r2,zero
100192a0:	003ffb06 	br	10019290 <__alt_data_end+0xf8019290>

100192a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100192a4:	defffd04 	addi	sp,sp,-12
100192a8:	df000215 	stw	fp,8(sp)
100192ac:	df000204 	addi	fp,sp,8
100192b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100192b4:	0001883a 	nop
100192b8:	e0bfff17 	ldw	r2,-4(fp)
100192bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100192c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100192c4:	10000226 	beq	r2,zero,100192d0 <_exit+0x2c>
    ALT_SIM_FAIL();
100192c8:	002af070 	cmpltui	zero,zero,43969
100192cc:	00000106 	br	100192d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100192d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100192d4:	003fff06 	br	100192d4 <__alt_data_end+0xf80192d4>
